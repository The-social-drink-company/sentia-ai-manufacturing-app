name: Hotfix Deployment

on:
  push:
    branches: [ 'hotfix/*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - testing
      skip_tests:
        description: 'Skip tests (emergency only)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'

jobs:
  # Emergency validation
  emergency-validation:
    name: Emergency Validation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Quick security scan
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Lint check
        run: npm run lint

      - name: Quick tests
        if: ${{ !inputs.skip_tests }}
        run: npm run test:quick
        env:
          NODE_ENV: test

      - name: Build verification
        run: npm run build
        env:
          NODE_ENV: production

  # Hotfix deployment
  deploy-hotfix:
    name: Deploy Hotfix
    runs-on: ubuntu-latest
    needs: emergency-validation
    environment: ${{ inputs.environment || 'production' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create hotfix deployment record
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: '${{ inputs.environment || "production" }}',
              description: 'Hotfix deployment - ${{ github.ref_name }}',
              auto_merge: false
            });
            return deployment.data.id;

      - name: Deploy to Railway
        uses: railway-app/railway-action@v1
        with:
          token: ${{ secrets[format('RAILWAY_TOKEN_{0}', upper(inputs.environment || 'PROD'))] }}
          project: ${{ secrets.RAILWAY_PROJECT_ID }}
          environment: ${{ inputs.environment || 'production' }}
          service: sentia-manufacturing-dashboard

      - name: Health check
        run: |
          sleep 30
          HEALTH_URL="${{ secrets[format('{0}_APP_URL', upper(inputs.environment || 'PROD'))] }}/api/health"
          curl -f $HEALTH_URL || exit 1

      - name: Update deployment status
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const deploymentId = ${{ steps.deployment.outputs.result }};
            const state = '${{ job.status }}' === 'success' ? 'success' : 'failure';
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deploymentId,
              state: state,
              environment_url: '${{ secrets[format("{0}_APP_URL", upper(inputs.environment || "PROD"))] }}',
              description: state === 'success' ? 'Hotfix deployed successfully' : 'Hotfix deployment failed'
            });

      - name: Notify hotfix deployment
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            üö® HOTFIX DEPLOYMENT ${{ job.status }}
            Branch: ${{ github.ref_name }}
            Environment: ${{ inputs.environment || 'production' }}
            Commit: ${{ github.sha }}
            Tests Skipped: ${{ inputs.skip_tests }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-deployment monitoring
  post-deployment-monitoring:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: deploy-hotfix
    if: success()
    
    steps:
      - name: Monitor for 10 minutes
        run: |
          HEALTH_URL="${{ secrets[format('{0}_APP_URL', upper(inputs.environment || 'PROD'))] }}/api/health"
          
          for i in {1..20}; do
            echo "Health check $i/20"
            if ! curl -f $HEALTH_URL; then
              echo "‚ùå Health check failed at attempt $i"
              exit 1
            fi
            sleep 30
          done
          
          echo "‚úÖ All health checks passed"

      - name: Notify monitoring complete
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            ‚úÖ Hotfix monitoring complete
            Environment: ${{ inputs.environment || 'production' }}
            All health checks passed for 10 minutes
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

