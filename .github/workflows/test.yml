name: Test Suite

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - development
      - test
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16, 18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9.12.0
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run unit tests
        run: pnpm run test:run

      - name: Generate coverage report
        run: pnpm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: sentia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9.12.0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run database migrations
        run: pnpm dlx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/sentia_test

      - name: Seed test database
        run: pnpm dlx prisma db seed
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/sentia_test

      - name: Run integration tests
        run: pnpm run test:integration
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/sentia_test
          NODE_ENV: test

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9.12.0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm dlx playwright install --with-deps

      - name: Build application
        run: pnpm run build

      - name: Run E2E tests
        run: pnpm run test:e2e
        env:
          CI: true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9.12.0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Run Lighthouse CI
        run: |
          pnpm install -g @lhci/cli
          lhci autorun --collect.startServerCommand="pnpm run preview" --collect.url="http://localhost:3000" || true

      - name: Check bundle size
        run: |
          pnpm run build
          echo "Bundle size report:"
          du -sh dist/
          find dist -name "*.js" -o -name "*.css" | xargs ls -lh

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9.12.0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run pnpm audit
        run: pnpm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Snyk security test
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Run OWASP dependency check
        run: |
          echo "Running OWASP dependency check..."
          # Add OWASP dependency check commands here

  # Accessibility Tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9.12.0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm run build

      - name: Run accessibility tests
        run: |
          pnpm install -g @axe-core/cli
          pnpm run preview &
          sleep 10
          axe http://localhost:3000 --dir ./a11y-reports || true

      - name: Upload accessibility reports
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: a11y-reports
          path: a11y-reports/

  # API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: pnpm/action-setup@v2
        with:
          version: 9.12.0
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Start API server
        run: |
          pnpm run dev:server &
          sleep 10

      - name: Run API tests
        run: |
          # Install Newman for Postman collection tests
          pnpm install -g newman
          # Run API test collection if it exists
          if [ -f "./tests/api/collection.json" ]; then
            newman run ./tests/api/collection.json
          else
            echo "No API collection found, skipping..."
          fi

      - name: Test API endpoints
        run: |
          # Test health endpoint
          curl -f http://localhost:5000/api/health || exit 1
          echo "API health check passed"

  # Test Summary
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests, performance-tests, security-tests, accessibility-tests, api-tests]
    if: always()
    steps:
      - name: Test Results Summary
        run: |
          echo "## Test Results Summary"
          echo "- Unit Tests: ${{ needs.unit-tests.result }}"
          echo "- Integration Tests: ${{ needs.integration-tests.result }}"
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "- Performance Tests: ${{ needs.performance-tests.result }}"
          echo "- Security Tests: ${{ needs.security-tests.result }}"
          echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}"
          echo "- API Tests: ${{ needs.api-tests.result }}"

      - name: Notify test results
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const failures = [];
            if ('${{ needs.unit-tests.result }}' === 'failure') failures.push('Unit Tests');
            if ('${{ needs.integration-tests.result }}' === 'failure') failures.push('Integration Tests');
            if ('${{ needs.e2e-tests.result }}' === 'failure') failures.push('E2E Tests');

            if (failures.length > 0) {
              console.log(`❌ Test failures detected: ${failures.join(', ')}`);
            }