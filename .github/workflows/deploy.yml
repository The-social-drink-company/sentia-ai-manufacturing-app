name: Deploy to Railway

on:
  push:
    branches:
      - development
      - test
      - production
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - development
          - test
          - production

env:
  NODE_VERSION: '20'
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
  VERSION: ${{ github.sha }}
  SERVICE_NAME: sentia-api

jobs:
  test:
    name: Test & Validate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For version tagging

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Validate Node version
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm run test:run
        env:
          CI: true
          TEST_DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY_TEST }}

      - name: Build application
        run: |
          npm run build
          # Enable compression
          gzip -k -9 dist/**/*.{js,css,html} || true
        env:
          VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
          VITE_APP_TITLE: 'Sentia Manufacturing Dashboard'
          VITE_APP_VERSION: ${{ github.sha }}
          VITE_BUILD_TIME: ${{ github.event.head_commit.timestamp }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: coverage/
          retention-days: 30

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  tag-version:
    name: Tag Version
    needs: [test]
    if: github.ref == 'refs/heads/development' || github.ref == 'refs/heads/test' || github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: Generate version tag
        id: version
        run: |
          VERSION="${GITHUB_REF##*/}-${GITHUB_SHA:0:7}-$(date +%Y%m%d%H%M%S)"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
  
  deploy-dev:
    name: Deploy to Development
    needs: [test, tag-version]
    if: github.ref == 'refs/heads/development'
    runs-on: ubuntu-latest
    environment: development
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway Development
        run: |
          railway link ${{ secrets.RAILWAY_PROJECT_ID_DEV }}
          railway up --service web --environment development \
            --build-arg VERSION=${{ needs.tag-version.outputs.version }} \
            --build-arg NODE_VERSION=${{ env.NODE_VERSION }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_DEV }}
          VERSION: ${{ needs.tag-version.outputs.version }}

      - name: Deploy Worker Service
        run: railway up --service worker --environment development
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_DEV }}

      - name: Wait for readiness
        run: |
          echo "Waiting for application readiness..."
          for i in {1..30}; do
            if curl -f https://dev.sentia-manufacturing.railway.app/ready; then
              echo "Application is ready!"
              break
            fi
            echo "Attempt $i/30 - Application not ready yet..."
            sleep 10
          done
      
      - name: Run smoke tests
        run: |
          # Health check
          curl -f https://dev.sentia-manufacturing.railway.app/health || exit 1
          
          # Readiness check
          curl -f https://dev.sentia-manufacturing.railway.app/ready || exit 1
          
          # Metrics endpoint
          curl -f https://dev.sentia-manufacturing.railway.app/metrics || exit 1
          
          # Basic API test
          curl -f https://dev.sentia-manufacturing.railway.app/api/status || exit 1
          
          echo "All smoke tests passed!"

      - name: Notify deployment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'https://dev.sentia-manufacturing.railway.app',
              description: 'Deployed to development'
            });

  deploy-test:
    name: Deploy to Test
    needs: [test, security-scan, tag-version]
    if: github.ref == 'refs/heads/test'
    runs-on: ubuntu-latest
    environment: test
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Railway CLI
        run: npm install -g @railway/cli

      - name: Deploy to Railway Test
        run: |
          railway link ${{ secrets.RAILWAY_PROJECT_ID_TEST }}
          railway up --service web --environment test \
            --build-arg VERSION=${{ needs.tag-version.outputs.version }} \
            --build-arg NODE_VERSION=${{ env.NODE_VERSION }}
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_TEST }}
          VERSION: ${{ needs.tag-version.outputs.version }}

      - name: Deploy Worker Service
        run: railway up --service worker --environment test
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_TEST }}

      - name: Run E2E tests
        run: |
          npm run test:e2e
        env:
          TEST_URL: https://test.sentia-manufacturing.railway.app
          PLAYWRIGHT_HEADLESS: true

      - name: Notify deployment
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: context.payload.deployment.id,
              state: 'success',
              environment_url: 'https://test.sentia-manufacturing.railway.app',
              description: 'Deployed to test'
            });

  deploy-production:
    name: Deploy to Production
    needs: [test, security-scan, tag-version]
    if: github.ref == 'refs/heads/production'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://sentia-manufacturing.railway.app
    timeout-minutes: 30
    concurrency:
      group: production-deployment
      cancel-in-progress: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment v${{ needs.tag-version.outputs.version }}',
              required_contexts: [],
              auto_merge: false,
              payload: {
                version: '${{ needs.tag-version.outputs.version }}',
                deployer: context.actor
              }
            });
            return deployment.data.id;

      - name: Setup Railway CLI
        run: npm install -g @railway/cli

      - name: Backup database
        run: |
          echo "Creating database backup before deployment..."
          BACKUP_FILE="backup-$(date +%Y%m%d-%H%M%S).sql"
          
          # Create backup using Neon's PITR if available
          if [ "${{ secrets.ENABLE_PITR }}" = "true" ]; then
            echo "Creating PITR checkpoint..."
            # Neon PITR command would go here
          fi
          
          # Store backup reference
          echo "backup_file=$BACKUP_FILE" >> $GITHUB_ENV
          echo "Backup reference stored: $BACKUP_FILE"
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PROD }}

      - name: Get previous deployment ID
        id: previous
        run: |
          # Store previous deployment ID for potential rollback
          PREV_ID=$(railway status --json | jq -r '.deploymentId')
          echo "previous_deployment=$PREV_ID" >> $GITHUB_OUTPUT
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PROD }}
      
      - name: Deploy to Railway Production
        run: |
          railway link ${{ secrets.RAILWAY_PROJECT_ID_PROD }}
          railway up --service web --environment production \
            --build-arg VERSION=${{ needs.tag-version.outputs.version }} \
            --build-arg NODE_VERSION=${{ env.NODE_VERSION }}
          
          # Tag the deployment
          railway variables set DEPLOYMENT_VERSION=${{ needs.tag-version.outputs.version }}
          railway variables set DEPLOYMENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PROD }}
          VERSION: ${{ needs.tag-version.outputs.version }}

      - name: Deploy Worker Service
        run: railway up --service worker --environment production
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PROD }}

      - name: Run database migrations
        run: |
          railway run --service web npm run db:migrate:deploy
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PROD }}
          DATABASE_URL: ${{ secrets.DATABASE_URL_PROD }}

      - name: Production health verification
        id: health
        run: |
          echo "Waiting for production readiness..."
          READY=false
          
          for i in {1..20}; do
            # Check readiness
            if curl -f https://sentia-manufacturing.railway.app/ready; then
              echo "Readiness check passed"
              
              # Verify health
              HEALTH=$(curl -s https://sentia-manufacturing.railway.app/health)
              if echo "$HEALTH" | grep -q '"status":"healthy"'; then
                echo "Health check passed"
                
                # Verify metrics
                if curl -f https://sentia-manufacturing.railway.app/metrics; then
                  echo "Metrics endpoint verified"
                  READY=true
                  break
                fi
              fi
            fi
            
            echo "Attempt $i/20 - Application not fully ready..."
            sleep 15
          done
          
          if [ "$READY" != "true" ]; then
            echo "Production deployment failed health checks!"
            echo "health_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "health_status=passed" >> $GITHUB_OUTPUT
          echo "All production health checks passed!"

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: '${{ job.status }}',
              environment_url: 'https://sentia-manufacturing.railway.app',
              description: 'Production deployment ${{ job.status }}'
            });

      - name: Run production smoke tests
        run: |
          BASE_URL="https://sentia-manufacturing.railway.app"
          
          # Test critical endpoints
          endpoints=(
            "/api/status"
            "/api/admin/health"
            "/api/metrics"
          )
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing $endpoint..."
            if ! curl -f "$BASE_URL$endpoint"; then
              echo "Smoke test failed for $endpoint"
              exit 1
            fi
          done
          
          echo "All production smoke tests passed!"
      
      - name: Performance validation
        run: |
          # Check response times
          LATENCY=$(curl -w "%{time_total}" -o /dev/null -s https://sentia-manufacturing.railway.app/api/health)
          echo "Health endpoint latency: ${LATENCY}s"
          
          # Fail if latency is too high
          if (( $(echo "$LATENCY > 2" | bc -l) )); then
            echo "Performance degradation detected!"
            exit 1
          fi
  
  rollback:
    name: Rollback Production
    if: failure() && github.ref == 'refs/heads/production'
    needs: [deploy-production]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout previous commit
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.before }}

      - name: Setup Railway CLI
        run: npm install -g @railway/cli

      - name: Automatic rollback
        run: |
          echo "Initiating automatic rollback..."
          
          railway link ${{ secrets.RAILWAY_PROJECT_ID_PROD }}
          
          # Rollback to previous deployment
          railway rollback --service web --environment production
          railway rollback --service worker --environment production
          
          # Wait for rollback to complete
          sleep 30
          
          # Verify rollback
          if curl -f https://sentia-manufacturing.railway.app/health; then
            echo "Rollback successful - service is healthy"
          else
            echo "CRITICAL: Rollback may have failed!"
            exit 1
          fi
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN_PROD }}

      - name: Notify rollback
        uses: actions/github-script@v7
        with:
          script: |
            // Create issue for failed deployment
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `URGENT: Production deployment failed - ${new Date().toISOString()}`,
              body: `## Production Deployment Failed\n\n**Deployment ID**: ${context.sha}\n**Time**: ${new Date().toISOString()}\n**Status**: Automatically rolled back\n\n### Action Required\n- Review deployment logs\n- Identify root cause\n- Fix issues before next deployment\n\n### Rollback Details\nThe system has automatically rolled back to the previous stable version.\n\ncc @${context.actor}`,
              labels: ['deployment-failure', 'production', 'urgent']
            });
            
            console.log(`Issue created: #${issue.data.number}`);