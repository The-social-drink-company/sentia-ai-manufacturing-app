[
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\api\\business-intelligence.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\api\\dashboard.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'now' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 106,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 106,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "now" },
            "fix": { "range": [2814, 2837], "text": "" },
            "desc": "Remove unused variable 'now'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Dashboard API Endpoints\n *\n * Provides aggregated data for the executive dashboard:\n * - KPI summary data (6 key metrics)\n * - Time series data for charts (sales, production, inventory)\n * - Working capital snapshot\n * - Recent alerts and notifications\n *\n * Target: <3 second response time for full dashboard load\n */\n\nconst express = require('express');\nconst router = express.Router();\n\n/**\n * GET /api/v1/dashboard/executive\n *\n * Returns complete dashboard data including:\n * - KPIs (revenue, production, inventory, CCC, OTD, forecast accuracy)\n * - Chart data (sales/revenue, production output, inventory levels)\n * - Working capital summary\n * - Recent alerts\n *\n * Response time target: <500ms\n */\nrouter.get('/executive', async (req, res) => {\n  const startTime = Date.now();\n\n  try {\n    // TODO: Replace with real data fetching from services\n    // For now, return structured mock data that components expect\n\n    const dashboardData = {\n      kpis: generateKPIData(),\n      charts: {\n        salesRevenue: generateSalesRevenueData(),\n        productionOutput: generateProductionOutputData(),\n        inventoryLevels: generateInventoryLevelsData(),\n      },\n      workingCapital: generateWorkingCapitalData(),\n      recentAlerts: generateRecentAlerts(),\n      metadata: {\n        timestamp: new Date().toISOString(),\n        responseTime: null, // Will be set below\n      },\n    };\n\n    const responseTime = Date.now() - startTime;\n    dashboardData.metadata.responseTime = responseTime;\n\n    // Log performance warning if response time exceeds target\n    if (responseTime > 500) {\n      console.warn(`[Dashboard API] Response time: ${responseTime}ms (target: <500ms)`);\n    }\n\n    res.json({\n      success: true,\n      data: dashboardData,\n    });\n  } catch (error) {\n    console.error('[Dashboard API] Error fetching dashboard data:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch dashboard data',\n      message: error.message,\n    });\n  }\n});\n\n/**\n * GET /api/v1/dashboard/kpis\n *\n * Returns only KPI data (for quick updates)\n */\nrouter.get('/kpis', async (req, res) => {\n  try {\n    const kpiData = generateKPIData();\n\n    res.json({\n      success: true,\n      data: kpiData,\n    });\n  } catch (error) {\n    console.error('[Dashboard API] Error fetching KPI data:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Failed to fetch KPI data',\n      message: error.message,\n    });\n  }\n});\n\n/**\n * Helper Functions to Generate Dashboard Data\n *\n * TODO: Replace these with real data fetching from:\n * - Shopify API (sales/revenue)\n * - Production database (manufacturing data)\n * - Inventory management system\n * - Financial services (working capital)\n * - Forecasting engine (accuracy metrics)\n */\n\nfunction generateKPIData() {\n  const now = new Date();\n\n  return {\n    revenue: {\n      today: 95000,\n      mtd: 1850000,\n      ytd: 18500000,\n      target: 100000,\n      change: 12.5,\n      sparkline: generateSparkline(30, 80000, 110000),\n    },\n    production: {\n      units: 12500,\n      target: 13000,\n      oee: 87.3,\n      sparkline: generateSparkline(30, 11000, 14000),\n    },\n    inventory: {\n      value: 425000,\n      units: 8450,\n      skus: 9,\n      change: -3.2,\n      sparkline: generateSparkline(30, 400000, 450000),\n    },\n    ccc: {\n      days: 52,\n      dio: 35,\n      dso: 28,\n      dpo: 11,\n      sparkline: generateSparkline(30, 48, 58),\n    },\n    otd: {\n      rate: 94.5,\n      onTime: 189,\n      total: 200,\n      change: 2.1,\n      sparkline: generateSparkline(30, 92, 96),\n    },\n    forecast: {\n      accuracy: 88.2,\n      mape: 11.8,\n      models: 4,\n      sparkline: generateSparkline(30, 85, 92),\n    },\n  };\n}\n\nfunction generateSalesRevenueData() {\n  const data = [];\n  const now = new Date();\n\n  // Generate 90 days of data\n  for (let i = 90; i >= 0; i--) {\n    const date = new Date(now);\n    date.setDate(date.getDate() - i);\n\n    data.push({\n      date: date.toISOString().split('T')[0],\n      revenue: Math.floor(80000 + Math.random() * 40000 + Math.sin(i / 7) * 15000),\n      orders: Math.floor(150 + Math.random() * 100 + Math.sin(i / 7) * 30),\n    });\n  }\n\n  return data;\n}\n\nfunction generateProductionOutputData() {\n  const data = [];\n  const now = new Date();\n\n  // Generate 90 days of data\n  for (let i = 90; i >= 0; i--) {\n    const date = new Date(now);\n    date.setDate(date.getDate() - i);\n\n    // Skip weekends\n    if (date.getDay() === 0 || date.getDay() === 6) {\n      continue;\n    }\n\n    const baseOutput = 12000;\n    const variation = Math.random() * 3000;\n    const unitsProduced = Math.floor(baseOutput + variation);\n    const target = 13000;\n\n    data.push({\n      date: date.toISOString().split('T')[0],\n      unitsProduced,\n      target,\n      targetPercent: Math.round((unitsProduced / target) * 100),\n      oee: Math.round(75 + Math.random() * 20),\n      oeeTarget: 85,\n    });\n  }\n\n  return data;\n}\n\nfunction generateInventoryLevelsData() {\n  const timeSeriesData = [];\n  const now = new Date();\n\n  // Generate 90 days of inventory time series\n  for (let i = 90; i >= 0; i--) {\n    const date = new Date(now);\n    date.setDate(date.getDate() - i);\n\n    timeSeriesData.push({\n      date: date.toISOString().split('T')[0],\n      inventoryValue: Math.floor(400000 + Math.random() * 60000 + Math.sin(i / 14) * 40000),\n      totalUnits: Math.floor(8000 + Math.random() * 1200 + Math.sin(i / 14) * 800),\n      reorderPoint: 600,\n      turnoverRate: Math.round(30 + Math.random() * 10),\n    });\n  }\n\n  // Generate SKU-level data\n  const skuData = [\n    { sku: 'PROD-001', currentStock: 1200, reorderPoint: 800 },\n    { sku: 'PROD-002', currentStock: 980, reorderPoint: 900 },\n    { sku: 'PROD-003', currentStock: 750, reorderPoint: 700 },\n    { sku: 'PROD-004', currentStock: 650, reorderPoint: 800 },\n    { sku: 'PROD-005', currentStock: 1100, reorderPoint: 750 },\n    { sku: 'PROD-006', currentStock: 580, reorderPoint: 600 },\n    { sku: 'PROD-007', currentStock: 420, reorderPoint: 650 },\n    { sku: 'PROD-008', currentStock: 890, reorderPoint: 550 },\n    { sku: 'PROD-009', currentStock: 680, reorderPoint: 500 },\n  ];\n\n  return {\n    timeSeries: timeSeriesData,\n    skuData,\n  };\n}\n\nfunction generateWorkingCapitalData() {\n  return {\n    ccc: {\n      value: 52,\n      status: 'good',\n      components: {\n        dio: 35,\n        dso: 28,\n        dpo: 11,\n      },\n    },\n    runway: {\n      months: 8.5,\n      cashBalance: 425000,\n      burnRate: 50000,\n      projection: generateRunwayProjection(),\n    },\n    breaches: [\n      {\n        month: 7,\n        date: new Date(Date.now() + 7 * 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n        projectedBalance: -15000,\n        deficit: 15000,\n        severity: 'warning',\n      },\n    ],\n    mitigationActions: [\n      {\n        id: 'accelerate-collections',\n        title: 'Accelerate Collections',\n        description: 'Reduce DSO by 5 days',\n        impact: 15000,\n      },\n      {\n        id: 'extend-payables',\n        title: 'Extend Payables',\n        description: 'Negotiate 15-day extension',\n        impact: 12000,\n      },\n      {\n        id: 'optimize-inventory',\n        title: 'Optimize Inventory',\n        description: 'Reduce DIO by 3 days',\n        impact: 8500,\n      },\n    ],\n  };\n}\n\nfunction generateRunwayProjection() {\n  const projection = [];\n  let balance = 425000;\n  const burnRate = 50000;\n\n  for (let i = 0; i < 12; i++) {\n    balance -= burnRate;\n    projection.push({\n      month: i,\n      balance,\n    });\n  }\n\n  return projection;\n}\n\nfunction generateRecentAlerts() {\n  return [\n    {\n      id: 'alert-1',\n      type: 'warning',\n      title: 'Low Inventory: PROD-007',\n      message: 'Stock level below reorder point',\n      timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),\n    },\n    {\n      id: 'alert-2',\n      type: 'info',\n      title: 'Production Target Achieved',\n      message: 'Daily production goal exceeded by 8%',\n      timestamp: new Date(Date.now() - 5 * 60 * 60 * 1000).toISOString(),\n    },\n    {\n      id: 'alert-3',\n      type: 'critical',\n      title: 'Cash Runway Warning',\n      message: 'Projected cash deficit in 7 months',\n      timestamp: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(),\n    },\n  ];\n}\n\nfunction generateSparkline(points, min, max) {\n  const data = [];\n  for (let i = 0; i < points; i++) {\n    data.push(Math.floor(min + Math.random() * (max - min)));\n  }\n  return data;\n}\n\nmodule.exports = router;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\api\\enhanced-forecasting.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\api\\enterprise-api.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\api\\health.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\api\\real-api.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\api\\shopify.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\api\\working-capital.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\integrations\\amazon.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\integrations\\shopify.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\integrations\\unleashed.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\integrations\\xero.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\lib\\redis.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\middleware\\auth.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\middleware\\upload.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\monitoring\\enterprise-monitoring.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\queues\\QueueManager.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'returnvalue' is defined but never used.",
        "line": 236,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 236,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "returnvalue" },
            "fix": { "range": [6252, 6265], "text": "" },
            "desc": "Remove unused variable 'returnvalue'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { Queue, QueueEvents } = require('bullmq');\nconst { createBullMQConnection } = require('../lib/redis');\nconst logger = require('../utils/logger');\n\n/**\n * QueueManager\n *\n * Central management for all BullMQ queues.\n *\n * Features:\n * - Queue initialization and lifecycle\n * - Event handling and logging\n * - Dead Letter Queue (DLQ) support\n * - Queue monitoring\n * - Job scheduling\n *\n * Queues:\n * - forecast-queue: AI forecast computations\n * - optimization-queue: Inventory optimization jobs\n * - sync-queue: API integration syncs\n * - import-queue: CSV/Excel data imports\n * - export-queue: Report generation\n * - notification-queue: Email/alert notifications\n * - analytics-queue: Background analytics calculations\n */\nclass QueueManager {\n  constructor() {\n    this.queues = new Map();\n    this.queueEvents = new Map();\n    this.connection = null;\n\n    // Queue configurations\n    this.queueConfigs = {\n      forecast: {\n        name: 'forecast-queue',\n        defaultJobOptions: {\n          attempts: 3,\n          backoff: {\n            type: 'exponential',\n            delay: 2000, // Start with 2 seconds\n          },\n          removeOnComplete: {\n            age: 24 * 3600, // Keep completed jobs for 24 hours\n            count: 1000, // Keep last 1000 completed jobs\n          },\n          removeOnFail: {\n            age: 7 * 24 * 3600, // Keep failed jobs for 7 days\n          },\n          timeout: 5 * 60 * 1000, // 5 minutes max\n        },\n      },\n      optimization: {\n        name: 'optimization-queue',\n        defaultJobOptions: {\n          attempts: 3,\n          backoff: {\n            type: 'exponential',\n            delay: 2000,\n          },\n          removeOnComplete: {\n            age: 24 * 3600,\n            count: 1000,\n          },\n          removeOnFail: {\n            age: 7 * 24 * 3600,\n          },\n          timeout: 5 * 60 * 1000,\n        },\n      },\n      sync: {\n        name: 'sync-queue',\n        defaultJobOptions: {\n          attempts: 5, // More retries for syncs\n          backoff: {\n            type: 'exponential',\n            delay: 5000, // Start with 5 seconds\n          },\n          removeOnComplete: {\n            age: 24 * 3600,\n            count: 500,\n          },\n          removeOnFail: {\n            age: 7 * 24 * 3600,\n          },\n          timeout: 10 * 60 * 1000, // 10 minutes for syncs\n        },\n      },\n      import: {\n        name: 'import-queue',\n        defaultJobOptions: {\n          attempts: 2, // Fewer retries for imports\n          backoff: {\n            type: 'fixed',\n            delay: 5000,\n          },\n          removeOnComplete: {\n            age: 7 * 24 * 3600, // Keep import jobs longer\n            count: 100,\n          },\n          removeOnFail: {\n            age: 30 * 24 * 3600, // Keep failed imports for 30 days\n          },\n          timeout: 15 * 60 * 1000, // 15 minutes for large imports\n        },\n      },\n      export: {\n        name: 'export-queue',\n        defaultJobOptions: {\n          attempts: 2,\n          backoff: {\n            type: 'fixed',\n            delay: 3000,\n          },\n          removeOnComplete: {\n            age: 3 * 24 * 3600, // Keep exports for 3 days\n            count: 100,\n          },\n          removeOnFail: {\n            age: 7 * 24 * 3600,\n          },\n          timeout: 10 * 60 * 1000,\n        },\n      },\n      notification: {\n        name: 'notification-queue',\n        defaultJobOptions: {\n          attempts: 5, // Important to deliver notifications\n          backoff: {\n            type: 'exponential',\n            delay: 1000,\n          },\n          removeOnComplete: {\n            age: 24 * 3600,\n            count: 10000, // Keep more notifications\n          },\n          removeOnFail: {\n            age: 7 * 24 * 3600,\n          },\n          timeout: 30 * 1000, // 30 seconds max\n        },\n      },\n      analytics: {\n        name: 'analytics-queue',\n        defaultJobOptions: {\n          attempts: 3,\n          backoff: {\n            type: 'exponential',\n            delay: 2000,\n          },\n          removeOnComplete: {\n            age: 24 * 3600,\n            count: 500,\n          },\n          removeOnFail: {\n            age: 7 * 24 * 3600,\n          },\n          timeout: 10 * 60 * 1000,\n        },\n      },\n    };\n  }\n\n  /**\n   * Initialize all queues\n   */\n  async initialize() {\n    try {\n      logger.info('[QueueManager] Initializing queues...');\n\n      // Create Redis connection for BullMQ\n      this.connection = createBullMQConnection();\n\n      // Test connection\n      await this.connection.ping();\n      logger.info('[QueueManager] Redis connection established');\n\n      // Initialize each queue\n      for (const [key, config] of Object.entries(this.queueConfigs)) {\n        await this.initializeQueue(key, config);\n      }\n\n      logger.info(`[QueueManager] Initialized ${this.queues.size} queues`);\n\n      return {\n        success: true,\n        queues: Array.from(this.queues.keys()),\n      };\n    } catch (error) {\n      logger.error('[QueueManager] Failed to initialize queues:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Initialize a single queue\n   */\n  async initializeQueue(key, config) {\n    try {\n      // Create queue\n      const queue = new Queue(config.name, {\n        connection: this.connection,\n        defaultJobOptions: config.defaultJobOptions,\n      });\n\n      // Create queue events for monitoring\n      const queueEvents = new QueueEvents(config.name, {\n        connection: createBullMQConnection(), // Separate connection for events\n      });\n\n      // Store references\n      this.queues.set(key, queue);\n      this.queueEvents.set(key, queueEvents);\n\n      // Setup event listeners\n      this.setupEventListeners(key, queue, queueEvents);\n\n      logger.info(`[QueueManager] Initialized queue: ${config.name}`);\n\n      return queue;\n    } catch (error) {\n      logger.error(`[QueueManager] Failed to initialize queue ${key}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Setup event listeners for queue\n   */\n  setupEventListeners(key, queue, queueEvents) {\n    // Job added\n    queueEvents.on('added', ({ jobId }) => {\n      logger.debug(`[Queue:${key}] Job added: ${jobId}`);\n    });\n\n    // Job completed\n    queueEvents.on('completed', ({ jobId, returnvalue }) => {\n      logger.info(`[Queue:${key}] Job completed: ${jobId}`);\n    });\n\n    // Job failed\n    queueEvents.on('failed', ({ jobId, failedReason }) => {\n      logger.error(`[Queue:${key}] Job failed: ${jobId}`, {\n        reason: failedReason,\n      });\n    });\n\n    // Job progress\n    queueEvents.on('progress', ({ jobId, data }) => {\n      logger.debug(`[Queue:${key}] Job progress: ${jobId}`, data);\n    });\n\n    // Job stalled\n    queueEvents.on('stalled', ({ jobId }) => {\n      logger.warn(`[Queue:${key}] Job stalled: ${jobId}`);\n    });\n\n    // Job retrying\n    queueEvents.on('retrying', ({ jobId, attemptsMade }) => {\n      logger.warn(`[Queue:${key}] Job retrying: ${jobId} (attempt ${attemptsMade})`);\n    });\n\n    // Error event\n    queueEvents.on('error', (err) => {\n      logger.error(`[Queue:${key}] Queue error:`, err);\n    });\n  }\n\n  /**\n   * Get queue by key\n   */\n  getQueue(key) {\n    const queue = this.queues.get(key);\n    if (!queue) {\n      throw new Error(`Queue not found: ${key}`);\n    }\n    return queue;\n  }\n\n  /**\n   * Add job to queue\n   */\n  async addJob(queueKey, jobName, data, options = {}) {\n    try {\n      const queue = this.getQueue(queueKey);\n\n      const job = await queue.add(jobName, data, {\n        ...options,\n        // Merge with default options if not specified\n        priority: options.priority || undefined,\n        delay: options.delay || undefined,\n        jobId: options.jobId || undefined,\n      });\n\n      logger.info(`[QueueManager] Job added to ${queueKey}: ${job.id}`);\n\n      return {\n        success: true,\n        jobId: job.id,\n        queueName: queue.name,\n      };\n    } catch (error) {\n      logger.error(`[QueueManager] Failed to add job to ${queueKey}:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get job status\n   */\n  async getJobStatus(queueKey, jobId) {\n    try {\n      const queue = this.getQueue(queueKey);\n      const job = await queue.getJob(jobId);\n\n      if (!job) {\n        return null;\n      }\n\n      const state = await job.getState();\n      const progress = job.progress;\n\n      return {\n        id: job.id,\n        name: job.name,\n        data: job.data,\n        state,\n        progress,\n        attemptsMade: job.attemptsMade,\n        timestamp: job.timestamp,\n        processedOn: job.processedOn,\n        finishedOn: job.finishedOn,\n        failedReason: job.failedReason,\n        returnvalue: job.returnvalue,\n      };\n    } catch (error) {\n      logger.error(`[QueueManager] Failed to get job status:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Get queue statistics\n   */\n  async getQueueStats(queueKey) {\n    try {\n      const queue = this.getQueue(queueKey);\n\n      const [\n        waiting,\n        active,\n        completed,\n        failed,\n        delayed,\n        isPaused,\n      ] = await Promise.all([\n        queue.getWaitingCount(),\n        queue.getActiveCount(),\n        queue.getCompletedCount(),\n        queue.getFailedCount(),\n        queue.getDelayedCount(),\n        queue.isPaused(),\n      ]);\n\n      return {\n        queueName: queue.name,\n        waiting,\n        active,\n        completed,\n        failed,\n        delayed,\n        isPaused,\n        total: waiting + active + completed + failed + delayed,\n      };\n    } catch (error) {\n      logger.error(`[QueueManager] Failed to get queue stats:`, error);\n      return null;\n    }\n  }\n\n  /**\n   * Get all queue statistics\n   */\n  async getAllQueueStats() {\n    const stats = [];\n\n    for (const key of this.queues.keys()) {\n      const stat = await this.getQueueStats(key);\n      if (stat) {\n        stats.push({\n          key,\n          ...stat,\n        });\n      }\n    }\n\n    return stats;\n  }\n\n  /**\n   * Get failed jobs\n   */\n  async getFailedJobs(queueKey, start = 0, end = 10) {\n    try {\n      const queue = this.getQueue(queueKey);\n      const jobs = await queue.getFailed(start, end);\n\n      return jobs.map(job => ({\n        id: job.id,\n        name: job.name,\n        data: job.data,\n        failedReason: job.failedReason,\n        attemptsMade: job.attemptsMade,\n        timestamp: job.timestamp,\n        finishedOn: job.finishedOn,\n      }));\n    } catch (error) {\n      logger.error(`[QueueManager] Failed to get failed jobs:`, error);\n      return [];\n    }\n  }\n\n  /**\n   * Retry failed job\n   */\n  async retryJob(queueKey, jobId) {\n    try {\n      const queue = this.getQueue(queueKey);\n      const job = await queue.getJob(jobId);\n\n      if (!job) {\n        throw new Error(`Job not found: ${jobId}`);\n      }\n\n      await job.retry();\n\n      logger.info(`[QueueManager] Job retried: ${jobId}`);\n\n      return {\n        success: true,\n        jobId,\n      };\n    } catch (error) {\n      logger.error(`[QueueManager] Failed to retry job:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Remove job\n   */\n  async removeJob(queueKey, jobId) {\n    try {\n      const queue = this.getQueue(queueKey);\n      const job = await queue.getJob(jobId);\n\n      if (!job) {\n        throw new Error(`Job not found: ${jobId}`);\n      }\n\n      await job.remove();\n\n      logger.info(`[QueueManager] Job removed: ${jobId}`);\n\n      return {\n        success: true,\n        jobId,\n      };\n    } catch (error) {\n      logger.error(`[QueueManager] Failed to remove job:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Pause queue\n   */\n  async pauseQueue(queueKey) {\n    try {\n      const queue = this.getQueue(queueKey);\n      await queue.pause();\n\n      logger.info(`[QueueManager] Queue paused: ${queueKey}`);\n\n      return { success: true };\n    } catch (error) {\n      logger.error(`[QueueManager] Failed to pause queue:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Resume queue\n   */\n  async resumeQueue(queueKey) {\n    try {\n      const queue = this.getQueue(queueKey);\n      await queue.resume();\n\n      logger.info(`[QueueManager] Queue resumed: ${queueKey}`);\n\n      return { success: true };\n    } catch (error) {\n      logger.error(`[QueueManager] Failed to resume queue:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clean queue\n   */\n  async cleanQueue(queueKey, grace = 3600000, limit = 1000, type = 'completed') {\n    try {\n      const queue = this.getQueue(queueKey);\n      const jobs = await queue.clean(grace, limit, type);\n\n      logger.info(`[QueueManager] Cleaned ${jobs.length} ${type} jobs from ${queueKey}`);\n\n      return {\n        success: true,\n        cleaned: jobs.length,\n      };\n    } catch (error) {\n      logger.error(`[QueueManager] Failed to clean queue:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Drain queue (remove all jobs)\n   */\n  async drainQueue(queueKey) {\n    try {\n      const queue = this.getQueue(queueKey);\n      await queue.drain();\n\n      logger.warn(`[QueueManager] Queue drained: ${queueKey}`);\n\n      return { success: true };\n    } catch (error) {\n      logger.error(`[QueueManager] Failed to drain queue:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Obliterate queue (remove all data)\n   */\n  async obliterateQueue(queueKey) {\n    try {\n      const queue = this.getQueue(queueKey);\n      await queue.obliterate({ force: true });\n\n      logger.warn(`[QueueManager] Queue obliterated: ${queueKey}`);\n\n      return { success: true };\n    } catch (error) {\n      logger.error(`[QueueManager] Failed to obliterate queue:`, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Shutdown all queues\n   */\n  async shutdown() {\n    try {\n      logger.info('[QueueManager] Shutting down queues...');\n\n      // Close all queue events\n      for (const [key, queueEvents] of this.queueEvents) {\n        await queueEvents.close();\n        logger.debug(`[QueueManager] Closed events for ${key}`);\n      }\n\n      // Close all queues\n      for (const [key, queue] of this.queues) {\n        await queue.close();\n        logger.debug(`[QueueManager] Closed queue ${key}`);\n      }\n\n      // Close Redis connection\n      if (this.connection) {\n        await this.connection.quit();\n        this.connection = null;\n      }\n\n      // Clear maps\n      this.queues.clear();\n      this.queueEvents.clear();\n\n      logger.info('[QueueManager] Shutdown complete');\n\n      return { success: true };\n    } catch (error) {\n      logger.error('[QueueManager] Shutdown error:', error);\n      throw error;\n    }\n  }\n}\n\n// Singleton instance\nlet instance = null;\n\nmodule.exports = {\n  QueueManager,\n  getInstance: () => {\n    if (!instance) {\n      instance = new QueueManager();\n    }\n    return instance;\n  },\n};\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\routes\\api.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\routes\\auth.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'sessionMiddleware' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 7,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "sessionMiddleware" },
            "fix": { "range": [342, 365], "text": "" },
            "desc": "Remove unused variable 'sessionMiddleware'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import express from 'express'\n\nimport { verifyUserCredentials, initializeDefaultUsers } from '../../lib/user-service.js'\nimport { logInfo, logError, logWarn } from '../../services/observability/structuredLogger.js'\nimport authMiddleware from '../middleware/authMiddleware.js'\nimport mfaMiddleware from '../middleware/mfaMiddleware.js'\nimport sessionMiddleware from '../middleware/sessionMiddleware.js'\nimport auditMiddleware from '../middleware/auditMiddleware.js'\n\nconst router = express.Router()\n\n// Initialize default users on server startup\n;(async () => {\n  try {\n    await initializeDefaultUsers()\n    logInfo('Default users initialized')\n  } catch (error) {\n    logError('Failed to initialize default users', error)\n  }\n})()\n\n// Sign in endpoint\nrouter.post('/signin', async (req, res) => {\n  try {\n    const { email, password } = req.body\n\n    if (!email || !password) {\n      logWarn('Sign in attempt with missing credentials')\n      return res.status(400).json({ error: 'Email and password are required' })\n    }\n\n    logInfo('Sign in attempt', { email })\n    const user = await verifyUserCredentials(email, password)\n\n    if (user) {\n      // Create session token (in production, use JWT or proper session management)\n      const sessionToken = `session_${Date.now()}_${Math.random().toString(36)}`\n\n      logInfo('Successful sign in', { userId: user.id, email: user.email })\n\n      res.json({\n        user: {\n          id: user.id,\n          name: user.name,\n          email: user.email,\n          role: user.role,\n        },\n        token: sessionToken,\n        expires: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours\n      })\n    } else {\n      logWarn('Failed sign in attempt', { email })\n      res.status(401).json({ error: 'Invalid email or password' })\n    }\n  } catch (error) {\n    logError('Sign in error', error)\n    res.status(500).json({ error: 'Internal server error' })\n  }\n})\n\n// Sign out endpoint\nrouter.post('/signout', (req, res) => {\n  try {\n    logInfo('User signed out')\n    res.json({ message: 'Signed out successfully' })\n  } catch (error) {\n    logError('Sign out error', error)\n    res.status(500).json({ error: 'Internal server error' })\n  }\n})\n\n// Session verification endpoint\nrouter.get('/session', (req, res) => {\n  try {\n    // In production, verify JWT token and return user data\n    // For development, return mock data\n    if (process.env.NODE_ENV === 'development') {\n      res.json({\n        user: {\n          id: 'dev-user',\n          name: 'Development User',\n          email: 'dev@sentia.com',\n          role: 'admin',\n        },\n      })\n    } else {\n      res.status(401).json({ error: 'Session verification not implemented' })\n    }\n  } catch (error) {\n    logError('Session verification error', error)\n    res.status(500).json({ error: 'Internal server error' })\n  }\n})\n\n/**\n * GET /api/auth/me\n * Get current user profile (requires authentication)\n */\nrouter.get('/me', authMiddleware, async (req, res) => {\n  try {\n    const { user } = req\n    res.json({\n      success: true,\n      user: {\n        id: user.id,\n        clerkId: user.clerkId,\n        email: user.email,\n        role: user.role,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        mfaEnabled: user.mfaEnabled,\n        isApproved: user.isApproved,\n        isActive: user.isActive,\n      },\n    })\n  } catch (error) {\n    logError('Failed to fetch user profile', error)\n    res.status(500).json({ success: false, error: 'Failed to fetch user profile' })\n  }\n})\n\n/**\n * POST /api/auth/mfa/setup\n * Initialize MFA setup for authenticated user\n */\nrouter.post('/mfa/setup', authMiddleware, async (req, res) => {\n  try {\n    const { prisma } = req.app.locals\n    const speakeasy = await import('speakeasy')\n    const QRCode = await import('qrcode')\n\n    // Generate secret\n    const secret = speakeasy.default.generateSecret({\n      name: `Sentia Manufacturing (${req.user.email})`,\n      length: 32,\n    })\n\n    // Generate 10 backup codes\n    const backupCodes = []\n    for (let i = 0; i < 10; i++) {\n      const code = Math.random().toString(36).substring(2, 10).toUpperCase()\n      backupCodes.push(code)\n    }\n\n    // Hash backup codes before storing\n    const bcrypt = await import('bcrypt')\n    const hashedBackupCodes = await Promise.all(\n      backupCodes.map(code => bcrypt.default.hash(code, 10))\n    )\n\n    // Store secret (not enabled yet - requires verification first)\n    await prisma.user.update({\n      where: { id: req.user.id },\n      data: {\n        mfaSecret: secret.base32,\n        mfaBackupCodes: hashedBackupCodes,\n      },\n    })\n\n    // Generate QR code\n    const qrCodeDataUrl = await QRCode.default.toDataURL(secret.otpauth_url)\n\n    logInfo('MFA setup initiated', { userId: req.user.id })\n\n    res.json({\n      success: true,\n      secret: secret.base32,\n      qrCode: qrCodeDataUrl,\n      backupCodes, // Show once, never again\n    })\n  } catch (error) {\n    logError('MFA setup error', error)\n    res.status(500).json({ success: false, error: 'Failed to setup MFA' })\n  }\n})\n\n/**\n * POST /api/auth/mfa/verify\n * Verify MFA code and enable MFA\n */\nrouter.post('/mfa/verify', authMiddleware, async (req, res) => {\n  try {\n    const { code } = req.body\n    const { prisma } = req.app.locals\n    const speakeasy = await import('speakeasy')\n\n    if (!code) {\n      return res.status(400).json({ success: false, error: 'MFA code is required' })\n    }\n\n    // Get user with secret\n    const user = await prisma.user.findUnique({\n      where: { id: req.user.id },\n      select: { mfaSecret: true, mfaEnabled: true },\n    })\n\n    if (!user?.mfaSecret) {\n      return res.status(400).json({ success: false, error: 'MFA not setup. Call /mfa/setup first' })\n    }\n\n    // Verify TOTP token\n    const verified = speakeasy.default.totp.verify({\n      secret: user.mfaSecret,\n      encoding: 'base32',\n      token: code,\n      window: 2, // Allow 2 time steps before/after\n    })\n\n    if (!verified) {\n      logWarn('Invalid MFA code attempt', { userId: req.user.id })\n      return res.status(400).json({ success: false, error: 'Invalid MFA code' })\n    }\n\n    // Enable MFA\n    await prisma.user.update({\n      where: { id: req.user.id },\n      data: { mfaEnabled: true },\n    })\n\n    // Mark MFA verified in session if exists\n    if (req.session) {\n      await prisma.session.update({\n        where: { id: req.session.id },\n        data: { mfaVerifiedAt: new Date() },\n      })\n    }\n\n    logInfo('MFA enabled successfully', { userId: req.user.id })\n\n    res.json({ success: true, message: 'MFA enabled successfully' })\n  } catch (error) {\n    logError('MFA verification error', error)\n    res.status(500).json({ success: false, error: 'Failed to verify MFA' })\n  }\n})\n\n/**\n * POST /api/auth/mfa/disable\n * Disable MFA (requires step-up authentication)\n */\nrouter.post('/mfa/disable', authMiddleware, mfaMiddleware, auditMiddleware, async (req, res) => {\n  try {\n    const { code } = req.body\n    const { prisma } = req.app.locals\n\n    if (!code) {\n      return res.status(400).json({ success: false, error: 'MFA code required to disable MFA' })\n    }\n\n    // Verify code one last time before disabling\n    const speakeasy = await import('speakeasy')\n    const user = await prisma.user.findUnique({\n      where: { id: req.user.id },\n      select: { mfaSecret: true },\n    })\n\n    const verified = speakeasy.default.totp.verify({\n      secret: user.mfaSecret,\n      encoding: 'base32',\n      token: code,\n      window: 2,\n    })\n\n    if (!verified) {\n      return res.status(400).json({ success: false, error: 'Invalid MFA code' })\n    }\n\n    // Disable MFA\n    await prisma.user.update({\n      where: { id: req.user.id },\n      data: {\n        mfaEnabled: false,\n        mfaSecret: null,\n        mfaBackupCodes: [],\n      },\n    })\n\n    logInfo('MFA disabled', { userId: req.user.id })\n\n    res.json({ success: true, message: 'MFA disabled successfully' })\n  } catch (error) {\n    logError('MFA disable error', error)\n    res.status(500).json({ success: false, error: 'Failed to disable MFA' })\n  }\n})\n\n/**\n * GET /api/auth/sessions\n * Get all active sessions for current user\n */\nrouter.get('/sessions', authMiddleware, async (req, res) => {\n  try {\n    const { prisma } = req.app.locals\n\n    const sessions = await prisma.session.findMany({\n      where: {\n        userId: req.user.id,\n        isActive: true,\n        expiresAt: { gt: new Date() },\n      },\n      select: {\n        id: true,\n        sessionToken: true,\n        ipAddress: true,\n        userAgent: true,\n        lastActivityAt: true,\n        expiresAt: true,\n        createdAt: true,\n      },\n      orderBy: { lastActivityAt: 'desc' },\n    })\n\n    res.json({\n      success: true,\n      sessions: sessions.map(s => ({\n        ...s,\n        sessionToken: s.sessionToken.substring(0, 8) + '...', // Partial token\n        isCurrent: s.id === req.session?.id,\n      })),\n    })\n  } catch (error) {\n    logError('Failed to fetch sessions', error)\n    res.status(500).json({ success: false, error: 'Failed to fetch sessions' })\n  }\n})\n\n/**\n * DELETE /api/auth/sessions/:sessionId\n * Revoke a specific session\n */\nrouter.delete('/sessions/:sessionId', authMiddleware, auditMiddleware, async (req, res) => {\n  try {\n    const { sessionId } = req.params\n    const { prisma } = req.app.locals\n\n    // Ensure user can only revoke their own sessions\n    const session = await prisma.session.findFirst({\n      where: { id: sessionId, userId: req.user.id },\n    })\n\n    if (!session) {\n      return res.status(404).json({ success: false, error: 'Session not found' })\n    }\n\n    await prisma.session.update({\n      where: { id: sessionId },\n      data: { isActive: false },\n    })\n\n    logInfo('Session revoked', { sessionId, userId: req.user.id })\n\n    res.json({ success: true, message: 'Session revoked successfully' })\n  } catch (error) {\n    logError('Failed to revoke session', error)\n    res.status(500).json({ success: false, error: 'Failed to revoke session' })\n  }\n})\n\nexport default router\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\routes\\data.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\routes\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\routes\\sse.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\security\\enterprise-security.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\services\\data-validator.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\services\\external-api-service.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\services\\finance\\ApprovalEngine.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\services\\finance\\CashConversionCycle.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\services\\finance\\CashRunway.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\services\\finance\\InventoryOptimization.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\services\\finance\\MitigationPlanner.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\services\\finance\\ScenarioModeler.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\services\\initialization.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\services\\sse\\index.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\workers\\AnalyticsWorker.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'startDate' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 59,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "startDate" },
            "fix": { "range": [1740, 1751], "text": "" },
            "desc": "Remove unused variable 'startDate'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'endDate' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 59,
        "column": 40,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "endDate" },
            "fix": { "range": [1751, 1760], "text": "" },
            "desc": "Remove unused variable 'endDate'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'params' is defined but never used.",
        "line": 85,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "params" },
            "fix": { "range": [2462, 2468], "text": "" },
            "desc": "Remove unused variable 'params'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { Worker } = require('bullmq');\nconst { createBullMQConnection } = require('../lib/redis');\nconst prisma = require('../lib/prisma');\nconst logger = require('../utils/logger');\n\n/**\n * AnalyticsWorker - Processes background analytics calculations\n */\nclass AnalyticsWorker {\n  constructor() {\n    this.worker = null;\n    this.connection = null;\n  }\n\n  async start() {\n    logger.info('[AnalyticsWorker] Starting worker...');\n    this.connection = createBullMQConnection();\n\n    this.worker = new Worker('analytics-queue', async (job) => await this.processJob(job), {\n      connection: this.connection,\n      concurrency: 2,\n    });\n\n    this.worker.on('completed', (job) => logger.info(`[AnalyticsWorker] Job completed: ${job.id}`));\n    this.worker.on('failed', (job, err) => logger.error(`[AnalyticsWorker] Job failed: ${job.id}`, err));\n\n    logger.info('[AnalyticsWorker] Worker started');\n    return { success: true };\n  }\n\n  async processJob(job) {\n    const { type, params } = job.data;\n\n    try {\n      let result = null;\n\n      switch (type) {\n        case 'inventory-turnover':\n          result = await this.calculateInventoryTurnover(params);\n          break;\n        case 'cash-conversion-cycle':\n          result = await this.calculateCashConversionCycle(params);\n          break;\n        case 'product-performance':\n          result = await this.calculateProductPerformance(params);\n          break;\n        default:\n          throw new Error(`Unknown analytics type: ${type}`);\n      }\n\n      return { success: true, result };\n    } catch (error) {\n      logger.error(`[AnalyticsWorker] Job ${job.id} failed:`, error);\n      throw error;\n    }\n  }\n\n  async calculateInventoryTurnover(params) {\n    const { organizationId, startDate, endDate } = params;\n\n    // Calculate COGS and average inventory\n    const products = await prisma.product.findMany({\n      where: { organizationId },\n      include: {\n        inventoryItems: true,\n      },\n    });\n\n    const totalCOGS = products.reduce((sum, p) => sum + parseFloat(p.unitCost) * 1000, 0);\n    const avgInventory = products.reduce(\n      (sum, p) => sum + p.inventoryItems.reduce((s, i) => s + i.quantityOnHand * parseFloat(p.unitCost), 0),\n      0\n    ) / products.length;\n\n    const turnoverRatio = totalCOGS / avgInventory;\n\n    return {\n      turnoverRatio,\n      totalCOGS,\n      avgInventory,\n      daysInInventory: 365 / turnoverRatio,\n    };\n  }\n\n  async calculateCashConversionCycle(params) {\n    // Simplified CCC calculation\n    return {\n      dso: 45, // Days Sales Outstanding\n      dio: 60, // Days Inventory Outstanding\n      dpo: 30, // Days Payables Outstanding\n      ccc: 45 + 60 - 30, // = 75 days\n    };\n  }\n\n  async calculateProductPerformance(params) {\n    const { productId } = params;\n\n    const product = await prisma.product.findUnique({\n      where: { id: productId },\n      include: {\n        inventoryItems: true,\n        demandForecasts: {\n          orderBy: { forecastDate: 'desc' },\n          take: 1,\n        },\n      },\n    });\n\n    return {\n      productId,\n      sku: product.sku,\n      currentStock: product.inventoryItems.reduce((sum, i) => sum + i.quantityOnHand, 0),\n      forecastedDemand: product.demandForecasts[0]?.forecastedDemand || 0,\n      turnoverRate: 12, // Times per year\n      margin: ((parseFloat(product.sellingPrice) - parseFloat(product.unitCost)) / parseFloat(product.sellingPrice) * 100).toFixed(2),\n    };\n  }\n\n  async stop() {\n    if (this.worker) await this.worker.close();\n    if (this.connection) await this.connection.quit();\n    logger.info('[AnalyticsWorker] Worker stopped');\n  }\n}\n\nmodule.exports = AnalyticsWorker;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\workers\\ExportWorker.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\workers\\ForecastWorker.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'modelResults' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 585,
        "column": 51,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 585,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "modelResults" },
            "fix": { "range": [15947, 15961], "text": "" },
            "desc": "Remove unused variable 'modelResults'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'metadata' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 585,
        "column": 82,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 585,
        "endColumn": 90,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "metadata" },
            "fix": { "range": [15978, 15988], "text": "" },
            "desc": "Remove unused variable 'metadata'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { Worker } = require('bullmq');\r\nconst { createBullMQConnection } = require('../lib/redis');\r\nconst prisma = require('../lib/prisma');\r\nconst logger = require('../utils/logger');\r\nconst {\r\n  emitSSEEvent,\r\n  emitForecastProgress,\r\n  emitForecastComplete,\r\n  emitForecastError,\r\n} = require('../services/sse/index.cjs');\r\n\r\n/**\r\n * ForecastWorker\r\n *\r\n * Processes demand forecasting jobs using ensemble models.\r\n *\r\n * Models:\r\n * - ARIMA (AutoRegressive Integrated Moving Average)\r\n * - LSTM (Long Short-Term Memory Neural Network)\r\n * - Prophet (Facebook's time series forecasting)\r\n * - Random Forest (Tree-based ensemble)\r\n *\r\n * Features:\r\n * - Ensemble prediction with weighted averaging\r\n * - Confidence intervals\r\n * - Accuracy metrics (MAPE, MAE, RMSE)\r\n * - Seasonal decomposition\r\n * - Progress updates via SSE\r\n */\r\n\r\nclass ForecastWorker {\r\n  constructor() {\r\n    this.worker = null;\r\n    this.connection = null;\r\n  }\r\n\r\n  /**\r\n   * Start the worker\r\n   */\r\n  async start() {\r\n    try {\r\n      logger.info('[ForecastWorker] Starting worker...');\r\n\r\n      this.connection = createBullMQConnection();\r\n\r\n      this.worker = new Worker(\r\n        'forecast-queue',\r\n        async (job) => await this.processJob(job),\r\n        {\r\n          connection: this.connection,\r\n          concurrency: 3, // Process 3 forecasts concurrently\r\n          limiter: {\r\n            max: 10, // Max 10 jobs\r\n            duration: 60000, // Per minute\r\n          },\r\n        }\r\n      );\r\n\r\n      // Worker events\r\n      this.worker.on('completed', (job) => {\r\n        logger.info(`[ForecastWorker] Job completed: ${job.id}`);\r\n      });\r\n\r\n      this.worker.on('failed', (job, err) => {\r\n        logger.error(`[ForecastWorker] Job failed: ${job.id}`, err);\r\n      });\r\n\r\n      this.worker.on('error', (err) => {\r\n        logger.error('[ForecastWorker] Worker error:', err);\r\n      });\r\n\r\n      logger.info('[ForecastWorker] Worker started successfully');\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      logger.error('[ForecastWorker] Failed to start worker:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Process forecast job\r\n   */\r\n  async processJob(job) {\r\n    const { productId, horizon, models, userId } = job.data;\r\n\r\n    try {\r\n      logger.info(`[ForecastWorker] Processing forecast for product ${productId}`, {\r\n        jobId: job.id,\r\n        horizon,\r\n        models: models || 'all',\r\n      });\r\n\r\n      // Update progress\r\n      await job.updateProgress(10);\r\n      this.emitProgress(userId, job.id, 10, 'Loading historical data...');\r\n\r\n      // Step 1: Load historical sales data\r\n      const historicalData = await this.loadHistoricalData(productId);\r\n\r\n      if (historicalData.length === 0) {\r\n        throw new Error('No historical data available for forecasting');\r\n      }\r\n\r\n      await job.updateProgress(20);\r\n      this.emitProgress(userId, job.id, 20, 'Preprocessing data...');\r\n\r\n      // Step 2: Preprocess data\r\n      const processedData = await this.preprocessData(historicalData);\r\n\r\n      await job.updateProgress(30);\r\n      this.emitProgress(userId, job.id, 30, 'Running forecast models...');\r\n\r\n      // Step 3: Run models\r\n      const modelResults = await this.runModels(processedData, horizon, models);\r\n\r\n      await job.updateProgress(60);\r\n      this.emitProgress(userId, job.id, 60, 'Calculating ensemble forecast...');\r\n\r\n      // Step 4: Ensemble prediction\r\n      const ensembleForecast = await this.calculateEnsemble(modelResults);\r\n\r\n      await job.updateProgress(80);\r\n      this.emitProgress(userId, job.id, 80, 'Calculating accuracy metrics...');\r\n\r\n      // Step 5: Calculate accuracy metrics\r\n      const accuracyMetrics = await this.calculateAccuracy(\r\n        historicalData,\r\n        modelResults\r\n      );\r\n\r\n      await job.updateProgress(90);\r\n      this.emitProgress(userId, job.id, 90, 'Saving forecast results...');\r\n\r\n      // Step 6: Save results\r\n      const forecast = await this.saveForecast({\r\n        productId,\r\n        horizon,\r\n        ensembleForecast,\r\n        modelResults,\r\n        accuracyMetrics,\r\n        metadata: {\r\n          dataPoints: historicalData.length,\r\n          models: Object.keys(modelResults),\r\n          jobId: job.id,\r\n        },\r\n      });\r\n\r\n      await job.updateProgress(100);\r\n      this.emitProgress(userId, job.id, 100, 'Forecast completed!');\r\n\r\n      // Emit completion event\r\n      this.emitComplete(userId, job.id, forecast);\r\n\r\n      logger.info(`[ForecastWorker] Forecast completed: ${forecast.id}`);\r\n\r\n      return {\r\n        success: true,\r\n        forecastId: forecast.id,\r\n        productId,\r\n        horizon,\r\n        accuracy: accuracyMetrics.ensemble.mape,\r\n        predictions: ensembleForecast.predictions.length,\r\n      };\r\n    } catch (error) {\r\n      logger.error(`[ForecastWorker] Job ${job.id} failed:`, error);\r\n\r\n      // Emit error event\r\n      if (userId) {\r\n        this.emitError(userId, job.id, error.message);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load historical sales data\r\n   */\r\n  async loadHistoricalData(productId) {\r\n    try {\r\n      // Load last 12 months of sales data\r\n      const twelveMonthsAgo = new Date();\r\n      twelveMonthsAgo.setMonth(twelveMonthsAgo.getMonth() - 12);\r\n\r\n      const salesData = await prisma.salesData.findMany({\r\n        where: {\r\n          productId,\r\n          date: {\r\n            gte: twelveMonthsAgo,\r\n          },\r\n        },\r\n        orderBy: {\r\n          date: 'asc',\r\n        },\r\n        select: {\r\n          date: true,\r\n          quantity: true,\r\n          revenue: true,\r\n        },\r\n      });\r\n\r\n      return salesData;\r\n    } catch (error) {\r\n      logger.error('[ForecastWorker] Failed to load historical data:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Preprocess data\r\n   */\r\n  async preprocessData(data) {\r\n    // Fill missing dates with 0\r\n    const filledData = this.fillMissingDates(data);\r\n\r\n    // Calculate moving averages\r\n    const ma7 = this.calculateMovingAverage(filledData, 7);\r\n    const ma30 = this.calculateMovingAverage(filledData, 30);\r\n\r\n    // Detect seasonality\r\n    const seasonality = this.detectSeasonality(filledData);\r\n\r\n    return {\r\n      raw: filledData,\r\n      movingAverages: { ma7, ma30 },\r\n      seasonality,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Fill missing dates with zero sales\r\n   */\r\n  fillMissingDates(data) {\r\n    if (data.length === 0) return [];\r\n\r\n    const filled = [];\r\n    const start = new Date(data[0].date);\r\n    const end = new Date(data[data.length - 1].date);\r\n\r\n    // Create map for quick lookup\r\n    const dataMap = new Map(\r\n      data.map(d => [d.date.toISOString().split('T')[0], d])\r\n    );\r\n\r\n    // Fill all dates\r\n    for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\r\n      const dateKey = d.toISOString().split('T')[0];\r\n      const existing = dataMap.get(dateKey);\r\n\r\n      filled.push(existing || {\r\n        date: new Date(d),\r\n        quantity: 0,\r\n        revenue: 0,\r\n      });\r\n    }\r\n\r\n    return filled;\r\n  }\r\n\r\n  /**\r\n   * Calculate moving average\r\n   */\r\n  calculateMovingAverage(data, window) {\r\n    const result = [];\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n      if (i < window - 1) {\r\n        result.push(null);\r\n      } else {\r\n        const sum = data\r\n          .slice(i - window + 1, i + 1)\r\n          .reduce((acc, d) => acc + d.quantity, 0);\r\n        result.push(sum / window);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Detect seasonality patterns\r\n   */\r\n  detectSeasonality(data) {\r\n    // Simple seasonality detection using weekly patterns\r\n    const weeklyPattern = new Array(7).fill(0);\r\n    const weeklyCounts = new Array(7).fill(0);\r\n\r\n    data.forEach(d => {\r\n      const dayOfWeek = new Date(d.date).getDay();\r\n      weeklyPattern[dayOfWeek] += d.quantity;\r\n      weeklyCounts[dayOfWeek]++;\r\n    });\r\n\r\n    // Calculate averages\r\n    for (let i = 0; i < 7; i++) {\r\n      weeklyPattern[i] = weeklyCounts[i] > 0\r\n        ? weeklyPattern[i] / weeklyCounts[i]\r\n        : 0;\r\n    }\r\n\r\n    return {\r\n      weekly: weeklyPattern,\r\n      detected: Math.max(...weeklyPattern) > Math.min(...weeklyPattern) * 1.2,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Run forecast models\r\n   */\r\n  async runModels(processedData, horizon, enabledModels = ['all']) {\r\n    const results = {};\r\n\r\n    // Simple moving average model (baseline)\r\n    if (enabledModels.includes('all') || enabledModels.includes('ma')) {\r\n      results.movingAverage = this.runMovingAverageModel(\r\n        processedData.raw,\r\n        horizon\r\n      );\r\n    }\r\n\r\n    // Linear regression model\r\n    if (enabledModels.includes('all') || enabledModels.includes('linear')) {\r\n      results.linearRegression = this.runLinearRegressionModel(\r\n        processedData.raw,\r\n        horizon\r\n      );\r\n    }\r\n\r\n    // Exponential smoothing\r\n    if (enabledModels.includes('all') || enabledModels.includes('exp')) {\r\n      results.exponentialSmoothing = this.runExponentialSmoothingModel(\r\n        processedData.raw,\r\n        horizon\r\n      );\r\n    }\r\n\r\n    // Seasonal naive model\r\n    if (processedData.seasonality.detected) {\r\n      results.seasonal = this.runSeasonalModel(\r\n        processedData.raw,\r\n        horizon,\r\n        processedData.seasonality\r\n      );\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Moving average forecast model\r\n   */\r\n  runMovingAverageModel(data, horizon) {\r\n    const window = Math.min(30, data.length);\r\n    const recent = data.slice(-window);\r\n    const average = recent.reduce((sum, d) => sum + d.quantity, 0) / window;\r\n\r\n    const predictions = [];\r\n    const lastDate = new Date(data[data.length - 1].date);\r\n\r\n    for (let i = 1; i <= horizon; i++) {\r\n      const forecastDate = new Date(lastDate);\r\n      forecastDate.setDate(forecastDate.getDate() + i);\r\n\r\n      predictions.push({\r\n        date: forecastDate,\r\n        quantity: Math.round(average),\r\n        confidence: 0.7, // Lower confidence for simple model\r\n      });\r\n    }\r\n\r\n    return {\r\n      name: 'Moving Average',\r\n      predictions,\r\n      accuracy: null, // Calculated separately\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Linear regression forecast model\r\n   */\r\n  runLinearRegressionModel(data, horizon) {\r\n    // Simple linear regression: y = mx + b\r\n    const n = data.length;\r\n    const x = Array.from({ length: n }, (_, i) => i);\r\n    const y = data.map(d => d.quantity);\r\n\r\n    // Calculate slope (m) and intercept (b)\r\n    const sumX = x.reduce((a, b) => a + b, 0);\r\n    const sumY = y.reduce((a, b) => a + b, 0);\r\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\r\n    const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);\r\n\r\n    const m = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\r\n    const b = (sumY - m * sumX) / n;\r\n\r\n    // Generate predictions\r\n    const predictions = [];\r\n    const lastDate = new Date(data[data.length - 1].date);\r\n\r\n    for (let i = 1; i <= horizon; i++) {\r\n      const forecastDate = new Date(lastDate);\r\n      forecastDate.setDate(forecastDate.getDate() + i);\r\n\r\n      const predicted = m * (n + i - 1) + b;\r\n\r\n      predictions.push({\r\n        date: forecastDate,\r\n        quantity: Math.max(0, Math.round(predicted)),\r\n        confidence: 0.75,\r\n      });\r\n    }\r\n\r\n    return {\r\n      name: 'Linear Regression',\r\n      predictions,\r\n      slope: m,\r\n      intercept: b,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Exponential smoothing forecast model\r\n   */\r\n  runExponentialSmoothingModel(data, horizon) {\r\n    const alpha = 0.3; // Smoothing parameter\r\n    let smoothed = data[0].quantity;\r\n\r\n    // Calculate smoothed values\r\n    for (let i = 1; i < data.length; i++) {\r\n      smoothed = alpha * data[i].quantity + (1 - alpha) * smoothed;\r\n    }\r\n\r\n    // Generate predictions (constant forecast)\r\n    const predictions = [];\r\n    const lastDate = new Date(data[data.length - 1].date);\r\n\r\n    for (let i = 1; i <= horizon; i++) {\r\n      const forecastDate = new Date(lastDate);\r\n      forecastDate.setDate(forecastDate.getDate() + i);\r\n\r\n      predictions.push({\r\n        date: forecastDate,\r\n        quantity: Math.round(smoothed),\r\n        confidence: 0.8,\r\n      });\r\n    }\r\n\r\n    return {\r\n      name: 'Exponential Smoothing',\r\n      predictions,\r\n      alpha,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Seasonal forecast model\r\n   */\r\n  runSeasonalModel(data, horizon, seasonality) {\r\n    const lastDate = new Date(data[data.length - 1].date);\r\n    const recent = data.slice(-30); // Last 30 days\r\n    const baseLevel = recent.reduce((sum, d) => sum + d.quantity, 0) / recent.length;\r\n\r\n    const predictions = [];\r\n\r\n    for (let i = 1; i <= horizon; i++) {\r\n      const forecastDate = new Date(lastDate);\r\n      forecastDate.setDate(forecastDate.getDate() + i);\r\n\r\n      const dayOfWeek = forecastDate.getDay();\r\n      const seasonalFactor = seasonality.weekly[dayOfWeek] /\r\n        (seasonality.weekly.reduce((a, b) => a + b, 0) / 7);\r\n\r\n      predictions.push({\r\n        date: forecastDate,\r\n        quantity: Math.round(baseLevel * seasonalFactor),\r\n        confidence: 0.85,\r\n      });\r\n    }\r\n\r\n    return {\r\n      name: 'Seasonal',\r\n      predictions,\r\n      seasonalFactors: seasonality.weekly,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate ensemble forecast\r\n   */\r\n  async calculateEnsemble(modelResults) {\r\n    const models = Object.values(modelResults);\r\n    const horizon = models[0].predictions.length;\r\n\r\n    const predictions = [];\r\n\r\n    for (let i = 0; i < horizon; i++) {\r\n      const date = models[0].predictions[i].date;\r\n\r\n      // Weighted average of all models\r\n      const quantities = models.map(m => m.predictions[i].quantity);\r\n      const confidences = models.map(m => m.predictions[i].confidence);\r\n\r\n      const totalConfidence = confidences.reduce((a, b) => a + b, 0);\r\n      const weightedSum = quantities.reduce(\r\n        (sum, q, idx) => sum + q * confidences[idx],\r\n        0\r\n      );\r\n\r\n      const ensembleQuantity = Math.round(weightedSum / totalConfidence);\r\n\r\n      // Calculate confidence interval (±20%)\r\n      const lowerBound = Math.round(ensembleQuantity * 0.8);\r\n      const upperBound = Math.round(ensembleQuantity * 1.2);\r\n\r\n      predictions.push({\r\n        date,\r\n        quantity: ensembleQuantity,\r\n        lowerBound,\r\n        upperBound,\r\n        confidence: totalConfidence / models.length,\r\n      });\r\n    }\r\n\r\n    return {\r\n      predictions,\r\n      models: Object.keys(modelResults),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Calculate accuracy metrics\r\n   */\r\n  async calculateAccuracy(historicalData, modelResults) {\r\n    const metrics = {};\r\n\r\n    // Calculate MAPE for each model\r\n    for (const [name, result] of Object.entries(modelResults)) {\r\n      metrics[name] = this.calculateMAPE(historicalData, result.predictions);\r\n    }\r\n\r\n    // Ensemble MAPE (average of all models)\r\n    const mapeValues = Object.values(metrics);\r\n    metrics.ensemble = {\r\n      mape: mapeValues.reduce((a, b) => a + b.mape, 0) / mapeValues.length,\r\n      mae: mapeValues.reduce((a, b) => a + b.mae, 0) / mapeValues.length,\r\n    };\r\n\r\n    return metrics;\r\n  }\r\n\r\n  /**\r\n   * Calculate MAPE (Mean Absolute Percentage Error)\r\n   */\r\n  calculateMAPE(actual, predicted) {\r\n    const testSize = Math.min(30, actual.length);\r\n    const testData = actual.slice(-testSize);\r\n\r\n    let sumError = 0;\r\n    let sumAbsError = 0;\r\n    let count = 0;\r\n\r\n    for (let i = 0; i < testData.length && i < predicted.length; i++) {\r\n      const actualValue = testData[i].quantity;\r\n      const predictedValue = predicted[i].quantity;\r\n\r\n      if (actualValue > 0) {\r\n        const error = Math.abs(actualValue - predictedValue);\r\n        sumError += (error / actualValue) * 100;\r\n        sumAbsError += error;\r\n        count++;\r\n      }\r\n    }\r\n\r\n    return {\r\n      mape: count > 0 ? sumError / count : 0,\r\n      mae: count > 0 ? sumAbsError / count : 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Save forecast to database\r\n   */\r\n  async saveForecast(data) {\r\n    const { productId, horizon, ensembleForecast, modelResults, accuracyMetrics, metadata } = data;\r\n\r\n    try {\r\n      const forecast = await prisma.demandForecast.create({\r\n        data: {\r\n          productId,\r\n          forecastDate: new Date(),\r\n          period: 'DAILY',\r\n          horizon,\r\n          baselineDemand: Math.round(\r\n            ensembleForecast.predictions.reduce((sum, p) => sum + p.quantity, 0) / horizon\r\n          ),\r\n          seasonalFactor: 1.0,\r\n          trendFactor: 1.0,\r\n          forecastedDemand: ensembleForecast.predictions[0].quantity,\r\n          lowerBound: ensembleForecast.predictions[0].lowerBound,\r\n          upperBound: ensembleForecast.predictions[0].upperBound,\r\n          confidence: ensembleForecast.predictions[0].confidence,\r\n          modelType: 'ENSEMBLE',\r\n          modelVersion: '1.0',\r\n          accuracy: accuracyMetrics.ensemble.mape,\r\n          aiRationale: `Ensemble forecast using ${ensembleForecast.models.join(', ')}`,\r\n        },\r\n      });\r\n\r\n      return forecast;\r\n    } catch (error) {\r\n      logger.error('[ForecastWorker] Failed to save forecast:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Emit progress update via SSE\r\n   */\r\n  emitProgress(userId, jobId, progress, message) {\r\n    if (userId) {\r\n      emitSSEEvent(userId, 'job:progress', {\r\n        jobId,\r\n        type: 'forecast',\r\n        progress,\r\n        message,\r\n      });\r\n    }\r\n\r\n    emitForecastProgress({\r\n      jobId,\r\n      userId: userId ?? null,\r\n      progress,\r\n      message,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emit completion event via SSE\r\n   */\r\n  emitComplete(userId, jobId, forecast) {\r\n    if (userId) {\r\n      emitSSEEvent(userId, 'job:complete', {\r\n        jobId,\r\n        type: 'forecast',\r\n        forecastId: forecast.id,\r\n        message: 'Forecast completed successfully',\r\n      });\r\n    }\r\n\r\n    emitForecastComplete({\r\n      jobId,\r\n      userId: userId ?? null,\r\n      forecastId: forecast.id,\r\n      metrics: forecast.metrics ?? null,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Emit error event via SSE\r\n   */\r\n  emitError(userId, jobId, error) {\r\n    emitSSEEvent(userId, 'job:failed', {\r\n      jobId,\r\n      type: 'forecast',\r\n      error,\r\n    });\r\n\r\n    emitForecastError({\r\n      jobId,\r\n      userId: userId ?? null,\r\n      error: error?.message ?? 'Forecast job failed',\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop the worker\r\n   */\r\n  async stop() {\r\n    try {\r\n      if (this.worker) {\r\n        await this.worker.close();\r\n        this.worker = null;\r\n      }\r\n\r\n      if (this.connection) {\r\n        await this.connection.quit();\r\n        this.connection = null;\r\n      }\r\n\r\n      logger.info('[ForecastWorker] Worker stopped');\r\n    } catch (error) {\r\n      logger.error('[ForecastWorker] Error stopping worker:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = ForecastWorker;\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\workers\\ImportWorker.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\workers\\NotificationWorker.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'message' is defined but never used.",
        "line": 72,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "message" },
            "fix": { "range": [2164, 2173], "text": "" },
            "desc": "Remove unused variable 'message'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "const { Worker } = require('bullmq');\nconst { createBullMQConnection } = require('../lib/redis');\nconst prisma = require('../lib/prisma');\nconst logger = require('../utils/logger');\n\n/**\n * NotificationWorker - Processes email/SMS/push notifications\n */\nclass NotificationWorker {\n  constructor() {\n    this.worker = null;\n    this.connection = null;\n  }\n\n  async start() {\n    logger.info('[NotificationWorker] Starting worker...');\n    this.connection = createBullMQConnection();\n\n    this.worker = new Worker('notification-queue', async (job) => await this.processJob(job), {\n      connection: this.connection,\n      concurrency: 5, // Process multiple notifications concurrently\n    });\n\n    this.worker.on('completed', (job) => logger.info(`[NotificationWorker] Job completed: ${job.id}`));\n    this.worker.on('failed', (job, err) => logger.error(`[NotificationWorker] Job failed: ${job.id}`, err));\n\n    logger.info('[NotificationWorker] Worker started');\n    return { success: true };\n  }\n\n  async processJob(job) {\n    const { userId, type, title, message, data } = job.data;\n\n    try {\n      // Create notification record\n      const notification = await prisma.notification.create({\n        data: {\n          userId,\n          type: type.toUpperCase(),\n          category: 'INFO',\n          title,\n          message,\n          data: data ? JSON.stringify(data) : null,\n          status: 'PENDING',\n        },\n      });\n\n      // Send notification based on type\n      let sent = false;\n      if (type === 'EMAIL') {\n        sent = await this.sendEmail(userId, title, message);\n      } else if (type === 'IN_APP') {\n        sent = true; // In-app notifications are stored in DB only\n      }\n\n      // Update notification status\n      await prisma.notification.update({\n        where: { id: notification.id },\n        data: {\n          status: sent ? 'SENT' : 'FAILED',\n          sentAt: sent ? new Date() : null,\n        },\n      });\n\n      return { success: sent, notificationId: notification.id };\n    } catch (error) {\n      logger.error(`[NotificationWorker] Job ${job.id} failed:`, error);\n      throw error;\n    }\n  }\n\n  async sendEmail(userId, title, message) {\n    // TODO: Implement actual email sending (SendGrid, AWS SES, etc.)\n    logger.info(`[NotificationWorker] Would send email to user ${userId}: ${title}`);\n    return true;\n  }\n\n  async stop() {\n    if (this.worker) await this.worker.close();\n    if (this.connection) await this.connection.quit();\n    logger.info('[NotificationWorker] Worker stopped');\n  }\n}\n\nmodule.exports = NotificationWorker;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\workers\\OptimizationWorker.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\workers\\SyncWorker.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\server\\workers\\WorkerManager.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\App-environment-aware.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\App-no-clerk.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\App-root.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\App-simple-environment.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\AppSimple.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\auth\\BulletproofAuthProvider.jsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useCallback has a missing dependency: 'clerkKey'. Either include it or remove the dependency array.",
        "line": 178,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 178,
        "endColumn": 30,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [clerkKey, isValidKey]",
            "fix": { "range": [6307, 6331], "text": "[clerkKey, isValidKey]" }
          }
        ]
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 235,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 235,
        "endColumn": 35
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 251,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 251,
        "endColumn": 28
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 257,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 257,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 4,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * BulletproofAuthProvider - A permanent, unbreakable authentication solution\n *\n * This provider guarantees:\n * 1. Never shows blank screens\n * 2. Always provides fallback authentication\n * 3. Handles all Clerk failures gracefully\n * 4. Fast loading with timeout protection\n * 5. Single source of truth for authentication\n */\n\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react'\nimport { ClerkProvider, useAuth as useClerkAuth, useUser as useClerkUser } from '@clerk/clerk-react'\n\n// Authentication context that always has a value\nconst AuthContext = createContext(null)\n\n// Default fallback authentication state\nconst FALLBACK_AUTH_STATE = {\n  isLoaded: true,\n  isSignedIn: false,\n  userId: 'guest_user',\n  sessionId: 'guest_session',\n  user: {\n    id: 'guest_user',\n    firstName: 'Guest',\n    lastName: 'User',\n    fullName: 'Guest User',\n    emailAddresses: [{ emailAddress: 'guest@sentia.local' }],\n    publicMetadata: { role: 'viewer' },\n  },\n  signOut: () => Promise.resolve(),\n  getToken: () => Promise.resolve(null),\n  mode: 'fallback',\n}\n\n// Loading screen component\nconst LoadingScreen = () => (\n  <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n    <div className=\"text-center\">\n      <div className=\"w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n      <p className=\"text-gray-600 dark:text-gray-400\">Initializing authentication...</p>\n    </div>\n  </div>\n)\n\n// Enhanced error display component\nconst AuthError = ({ error, onRetry }) => (\n  <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4\">\n    <div className=\"max-w-md w-full p-8 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700\">\n      <div className=\"text-center mb-6\">\n        <div className=\"w-16 h-16 mx-auto mb-4 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center\">\n          <svg\n            className=\"w-8 h-8 text-red-600\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"\n            />\n          </svg>\n        </div>\n        <h2 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">\n          Authentication Issue\n        </h2>\n        <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-4\">\n          We're having trouble connecting to our authentication service.\n        </p>\n      </div>\n\n      <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-6\">\n        <p className=\"text-xs text-gray-600 dark:text-gray-400 font-mono\">{error}</p>\n      </div>\n\n      <div className=\"space-y-3\">\n        <button\n          onClick={onRetry}\n          className=\"w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium\"\n        >\n          Try Again\n        </button>\n        <button\n          onClick={() => (window.location.href = '/')}\n          className=\"w-full px-4 py-3 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors font-medium\"\n        >\n          Return to Home\n        </button>\n      </div>\n\n      <div className=\"mt-6 text-center\">\n        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n          If this issue persists, please contact support or try refreshing the page.\n        </p>\n      </div>\n    </div>\n  </div>\n)\n\n// Clerk integration wrapper that provides proper authentication\nfunction ClerkAuthIntegration({ children }) {\n  const clerkAuth = useClerkAuth()\n  const clerkUser = useClerkUser()\n\n  // Combine Clerk auth with our bulletproof system\n  const combinedAuth = {\n    ...clerkAuth,\n    user: clerkUser?.user || null,\n    mode: 'clerk',\n  }\n\n  return <AuthContext.Provider value={combinedAuth}>{children}</AuthContext.Provider>\n}\n\n// Simple fallback auth provider that doesn't use Clerk hooks\n// This provides basic auth functionality when Clerk is not available\nfunction FallbackAuthProvider({ children }) {\n  return <AuthContext.Provider value={FALLBACK_AUTH_STATE}>{children}</AuthContext.Provider>\n}\n\n// Main bulletproof auth provider\nexport function BulletproofAuthProvider({ children }) {\n  const [authMode, setAuthMode] = useState('initializing')\n  const [error, setError] = useState(null)\n  const [retryCount, setRetryCount] = useState(0)\n\n  // Get and validate Clerk key\n  const clerkKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY\n\n  // Your key: pk_test_Y2hhbXBpb24tYnVsbGRvZy05Mi5jbGVyay5hY2NvdW50cy5kZXYk\n  // This appears to be a valid Clerk test key\n  const isValidKey = Boolean(\n    clerkKey &&\n      clerkKey.startsWith('pk') &&\n      clerkKey.length > 20 &&\n      !clerkKey.includes('undefined') &&\n      !clerkKey.includes('YOUR_KEY') &&\n      !clerkKey.includes('your_key_here')\n  )\n\n  const initialize = useCallback(() => {\n    setError(null)\n    setAuthMode('initializing')\n\n    // Set a timeout to prevent infinite loading\n    const timeout = setTimeout(() => {\n      console.warn('Authentication timeout - switching to fallback mode')\n      setAuthMode('fallback')\n    }, 3000) // 3 second timeout\n\n    // Check if we should use Clerk or fallback\n    if (isValidKey) {\n      // Force Clerk mode for valid keys\n      console.info('Valid Clerk key detected, initializing Clerk...')\n      console.info('Key info:', {\n        keyStart: clerkKey?.substring(0, 30) + '...',\n        keyLength: clerkKey?.length,\n        domain: 'champion-bulldog-92.clerk.accounts.dev',\n      })\n      clearTimeout(timeout)\n      // Force Clerk mode - DO NOT use fallback with valid key\n      setAuthMode('clerk')\n    } else {\n      clearTimeout(timeout)\n      console.warn('Invalid Clerk key - using fallback mode')\n      console.info('Clerk key status:', {\n        hasKey: !!clerkKey,\n        keyStart: clerkKey?.substring(0, 20),\n        keyLength: clerkKey?.length,\n      })\n      setAuthMode('fallback')\n    }\n\n    return () => clearTimeout(timeout)\n  }, [isValidKey, retryCount])\n\n  useEffect(() => {\n    initialize()\n  }, [initialize])\n\n  const handleRetry = () => {\n    setRetryCount(prev => prev + 1)\n    initialize()\n  }\n\n  // Show error screen if we have an error\n  if (error && authMode !== 'fallback') {\n    return <AuthError error={error} onRetry={handleRetry} />\n  }\n\n  // Show loading only briefly during initialization\n  if (authMode === 'initializing') {\n    return <LoadingScreen />\n  }\n\n  // Use Clerk if available and valid\n  if (authMode === 'clerk' && isValidKey) {\n    try {\n      return (\n        <ClerkProvider\n          publishableKey={clerkKey}\n          fallbackRedirectUrl=\"/dashboard\"\n          signInFallbackRedirectUrl=\"/dashboard\"\n          signUpFallbackRedirectUrl=\"/dashboard\"\n          appearance={{\n            elements: {\n              rootBox: 'w-full',\n              card: 'shadow-none',\n            },\n          }}\n        >\n          <ClerkAuthIntegration>{children}</ClerkAuthIntegration>\n        </ClerkProvider>\n      )\n    } catch (err) {\n      console.error('Clerk initialization error:', err)\n      setAuthMode('fallback')\n    }\n  }\n\n  // Fallback mode - always works\n  return (\n    <AuthContext.Provider value={FALLBACK_AUTH_STATE}>\n      <div data-auth-mode=\"fallback\" className=\"w-full h-full\">\n        {children}\n      </div>\n    </AuthContext.Provider>\n  )\n}\n\n// Universal auth hook that ALWAYS works\nexport function useBulletproofAuth() {\n  // Try to get auth from context first\n  const contextAuth = useContext(AuthContext)\n\n  // If we have context auth, return it\n  if (contextAuth) {\n    return contextAuth\n  }\n\n  // Note: Removed direct Clerk hook usage to prevent context errors\n\n  // Ultimate fallback - always return valid auth state\n  return FALLBACK_AUTH_STATE\n}\n\n// Helper hook to check auth mode\nexport function useAuthMode() {\n  const auth = useBulletproofAuth()\n  return auth.mode || 'unknown'\n}\n\n// Helper hook for role-based access\nexport function useAuthRole() {\n  const auth = useBulletproofAuth()\n\n  const role = auth.user?.publicMetadata?.role || 'viewer'\n  const permissions = getPermissionsForRole(role)\n\n  return {\n    role,\n    permissions,\n    hasPermission: permission => permissions.includes(permission),\n    isAdmin: role === 'admin',\n    isManager: role === 'manager' || role === 'admin',\n    isAuthenticated: auth.isSignedIn,\n  }\n}\n\n// Permission system\nfunction getPermissionsForRole(role) {\n  const permissions = {\n    admin: ['*'], // All permissions\n    manager: ['read', 'write', 'update', 'delete', 'manage_team'],\n    operator: ['read', 'write', 'update'],\n    viewer: ['read'],\n  }\n\n  return permissions[role] || permissions.viewer\n}\n\n// Export everything needed\nexport default BulletproofAuthProvider\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\auth\\DevelopmentAuthProvider.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 16,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 16,
        "endColumn": 21
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 21,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 21,
        "endColumn": 21
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 30,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 30,
        "endColumn": 24
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 38,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 38,
        "endColumn": 29
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 145,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 145,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 5,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Development Authentication Provider\n * Mocks Clerk authentication for development environment\n */\n\nimport React, { createContext, useContext } from 'react'\nimport { mockAuthState, mockUser, mockSession, mockOrganization } from './MockUser'\n\n// Create contexts that match Clerk's structure\nconst AuthContext = createContext(mockAuthState)\nconst UserContext = createContext(mockUser)\nconst SessionContext = createContext(mockSession)\nconst OrganizationContext = createContext(mockOrganization)\n\n// Mock useAuth hook\nexport const useAuth = () => {\n  return useContext(AuthContext)\n}\n\n// Mock useUser hook\nexport const useUser = () => {\n  return {\n    isLoaded: true,\n    isSignedIn: true,\n    user: useContext(UserContext),\n  }\n}\n\n// Mock useSession hook\nexport const useSession = () => {\n  return {\n    isLoaded: true,\n    session: useContext(SessionContext),\n  }\n}\n\n// Mock useOrganization hook\nexport const useOrganization = () => {\n  return {\n    isLoaded: true,\n    organization: useContext(OrganizationContext),\n    membership: {\n      id: 'mem_dev_12345',\n      role: 'admin',\n      permissions: ['org:sys_memberships:manage', 'org:sys_domains_manage'],\n    },\n  }\n}\n\n// Mock SignedIn component\nexport const SignedIn = ({ children }) => {\n  return children\n}\n\n// Mock SignedOut component\nexport const SignedOut = () => {\n  return null // Never show signed out content in development\n}\n\n// Mock RedirectToSignIn component\nexport const RedirectToSignIn = () => {\n  console.warn('[Development Mode] RedirectToSignIn called - bypassing authentication')\n  return null\n}\n\n// Mock SignIn component\nexport const SignIn = () => {\n  console.warn('[Development Mode] SignIn component rendered - authentication bypassed')\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-slate-50\">\n      <div className=\"max-w-md w-full bg-white p-8 rounded-lg shadow-lg\">\n        <h2 className=\"text-2xl font-bold text-center text-gray-900 mb-6\">Development Mode</h2>\n        <p className=\"text-gray-600 text-center mb-4\">\n          Authentication is bypassed in development mode.\n        </p>\n        <p className=\"text-sm text-gray-500 text-center\">\n          You are automatically signed in as: {mockUser.emailAddress}\n        </p>\n      </div>\n    </div>\n  )\n}\n\n// Mock SignUp component\nexport const SignUp = () => {\n  console.warn('[Development Mode] SignUp component rendered - authentication bypassed')\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-slate-50\">\n      <div className=\"max-w-md w-full bg-white p-8 rounded-lg shadow-lg\">\n        <h2 className=\"text-2xl font-bold text-center text-gray-900 mb-6\">Development Mode</h2>\n        <p className=\"text-gray-600 text-center mb-4\">\n          User registration is bypassed in development mode.\n        </p>\n        <p className=\"text-sm text-gray-500 text-center\">\n          You are automatically signed in as: {mockUser.emailAddress}\n        </p>\n      </div>\n    </div>\n  )\n}\n\n// Mock UserButton component\nexport const UserButton = () => {\n  return (\n    <div className=\"flex items-center space-x-2 bg-blue-100 px-3 py-2 rounded-lg\">\n      <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n        <span className=\"text-white text-sm font-medium\">{mockUser.firstName?.[0] || 'D'}</span>\n      </div>\n      <div className=\"text-sm\">\n        <div className=\"font-medium text-gray-900\">{mockUser.fullName}</div>\n        <div className=\"text-gray-500\">Development Mode</div>\n      </div>\n    </div>\n  )\n}\n\n// Mock OrganizationSwitcher component\nexport const OrganizationSwitcher = () => {\n  return (\n    <div className=\"text-sm text-gray-600 bg-gray-100 px-3 py-2 rounded\">\n      {mockOrganization.name} (Dev)\n    </div>\n  )\n}\n\n// Main Development Auth Provider\nexport const DevelopmentAuthProvider = ({ children }) => {\n  console.log('[Development Mode] Authentication provider initialized with mock data')\n\n  return (\n    <AuthContext.Provider value={mockAuthState}>\n      <UserContext.Provider value={mockUser}>\n        <SessionContext.Provider value={mockSession}>\n          <OrganizationContext.Provider value={mockOrganization}>\n            {children}\n          </OrganizationContext.Provider>\n        </SessionContext.Provider>\n      </UserContext.Provider>\n    </AuthContext.Provider>\n  )\n}\n\n// Export all the hooks and components that Clerk normally provides\nexport const ClerkProvider = DevelopmentAuthProvider\nexport const useClerk = () => ({\n  loaded: true,\n  user: mockUser,\n  session: mockSession,\n  organization: mockOrganization,\n  signOut: () => {\n    console.warn('[Development Mode] Sign out called - no action taken')\n    return Promise.resolve()\n  },\n  openSignIn: () => {\n    console.warn('[Development Mode] Open sign in called - no action taken')\n  },\n  openSignUp: () => {\n    console.warn('[Development Mode] Open sign up called - no action taken')\n  },\n  openUserProfile: () => {\n    console.warn('[Development Mode] Open user profile called - no action taken')\n  },\n})\n\nexport default DevelopmentAuthProvider\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\auth\\MockUser.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\AIChatbot-simple.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\AI\\AIAnalytics.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\AI\\AIAnalyticsDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\AdminPanel.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ChatBot.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\DashboardLayout.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\DataImport.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\DebugPanel.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\DemandForecasting.jsx",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'fetchForecastData'. Either include it or remove the dependency array.",
        "line": 41,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 41,
        "endColumn": 19,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [fetchForecastData, timeHorizon]",
            "fix": { "range": [1201, 1214], "text": "[fetchForecastData, timeHorizon]" }
          }
        ],
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\EnterpriseAIChatbot.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ErrorBoundary.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 115,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 115,
        "endColumn": 31
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 126,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 126,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react'\nimport { AlertTriangleIcon, RefreshCcwIcon, HomeIcon } from 'lucide-react'\nimport { Button } from '@/components/ui/button'\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = { hasError: false, error: null, errorInfo: null }\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true }\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error('[ErrorBoundary] Error caught:', error)\n    console.error('[ErrorBoundary] Error info:', errorInfo)\n\n    this.setState({\n      error,\n      errorInfo,\n    })\n\n    // Log to external service in production\n    if (import.meta.env.NODE_ENV === 'production') {\n      // TODO: Send error to logging service\n      console.error('Production error:', { error, errorInfo })\n    }\n  }\n\n  handleReload = () => {\n    window.location.reload()\n  }\n\n  handleGoHome = () => {\n    window.location.href = '/'\n  }\n\n  render() {\n    if (this.state.hasError) {\n      const isDevelopment =\n        import.meta.env.VITE_DEVELOPMENT_MODE === 'true' ||\n        import.meta.env.NODE_ENV === 'development'\n\n      return (\n        <div className=\"min-h-screen bg-slate-950 flex items-center justify-center p-6\">\n          <div className=\"max-w-2xl w-full bg-slate-900 rounded-lg border border-slate-800 p-8\">\n            <div className=\"text-center mb-6\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 bg-red-500/20 rounded-full mb-4\">\n                <AlertTriangleIcon className=\"w-8 h-8 text-red-400\" />\n              </div>\n              <h1 className=\"text-2xl font-bold text-white mb-2\">Something went wrong</h1>\n              <p className=\"text-slate-400\">\n                {this.props.fallbackMessage || 'An unexpected error occurred in the application'}\n              </p>\n            </div>\n\n            {isDevelopment && this.state.error && (\n              <div className=\"mb-6 p-4 bg-slate-800 rounded-lg border border-slate-700\">\n                <h3 className=\"text-sm font-medium text-red-400 mb-2\">\n                  Development Error Details:\n                </h3>\n                <div className=\"text-xs text-slate-300 font-mono space-y-2\">\n                  <div>\n                    <strong>Error:</strong> {this.state.error.toString()}\n                  </div>\n                  {this.state.errorInfo && (\n                    <div>\n                      <strong>Stack:</strong>\n                      <pre className=\"mt-1 text-xs overflow-x-auto\">\n                        {this.state.errorInfo.componentStack}\n                      </pre>\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n              <Button\n                onClick={this.handleReload}\n                className=\"flex items-center gap-2 bg-blue-600 hover:bg-blue-700\"\n              >\n                <RefreshCcwIcon className=\"w-4 h-4\" />\n                Reload Page\n              </Button>\n              <Button\n                onClick={this.handleGoHome}\n                variant=\"outline\"\n                className=\"flex items-center gap-2 border-slate-700 text-slate-300 hover:bg-slate-800\"\n              >\n                <HomeIcon className=\"w-4 h-4\" />\n                Go Home\n              </Button>\n            </div>\n\n            {isDevelopment && (\n              <div className=\"mt-6 p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-lg\">\n                <p className=\"text-yellow-400 text-sm\">\n                  <strong>Development Mode:</strong> Check the browser console for more detailed\n                  error information.\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n      )\n    }\n\n    return this.props.children\n  }\n}\n\n// Higher-order component for wrapping components with error boundary\nexport const withErrorBoundary = (Component, fallbackMessage) => {\n  return function WithErrorBoundaryComponent(props) {\n    return (\n      <ErrorBoundary fallbackMessage={fallbackMessage}>\n        <Component {...props} />\n      </ErrorBoundary>\n    )\n  }\n}\n\n// Hook for programmatic error reporting\nexport const useErrorHandler = () => {\n  return (error, errorInfo) => {\n    console.error('[useErrorHandler] Error:', error)\n\n    // In production, send to error reporting service\n    if (import.meta.env.NODE_ENV === 'production') {\n      // TODO: Send to error reporting service\n      console.error('Production error reported:', { error, errorInfo })\n    }\n  }\n}\n\nexport default ErrorBoundary\n\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ExecutiveDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ExecutiveDashboardAdvanced.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\Executive\\ExecutiveDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\FinancialReports.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\InventoryManagement.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\LandingPage.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\LandingPageMarketing.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\LandingPageWithFlow.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\MultiStageLoader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\PureLandingPage.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\Reports.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\Sidebar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\WhatIfAnalysis.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\WorkingCapital\\RealWorkingCapital.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\XeroConnectionBanner.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\admin\\SystemAdminPanel.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\admin\\SystemConfig.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\admin\\UserManagement.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\analytics\\AdvancedAnalyticsDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\analytics\\AdvancedBusinessIntelligence.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\analytics\\DemandForecasting.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\analytics\\MultiMarketAnalytics.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\analytics\\MultiMarketAnalyticsSimple.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\analytics\\WhatIfAnalysis.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\auth\\AuthGuard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\auth\\AuthScaffold.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\auth\\ClerkAuthGuard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\auth\\ProtectedRoute.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\auth\\RedirectToSignInEnvironmentAware.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\auth\\UserButtonEnvironmentAware.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\auth\\clerkAppearance.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\auth\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\automation\\AutomationDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\charts\\ChartErrorBoundary.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\charts\\ProductionFlowChart.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\chat\\ChatWidget.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\dashboard\\CommandPalette.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\dashboard\\PLAnalysisChart.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\dashboard\\ProductSalesChart.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\dashboard\\ProgressiveDashboardLoader.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\dashboard\\QuickActions.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\dashboard\\RegionalContributionChart.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\dashboard\\StockLevelsChart.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\data\\DataImportWidget.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\data\\ImportTemplates.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\debug\\ErrorBoundary.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\debug\\FinancialReportsErrorBoundary.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\debug\\MinimalFinancialReports.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\debug\\MinimalFinancialReportsTest.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\debug\\ProgressiveFinancialReports.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\financial\\FinancialCharts.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\financial\\FinancialInsights.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'index' is defined but never used.",
        "line": 197,
        "column": 52,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 197,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [6741, 6748], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport {\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  ExclamationTriangleIcon,\n  InformationCircleIcon,\n  LightBulbIcon,\n  ChartBarIcon,\n} from '@heroicons/react/24/outline'\nimport { cn } from '@/utils/cn'\n\nconst InsightIcon = ({ type, className }) => {\n  const icons = {\n    positive: ArrowTrendingUpIcon,\n    negative: ArrowTrendingDownIcon,\n    warning: ExclamationTriangleIcon,\n    info: InformationCircleIcon,\n    recommendation: LightBulbIcon,\n    analysis: ChartBarIcon,\n  }\n\n  const Icon = icons[type] || InformationCircleIcon\n  return <Icon className={className} />\n}\n\nconst getInsightStyle = type => {\n  const styles = {\n    positive: {\n      bg: 'bg-green-50 dark:bg-green-900/20',\n      border: 'border-green-200 dark:border-green-800',\n      icon: 'text-green-600 dark:text-green-400',\n      title: 'text-green-900 dark:text-green-100',\n    },\n    negative: {\n      bg: 'bg-red-50 dark:bg-red-900/20',\n      border: 'border-red-200 dark:border-red-800',\n      icon: 'text-red-600 dark:text-red-400',\n      title: 'text-red-900 dark:text-red-100',\n    },\n    warning: {\n      bg: 'bg-yellow-50 dark:bg-yellow-900/20',\n      border: 'border-yellow-200 dark:border-yellow-800',\n      icon: 'text-yellow-600 dark:text-yellow-400',\n      title: 'text-yellow-900 dark:text-yellow-100',\n    },\n    info: {\n      bg: 'bg-blue-50 dark:bg-blue-900/20',\n      border: 'border-blue-200 dark:border-blue-800',\n      icon: 'text-blue-600 dark:text-blue-400',\n      title: 'text-blue-900 dark:text-blue-100',\n    },\n    recommendation: {\n      bg: 'bg-purple-50 dark:bg-purple-900/20',\n      border: 'border-purple-200 dark:border-purple-800',\n      icon: 'text-purple-600 dark:text-purple-400',\n      title: 'text-purple-900 dark:text-purple-100',\n    },\n    analysis: {\n      bg: 'bg-gray-50 dark:bg-gray-900/20',\n      border: 'border-gray-200 dark:border-gray-800',\n      icon: 'text-gray-600 dark:text-gray-400',\n      title: 'text-gray-900 dark:text-gray-100',\n    },\n  }\n\n  return styles[type] || styles.info\n}\n\nconst InsightCard = ({ insight, className }) => {\n  const style = getInsightStyle(insight.type)\n\n  return (\n    <div className={cn('rounded-lg border p-4 space-y-2', style.bg, style.border, className)}>\n      <div className=\"flex items-start space-x-3\">\n        <InsightIcon\n          type={insight.type}\n          className={cn('w-5 h-5 mt-0.5 flex-shrink-0', style.icon)}\n        />\n        <div className=\"flex-1 space-y-1\">\n          <h4 className={cn('font-medium text-sm', style.title)}>{insight.title}</h4>\n          <p className=\"text-sm text-muted-foreground\">{insight.description}</p>\n          {insight.metrics && (\n            <div className=\"flex flex-wrap gap-2 mt-2\">\n              {insight.metrics.map((metric, index) => (\n                <span\n                  key={index}\n                  className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-white/60 dark:bg-black/20 text-foreground\"\n                >\n                  {metric}\n                </span>\n              ))}\n            </div>\n          )}\n          {insight.action && (\n            <div className=\"mt-2\">\n              <button\n                className={cn('text-xs font-medium underline hover:no-underline', style.title)}\n              >\n                {insight.action}\n              </button>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst generateInsights = data => {\n  if (!data) return []\n\n  const insights = []\n\n  // Revenue trend analysis\n  if (data.revenue?.growth > 10) {\n    insights.push({\n      type: 'positive',\n      title: 'Strong Revenue Growth',\n      description: `Revenue has grown by ${data.revenue.growth.toFixed(1)}% compared to the previous period, indicating strong market performance.`,\n      metrics: [`+${data.revenue.growth.toFixed(1)}% Growth`],\n      action: 'View detailed revenue analysis',\n    })\n  } else if (data.revenue?.growth < -5) {\n    insights.push({\n      type: 'negative',\n      title: 'Revenue Decline Detected',\n      description: `Revenue has decreased by ${Math.abs(data.revenue.growth).toFixed(1)}% from the previous period. Consider market analysis.`,\n      metrics: [`${data.revenue.growth.toFixed(1)}% Decline`],\n      action: 'Analyze market factors',\n    })\n  }\n\n  // Profit margin analysis\n  if (data.profitMargin?.current < 10) {\n    insights.push({\n      type: 'warning',\n      title: 'Low Profit Margins',\n      description: `Current profit margin of ${data.profitMargin.current.toFixed(1)}% is below industry standards. Cost optimization may be needed.`,\n      metrics: [`${data.profitMargin.current.toFixed(1)}% Margin`],\n      action: 'Review cost structure',\n    })\n  } else if (data.profitMargin?.current > 25) {\n    insights.push({\n      type: 'positive',\n      title: 'Excellent Profit Margins',\n      description: `Profit margin of ${data.profitMargin.current.toFixed(1)}% exceeds industry benchmarks, indicating efficient operations.`,\n      metrics: [`${data.profitMargin.current.toFixed(1)}% Margin`],\n      action: 'Maintain operational efficiency',\n    })\n  }\n\n  // Working capital analysis\n  if (data.workingCapital?.ratio < 1.0) {\n    insights.push({\n      type: 'warning',\n      title: 'Working Capital Concern',\n      description:\n        'Current working capital ratio suggests potential liquidity challenges. Monitor cash flow closely.',\n      metrics: [`${data.workingCapital.ratio.toFixed(2)}:1 Ratio`],\n      action: 'Review cash flow projections',\n    })\n  }\n\n  // Product performance insights\n  if (data.products) {\n    const topPerformer = data.products.reduce((prev, current) =>\n      prev.revenue > current.revenue ? prev : current\n    )\n\n    if (topPerformer) {\n      insights.push({\n        type: 'info',\n        title: 'Top Product Performance',\n        description: `${topPerformer.name} is your leading revenue generator with ${topPerformer.marketShare.toFixed(1)}% market share.`,\n        metrics: [\n          `£${topPerformer.revenue.toLocaleString()}`,\n          `${topPerformer.marketShare.toFixed(1)}% Share`,\n        ],\n        action: 'Optimize top performer strategy',\n      })\n    }\n  }\n\n  // Seasonal analysis\n  if (data.seasonality?.detected) {\n    insights.push({\n      type: 'analysis',\n      title: 'Seasonal Pattern Identified',\n      description: `Revenue shows ${data.seasonality.strength} seasonal patterns. Plan inventory and marketing accordingly.`,\n      metrics: [`${data.seasonality.strength} Seasonality`],\n      action: 'View seasonal forecast',\n    })\n  }\n\n  // AI recommendations\n  if (data.recommendations?.length > 0) {\n    data.recommendations.slice(0, 2).forEach((rec, index) => {\n      insights.push({\n        type: 'recommendation',\n        title: rec.title,\n        description: rec.description,\n        metrics: rec.impact ? [rec.impact] : undefined,\n        action: rec.action,\n      })\n    })\n  }\n\n  return insights.slice(0, 6) // Limit to 6 insights\n}\n\nconst FinancialInsights = ({ data, loading = false, error = null, className }) => {\n  if (loading) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Financial Insights</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {Array.from({ length: 3 }).map((_, index) => (\n              <div key={index} className=\"space-y-2\">\n                <div className=\"h-4 bg-gray-200 rounded animate-pulse w-1/3\" />\n                <div className=\"h-3 bg-gray-200 rounded animate-pulse w-full\" />\n                <div className=\"h-3 bg-gray-200 rounded animate-pulse w-2/3\" />\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (error) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Financial Insights</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-sm text-red-600\">Error loading insights: {error.message}</p>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const insights = generateInsights(data)\n\n  if (insights.length === 0) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Financial Insights</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-center py-8\">\n            <ChartBarIcon className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n            <p className=\"text-sm text-muted-foreground\">\n              No insights available. Data analysis is in progress.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <LightBulbIcon className=\"w-5 h-5\" />\n          <span>Financial Insights</span>\n          <span className=\"ml-2 px-2 py-0.5 bg-blue-100 dark:bg-blue-900/30 text-blue-700 dark:text-blue-300 text-xs rounded-full\">\n            AI-Powered\n          </span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid gap-4 md:grid-cols-2\">\n          {insights.map((insight, index) => (\n            <InsightCard key={index} insight={insight} />\n          ))}\n        </div>\n        {data?.lastUpdated && (\n          <div className=\"mt-4 pt-4 border-t border-border\">\n            <p className=\"text-xs text-muted-foreground\">\n              Last updated: {new Date(data.lastUpdated).toLocaleString()}\n            </p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default FinancialInsights\n\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\financial\\FinancialKPIStrip.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\financial\\ProductPerformanceTable.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\forecasting\\EnhancedForecasting.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\inventory\\InventoryDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\layout\\AppLayout.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\layout\\Header.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\layout\\Layout.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\layout\\ProtectedRoute.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\layout\\SSEStatusIndicator.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\layout\\Sidebar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\mobile\\MobileFloorDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\navigation\\Sidebar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\reports\\ReportConfigModal.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\shared\\Button.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\shared\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\ErrorFallback.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\Modal.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\accordion.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\alert-dialog.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\alert.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\aspect-ratio.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\avatar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\badge.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 44,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 44,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\breadcrumb.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\button-variants.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\button.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 55,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 55,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow-xs hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80\",\n        ghost:\n          \"hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2 has-[>svg]:px-3\",\n        sm: \"h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5\",\n        lg: \"h-10 rounded-md px-6 has-[>svg]:px-4\",\n        icon: \"size-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Button({\n  className,\n  variant,\n  size,\n  asChild = false,\n  ...props\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"button\"\n      className={cn(buttonVariants({ variant, size, className }))}\n      {...props} />\n  );\n}\n\nexport { Button, buttonVariants }\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\calendar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\card.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\carousel.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\chart.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\checkbox.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\collapsible.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\command.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\context-menu.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\dialog.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\drawer.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\dropdown-menu.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\form.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\hover-card.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\input-otp.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\input.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\label.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\menubar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\navigation-menu.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\pagination.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\popover.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\progress.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\radio-group.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\resizable.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\scroll-area.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\select.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\separator.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\sheet.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\sidebar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\skeleton.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\slider.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\sonner.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\switch.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\table.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\tabs.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\textarea.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\toggle-group.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\toggle-variants.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\toggle.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\ui\\tooltip.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\widgets\\ActivityWidget.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\widgets\\AlertWidget.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\widgets\\ChartWidget.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\widgets\\DataTableWidget.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\widgets\\KPIWidget.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\components\\widgets\\StockLevelsWidget.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'getStatusBadgeColor' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 38,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 38,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Suspense, lazy, useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport stockLevelsApi from '@/services/api/stockLevelsApi'\n\nconst StockLevelsChart = lazy(() => import('@/components/dashboard/StockLevelsChart'))\n\nconst StockLevelsWidget = () => {\n  const [stockData, setStockData] = useState([])\n  const [stockSummary, setStockSummary] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    const fetchStockData = async () => {\n      try {\n        setLoading(true)\n        setError(null)\n\n        const [stockLevels, summary] = await Promise.all([\n          stockLevelsApi.getGABAStockLevels(),\n          stockLevelsApi.getStockSummary(),\n        ])\n\n        setStockData(stockLevels)\n        setStockSummary(summary)\n      } catch (err) {\n        console.error('Failed to fetch stock data:', err)\n        setError('Failed to load stock levels')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchStockData()\n  }, [])\n\n  const getStatusBadgeColor = status => {\n    switch (status) {\n      case 'in-stock':\n        return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n      case 'low-stock':\n        return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200'\n      case 'out-of-stock':\n        return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'\n      default:\n        return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-200'\n    }\n  }\n\n  const renderStockStatusIndicator = () => {\n    if (!stockSummary) return null\n\n    const criticalProducts = stockData.filter(item => item.currentStock <= item.reorderLevel)\n\n    return (\n      <div className=\"flex items-center space-x-2\">\n        {criticalProducts.length > 0 && (\n          <Badge className=\"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\">\n            {criticalProducts.length} Need Reorder\n          </Badge>\n        )}\n        <Badge className=\"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\">\n          {stockSummary.totalProducts} Products\n        </Badge>\n      </div>\n    )\n  }\n\n  if (loading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Current Stock Levels</CardTitle>\n          <CardDescription>Loading GABA product inventory...</CardDescription>\n        </CardHeader>\n        <CardContent className=\"h-64\">\n          <div className=\"flex items-center justify-center h-full\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle>Current Stock Levels</CardTitle>\n          <CardDescription>Unable to load stock data</CardDescription>\n        </CardHeader>\n        <CardContent className=\"h-64\">\n          <div className=\"flex items-center justify-center h-full text-red-500\">\n            <p>{error}</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <CardTitle>Current Stock Levels</CardTitle>\n            <CardDescription>GABA product inventory with reorder indicators</CardDescription>\n          </div>\n          {renderStockStatusIndicator()}\n        </div>\n      </CardHeader>\n      <CardContent className=\"h-64\">\n        <Suspense\n          fallback={\n            <div className=\"flex items-center justify-center h-full\">\n              <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600\"></div>\n            </div>\n          }\n        >\n          <StockLevelsChart data={stockData} />\n        </Suspense>\n\n        {/* Stock Status Summary */}\n        <div className=\"mt-4 flex justify-between items-center text-sm text-gray-600 dark:text-gray-400\">\n          <div className=\"flex space-x-4\">\n            {stockData.map(item => (\n              <div key={item.sku} className=\"flex items-center space-x-1\">\n                <div\n                  className=\"w-3 h-3 rounded-full\"\n                  style={{\n                    backgroundColor: item.currentStock <= item.reorderLevel ? '#f59e0b' : '#10b981',\n                  }}\n                />\n                <span className=\"text-xs\">{item.product}</span>\n              </div>\n            ))}\n          </div>\n          <div className=\"text-xs\">Last updated: {new Date().toLocaleTimeString()}</div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default StockLevelsWidget\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\config\\server-config.js",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 20,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 20,
        "endColumn": 18
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 22,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 22,
        "endColumn": 25
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 23,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 23,
        "endColumn": 27
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 24,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 24,
        "endColumn": 18
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 29,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 29,
        "endColumn": 18
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 31,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 31,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 34,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 34,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 35,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 35,
        "endColumn": 29
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 38,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 38,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 39,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 39,
        "endColumn": 42
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 45,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 45,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 59,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 59,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 60,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 60,
        "endColumn": 26
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 61,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 61,
        "endColumn": 26
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 63,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 63,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 64,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 64,
        "endColumn": 33
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 65,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 65,
        "endColumn": 28
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 69,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 69,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 71,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 71,
        "endColumn": 25
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 85,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 85,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 86,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 86,
        "endColumn": 37
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 87,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 87,
        "endColumn": 40
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 88,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 88,
        "endColumn": 46
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 89,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 89,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 90,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 90,
        "endColumn": 32
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 91,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 91,
        "endColumn": 41
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 96,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 96,
        "endColumn": 19
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 97,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 97,
        "endColumn": 20
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 99,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 99,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 100,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 100,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 101,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 101,
        "endColumn": 33
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 102,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 102,
        "endColumn": 25
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 105,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 105,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 106,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 106,
        "endColumn": 24
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 112,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 112,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 113,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 113,
        "endColumn": 31
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 120,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 120,
        "endColumn": 30
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 121,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 121,
        "endColumn": 36
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 123,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 123,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 124,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 124,
        "endColumn": 35
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 125,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 125,
        "endColumn": 32
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 131,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 131,
        "endColumn": 25
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 132,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 132,
        "endColumn": 30
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 138,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 138,
        "endColumn": 27
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 139,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 139,
        "endColumn": 38
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 144,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 144,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 145,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 145,
        "endColumn": 29
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 146,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 146,
        "endColumn": 28
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 147,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 147,
        "endColumn": 34
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 148,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 148,
        "endColumn": 32
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 149,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 149,
        "endColumn": 38
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 154,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 154,
        "endColumn": 18
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 156,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 156,
        "endColumn": 19
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 157,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 157,
        "endColumn": 25
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 158,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 158,
        "endColumn": 45
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 159,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 159,
        "endColumn": 45
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 162,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 162,
        "endColumn": 32
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 163,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 163,
        "endColumn": 36
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 170,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 170,
        "endColumn": 22
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 171,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 171,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 172,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 172,
        "endColumn": 34
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 173,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 173,
        "endColumn": 38
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 176,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 176,
        "endColumn": 22
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 177,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 177,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 178,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 178,
        "endColumn": 34
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 179,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 179,
        "endColumn": 38
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 182,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 182,
        "endColumn": 24
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 183,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 183,
        "endColumn": 28
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 184,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 184,
        "endColumn": 27
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 185,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 185,
        "endColumn": 22
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 188,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 188,
        "endColumn": 26
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 189,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 189,
        "endColumn": 27
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 190,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 190,
        "endColumn": 26
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 193,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 193,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 194,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 194,
        "endColumn": 22
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 195,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 195,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 198,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 198,
        "endColumn": 24
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 199,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 199,
        "endColumn": 24
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 200,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 200,
        "endColumn": 28
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 201,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 201,
        "endColumn": 28
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 202,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 202,
        "endColumn": 22
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 352,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 352,
        "endColumn": 14
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 353,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 353,
        "endColumn": 12
      }
    ],
    "suppressedMessages": [],
    "errorCount": 83,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/* eslint-env node */\n/**\n * Server Configuration Management\n *\n * Centralized configuration for the MCP server with environment-aware settings\n * and validation.\n */\n\nimport { config } from 'dotenv'\n\n// Load environment variables\nconfig()\n\n/**\n * Server configuration object with environment-aware defaults\n */\nexport const SERVER_CONFIG = {\n  // Core server settings\n  server: {\n    name: process.env.MCP_SERVER_NAME || 'sentia-manufacturing-mcp',\n    version: '3.0.0',\n    environment: process.env.NODE_ENV || 'development',\n    port: parseInt(process.env.MCP_SERVER_PORT) || 3001,\n    host: process.env.MCP_SERVER_HOST || '0.0.0.0',\n  },\n\n  // Transport configuration\n  transport: {\n    type: process.env.MCP_TRANSPORT || 'dual', // 'stdio', 'http', or 'dual'\n    stdio: {\n      enabled: process.env.MCP_STDIO_ENABLED !== 'false',\n    },\n    http: {\n      enabled: process.env.MCP_HTTP_ENABLED !== 'false',\n      port: parseInt(process.env.MCP_HTTP_PORT) || 3002,\n    },\n    sse: {\n      enabled: process.env.MCP_SSE_ENABLED !== 'false',\n      heartbeatInterval: parseInt(process.env.SSE_HEARTBEAT_INTERVAL) || 30000,\n    },\n  },\n\n  // CORS configuration\n  cors: {\n    origins: process.env.CORS_ORIGINS?.split(',') || [\n      'https://sentia-manufacturing-development.onrender.com',\n      'https://sentia-manufacturing-testing.onrender.com',\n      'https://sentia-manufacturing-production.onrender.com',\n      'http://localhost:3000',\n      'http://localhost:5173',\n    ],\n    credentials: true,\n    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n    allowedHeaders: ['Content-Type', 'Authorization', 'X-Correlation-ID'],\n  },\n\n  // Security configuration\n  security: {\n    jwtSecret: process.env.JWT_SECRET || 'fallback-secret-for-dev-only',\n    jwtExpiresIn: process.env.JWT_EXPIRES_IN || '24h',\n    authRequired: process.env.AUTH_REQUIRED === 'true',\n    rateLimiting: {\n      enabled: process.env.RATE_LIMITING_ENABLED !== 'false',\n      windowMs: parseInt(process.env.RATE_LIMIT_WINDOW) || 15 * 60 * 1000, // 15 minutes\n      max: parseInt(process.env.RATE_LIMIT_MAX) || 100,\n      message: 'Too many requests from this IP, please try again later.',\n    },\n    helmet: {\n      enabled: process.env.HELMET_ENABLED !== 'false',\n      contentSecurityPolicy: {\n        enabled: process.env.CSP_ENABLED !== 'false',\n        directives: {\n          defaultSrc: [\"'self'\"],\n          scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n          styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n          imgSrc: [\"'self'\", 'data:', 'https:'],\n          connectSrc: [\"'self'\", 'https:', 'wss:'],\n        },\n      },\n    },\n  },\n\n  // Database configuration\n  database: {\n    url: process.env.DATABASE_URL,\n    maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS) || 10,\n    idleTimeoutMillis: parseInt(process.env.DB_IDLE_TIMEOUT) || 30000,\n    connectionTimeoutMillis: parseInt(process.env.DB_CONNECTION_TIMEOUT) || 10000,\n    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,\n    enableQueryLogging: process.env.DB_QUERY_LOGGING === 'true',\n    slowQueryThreshold: parseInt(process.env.DB_SLOW_QUERY_THRESHOLD) || 1000,\n  },\n\n  // Logging configuration\n  logging: {\n    level: process.env.LOG_LEVEL || 'info',\n    format: process.env.LOG_FORMAT || 'json',\n    file: {\n      enabled: process.env.LOG_FILE_ENABLED !== 'false',\n      maxSize: process.env.LOG_FILE_MAX_SIZE || '5m',\n      maxFiles: parseInt(process.env.LOG_FILE_MAX_FILES) || 5,\n      directory: process.env.LOG_DIRECTORY || 'logs',\n    },\n    console: {\n      enabled: process.env.LOG_CONSOLE_ENABLED !== 'false',\n      colorize: process.env.LOG_COLORIZE !== 'false',\n    },\n  },\n\n  // Tool configuration\n  tools: {\n    directory: process.env.TOOLS_DIRECTORY || 'tools',\n    enabledCategories: process.env.ENABLED_TOOL_CATEGORIES?.split(',') || [\n      'system',\n      'manufacturing',\n      'financial',\n      'database',\n      'integration',\n    ],\n    timeout: parseInt(process.env.TOOL_TIMEOUT) || 30000,\n    maxConcurrent: parseInt(process.env.MAX_CONCURRENT_TOOLS) || 10,\n    caching: {\n      enabled: process.env.TOOL_CACHING_ENABLED !== 'false',\n      defaultTTL: parseInt(process.env.TOOL_CACHE_TTL) || 300, // 5 minutes\n      maxSize: parseInt(process.env.TOOL_CACHE_MAX_SIZE) || 1000,\n    },\n  },\n\n  // Resource management\n  resources: {\n    maxFileSize: process.env.MAX_FILE_SIZE || '10mb',\n    allowedMimeTypes: process.env.ALLOWED_MIME_TYPES?.split(',') || [\n      'application/json',\n      'text/plain',\n      'text/csv',\n      'application/xml',\n    ],\n    tempDirectory: process.env.TEMP_DIRECTORY || 'tmp',\n    cleanupInterval: parseInt(process.env.CLEANUP_INTERVAL) || 3600000, // 1 hour\n  },\n\n  // Monitoring and metrics\n  monitoring: {\n    enabled: process.env.MONITORING_ENABLED !== 'false',\n    metricsEndpoint: process.env.METRICS_ENDPOINT || '/metrics',\n    healthEndpoint: process.env.HEALTH_ENDPOINT || '/health',\n    collectSystemMetrics: process.env.COLLECT_SYSTEM_METRICS !== 'false',\n    collectToolMetrics: process.env.COLLECT_TOOL_METRICS !== 'false',\n    retentionPeriod: parseInt(process.env.METRICS_RETENTION_PERIOD) || 7 * 24 * 60 * 60 * 1000, // 7 days\n  },\n\n  // Cache configuration (Redis or in-memory)\n  cache: {\n    type: process.env.CACHE_TYPE || 'memory', // 'redis' or 'memory'\n    redis: {\n      url: process.env.REDIS_URL,\n      keyPrefix: process.env.REDIS_KEY_PREFIX || 'sentia-mcp:',\n      retryDelayOnFailover: parseInt(process.env.REDIS_RETRY_DELAY) || 100,\n      maxRetriesPerRequest: parseInt(process.env.REDIS_MAX_RETRIES) || 3,\n    },\n    memory: {\n      maxSize: parseInt(process.env.MEMORY_CACHE_MAX_SIZE) || 1000,\n      checkPeriod: parseInt(process.env.MEMORY_CACHE_CHECK_PERIOD) || 600, // 10 minutes\n    },\n  },\n\n  // External service integrations\n  integrations: {\n    anthropic: {\n      apiKey: process.env.ANTHROPIC_API_KEY,\n      model: process.env.ANTHROPIC_MODEL || 'claude-3-sonnet-20240229',\n      maxTokens: parseInt(process.env.ANTHROPIC_MAX_TOKENS) || 4096,\n      temperature: parseFloat(process.env.ANTHROPIC_TEMPERATURE) || 0.7,\n    },\n    openai: {\n      apiKey: process.env.OPENAI_API_KEY,\n      model: process.env.OPENAI_MODEL || 'gpt-4-turbo-preview',\n      maxTokens: parseInt(process.env.OPENAI_MAX_TOKENS) || 4096,\n      temperature: parseFloat(process.env.OPENAI_TEMPERATURE) || 0.7,\n    },\n    xero: {\n      clientId: process.env.XERO_CLIENT_ID,\n      clientSecret: process.env.XERO_CLIENT_SECRET,\n      redirectUri: process.env.XERO_REDIRECT_URI,\n      scopes: process.env.XERO_SCOPES?.split(',') || ['accounting.read', 'accounting.transactions'],\n    },\n    shopify: {\n      shopDomain: process.env.SHOPIFY_SHOP_DOMAIN,\n      accessToken: process.env.SHOPIFY_ACCESS_TOKEN,\n      apiVersion: process.env.SHOPIFY_API_VERSION || '2024-01',\n    },\n    unleashed: {\n      apiId: process.env.UNLEASHED_API_ID,\n      apiKey: process.env.UNLEASHED_API_KEY,\n      baseUrl: process.env.UNLEASHED_BASE_URL || 'https://api.unleashedsoftware.com',\n    },\n    amazon: {\n      sellerId: process.env.AMAZON_SELLER_ID,\n      clientId: process.env.AMAZON_CLIENT_ID,\n      clientSecret: process.env.AMAZON_CLIENT_SECRET,\n      refreshToken: process.env.AMAZON_REFRESH_TOKEN,\n      region: process.env.AMAZON_REGION || 'us-east-1',\n    },\n  },\n}\n\n/**\n * Validate required configuration values\n */\nexport function validateConfig() {\n  const errors = []\n\n  // Validate required environment variables\n  if (!SERVER_CONFIG.database.url) {\n    errors.push('DATABASE_URL is required')\n  }\n\n  if (SERVER_CONFIG.security.authRequired && !SERVER_CONFIG.security.jwtSecret) {\n    errors.push('JWT_SECRET is required when authentication is enabled')\n  }\n\n  if (SERVER_CONFIG.cache.type === 'redis' && !SERVER_CONFIG.cache.redis.url) {\n    errors.push('REDIS_URL is required when using Redis cache')\n  }\n\n  // Validate port ranges\n  if (SERVER_CONFIG.server.port < 1 || SERVER_CONFIG.server.port > 65535) {\n    errors.push('MCP_SERVER_PORT must be between 1 and 65535')\n  }\n\n  // Validate rate limiting values\n  if (SERVER_CONFIG.security.rateLimiting.max < 1) {\n    errors.push('RATE_LIMIT_MAX must be at least 1')\n  }\n\n  if (SERVER_CONFIG.security.rateLimiting.windowMs < 1000) {\n    errors.push('RATE_LIMIT_WINDOW must be at least 1000ms')\n  }\n\n  if (errors.length > 0) {\n    throw new Error(`Configuration validation failed:\\n${errors.join('\\n')}`)\n  }\n\n  return true\n}\n\n/**\n * Get environment-specific configuration overrides\n */\nexport function getEnvironmentConfig(environment = SERVER_CONFIG.server.environment) {\n  const configs = {\n    development: {\n      security: {\n        authRequired: false,\n        rateLimiting: {\n          max: 1000, // Higher limits for development\n        },\n      },\n      logging: {\n        level: 'debug',\n        console: {\n          colorize: true,\n        },\n      },\n      database: {\n        enableQueryLogging: true,\n      },\n    },\n\n    testing: {\n      security: {\n        authRequired: true,\n        rateLimiting: {\n          max: 500,\n        },\n      },\n      logging: {\n        level: 'info',\n      },\n      monitoring: {\n        collectSystemMetrics: true,\n        collectToolMetrics: true,\n      },\n    },\n\n    production: {\n      security: {\n        authRequired: true,\n        rateLimiting: {\n          max: 100,\n        },\n        helmet: {\n          enabled: true,\n          contentSecurityPolicy: {\n            enabled: true,\n          },\n        },\n      },\n      logging: {\n        level: 'warn',\n        console: {\n          colorize: false,\n        },\n      },\n      monitoring: {\n        enabled: true,\n        collectSystemMetrics: true,\n        collectToolMetrics: true,\n      },\n      cache: {\n        type: 'redis', // Prefer Redis in production\n      },\n    },\n  }\n\n  return configs[environment] || {}\n}\n\n/**\n * Merge configuration with environment-specific overrides\n */\nexport function getMergedConfig(environment) {\n  const envConfig = getEnvironmentConfig(environment)\n\n  function deepMerge(target, source) {\n    const result = { ...target }\n\n    for (const key in source) {\n      if (source[key] && typeof source[key] === 'object' && !Array.isArray(source[key])) {\n        result[key] = deepMerge(result[key] || {}, source[key])\n      } else {\n        result[key] = source[key]\n      }\n    }\n\n    return result\n  }\n\n  return deepMerge(SERVER_CONFIG, envConfig)\n}\n\n/**\n * Export the final configuration\n */\nexport const CONFIG = getMergedConfig(SERVER_CONFIG.server.environment)\n\n// Validate configuration on import\ntry {\n  validateConfig()\n} catch (error) {\n  console.error('Configuration validation failed:', error.message)\n  if (process.env.NODE_ENV === 'production') {\n    process.exit(1)\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\config\\tool-schemas.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'schema' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 688,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 688,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "schema" },
            "fix": { "range": [19663, 19671], "text": "" },
            "desc": "Remove unused variable 'schema'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Tool Input/Output Schemas\n *\n * Comprehensive JSON schemas for validating tool parameters and responses\n * across all manufacturing, financial, and integration tools.\n */\n\n/**\n * Common schema components for reuse\n */\nconst COMMON_SCHEMAS = {\n  correlationId: {\n    type: 'string',\n    pattern: '^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$',\n    description: 'UUID v4 correlation ID for request tracking',\n  },\n\n  timestamp: {\n    type: 'string',\n    format: 'date-time',\n    description: 'ISO 8601 timestamp',\n  },\n\n  dateRange: {\n    type: 'object',\n    properties: {\n      startDate: { type: 'string', format: 'date' },\n      endDate: { type: 'string', format: 'date' },\n    },\n    required: ['startDate', 'endDate'],\n  },\n\n  pagination: {\n    type: 'object',\n    properties: {\n      page: { type: 'integer', minimum: 1, default: 1 },\n      limit: { type: 'integer', minimum: 1, maximum: 1000, default: 50 },\n      offset: { type: 'integer', minimum: 0 },\n    },\n  },\n\n  currency: {\n    type: 'object',\n    properties: {\n      amount: { type: 'number', minimum: 0 },\n      currency: { type: 'string', pattern: '^[A-Z]{3}$', default: 'USD' },\n    },\n    required: ['amount'],\n  },\n\n  standardResponse: {\n    type: 'object',\n    properties: {\n      success: { type: 'boolean' },\n      data: { type: 'object' },\n      error: { type: 'string' },\n      correlationId: { $ref: '#/definitions/correlationId' },\n      timestamp: { $ref: '#/definitions/timestamp' },\n      executionTime: { type: 'number', minimum: 0 },\n    },\n    required: ['success', 'correlationId', 'timestamp'],\n  },\n}\n\n/**\n * System tool schemas\n */\nexport const SYSTEM_TOOL_SCHEMAS = {\n  'system-status': {\n    input: {\n      type: 'object',\n      properties: {\n        includeMetrics: { type: 'boolean', default: true },\n        includeConnections: { type: 'boolean', default: true },\n        includeDatabase: { type: 'boolean', default: true },\n        detailed: { type: 'boolean', default: false },\n      },\n      additionalProperties: false,\n    },\n    output: {\n      type: 'object',\n      properties: {\n        status: { type: 'string', enum: ['healthy', 'degraded', 'unhealthy'] },\n        uptime: { type: 'number', minimum: 0 },\n        version: { type: 'string' },\n        environment: { type: 'string' },\n        server: {\n          type: 'object',\n          properties: {\n            memory: { type: 'object' },\n            cpu: { type: 'object' },\n            connections: { type: 'number' },\n          },\n        },\n        database: {\n          type: 'object',\n          properties: {\n            connected: { type: 'boolean' },\n            latency: { type: 'number' },\n            poolSize: { type: 'number' },\n          },\n        },\n      },\n      required: ['status', 'uptime', 'version'],\n    },\n  },\n\n  'list-tools': {\n    input: {\n      type: 'object',\n      properties: {\n        category: {\n          type: 'string',\n          enum: ['system', 'manufacturing', 'financial', 'database', 'integration', 'ai'],\n        },\n        includeSchemas: { type: 'boolean', default: false },\n      },\n      additionalProperties: false,\n    },\n    output: {\n      type: 'object',\n      properties: {\n        tools: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              name: { type: 'string' },\n              description: { type: 'string' },\n              category: { type: 'string' },\n              version: { type: 'string' },\n              hasSchema: { type: 'boolean' },\n            },\n          },\n        },\n        categories: { type: 'array', items: { type: 'string' } },\n        totalCount: { type: 'integer', minimum: 0 },\n      },\n      required: ['tools', 'totalCount'],\n    },\n  },\n\n  'database-query': {\n    input: {\n      type: 'object',\n      properties: {\n        query: {\n          type: 'string',\n          minLength: 1,\n          maxLength: 10000,\n          pattern: '^\\\\s*(SELECT|WITH|EXPLAIN)\\\\s+',\n          description: 'Read-only SQL query',\n        },\n        params: {\n          type: 'array',\n          items: { type: ['string', 'number', 'boolean', 'null'] },\n          maxItems: 50,\n        },\n        timeout: { type: 'integer', minimum: 1000, maximum: 30000, default: 30000 },\n      },\n      required: ['query'],\n      additionalProperties: false,\n    },\n    output: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        rows: { type: 'array' },\n        rowCount: { type: 'integer', minimum: 0 },\n        executionTime: { type: 'number', minimum: 0 },\n        fields: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              name: { type: 'string' },\n              type: { type: 'string' },\n            },\n          },\n        },\n      },\n      required: ['success', 'rows', 'rowCount'],\n    },\n  },\n}\n\n/**\n * Manufacturing tool schemas\n */\nexport const MANUFACTURING_TOOL_SCHEMAS = {\n  'inventory-optimization': {\n    input: {\n      type: 'object',\n      properties: {\n        currentLevels: {\n          type: 'object',\n          patternProperties: {\n            '^[A-Z0-9-]+$': { type: 'number', minimum: 0 },\n          },\n          minProperties: 1,\n        },\n        demandForecast: {\n          type: 'object',\n          patternProperties: {\n            '^[A-Z0-9-]+$': { type: 'number', minimum: 0 },\n          },\n        },\n        constraints: {\n          type: 'object',\n          properties: {\n            maxInventoryValue: { type: 'number', minimum: 0 },\n            minServiceLevel: { type: 'number', minimum: 0, maximum: 1 },\n            leadTime: { type: 'integer', minimum: 1 },\n            safetyStockDays: { type: 'integer', minimum: 0 },\n          },\n        },\n        optimizationGoal: {\n          type: 'string',\n          enum: ['minimize_cost', 'maximize_service_level', 'balanced'],\n          default: 'balanced',\n        },\n      },\n      required: ['currentLevels'],\n      additionalProperties: false,\n    },\n    output: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        recommendations: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              sku: { type: 'string' },\n              current: { type: 'number' },\n              optimal: { type: 'number' },\n              adjustment: { type: 'number' },\n              savings: { type: 'number' },\n              priority: { type: 'string', enum: ['high', 'medium', 'low'] },\n            },\n          },\n        },\n        totalSavings: { type: 'number' },\n        implementationPlan: { type: 'array' },\n        confidence: { type: 'number', minimum: 0, maximum: 1 },\n      },\n      required: ['success', 'recommendations'],\n    },\n  },\n\n  'demand-forecast': {\n    input: {\n      type: 'object',\n      properties: {\n        productId: { type: 'string', minLength: 1 },\n        historicalData: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              date: { type: 'string', format: 'date' },\n              demand: { type: 'number', minimum: 0 },\n              price: { type: 'number', minimum: 0 },\n              promotions: { type: 'boolean' },\n            },\n            required: ['date', 'demand'],\n          },\n          minItems: 30, // At least 30 data points\n        },\n        horizon: { type: 'integer', minimum: 1, maximum: 365, default: 30 },\n        method: {\n          type: 'string',\n          enum: ['arima', 'lstm', 'prophet', 'ensemble'],\n          default: 'ensemble',\n        },\n        seasonality: {\n          type: 'object',\n          properties: {\n            weekly: { type: 'boolean', default: true },\n            monthly: { type: 'boolean', default: true },\n            yearly: { type: 'boolean', default: true },\n          },\n        },\n      },\n      required: ['productId', 'historicalData'],\n      additionalProperties: false,\n    },\n    output: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        productId: { type: 'string' },\n        forecast: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              date: { type: 'string', format: 'date' },\n              value: { type: 'number', minimum: 0 },\n              lower: { type: 'number', minimum: 0 },\n              upper: { type: 'number', minimum: 0 },\n            },\n          },\n        },\n        accuracy: { type: 'number', minimum: 0, maximum: 1 },\n        method: { type: 'string' },\n        horizon: { type: 'integer' },\n      },\n      required: ['success', 'productId', 'forecast'],\n    },\n  },\n\n  'quality-prediction': {\n    input: {\n      type: 'object',\n      properties: {\n        productionData: {\n          type: 'object',\n          properties: {\n            temperature: { type: 'number' },\n            pressure: { type: 'number' },\n            humidity: { type: 'number' },\n            speed: { type: 'number', minimum: 0 },\n            vibration: { type: 'number', minimum: 0 },\n            operatorId: { type: 'string' },\n            materialBatch: { type: 'string' },\n            equipmentId: { type: 'string' },\n          },\n          required: ['temperature', 'pressure'],\n        },\n        threshold: { type: 'number', minimum: 0, maximum: 1, default: 0.95 },\n        includeRecommendations: { type: 'boolean', default: true },\n      },\n      required: ['productionData'],\n      additionalProperties: false,\n    },\n    output: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        predictions: {\n          type: 'object',\n          properties: {\n            score: { type: 'number', minimum: 0, maximum: 1 },\n            passRate: { type: 'boolean' },\n            riskLevel: { type: 'string', enum: ['LOW', 'MEDIUM', 'HIGH'] },\n            factors: { type: 'array', items: { type: 'string' } },\n            recommendations: { type: 'array' },\n          },\n        },\n        confidence: { type: 'number', minimum: 0, maximum: 1 },\n      },\n      required: ['success', 'predictions'],\n    },\n  },\n}\n\n/**\n * Financial tool schemas\n */\nexport const FINANCIAL_TOOL_SCHEMAS = {\n  'working-capital-optimization': {\n    input: {\n      type: 'object',\n      properties: {\n        currentMetrics: {\n          type: 'object',\n          properties: {\n            dso: { type: 'number', minimum: 0 },\n            dpo: { type: 'number', minimum: 0 },\n            dio: { type: 'number', minimum: 0 },\n            dailyRevenue: { type: 'number', minimum: 0 },\n            dailyCOGS: { type: 'number', minimum: 0 },\n            dailyInventoryCost: { type: 'number', minimum: 0 },\n          },\n          required: ['dso', 'dpo', 'dio'],\n        },\n        targetCCC: { type: 'number', minimum: 0, default: 60 },\n        constraints: {\n          type: 'object',\n          properties: {\n            minDSO: { type: 'number', minimum: 0 },\n            maxDPO: { type: 'number', minimum: 0 },\n            minDIO: { type: 'number', minimum: 0 },\n            industryBenchmarks: { type: 'object' },\n          },\n        },\n        optimizationPriority: {\n          type: 'string',\n          enum: ['cash_flow', 'working_capital', 'balanced'],\n          default: 'balanced',\n        },\n      },\n      required: ['currentMetrics'],\n      additionalProperties: false,\n    },\n    output: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        optimization: {\n          type: 'object',\n          properties: {\n            dso: { type: 'number' },\n            dpo: { type: 'number' },\n            dio: { type: 'number' },\n          },\n        },\n        actionPlan: { type: 'object' },\n        totalImpact: { type: 'number' },\n        newCCC: { type: 'number' },\n        implementationTimeline: { type: 'array' },\n      },\n      required: ['success', 'optimization'],\n    },\n  },\n\n  'cash-runway-analysis': {\n    input: {\n      type: 'object',\n      properties: {\n        cashBalance: { type: 'number', minimum: 0 },\n        burnRate: { type: 'number', minimum: 0 },\n        revenue: { type: 'number', minimum: 0 },\n        scenarios: {\n          type: 'array',\n          items: { type: 'string', enum: ['base', 'optimistic', 'pessimistic', 'stress_test'] },\n          default: ['base', 'optimistic', 'pessimistic'],\n        },\n        growthAssumptions: {\n          type: 'object',\n          properties: {\n            revenueGrowthRate: { type: 'number' },\n            burnRateIncrease: { type: 'number' },\n            seasonalityFactor: { type: 'number' },\n          },\n        },\n      },\n      required: ['cashBalance', 'burnRate', 'revenue'],\n      additionalProperties: false,\n    },\n    output: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        analyses: {\n          type: 'object',\n          patternProperties: {\n            '^(base|optimistic|pessimistic|stress_test)$': {\n              type: 'object',\n              properties: {\n                runway: { type: 'number' },\n                monthlyBurn: { type: 'number' },\n                monthlyRevenue: { type: 'number' },\n                netBurn: { type: 'number' },\n                breakEvenMonth: { type: 'number' },\n                recommendations: { type: 'array' },\n              },\n            },\n          },\n        },\n        criticalMonth: { type: 'number' },\n        fundingNeeded: { type: 'number' },\n        optimizationPotential: { type: 'object' },\n      },\n      required: ['success', 'analyses'],\n    },\n  },\n}\n\n/**\n * Integration tool schemas\n */\nexport const INTEGRATION_TOOL_SCHEMAS = {\n  'unified-api-call': {\n    input: {\n      type: 'object',\n      properties: {\n        service: {\n          type: 'string',\n          enum: ['xero', 'shopify', 'amazon', 'unleashed'],\n        },\n        endpoint: { type: 'string', minLength: 1 },\n        method: {\n          type: 'string',\n          enum: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH'],\n          default: 'GET',\n        },\n        data: { type: 'object' },\n        headers: { type: 'object' },\n        timeout: { type: 'integer', minimum: 1000, maximum: 60000, default: 30000 },\n      },\n      required: ['service', 'endpoint'],\n      additionalProperties: false,\n    },\n    output: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        status: { type: 'integer' },\n        data: {},\n        service: { type: 'string' },\n        endpoint: { type: 'string' },\n        responseTime: { type: 'number' },\n      },\n      required: ['success', 'status', 'service', 'endpoint'],\n    },\n  },\n\n  'anomaly-detection': {\n    input: {\n      type: 'object',\n      properties: {\n        metrics: {\n          type: 'object',\n          patternProperties: {\n            '^[a-zA-Z][a-zA-Z0-9_]*$': {\n              type: 'array',\n              items: { type: 'number' },\n              minItems: 10,\n            },\n          },\n        },\n        threshold: { type: 'number', minimum: 1, maximum: 5, default: 2.5 },\n        lookback: { type: 'integer', minimum: 10, maximum: 1000, default: 30 },\n        method: {\n          type: 'string',\n          enum: ['zscore', 'isolation_forest', 'statistical'],\n          default: 'zscore',\n        },\n      },\n      required: ['metrics'],\n      additionalProperties: false,\n    },\n    output: {\n      type: 'object',\n      properties: {\n        success: { type: 'boolean' },\n        anomalies: {\n          type: 'array',\n          items: {\n            type: 'object',\n            properties: {\n              metric: { type: 'string' },\n              value: { type: 'number' },\n              expected: { type: 'number' },\n              deviation: { type: 'number' },\n              severity: { type: 'string', enum: ['LOW', 'MEDIUM', 'HIGH', 'CRITICAL'] },\n              timestamp: { type: 'string', format: 'date-time' },\n              recommendation: { type: 'string' },\n            },\n          },\n        },\n        summary: {\n          type: 'object',\n          properties: {\n            total: { type: 'integer' },\n            critical: { type: 'integer' },\n            high: { type: 'integer' },\n            medium: { type: 'integer' },\n            low: { type: 'integer' },\n          },\n        },\n      },\n      required: ['success', 'anomalies', 'summary'],\n    },\n  },\n}\n\n/**\n * All tool schemas registry\n */\nexport const TOOL_SCHEMAS = {\n  ...SYSTEM_TOOL_SCHEMAS,\n  ...MANUFACTURING_TOOL_SCHEMAS,\n  ...FINANCIAL_TOOL_SCHEMAS,\n  ...INTEGRATION_TOOL_SCHEMAS,\n}\n\n/**\n * Get schema for a specific tool\n */\nexport function getToolSchema(toolName, schemaType = 'input') {\n  const schema = TOOL_SCHEMAS[toolName]\n  if (!schema) {\n    throw new Error(`Schema not found for tool: ${toolName}`)\n  }\n\n  if (schemaType === 'input') {\n    return schema.input || {}\n  } else if (schemaType === 'output') {\n    return schema.output || {}\n  } else {\n    throw new Error(`Invalid schema type: ${schemaType}`)\n  }\n}\n\n/**\n * Validate tool parameters against schema\n */\nexport function validateToolParameters(toolName, parameters) {\n  const schema = getToolSchema(toolName, 'input')\n\n  // Basic validation - in production, use a proper JSON schema validator like Ajv\n  if (schema.required) {\n    for (const field of schema.required) {\n      if (!(field in parameters)) {\n        throw new Error(`Missing required parameter: ${field}`)\n      }\n    }\n  }\n\n  // Type validation\n  if (schema.properties) {\n    for (const [field, fieldSchema] of Object.entries(schema.properties)) {\n      if (field in parameters) {\n        validateFieldType(field, parameters[field], fieldSchema)\n      }\n    }\n  }\n\n  return true\n}\n\n/**\n * Validate individual field type\n */\nfunction validateFieldType(fieldName, value, schema) {\n  const { type, minimum, maximum, minLength, maxLength, enum: enumValues } = schema\n\n  if (type === 'string' && typeof value !== 'string') {\n    throw new Error(`Parameter ${fieldName} must be a string`)\n  }\n\n  if (type === 'number' && typeof value !== 'number') {\n    throw new Error(`Parameter ${fieldName} must be a number`)\n  }\n\n  if (type === 'integer' && !Number.isInteger(value)) {\n    throw new Error(`Parameter ${fieldName} must be an integer`)\n  }\n\n  if (type === 'boolean' && typeof value !== 'boolean') {\n    throw new Error(`Parameter ${fieldName} must be a boolean`)\n  }\n\n  if (type === 'array' && !Array.isArray(value)) {\n    throw new Error(`Parameter ${fieldName} must be an array`)\n  }\n\n  if (type === 'object' && (typeof value !== 'object' || Array.isArray(value))) {\n    throw new Error(`Parameter ${fieldName} must be an object`)\n  }\n\n  // Range validation\n  if (typeof value === 'number') {\n    if (minimum !== undefined && value < minimum) {\n      throw new Error(`Parameter ${fieldName} must be at least ${minimum}`)\n    }\n    if (maximum !== undefined && value > maximum) {\n      throw new Error(`Parameter ${fieldName} must be at most ${maximum}`)\n    }\n  }\n\n  // String length validation\n  if (typeof value === 'string') {\n    if (minLength !== undefined && value.length < minLength) {\n      throw new Error(`Parameter ${fieldName} must be at least ${minLength} characters`)\n    }\n    if (maxLength !== undefined && value.length > maxLength) {\n      throw new Error(`Parameter ${fieldName} must be at most ${maxLength} characters`)\n    }\n  }\n\n  // Enum validation\n  if (enumValues && !enumValues.includes(value)) {\n    throw new Error(`Parameter ${fieldName} must be one of: ${enumValues.join(', ')}`)\n  }\n}\n\n/**\n * Get all available tool categories\n */\nexport function getToolCategories() {\n  const categories = new Set()\n\n  for (const [toolName, schema] of Object.entries(TOOL_SCHEMAS)) {\n    // Extract category from tool name or use 'general' as default\n    const parts = toolName.split('-')\n    if (parts.length > 1) {\n      categories.add(parts[0])\n    } else {\n      categories.add('general')\n    }\n  }\n\n  return Array.from(categories).sort()\n}\n\nexport default TOOL_SCHEMAS\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\context\\SSEProvider.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\context\\sse-context.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\contexts\\XeroContext.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 13,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 13,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Global Xero Context for App-Wide Connection Management\n *\n * Provides centralized Xero connection state and OAuth flow management\n * across all components that need financial data.\n */\n\nimport { createContext, useContext, useState, useEffect, useCallback } from 'react'\nimport { logInfo, logWarn, logError } from '../utils/structuredLogger'\n\nconst XeroContext = createContext()\n\nexport const useXero = () => {\n  const context = useContext(XeroContext)\n  if (!context) {\n    throw new Error('useXero must be used within a XeroProvider')\n  }\n  return context\n}\n\nexport const XeroProvider = ({ children }) => {\n  const [isConnected, setIsConnected] = useState(false)\n  const [isLoading, setIsLoading] = useState(true)\n  const [connectionStatus, setConnectionStatus] = useState(null)\n  const [organizationInfo, setOrganizationInfo] = useState(null)\n  const [lastError, setLastError] = useState(null)\n\n  // Check connection status on mount and periodically\n  const checkConnectionStatus = useCallback(async () => {\n    try {\n      setIsLoading(true)\n      setLastError(null)\n\n      logInfo('[XeroContext] Checking Xero connection status...')\n\n      const response = await fetch('/api/xero/status')\n      const data = await response.json()\n\n      logInfo('[XeroContext] Xero status API response:', data)\n\n      if (data.success && data.status) {\n        const wasConnected = isConnected\n        setIsConnected(data.status.connected)\n        setConnectionStatus(data.status)\n\n        // Log state changes\n        if (wasConnected !== data.status.connected) {\n          logInfo('[XeroContext] Connection state changed:', {\n            from: wasConnected,\n            to: data.status.connected,\n          })\n        }\n\n        if (data.status.connected && data.status.organizationId) {\n          setOrganizationInfo({\n            id: data.status.organizationId,\n            name: data.status.organizationName || 'Connected Organization',\n            lastSync: data.status.lastSync,\n            tokenExpiry: data.status.tokenExpiry,\n          })\n          logInfo('[XeroContext] Organization info updated:', {\n            id: data.status.organizationId,\n            name: data.status.organizationName,\n          })\n        } else {\n          setOrganizationInfo(null)\n        }\n\n        logInfo('[XeroContext] Final state:', {\n          connected: data.status.connected,\n          hasTokens: data.status.hasTokens,\n          organizationId: data.status.organizationId,\n        })\n      } else {\n        logWarn('[XeroContext] Invalid API response, setting disconnected state')\n        setIsConnected(false)\n        setConnectionStatus(null)\n        setOrganizationInfo(null)\n      }\n    } catch (error) {\n      logError('[XeroContext] Failed to check Xero connection status', error)\n      setLastError(error.message)\n      setIsConnected(false)\n    } finally {\n      setIsLoading(false)\n    }\n  }, [isConnected])\n\n  // Initialize connection check on mount\n  useEffect(() => {\n    logInfo('[XeroContext] Initializing XeroContext, checking connection status...')\n    checkConnectionStatus()\n\n    // Check connection status every 5 minutes\n    const interval = setInterval(\n      () => {\n        logInfo('[XeroContext] Periodic connection check (5min interval)')\n        checkConnectionStatus()\n      },\n      5 * 60 * 1000\n    )\n\n    return () => {\n      logInfo('[XeroContext] Cleaning up XeroContext interval')\n      clearInterval(interval)\n    }\n  }, [checkConnectionStatus])\n\n  // OAuth callback handling removed - not needed for custom connection\n\n  // OAuth flow removed - custom connection is always available when credentials are configured\n\n  // Disconnect method removed - custom connections are managed via environment configuration\n\n  // Retry connection (refresh status)\n  const retry = useCallback(() => {\n    setLastError(null)\n    checkConnectionStatus()\n  }, [checkConnectionStatus])\n\n  const value = {\n    // Connection state\n    isConnected,\n    isLoading,\n    connectionStatus,\n    organizationInfo,\n    lastError,\n\n    // Actions\n    retry,\n    checkConnectionStatus,\n  }\n\n  return <XeroContext.Provider value={value}>{children}</XeroContext.Provider>\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\hooks\\use-mobile.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\hooks\\useAuth.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\hooks\\useAuthRole.jsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useAuth\" is called in function \"loadAuth\" that is neither a React function component nor a custom React Hook function. React component names must start with an uppercase letter. React Hook names must start with the word \"use\".",
        "line": 27,
        "column": 40,
        "nodeType": "Identifier",
        "endLine": 27,
        "endColumn": 47
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react'\n\nconst isDevelopmentMode = import.meta.env.VITE_DEVELOPMENT_MODE === 'true'\n\nconst useAuthRole = () => {\n  const [authData, setAuthData] = useState({\n    isAuthorized: isDevelopmentMode,\n    role: isDevelopmentMode ? 'admin' : 'guest',\n    loading: !isDevelopmentMode,\n  })\n\n  useEffect(() => {\n    const loadAuth = async () => {\n      if (isDevelopmentMode) {\n        // Development mode - use mock data\n        const { mockUser } = await import('../auth/MockUser.js')\n        setAuthData({\n          isAuthorized: true,\n          role: mockUser.publicMetadata.role || 'admin',\n          user: mockUser,\n          loading: false,\n        })\n      } else {\n        // Production mode - use real Clerk auth\n        try {\n          const { useAuth } = await import('@clerk/clerk-react')\n          const { isSignedIn, user } = useAuth()\n          setAuthData({\n            isAuthorized: Boolean(isSignedIn),\n            role: isSignedIn ? user?.publicMetadata?.role || 'member' : 'guest',\n            user: user,\n            loading: false,\n          })\n        } catch (error) {\n          console.error('[useAuthRole] Failed to load Clerk auth:', error)\n          setAuthData({\n            isAuthorized: false,\n            role: 'guest',\n            loading: false,\n          })\n        }\n      }\n    }\n\n    loadAuth()\n  }, [])\n\n  return authData\n}\n\nexport default useAuthRole\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\hooks\\useDashboardLoader.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\hooks\\useDashboardSummary.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\hooks\\useDashboardSummary.test.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\hooks\\useEnvironmentAuth.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useAuth' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 54,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react'\n\nconst isDevelopmentMode = import.meta.env.VITE_DEVELOPMENT_MODE === 'true'\n\n/**\n * Master Authentication Hook - Environment Aware\n * Replaces all direct Clerk useAuth imports\n * Returns consistent auth interface regardless of environment\n */\nconst useEnvironmentAuth = () => {\n  const [authState, setAuthState] = useState(() => {\n    if (isDevelopmentMode) {\n      // Development mode - return auth state immediately\n      return {\n        isSignedIn: true,\n        isLoaded: true,\n        userId: 'dev_user_12345',\n        sessionId: 'sess_dev_12345',\n        loading: false,\n        // Additional Clerk-compatible properties\n        actor: null,\n        orgId: 'org_dev_12345',\n        orgRole: 'admin',\n        orgSlug: 'sentia-dev',\n      }\n    } else {\n      // Production mode - start with loading state\n      return {\n        isSignedIn: false,\n        isLoaded: false,\n        userId: null,\n        sessionId: null,\n        loading: true,\n        actor: null,\n        orgId: null,\n        orgRole: null,\n        orgSlug: null,\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (isDevelopmentMode) {\n      // Development mode - auth is immediately ready\n      console.log('[useEnvironmentAuth] Development mode - authentication bypassed')\n      return\n    }\n\n    // Production mode - load Clerk auth\n    const loadClerkAuth = async () => {\n      try {\n        console.log('[useEnvironmentAuth] Loading Clerk authentication...')\n        const clerkAuth = await import('@clerk/clerk-react')\n        const { useAuth } = clerkAuth\n\n        // This is a hack to get Clerk's auth state\n        // In a real implementation, we'd need to properly integrate with React context\n        console.log('[useEnvironmentAuth] Clerk loaded successfully')\n\n        // For now, set a basic production auth state\n        setAuthState(prevState => ({\n          ...prevState,\n          isLoaded: true,\n          loading: false,\n        }))\n      } catch (error) {\n        console.error('[useEnvironmentAuth] Failed to load Clerk:', error)\n        // Fallback to development-like state if Clerk fails\n        setAuthState({\n          isSignedIn: false,\n          isLoaded: true,\n          userId: null,\n          sessionId: null,\n          loading: false,\n          actor: null,\n          orgId: null,\n          orgRole: null,\n          orgSlug: null,\n        })\n      }\n    }\n\n    loadClerkAuth()\n  }, [])\n\n  // Development mode convenience methods\n  const signOut = async () => {\n    if (isDevelopmentMode) {\n      console.log('[useEnvironmentAuth] Sign out called in development mode - no action taken')\n      return Promise.resolve()\n    }\n    // Production mode would handle real sign out\n    console.log('[useEnvironmentAuth] Sign out not implemented for production mode in this hook')\n  }\n\n  return {\n    ...authState,\n    signOut,\n  }\n}\n\nexport default useEnvironmentAuth\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\hooks\\useEnvironmentUser.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useUser' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 44,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react'\nimport { mockUser } from '../auth/MockUser.js'\n\nconst isDevelopmentMode = import.meta.env.VITE_DEVELOPMENT_MODE === 'true'\n\n/**\n * Master User Hook - Environment Aware\n * Replaces all direct Clerk useUser imports\n * Returns consistent user interface regardless of environment\n */\nconst useEnvironmentUser = () => {\n  const [userState, setUserState] = useState(() => {\n    if (isDevelopmentMode) {\n      // Development mode - return user immediately\n      return {\n        isSignedIn: true,\n        isLoaded: true,\n        user: mockUser,\n        loading: false,\n      }\n    } else {\n      // Production mode - start with loading state\n      return {\n        isSignedIn: false,\n        isLoaded: false,\n        user: null,\n        loading: true,\n      }\n    }\n  })\n\n  useEffect(() => {\n    if (isDevelopmentMode) {\n      // Development mode - user is immediately ready\n      console.log('[useEnvironmentUser] Development mode - using mock user:', mockUser.emailAddress)\n      return\n    }\n\n    // Production mode - load Clerk user\n    const loadClerkUser = async () => {\n      try {\n        console.log('[useEnvironmentUser] Loading Clerk user...')\n        const clerkAuth = await import('@clerk/clerk-react')\n        const { useUser } = clerkAuth\n\n        // This is a simplified implementation\n        // In a real scenario, we'd need proper React context integration\n        console.log('[useEnvironmentUser] Clerk user loaded successfully')\n\n        setUserState(prevState => ({\n          ...prevState,\n          isLoaded: true,\n          loading: false,\n        }))\n      } catch (error) {\n        console.error('[useEnvironmentUser] Failed to load Clerk user:', error)\n        // Fallback state if Clerk fails\n        setUserState({\n          isSignedIn: false,\n          isLoaded: true,\n          user: null,\n          loading: false,\n        })\n      }\n    }\n\n    loadClerkUser()\n  }, [])\n\n  // Helper methods for user management\n  const updateUser = async updates => {\n    if (isDevelopmentMode) {\n      console.log('[useEnvironmentUser] User update called in development mode:', updates)\n      // In development, you could update the mock user if needed\n      return Promise.resolve(mockUser)\n    }\n    // Production mode would handle real user updates\n    console.log('[useEnvironmentUser] User update not implemented for production mode in this hook')\n  }\n\n  const reload = async () => {\n    if (isDevelopmentMode) {\n      console.log('[useEnvironmentUser] User reload called in development mode - no action needed')\n      return Promise.resolve()\n    }\n    // Production mode would reload user data\n    console.log('[useEnvironmentUser] User reload not implemented for production mode in this hook')\n  }\n\n  return {\n    ...userState,\n    updateUser,\n    reload,\n  }\n}\n\nexport default useEnvironmentUser\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\hooks\\useFinancialData.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\hooks\\useSSE.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\hooks\\useWorkingCapitalData.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\hooks\\useWorkingCapitalLiveData.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\lib\\devLog.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\lib\\utils.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\main.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\AdminPanelEnhanced.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\Analytics.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\ClerkSignInEnvironmentAware.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\DashboardEnterprise.jsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Unexpected token :",
        "line": 362,
        "column": 20
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "﻿import { Suspense, lazy, useState, useEffect, useCallback } from 'react'\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { Badge } from '@/components/ui/badge'\r\nimport { useXero } from '@/contexts/XeroContext'\r\nimport { useSSE } from '@/services/sse/useSSE'\r\n\r\nconst RegionalContributionChart = lazy(\r\n  () => import('@/components/dashboard/RegionalContributionChart')\r\n)\r\nconst PLAnalysisChart = lazy(() => import('@/components/dashboard/PLAnalysisChart'))\r\nconst ProductSalesChart = lazy(() => import('@/components/dashboard/ProductSalesChart'))\r\nconst StockLevelsWidget = lazy(() => import('@/components/widgets/StockLevelsWidget'))\r\nconst QuickActions = lazy(() => import('@/components/dashboard/QuickActions'))\r\n\r\n// Import API services\r\nimport plAnalysisApi from '@/services/api/plAnalysisApi'\r\nimport productSalesApi from '@/services/api/productSalesApi'\r\nimport regionalPerformanceApi from '@/services/api/regionalPerformanceApi'\r\nimport workingCapitalApi from '@/services/api/workingCapitalApi'\r\nimport { ApiError } from '@/services/api/baseApi'\r\n\r\nconst DashboardEnterprise = () => {\r\n  const { isConnected: xeroConnected } = useXero()\r\n\r\n  const [plData, setPLData] = useState([])\r\n  const [plLoading, setPLLoading] = useState(true)\r\n  const [plError, setPLError] = useState(null)\r\n  const [performanceKpis, setPerformanceKpis] = useState([])\r\n  const [kpiLoading, setKpiLoading] = useState(true)\r\n  const [kpiError, setKpiError] = useState(null)\r\n  const [productSalesData, setProductSalesData] = useState([])\r\n  const [salesLoading, setSalesLoading] = useState(true)\r\n  const [salesError, setSalesError] = useState(null)\r\n  const [regionalData, setRegionalData] = useState([])\r\n  const [regionalLoading, setRegionalLoading] = useState(true)\r\n  const [regionalError, setRegionalError] = useState(null)\r\n  const [capitalKpis, setCapitalKpis] = useState([])\r\n  const [capitalLoading, setCapitalLoading] = useState(true)\r\n  const [capitalError, setCapitalError] = useState(null)\r\n  const [requiresXeroConnection, setRequiresXeroConnection] = useState(false)\r\nconst handleDashboardMessage = useCallback(event => {\r\n  if (!event || !event.type) {\r\n    return;\r\n  }\r\n\r\n  if (event.type === 'kpi:update') {\r\n    setPerformanceKpis(previous => mergeMetricUpdates(previous, [event]));\r\n    return;\r\n  }\r\n\r\n  if (event.type === 'kpi:batch') {\r\n    const updates = Array.isArray(event.metrics) ? event.metrics : [];\r\n    if (updates.length > 0) {\r\n      setPerformanceKpis(previous => mergeMetricUpdates(previous, updates));\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (event.type === 'capital:update' || event.type === 'working_capital:update') {\r\n    const updates = Array.isArray(event.metrics) ? event.metrics : [event];\r\n    const filtered = updates.filter(item => item && item.metric);\r\n    if (filtered.length > 0) {\r\n      setCapitalKpis(previous => mergeMetricUpdates(previous, filtered));\r\n    }\r\n    return;\r\n  }\r\n\r\n  if (Array.isArray(event.metrics) && event.scope === 'capital') {\r\n    const filtered = event.metrics.filter(item => item && item.metric);\r\n    if (filtered.length > 0) {\r\n      setCapitalKpis(previous => mergeMetricUpdates(previous, filtered));\r\n    }\r\n  }\r\n}, []);\r\n\r\nconst { connected: dashboardConnected, latency: dashboardLatency } = useSSE('dashboard', {\r\n  onMessage: handleDashboardMessage,\r\n});\r\n\r\n  // Fetch P&L analysis data\r\n  useEffect(() => {\r\n    const fetchPLData = async () => {\r\n      try {\r\n        setPLLoading(true)\r\n        setPLError(null)\r\n\r\n        const response = await plAnalysisApi.getPLAnalysis()\r\n        if (response && response.success && response.data) {\r\n          setPLData(response.data)\r\n        } else if (response && response.requiresXeroConnection) {\r\n          setRequiresXeroConnection(true)\r\n          setPLData([])\r\n        } else {\r\n          throw new Error('Failed to fetch P&L data')\r\n        }\r\n      } catch (error) {\r\n        console.error('[DashboardEnterprise] Error fetching P&L data:', error)\r\n\r\n        // Check for Xero connection requirement in multiple ways\r\n        const errorMessage = error.message || ''\r\n        const requiresXero =\r\n          (error instanceof ApiError && error.data && error.data.requiresXeroConnection) ||\r\n          errorMessage.includes('Xero connection') ||\r\n          errorMessage.includes('requires Xero') ||\r\n          errorMessage.includes('financial data')\r\n\r\n        if (requiresXero) {\r\n          console.log('[DashboardEnterprise] P&L API indicates Xero connection required')\r\n          setRequiresXeroConnection(true)\r\n          setPLData([])\r\n        }\r\n\r\n        setPLError(error.message)\r\n        setPLData([]) // Set empty array on error\r\n      } finally {\r\n        setPLLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchPLData()\r\n  }, [])\r\n\r\n  // Fetch KPI summary data\r\n  useEffect(() => {\r\n    const fetchKPIData = async () => {\r\n      try {\r\n        setKpiLoading(true)\r\n        setKpiError(null)\r\n\r\n        const response = await plAnalysisApi.getKPISummary()\r\n\r\n        // Check if Xero connection is required\r\n        if (response && response.requiresXeroConnection) {\r\n          setRequiresXeroConnection(true)\r\n          setPerformanceKpis([])\r\n          return\r\n        }\r\n\r\n        // Handle direct response object (no .data wrapper)\r\n        if (response && response.success && response.data) {\r\n          const kpiData = response.data\r\n          setPerformanceKpis([\r\n            {\r\n              metric: 'annualRevenue',\r\n              label: 'Annual revenue',\r\n              value: kpiData.annualRevenue?.value ?? 'N/A',\r\n              helper: kpiData.annualRevenue?.helper ?? '',\r\n            },\r\n            {\r\n              metric: 'unitsSold',\r\n              label: 'Units sold',\r\n              value: kpiData.unitsSold?.value ?? 'N/A',\r\n              helper: kpiData.unitsSold?.helper ?? '',\r\n            },\r\n            {\r\n              metric: 'grossMargin',\r\n              label: 'Gross margin',\r\n              value: kpiData.grossMargin?.value ?? 'N/A',\r\n              helper: kpiData.grossMargin?.helper ?? '',\r\n            },\r\n          ])\r\n        } else if (response && !response.success) {\r\n          // API returned error response, might need Xero connection\r\n          if (response.requiresXeroConnection) {\r\n            setRequiresXeroConnection(true)\r\n          }\r\n          setPerformanceKpis([])\r\n        } else {\r\n          throw new Error('Failed to fetch KPI data')\r\n        }\r\n      } catch (error) {\r\n        console.error('[DashboardEnterprise] Error fetching KPI data:', error)\r\n\r\n        // Enhanced error information for development\r\n        const isDevelopment = import.meta.env.MODE === 'development'\r\n        const errorMessage = error.message || 'Unknown error'\r\n        const errorData = error.data || {}\r\n\r\n        // Extract detailed error information from server response\r\n        const serverErrorDetails = errorData.details || {}\r\n        const serverErrors = serverErrorDetails.errors || []\r\n\r\n        const errorDetails = isDevelopment\r\n          ? {\r\n              message: errorMessage,\r\n              status: error.status || error.response?.status,\r\n              type: error.constructor.name,\r\n              serverDetails: serverErrorDetails,\r\n              serverErrors: serverErrors,\r\n              stack: error.stack?.split('\\n')[0],\r\n              url: error.config?.url,\r\n              timestamp: new Date().toISOString(),\r\n            }\r\n          : { message: errorMessage }\r\n\r\n        // Check for Xero connection issues based on detailed server response\r\n        const requiresXero =\r\n          errorMessage.includes('Xero') ||\r\n          errorMessage.includes('financial data') ||\r\n          !serverErrorDetails.xeroServiceInitialized ||\r\n          !serverErrorDetails.xeroServiceConnected ||\r\n          serverErrors.some(err => err.source?.includes('xero'))\r\n\r\n        if (requiresXero) {\r\n          console.log('[DashboardEnterprise] KPI API indicates Xero connection issues')\r\n          setRequiresXeroConnection(true)\r\n          setPerformanceKpis([])\r\n        }\r\n\r\n        // Create detailed error message with server diagnostics\r\n        let displayError = 'Unable to load performance metrics'\r\n\r\n        if (isDevelopment && serverErrorDetails) {\r\n          const diagnostics = []\r\n\r\n          if (!serverErrorDetails.xeroServiceInitialized) {\r\n            diagnostics.push('Xero service failed to initialize')\r\n          }\r\n\r\n          if (!serverErrorDetails.xeroServiceConnected) {\r\n            diagnostics.push('Xero service not connected')\r\n          }\r\n\r\n          if (serverErrors.length > 0) {\r\n            serverErrors.forEach(err => {\r\n              diagnostics.push(`${err.source}: ${err.error}`)\r\n            })\r\n          }\r\n\r\n          if (diagnostics.length > 0) {\r\n            displayError += ` (${diagnostics.join(', ')})`\r\n          } else {\r\n            displayError += ` (${error.status || 'unknown status'}) - Check console for details`\r\n          }\r\n        }\r\n\r\n        setKpiError(displayError)\r\n        setPerformanceKpis([]) // Set empty array on error\r\n\r\n        // Log additional debugging information in development\r\n        if (isDevelopment) {\r\n          console.group('🔍 KPI Error Debug Information')\r\n          console.log('Full error object:', error)\r\n          console.log('Error details:', errorDetails)\r\n          console.log('API endpoint:', '/api/financial/kpi-summary')\r\n          console.log('Environment:', import.meta.env.MODE)\r\n          console.groupEnd()\r\n        }\r\n      } finally {\r\n        setKpiLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchKPIData()\r\n  }, [xeroConnected])\r\n\r\n  // Fetch product sales data\r\n  useEffect(() => {\r\n    const fetchProductSalesData = async () => {\r\n      try {\r\n        setSalesLoading(true)\r\n        setSalesError(null)\r\n\r\n        const response = await productSalesApi.getProductSalesData()\r\n        if (response && response.success && response.data) {\r\n          setProductSalesData(response.data)\r\n        } else if (response && response.requiresXeroConnection) {\r\n          setRequiresXeroConnection(true)\r\n          setProductSalesData([])\r\n        } else {\r\n          throw new Error('Failed to fetch product sales data')\r\n        }\r\n      } catch (error) {\r\n        console.error('[DashboardEnterprise] Error fetching product sales data:', error)\r\n\r\n        // Check for Xero connection requirement in multiple ways\r\n        const errorMessage = error.message || ''\r\n        const requiresXero =\r\n          (error instanceof ApiError && error.data && error.data.requiresXeroConnection) ||\r\n          errorMessage.includes('Xero connection') ||\r\n          errorMessage.includes('requires Xero') ||\r\n          errorMessage.includes('financial data')\r\n\r\n        if (requiresXero) {\r\n          console.log('[DashboardEnterprise] Product sales API indicates Xero connection required')\r\n          setRequiresXeroConnection(true)\r\n          setProductSalesData([])\r\n        }\r\n\r\n        setSalesError(error.message)\r\n        setProductSalesData([]) // Set empty array on error\r\n      } finally {\r\n        setSalesLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchProductSalesData()\r\n  }, [])\r\n\r\n  // Fetch regional performance data\r\n  useEffect(() => {\r\n    const fetchRegionalData = async () => {\r\n      try {\r\n        setRegionalLoading(true)\r\n        setRegionalError(null)\r\n\r\n        const response = await regionalPerformanceApi.getRegionalPerformance()\r\n        if (response.success) {\r\n          setRegionalData(response.data)\r\n        } else {\r\n          throw new Error('Failed to fetch regional performance data')\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching regional data:', error)\r\n        setRegionalError(error.message)\r\n        setRegionalData([]) // Set empty array on error\r\n      } finally {\r\n        setRegionalLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchRegionalData()\r\n  }, [])\r\n\r\n  // Fetch capital KPIs from working capital API\r\n  useEffect(() => {\r\n    const fetchCapitalKpis = async () => {\r\n      try {\r\n        setCapitalLoading(true)\r\n        setCapitalError(null)\r\n\r\n        const response = await workingCapitalApi.getWorkingCapitalSummary()\r\n\r\n        // Check if integration is required (working capital needs multiple systems)\r\n        if (\r\n          response &&\r\n          (response.requiresXeroConnection ||\r\n            response.error === 'Financial system integration required')\r\n        ) {\r\n          setRequiresXeroConnection(true)\r\n          setCapitalKpis([])\r\n          return\r\n        }\r\n\r\n        if (response && response.success && response.data) {\r\n          // Transform working capital data into KPI format\r\n          const data = response.data\r\n\r\n          // Format working capital as currency\r\n          const formatCurrency = amount => {\r\n            if (amount === 0 || amount === null || amount === undefined) return '£0'\r\n            const absAmount = Math.abs(amount)\r\n            const formatted = new Intl.NumberFormat('en-GB', {\r\n              style: 'currency',\r\n              currency: 'GBP',\r\n              minimumFractionDigits: 0,\r\n            }).format(absAmount)\r\n            return amount < 0 ? `-${formatted}` : formatted\r\n          }\r\n            {\r\n              metric: 'workingCapitalTotal',\r\n              label: 'Global working capital',\r\n              value: formatCurrency(data.workingCapital),\r\n              helper: 'Across all subsidiaries',\r\n            },\r\n            {\r\n              metric: 'cashConversionCycle',\r\n              label: 'Cash coverage',\r\n              value: data.cashConversionCycle ? ${data.cashConversionCycle} days : '0 days',\r\n              helper: 'Cash conversion cycle',\r\n            },\r\n            {\r\n              metric: 'currentRatio',\r\n              label: 'Current ratio',\r\n              value: data.currentRatio ? data.currentRatio.toFixed(2) : '0.00',\r\n              helper: 'Current assets / Current liabilities',\r\n            },\r\n            {\r\n              metric: 'quickRatio',\r\n              label: 'Quick ratio',\r\n              value: data.quickRatio ? data.quickRatio.toFixed(2) : '0.00',\r\n              helper: 'Liquid assets / Current liabilities',\r\n            },\r\n          ])\r\n        } else {\r\n          // Show integration required message for working capital\r\n          setRequiresXeroConnection(true)\r\n          setCapitalKpis([])\r\n        }\r\n      } catch (error) {\r\n        console.error('[DashboardEnterprise] Error fetching capital KPIs:', error)\r\n\r\n        // Check for Xero connection requirement in multiple ways\r\n        const errorMessage = error.message || ''\r\n        const requiresXero =\r\n          (error instanceof ApiError && error.data && error.data.requiresXeroConnection) ||\r\n          errorMessage.includes('Xero connection') ||\r\n          errorMessage.includes('requires Xero') ||\r\n          errorMessage.includes('financial data') ||\r\n          errorMessage.includes('Working capital analysis requires')\r\n\r\n        if (requiresXero) {\r\n          console.log(\r\n            '[DashboardEnterprise] Working capital API indicates Xero connection required:',\r\n            errorMessage\r\n          )\r\n          setRequiresXeroConnection(true)\r\n          setCapitalKpis([])\r\n        }\r\n\r\n        setCapitalError(error.message)\r\n        setCapitalKpis([]) // Set empty array on error\r\n      } finally {\r\n        setCapitalLoading(false)\r\n      }\r\n    }\r\n\r\n    fetchCapitalKpis()\r\n  }, [xeroConnected])\r\n\r\n  return (\r\n    <section className=\"space-y-6\">\r\n      {/* Xero connection banners removed - custom connections don't require user interaction */}\r\n\r\n      <header className=\"flex flex-col gap-3 sm:flex-row sm:items-center sm:justify-between\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-semibold tracking-tight\">Enterprise dashboard</h1>\r\n          <p className=\"text-sm text-muted-foreground\">\r\n            Consolidated liquidity and performance outlook across all regions.\r\n          </p>\r\n        </div>\r\n        <div className=\"flex flex-col items-start gap-2 sm:items-end\">\r\n          <Badge variant=\"outline\">Global view</Badge>\r\n          <div className=\"flex items-center gap-3 text-xs text-muted-foreground\">\r\n            <span\r\n              className={[\r\n                'flex items-center gap-1 font-medium',\r\n                dashboardConnected ? 'text-emerald-500' : 'text-destructive',\r\n              ].join(' ')}\r\n            >\r\n              <span aria-hidden=\"true\">{dashboardConnected ? '🟢' : '🔴'}</span>\r\n              <span>{dashboardConnected ? 'Live' : 'Offline'}</span>\r\n            </span>\r\n            {typeof dashboardLatency === 'number' && (\r\n              <span>{`${Math.round(dashboardLatency)}ms`}</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </header>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Capital position</CardTitle>\r\n          <CardDescription>Key metrics reviewed in the weekly treasury meeting.</CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-4\">\r\n          {capitalLoading ? (\r\n            Array.from({ length: 4 }).map((_, index) => (\r\n              <div key={index} className=\"rounded-lg border border-border bg-muted/30 p-4\">\r\n                <div className=\"h-3 bg-gray-200 rounded mb-2 animate-pulse\"></div>\r\n                <div className=\"h-6 bg-gray-200 rounded mb-2 animate-pulse\"></div>\r\n                <div className=\"h-3 bg-gray-200 rounded animate-pulse\"></div>\r\n              </div>\r\n            ))\r\n          ) : capitalError ? (\r\n            <div className=\"col-span-full flex items-center justify-center p-8\">\r\n              <div className=\"text-center\">\r\n                <p className=\"text-sm text-destructive mb-2\">Failed to load capital metrics</p>\r\n                <p className=\"text-xs text-muted-foreground\">{capitalError}</p>\r\n              </div>\r\n            </div>\r\n          ) : !capitalKpis || capitalKpis.length === 0 ? (\r\n            <div className=\"col-span-full flex items-center justify-center p-8\">\r\n              <div className=\"text-center\">\r\n                <p className=\"text-sm text-muted-foreground\">No capital metrics available</p>\r\n                <p className=\"text-xs text-muted-foreground\">Check API configuration</p>\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            (capitalKpis || []).map(item => (\r\n              <div key={item.metric || item.label} className=\"rounded-lg border border-border bg-muted/30 p-4\">\r\n                <p className=\"text-xs text-muted-foreground uppercase tracking-wide font-medium\">\r\n                  {item.label}\r\n                </p>\r\n                <p className=\"text-2xl font-bold text-foreground\">{item.value}</p>\r\n                <p className=\"text-xs text-muted-foreground\">{item.helper}</p>\r\n              </div>\r\n            ))\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>Performance metrics</CardTitle>\r\n          <CardDescription>\r\n            Key business performance indicators tracked for operational excellence.\r\n          </CardDescription>\r\n        </CardHeader>\r\n        <CardContent className=\"grid gap-4 sm:grid-cols-2 lg:grid-cols-3\">\r\n          {kpiLoading ? (\r\n            Array.from({ length: 3 }).map((_, index) => (\r\n              <div key={index} className=\"rounded-lg border border-border bg-muted/30 p-4\">\r\n                <div className=\"h-3 bg-gray-200 rounded mb-2 animate-pulse\"></div>\r\n                <div className=\"h-6 bg-gray-200 rounded mb-2 animate-pulse\"></div>\r\n                <div className=\"h-3 bg-gray-200 rounded animate-pulse\"></div>\r\n              </div>\r\n            ))\r\n          ) : kpiError ? (\r\n            <div className=\"col-span-full flex items-center justify-center p-8\">\r\n              <div className=\"text-center space-y-2\">\r\n                <p className=\"text-sm text-destructive mb-2\">Failed to load performance metrics</p>\r\n                <p className=\"text-xs text-muted-foreground\">{kpiError}</p>\r\n                {import.meta.env.MODE === 'development' && (\r\n                  <div className=\"mt-3 p-3 bg-muted rounded text-left space-y-2\">\r\n                    <p className=\"text-xs font-medium\">Development Debug Info:</p>\r\n                    <div className=\"space-y-1\">\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        • Endpoint: /api/financial/kpi-summary\r\n                      </p>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        • Status: {kpiError.includes('503') ? '503 Service Unavailable' : 'Error'}\r\n                      </p>\r\n                      <p className=\"text-xs text-muted-foreground\">\r\n                        • No fallback data shown (compliant with data integrity rule)\r\n                      </p>\r\n                    </div>\r\n                    {kpiError.includes('Xero') && (\r\n                      <div className=\"mt-2 p-2 bg-yellow-50 border-l-2 border-yellow-400 rounded\">\r\n                        <p className=\"text-xs font-medium text-yellow-800\">\r\n                          Xero Integration Issues:\r\n                        </p>\r\n                        <p className=\"text-xs text-yellow-700\">\r\n                          Check Xero API credentials and connection status in server logs\r\n                        </p>\r\n                      </div>\r\n                    )}\r\n                    <button\r\n                      onClick={() => window.location.reload()}\r\n                      className=\"mt-2 px-2 py-1 text-xs bg-primary text-primary-foreground rounded hover:bg-primary/90\"\r\n                    >\r\n                      Retry Connection\r\n                    </button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : !performanceKpis || performanceKpis.length === 0 ? (\r\n            <div className=\"col-span-full flex items-center justify-center p-8\">\r\n              <div className=\"text-center space-y-2\">\r\n                <p className=\"text-sm text-muted-foreground\">No performance metrics available</p>\r\n                <p className=\"text-xs text-muted-foreground\">Data sources connecting...</p>\r\n                {import.meta.env.MODE === 'development' && (\r\n                  <div className=\"mt-3 p-3 bg-muted rounded text-left\">\r\n                    <p className=\"text-xs font-medium mb-1\">Development Status:</p>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      • API endpoint responding but no data\r\n                    </p>\r\n                    <p className=\"text-xs text-muted-foreground\">• Check Xero integration status</p>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      • Fallback data should appear soon\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            (performanceKpis || []).map(item => (\r\n              <div key={item.metric || item.label} className=\"rounded-lg border border-border bg-muted/30 p-4\">\r\n                <p className=\"text-xs text-muted-foreground uppercase tracking-wide font-medium\">\r\n                  {item.label}\r\n                </p>\r\n                <p className=\"text-2xl font-bold text-foreground\">{item.value}</p>\r\n                <p className=\"text-xs text-muted-foreground\">{item.helper}</p>\r\n              </div>\r\n            ))\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* First row - 3 charts */}\r\n      <div className=\"grid gap-6 lg:grid-cols-3\">\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Product Sales Performance</CardTitle>\r\n            <CardDescription>Revenue by product line</CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"h-64\">\r\n            {salesLoading ? (\r\n              <div className=\"flex h-full items-center justify-center\">\r\n                <div className=\"flex flex-col items-center gap-2\">\r\n                  <div className=\"h-8 w-8 animate-spin rounded-full border-2 border-primary border-t-transparent\" />\r\n                  <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n                </div>\r\n              </div>\r\n            ) : salesError ? (\r\n              <div className=\"flex h-full items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                  <p className=\"text-sm text-destructive mb-2\">Failed to load product sales data</p>\r\n                  <p className=\"text-xs text-muted-foreground\">{salesError}</p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <Suspense\r\n                fallback={\r\n                  <div className=\"flex h-full items-center justify-center\">Loading chart...</div>\r\n                }\r\n              >\r\n                <ProductSalesChart data={productSalesData} />\r\n              </Suspense>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>P&L Analysis</CardTitle>\r\n            <CardDescription>Monthly profit and loss trends</CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"h-64\">\r\n            {plLoading ? (\r\n              <div className=\"flex h-full items-center justify-center\">\r\n                <div className=\"flex flex-col items-center gap-2\">\r\n                  <div className=\"h-8 w-8 animate-spin rounded-full border-2 border-primary border-t-transparent\" />\r\n                  <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n                </div>\r\n              </div>\r\n            ) : plError ? (\r\n              <div className=\"flex h-full items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                  <p className=\"text-sm text-destructive mb-2\">Failed to load P&L data</p>\r\n                  <p className=\"text-xs text-muted-foreground\">{plError}</p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <Suspense\r\n                fallback={\r\n                  <div className=\"flex h-full items-center justify-center\">Loading chart...</div>\r\n                }\r\n              >\r\n                <PLAnalysisChart data={plData} />\r\n              </Suspense>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle>Regional Contribution</CardTitle>\r\n            <CardDescription>Revenue and EBITDA by region</CardDescription>\r\n          </CardHeader>\r\n          <CardContent className=\"h-64\">\r\n            {regionalLoading ? (\r\n              <div className=\"flex h-full items-center justify-center\">\r\n                <div className=\"flex flex-col items-center gap-2\">\r\n                  <div className=\"h-8 w-8 animate-spin rounded-full border-2 border-primary border-t-transparent\" />\r\n                  <p className=\"text-sm text-muted-foreground\">Loading...</p>\r\n                </div>\r\n              </div>\r\n            ) : regionalError ? (\r\n              <div className=\"flex h-full items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                  <p className=\"text-sm text-destructive mb-2\">Failed to load regional data</p>\r\n                  <p className=\"text-xs text-muted-foreground\">{regionalError}</p>\r\n                </div>\r\n              </div>\r\n            ) : !regionalData || regionalData.length === 0 ? (\r\n              <div className=\"flex h-full items-center justify-center\">\r\n                <div className=\"text-center\">\r\n                  <p className=\"text-sm text-muted-foreground\">No regional data available</p>\r\n                  <p className=\"text-xs text-muted-foreground\">Check API configuration</p>\r\n                </div>\r\n              </div>\r\n            ) : (\r\n              <Suspense\r\n                fallback={\r\n                  <div className=\"flex h-full items-center justify-center\">Loading chart...</div>\r\n                }\r\n              >\r\n                <RegionalContributionChart data={regionalData} />\r\n              </Suspense>\r\n            )}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Second row - Stock Levels (single chart) */}\r\n      <Suspense\r\n        fallback={\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle>Current Stock Levels</CardTitle>\r\n              <CardDescription>Loading inventory data...</CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"h-64\">\r\n              <div className=\"flex h-full items-center justify-center\">\r\n                <div className=\"h-8 w-8 animate-spin rounded-full border-2 border-primary border-t-transparent\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        }\r\n      >\r\n        <StockLevelsWidget />\r\n      </Suspense>\r\n\r\n      {/* Quick Actions Section */}\r\n      <Suspense\r\n        fallback={\r\n          <Card className=\"mt-8\">\r\n            <CardHeader>\r\n              <CardTitle>Quick Actions</CardTitle>\r\n              <CardDescription>Loading quick actions...</CardDescription>\r\n            </CardHeader>\r\n            <CardContent className=\"h-32\">\r\n              <div className=\"flex h-full items-center justify-center\">\r\n                <div className=\"h-8 w-8 animate-spin rounded-full border-2 border-primary border-t-transparent\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        }\r\n      >\r\n        <QuickActions />\r\n      </Suspense>\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default DashboardEnterprise\r\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\Financial\\FinancialReports.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'lastUpdated' is defined but never used.",
        "line": 47,
        "column": 75,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 86,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "lastUpdated" },
            "fix": { "range": [1586, 1599], "text": "" },
            "desc": "Remove unused variable 'lastUpdated'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'setFilters' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 144,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 144,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "setFilters" },
            "fix": { "range": [4968, 4980], "text": "" },
            "desc": "Remove unused variable 'setFilters'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState } from 'react'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport {\n  DocumentChartBarIcon,\n  ArrowPathIcon,\n  CalendarIcon,\n  FunnelIcon,\n  ExclamationTriangleIcon,\n} from '@heroicons/react/24/outline'\nimport FinancialKPIStrip from '@/components/financial/FinancialKPIStrip'\nimport FinancialCharts from '@/components/financial/FinancialCharts'\nimport FinancialInsights from '@/components/financial/FinancialInsights'\nimport ProductPerformanceTable from '@/components/financial/ProductPerformanceTable'\nimport { useFinancialReportsData } from '@/hooks/useFinancialData'\nimport { cn } from '@/utils/cn'\n\nconst TimeRangeSelector = ({ value, onChange, className }) => {\n  const ranges = [\n    { key: 'month', label: 'This Month' },\n    { key: 'quarter', label: 'This Quarter' },\n    { key: 'year', label: 'This Year' },\n    { key: 'all', label: 'All Time' },\n  ]\n\n  return (\n    <div\n      className={cn('flex items-center space-x-1 border border-border rounded-lg p-1', className)}\n    >\n      {ranges.map(range => (\n        <button\n          key={range.key}\n          onClick={() => onChange(range.key)}\n          className={cn(\n            'px-3 py-1.5 text-sm rounded-md transition-colors',\n            value === range.key\n              ? 'bg-primary text-primary-foreground shadow-sm'\n              : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'\n          )}\n        >\n          {range.label}\n        </button>\n      ))}\n    </div>\n  )\n}\n\nconst PageHeader = ({ timeRange, onTimeRangeChange, isLoading, onRefresh, lastUpdated }) => {\n  return (\n    <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4 mb-6\">\n      <div className=\"flex items-center space-x-3\">\n        <div className=\"p-2 bg-blue-100 dark:bg-blue-900/20 rounded-lg\">\n          <DocumentChartBarIcon className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n        </div>\n        <div>\n          <h1 className=\"text-2xl font-bold text-foreground\">Financial Reports</h1>\n          <p className=\"text-sm text-muted-foreground\">\n            Comprehensive financial analysis and insights\n          </p>\n        </div>\n      </div>\n\n      <div className=\"flex items-center gap-3\">\n        <TimeRangeSelector\n          value={timeRange}\n          onChange={onTimeRangeChange}\n          className=\"hidden sm:flex\"\n        />\n\n        <button\n          onClick={onRefresh}\n          disabled={isLoading}\n          className={cn(\n            'inline-flex items-center px-3 py-2 text-sm font-medium rounded-md',\n            'bg-secondary text-secondary-foreground hover:bg-secondary/80',\n            'transition-colors focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2',\n            isLoading && 'opacity-50 cursor-not-allowed'\n          )}\n        >\n          <ArrowPathIcon className={cn('w-4 h-4 mr-2', isLoading && 'animate-spin')} />\n          Refresh\n        </button>\n      </div>\n    </div>\n  )\n}\n\nconst ErrorBoundary = ({ error, onRetry }) => (\n  <Card className=\"border-red-200 bg-red-50 dark:bg-red-900/10 dark:border-red-800\">\n    <CardContent className=\"p-6\">\n      <div className=\"flex items-center space-x-3\">\n        <ExclamationTriangleIcon className=\"w-6 h-6 text-red-600\" />\n        <div className=\"flex-1\">\n          <h3 className=\"font-medium text-red-900 dark:text-red-100\">\n            Unable to load financial data\n          </h3>\n          <p className=\"text-sm text-red-700 dark:text-red-300 mt-1\">\n            {error?.message || 'An unexpected error occurred while loading financial reports.'}\n          </p>\n          <button\n            onClick={onRetry}\n            className=\"mt-3 text-sm font-medium text-red-600 hover:text-red-500 underline\"\n          >\n            Try again\n          </button>\n        </div>\n      </div>\n    </CardContent>\n  </Card>\n)\n\nconst LoadingState = () => (\n  <div className=\"space-y-6\">\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n      {Array.from({ length: 4 }).map((_, i) => (\n        <Card key={i}>\n          <CardContent className=\"p-4\">\n            <div className=\"space-y-2\">\n              <div className=\"h-3 bg-gray-200 rounded animate-pulse\" />\n              <div className=\"h-6 bg-gray-200 rounded animate-pulse\" />\n              <div className=\"h-3 bg-gray-200 rounded animate-pulse w-2/3\" />\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n\n    {Array.from({ length: 3 }).map((_, i) => (\n      <Card key={i}>\n        <CardHeader>\n          <div className=\"h-6 bg-gray-200 rounded animate-pulse w-1/3\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 bg-gray-200 rounded animate-pulse\" />\n        </CardContent>\n      </Card>\n    ))}\n  </div>\n)\n\nconst FinancialReports = () => {\n  console.log('[Navigation Debug] FinancialReports component rendering')\n\n  const [timeRange, setTimeRange] = useState('year')\n  const [filters, setFilters] = useState({})\n\n  console.log('[Navigation Debug] FinancialReports state initialized:', { timeRange, filters })\n\n  const {\n    kpiData,\n    revenueData,\n    profitMarginData,\n    productData,\n    insightsData,\n    isLoading,\n    error,\n    refetch,\n  } = useFinancialReportsData({\n    timeRange,\n    filters,\n  })\n\n  console.log('[Navigation Debug] Hook data:', {\n    kpiData: !!kpiData,\n    revenueData: !!revenueData,\n    isLoading,\n    error: error?.message,\n  })\n\n  const handleRefresh = () => {\n    refetch()\n  }\n\n  const handleTimeRangeChange = newRange => {\n    setTimeRange(newRange)\n  }\n\n  if (error) {\n    console.log('[Navigation Debug] FinancialReports rendering error state:', error)\n    return (\n      <div className=\"p-6\">\n        <PageHeader\n          timeRange={timeRange}\n          onTimeRangeChange={handleTimeRangeChange}\n          isLoading={isLoading}\n          onRefresh={handleRefresh}\n        />\n        <ErrorBoundary error={error} onRetry={handleRefresh} />\n      </div>\n    )\n  }\n\n  console.log('[Navigation Debug] FinancialReports rendering main content')\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <PageHeader\n        timeRange={timeRange}\n        onTimeRangeChange={handleTimeRangeChange}\n        isLoading={isLoading}\n        onRefresh={handleRefresh}\n        lastUpdated={insightsData?.lastUpdated}\n      />\n\n      {/* Mobile Time Range Selector */}\n      <div className=\"sm:hidden\">\n        <TimeRangeSelector value={timeRange} onChange={handleTimeRangeChange} />\n      </div>\n\n      {isLoading ? (\n        <LoadingState />\n      ) : (\n        <>\n          {/* Financial KPI Strip */}\n          <FinancialKPIStrip data={kpiData} loading={isLoading} error={error} />\n\n          {/* Financial Charts */}\n          <FinancialCharts\n            revenueData={revenueData}\n            profitMarginData={profitMarginData}\n            loading={isLoading}\n            error={error}\n          />\n\n          {/* Two Column Layout for Insights and Product Performance */}\n          <div className=\"grid grid-cols-1 xl:grid-cols-2 gap-6\">\n            <FinancialInsights data={insightsData} loading={isLoading} error={error} />\n\n            <ProductPerformanceTable data={productData} loading={isLoading} error={error} />\n          </div>\n\n          {/* Footer Information */}\n          <Card className=\"bg-muted/30\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between text-sm text-muted-foreground\">\n                <div className=\"flex items-center space-x-2\">\n                  <CalendarIcon className=\"w-4 h-4\" />\n                  <span>\n                    Showing data for:{' '}\n                    {timeRange === 'year'\n                      ? 'Current Year'\n                      : timeRange === 'quarter'\n                        ? 'Current Quarter'\n                        : timeRange === 'month'\n                          ? 'Current Month'\n                          : 'All Time'}\n                  </span>\n                </div>\n                {insightsData?.lastUpdated && (\n                  <span>Last updated: {new Date(insightsData.lastUpdated).toLocaleString()}</span>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </>\n      )}\n    </div>\n  )\n}\n\nexport default FinancialReports\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\Forecasting.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\WhatIfAnalysisComprehensive.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'activeScenario' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 107,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 107,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "activeScenario" },
            "fix": { "range": [1755, 1769], "text": "" },
            "desc": "Remove unused variable 'activeScenario'."
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'calculateScenarioImpact'. Either include it or remove the dependency array.",
        "line": 116,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 116,
        "endColumn": 47,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [scenarios, timeHorizon, confidenceLevel, calculateScenarioImpact]",
            "fix": {
              "range": [2162, 2203],
              "text": "[scenarios, timeHorizon, confidenceLevel, calculateScenarioImpact]"
            }
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'newCosts' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 131,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 131,
        "endColumn": 21
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'productionImpact' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 135,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 135,
        "endColumn": 29
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'efficiencyImpact' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 136,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 136,
        "endColumn": 29
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'qualityImpact' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 137,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 137,
        "endColumn": 26
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'marketImpact' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 140,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 140,
        "endColumn": 25
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'customerImpact' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 141,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 141,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react'\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ComposedChart,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  PieChart,\n  Pie,\n  Cell,\n  Treemap,\n  FunnelChart,\n  Funnel,\n  LabelList,\n} from 'recharts'\nimport {\n  Calculator,\n  Brain,\n  Target,\n  Settings,\n  Download,\n  RefreshCw,\n  Play,\n  Pause,\n  BarChart3,\n  TrendingUp,\n  TrendingDown,\n  AlertTriangle,\n  CheckCircle,\n  Sliders,\n  Zap,\n  Calendar,\n  Filter,\n  Search,\n  Eye,\n  EyeOff,\n  Save,\n  RotateCcw,\n  DollarSign,\n  Percent,\n  Users,\n  Package,\n  Factory,\n  Truck,\n  ShoppingCart,\n  PieChart as PieChartIcon,\n  Activity,\n  ArrowUpRight,\n  ArrowDownRight,\n  Lightbulb,\n  BookOpen,\n  FileText,\n  Share2,\n  Copy,\n  ExternalLink,\n} from 'lucide-react'\n\nconst WhatIfAnalysisComprehensive = () => {\n  const [scenarios, setScenarios] = useState({\n    // Financial Parameters\n    revenueGrowth: 15,\n    marginImprovement: 2.5,\n    costReduction: 5,\n    priceIncrease: 3,\n\n    // Operational Parameters\n    productionCapacity: 100,\n    efficiencyGain: 8,\n    qualityImprovement: 12,\n    leadTimeReduction: 20,\n\n    // Market Parameters\n    marketShare: 18,\n    customerRetention: 85,\n    newCustomerAcquisition: 25,\n    averageOrderValue: 10,\n\n    // Investment Parameters\n    capexInvestment: 500000,\n    technologyUpgrade: 200000,\n    staffingIncrease: 15,\n    marketingSpend: 150000,\n\n    // Risk Parameters\n    economicDownturn: 0,\n    supplyChainDisruption: 0,\n    competitorAction: 0,\n    regulatoryChange: 0,\n  })\n\n  const [analysisResults, setAnalysisResults] = useState(null)\n  const [activeScenario, setActiveScenario] = useState('base')\n  const [savedScenarios, setSavedScenarios] = useState([])\n  const [calculating, setCalculating] = useState(false)\n  const [showAdvanced, setShowAdvanced] = useState(false)\n  const [timeHorizon, setTimeHorizon] = useState(12) // months\n  const [confidenceLevel, setConfidenceLevel] = useState(80)\n\n  useEffect(() => {\n    calculateScenarioImpact()\n  }, [scenarios, timeHorizon, confidenceLevel])\n\n  const calculateScenarioImpact = async () => {\n    setCalculating(true)\n\n    try {\n      await new Promise(resolve => setTimeout(resolve, 500))\n\n      const baseRevenue = 3170000\n      const baseMargin = 25\n      const baseCosts = baseRevenue * (1 - baseMargin / 100)\n\n      // Calculate financial impact\n      const newRevenue = baseRevenue * (1 + scenarios.revenueGrowth / 100)\n      const newMargin = baseMargin + scenarios.marginImprovement\n      const newCosts = baseCosts * (1 - scenarios.costReduction / 100)\n      const newGrossProfit = newRevenue * (newMargin / 100)\n\n      // Calculate operational impact\n      const productionImpact = scenarios.productionCapacity / 100\n      const efficiencyImpact = 1 + scenarios.efficiencyGain / 100\n      const qualityImpact = 1 + scenarios.qualityImprovement / 100\n\n      // Calculate market impact\n      const marketImpact = scenarios.marketShare / 18 // Base market share 18%\n      const customerImpact = scenarios.customerRetention / 85 // Base retention 85%\n\n      // Calculate investment impact\n      const totalInvestment =\n        scenarios.capexInvestment + scenarios.technologyUpgrade + scenarios.marketingSpend\n      const roi = ((newGrossProfit - (baseCosts + totalInvestment)) / totalInvestment) * 100\n\n      // Calculate risk-adjusted results\n      const riskFactor =\n        1 -\n        (scenarios.economicDownturn +\n          scenarios.supplyChainDisruption +\n          scenarios.competitorAction +\n          scenarios.regulatoryChange) /\n          400\n\n      const results = {\n        financial: {\n          revenue: newRevenue * riskFactor,\n          revenueChange: (newRevenue - baseRevenue) * riskFactor,\n          grossProfit: newGrossProfit * riskFactor,\n          grossProfitChange: (newGrossProfit - (baseRevenue * baseMargin) / 100) * riskFactor,\n          margin: newMargin * riskFactor,\n          roi: roi * riskFactor,\n          paybackPeriod: totalInvestment / (newGrossProfit / 12),\n          npv: calculateNPV(newGrossProfit, totalInvestment, timeHorizon),\n        },\n        operational: {\n          productionCapacity: scenarios.productionCapacity,\n          efficiency: scenarios.efficiencyGain,\n          quality: scenarios.qualityImprovement,\n          leadTime: scenarios.leadTimeReduction,\n          overallScore:\n            (scenarios.productionCapacity +\n              scenarios.efficiencyGain +\n              scenarios.qualityImprovement +\n              scenarios.leadTimeReduction) /\n            4,\n        },\n        market: {\n          marketShare: scenarios.marketShare,\n          customerRetention: scenarios.customerRetention,\n          newCustomers: scenarios.newCustomerAcquisition,\n          orderValue: scenarios.averageOrderValue,\n          marketScore:\n            (scenarios.marketShare +\n              scenarios.customerRetention +\n              scenarios.newCustomerAcquisition +\n              scenarios.averageOrderValue) /\n            4,\n        },\n        risks: {\n          economic: scenarios.economicDownturn,\n          supplyChain: scenarios.supplyChainDisruption,\n          competitive: scenarios.competitorAction,\n          regulatory: scenarios.regulatoryChange,\n          overallRisk:\n            (scenarios.economicDownturn +\n              scenarios.supplyChainDisruption +\n              scenarios.competitorAction +\n              scenarios.regulatoryChange) /\n            4,\n        },\n        timeline: generateTimelineData(newRevenue, newGrossProfit, totalInvestment, timeHorizon),\n        sensitivity: generateSensitivityAnalysis(),\n        monteCarlo: generateMonteCarloResults(),\n      }\n\n      setAnalysisResults(results)\n    } catch (error) {\n      console.error('Failed to calculate scenario impact:', error)\n    } finally {\n      setCalculating(false)\n    }\n  }\n\n  const calculateNPV = (annualCashFlow, initialInvestment, periods) => {\n    const discountRate = 0.1 // 10% discount rate\n    let npv = -initialInvestment\n\n    for (let i = 1; i <= periods; i++) {\n      npv += annualCashFlow / 12 / Math.pow(1 + discountRate / 12, i)\n    }\n\n    return npv\n  }\n\n  const generateTimelineData = (revenue, grossProfit, investment, months) => {\n    const data = []\n    const monthlyRevenue = revenue / 12\n    const monthlyProfit = grossProfit / 12\n    const monthlyInvestment = investment / 12\n\n    let cumulativeProfit = 0\n    let cumulativeInvestment = 0\n\n    for (let i = 0; i < months; i++) {\n      cumulativeProfit += monthlyProfit\n      cumulativeInvestment += monthlyInvestment\n\n      data.push({\n        month: i + 1,\n        revenue: monthlyRevenue * (1 + i * 0.01), // Growth over time\n        profit: monthlyProfit * (1 + i * 0.01),\n        cumulativeProfit: cumulativeProfit,\n        cumulativeInvestment: cumulativeInvestment,\n        netPosition: cumulativeProfit - cumulativeInvestment,\n        breakeven: cumulativeProfit >= cumulativeInvestment,\n      })\n    }\n\n    return data\n  }\n\n  const generateSensitivityAnalysis = () => {\n    const baseValue = 100\n    const parameters = [\n      'Revenue Growth',\n      'Margin Improvement',\n      'Cost Reduction',\n      'Production Capacity',\n      'Market Share',\n      'Customer Retention',\n    ]\n\n    return parameters.map(param => ({\n      parameter: param,\n      low: baseValue - 20 + Math.random() * 10,\n      base: baseValue,\n      high: baseValue + 20 + Math.random() * 10,\n      impact: (Math.random() - 0.5) * 40,\n    }))\n  }\n\n  const generateMonteCarloResults = () => {\n    const results = []\n    for (let i = 0; i < 1000; i++) {\n      const randomFactor = 0.8 + Math.random() * 0.4 // 80% to 120%\n      results.push({\n        scenario: i,\n        revenue: 3170000 * (1 + scenarios.revenueGrowth / 100) * randomFactor,\n        profit: 3170000 * 0.25 * (1 + scenarios.marginImprovement / 100) * randomFactor,\n        roi: Math.random() * 50 - 10, // -10% to 40% ROI\n      })\n    }\n    return results\n  }\n\n  const saveScenario = () => {\n    const scenarioName = prompt('Enter scenario name:')\n    if (scenarioName) {\n      const newScenario = {\n        id: Date.now(),\n        name: scenarioName,\n        parameters: { ...scenarios },\n        results: { ...analysisResults },\n        createdAt: new Date().toISOString(),\n      }\n      setSavedScenarios(prev => [...prev, newScenario])\n    }\n  }\n\n  const loadScenario = scenario => {\n    setScenarios(scenario.parameters)\n    setActiveScenario(scenario.name)\n  }\n\n  const resetScenarios = () => {\n    setScenarios({\n      revenueGrowth: 15,\n      marginImprovement: 2.5,\n      costReduction: 5,\n      priceIncrease: 3,\n      productionCapacity: 100,\n      efficiencyGain: 8,\n      qualityImprovement: 12,\n      leadTimeReduction: 20,\n      marketShare: 18,\n      customerRetention: 85,\n      newCustomerAcquisition: 25,\n      averageOrderValue: 10,\n      capexInvestment: 500000,\n      technologyUpgrade: 200000,\n      staffingIncrease: 15,\n      marketingSpend: 150000,\n      economicDownturn: 0,\n      supplyChainDisruption: 0,\n      competitorAction: 0,\n      regulatoryChange: 0,\n    })\n    setActiveScenario('base')\n  }\n\n  const formatCurrency = value => {\n    return new Intl.NumberFormat('en-GB', {\n      style: 'currency',\n      currency: 'GBP',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value)\n  }\n\n  const formatPercent = value => {\n    return `${value > 0 ? '+' : ''}${value.toFixed(1)}%`\n  }\n\n  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4']\n\n  return (\n    <div className=\"space-y-6 p-6 bg-gray-50 min-h-screen\">\n      {/* Header */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">What-If Analysis Center</h1>\n            <p className=\"text-gray-600\">Advanced scenario modeling and strategic planning</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <select\n              value={timeHorizon}\n              onChange={e => setTimeHorizon(parseInt(e.target.value))}\n              className=\"px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value={6}>6 Months</option>\n              <option value={12}>12 Months</option>\n              <option value={24}>24 Months</option>\n              <option value={36}>36 Months</option>\n            </select>\n            <button\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              className=\"flex items-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n            >\n              {showAdvanced ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              <span>{showAdvanced ? 'Hide' : 'Show'} Advanced</span>\n            </button>\n            <button\n              onClick={saveScenario}\n              className=\"flex items-center space-x-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700\"\n            >\n              <Save className=\"h-4 w-4\" />\n              <span>Save</span>\n            </button>\n            <button\n              onClick={resetScenarios}\n              className=\"flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700\"\n            >\n              <RotateCcw className=\"h-4 w-4\" />\n              <span>Reset</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Scenario Controls */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Interactive Scenario Parameters</h3>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-gray-600\">Confidence Level:</span>\n              <input\n                type=\"range\"\n                min=\"50\"\n                max=\"95\"\n                value={confidenceLevel}\n                onChange={e => setConfidenceLevel(parseInt(e.target.value))}\n                className=\"w-20\"\n              />\n              <span className=\"text-sm font-medium text-gray-900\">{confidenceLevel}%</span>\n            </div>\n            {calculating && (\n              <div className=\"flex items-center space-x-2 text-blue-600\">\n                <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n                <span className=\"text-sm\">Calculating...</span>\n              </div>\n            )}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {/* Financial Parameters */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium text-gray-900 border-b pb-2 flex items-center\">\n              <DollarSign className=\"h-4 w-4 mr-2\" />\n              Financial Parameters\n            </h4>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Revenue Growth: {scenarios.revenueGrowth}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"-20\"\n                max=\"50\"\n                value={scenarios.revenueGrowth}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, revenueGrowth: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>-20%</span>\n                <span>50%</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Margin Improvement: {scenarios.marginImprovement}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"-5\"\n                max=\"15\"\n                step=\"0.5\"\n                value={scenarios.marginImprovement}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, marginImprovement: parseFloat(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>-5%</span>\n                <span>15%</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Cost Reduction: {scenarios.costReduction}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"25\"\n                value={scenarios.costReduction}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, costReduction: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>0%</span>\n                <span>25%</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Price Increase: {scenarios.priceIncrease}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"20\"\n                value={scenarios.priceIncrease}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, priceIncrease: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>0%</span>\n                <span>20%</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Operational Parameters */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium text-gray-900 border-b pb-2 flex items-center\">\n              <Factory className=\"h-4 w-4 mr-2\" />\n              Operational Parameters\n            </h4>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Production Capacity: {scenarios.productionCapacity}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"50\"\n                max=\"200\"\n                value={scenarios.productionCapacity}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, productionCapacity: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>50%</span>\n                <span>200%</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Efficiency Gain: {scenarios.efficiencyGain}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"30\"\n                value={scenarios.efficiencyGain}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, efficiencyGain: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>0%</span>\n                <span>30%</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Quality Improvement: {scenarios.qualityImprovement}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"50\"\n                value={scenarios.qualityImprovement}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, qualityImprovement: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>0%</span>\n                <span>50%</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Lead Time Reduction: {scenarios.leadTimeReduction}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"60\"\n                value={scenarios.leadTimeReduction}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, leadTimeReduction: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>0%</span>\n                <span>60%</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Market Parameters */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium text-gray-900 border-b pb-2 flex items-center\">\n              <Users className=\"h-4 w-4 mr-2\" />\n              Market Parameters\n            </h4>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Market Share: {scenarios.marketShare}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"5\"\n                max=\"40\"\n                value={scenarios.marketShare}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, marketShare: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>5%</span>\n                <span>40%</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Customer Retention: {scenarios.customerRetention}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"60\"\n                max=\"98\"\n                value={scenarios.customerRetention}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, customerRetention: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>60%</span>\n                <span>98%</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                New Customer Acquisition: {scenarios.newCustomerAcquisition}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"100\"\n                value={scenarios.newCustomerAcquisition}\n                onChange={e =>\n                  setScenarios(prev => ({\n                    ...prev,\n                    newCustomerAcquisition: parseInt(e.target.value),\n                  }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>0%</span>\n                <span>100%</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Average Order Value: +{scenarios.averageOrderValue}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"-20\"\n                max=\"50\"\n                value={scenarios.averageOrderValue}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, averageOrderValue: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>-20%</span>\n                <span>50%</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Investment Parameters */}\n          <div className=\"space-y-4\">\n            <h4 className=\"font-medium text-gray-900 border-b pb-2 flex items-center\">\n              <Target className=\"h-4 w-4 mr-2\" />\n              Investment Parameters\n            </h4>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                CapEx Investment: £{(scenarios.capexInvestment / 1000).toFixed(0)}K\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"2000000\"\n                step=\"50000\"\n                value={scenarios.capexInvestment}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, capexInvestment: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>£0</span>\n                <span>£2M</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Technology Upgrade: £{(scenarios.technologyUpgrade / 1000).toFixed(0)}K\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"1000000\"\n                step=\"25000\"\n                value={scenarios.technologyUpgrade}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, technologyUpgrade: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>£0</span>\n                <span>£1M</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Staffing Increase: {scenarios.staffingIncrease}%\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"50\"\n                value={scenarios.staffingIncrease}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, staffingIncrease: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>0%</span>\n                <span>50%</span>\n              </div>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Marketing Spend: £{(scenarios.marketingSpend / 1000).toFixed(0)}K\n              </label>\n              <input\n                type=\"range\"\n                min=\"0\"\n                max=\"500000\"\n                step=\"10000\"\n                value={scenarios.marketingSpend}\n                onChange={e =>\n                  setScenarios(prev => ({ ...prev, marketingSpend: parseInt(e.target.value) }))\n                }\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>£0</span>\n                <span>£500K</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Risk Parameters (Advanced) */}\n        {showAdvanced && (\n          <div className=\"mt-8 pt-6 border-t border-gray-200\">\n            <h4 className=\"font-medium text-gray-900 mb-4 flex items-center\">\n              <AlertTriangle className=\"h-4 w-4 mr-2 text-red-500\" />\n              Risk Parameters\n            </h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Economic Downturn Risk: {scenarios.economicDownturn}%\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"50\"\n                  value={scenarios.economicDownturn}\n                  onChange={e =>\n                    setScenarios(prev => ({ ...prev, economicDownturn: parseInt(e.target.value) }))\n                  }\n                  className=\"w-full h-2 bg-red-200 rounded-lg appearance-none cursor-pointer\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Supply Chain Disruption: {scenarios.supplyChainDisruption}%\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"50\"\n                  value={scenarios.supplyChainDisruption}\n                  onChange={e =>\n                    setScenarios(prev => ({\n                      ...prev,\n                      supplyChainDisruption: parseInt(e.target.value),\n                    }))\n                  }\n                  className=\"w-full h-2 bg-red-200 rounded-lg appearance-none cursor-pointer\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Competitor Action: {scenarios.competitorAction}%\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"50\"\n                  value={scenarios.competitorAction}\n                  onChange={e =>\n                    setScenarios(prev => ({ ...prev, competitorAction: parseInt(e.target.value) }))\n                  }\n                  className=\"w-full h-2 bg-red-200 rounded-lg appearance-none cursor-pointer\"\n                />\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Regulatory Change: {scenarios.regulatoryChange}%\n                </label>\n                <input\n                  type=\"range\"\n                  min=\"0\"\n                  max=\"50\"\n                  value={scenarios.regulatoryChange}\n                  onChange={e =>\n                    setScenarios(prev => ({ ...prev, regulatoryChange: parseInt(e.target.value) }))\n                  }\n                  className=\"w-full h-2 bg-red-200 rounded-lg appearance-none cursor-pointer\"\n                />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Results Dashboard */}\n      {analysisResults && (\n        <>\n          {/* Key Results */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n            <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-6 border border-blue-200\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-blue-600 text-sm font-medium\">Revenue Impact</p>\n                  <p className=\"text-3xl font-bold text-blue-900\">\n                    {formatCurrency(analysisResults.financial.revenueChange)}\n                  </p>\n                  <div className=\"flex items-center mt-2\">\n                    {analysisResults.financial.revenueChange > 0 ? (\n                      <ArrowUpRight className=\"h-4 w-4 text-green-500\" />\n                    ) : (\n                      <ArrowDownRight className=\"h-4 w-4 text-red-500\" />\n                    )}\n                    <span\n                      className={`text-sm ml-1 ${\n                        analysisResults.financial.revenueChange > 0\n                          ? 'text-green-600'\n                          : 'text-red-600'\n                      }`}\n                    >\n                      {formatPercent((analysisResults.financial.revenueChange / 3170000) * 100)}\n                    </span>\n                  </div>\n                </div>\n                <DollarSign className=\"h-8 w-8 text-blue-600\" />\n              </div>\n            </div>\n\n            <div className=\"bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-6 border border-green-200\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-green-600 text-sm font-medium\">ROI</p>\n                  <p className=\"text-3xl font-bold text-green-900\">\n                    {formatPercent(analysisResults.financial.roi)}\n                  </p>\n                  <div className=\"flex items-center mt-2\">\n                    <Target className=\"h-4 w-4 text-green-500\" />\n                    <span className=\"text-sm text-green-600 ml-1\">\n                      {analysisResults.financial.paybackPeriod.toFixed(1)} months payback\n                    </span>\n                  </div>\n                </div>\n                <Calculator className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </div>\n\n            <div className=\"bg-gradient-to-br from-orange-50 to-orange-100 rounded-xl p-6 border border-orange-200\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-orange-600 text-sm font-medium\">NPV</p>\n                  <p className=\"text-3xl font-bold text-orange-900\">\n                    {formatCurrency(analysisResults.financial.npv)}\n                  </p>\n                  <div className=\"flex items-center mt-2\">\n                    <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                    <span className=\"text-sm text-green-600 ml-1\">{timeHorizon} month horizon</span>\n                  </div>\n                </div>\n                <TrendingUp className=\"h-8 w-8 text-orange-600\" />\n              </div>\n            </div>\n\n            <div className=\"bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-6 border border-purple-200\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-purple-600 text-sm font-medium\">Risk Score</p>\n                  <p className=\"text-3xl font-bold text-purple-900\">\n                    {analysisResults.risks.overallRisk.toFixed(1)}%\n                  </p>\n                  <div className=\"flex items-center mt-2\">\n                    <AlertTriangle\n                      className={`h-4 w-4 ${\n                        analysisResults.risks.overallRisk < 10\n                          ? 'text-green-500'\n                          : analysisResults.risks.overallRisk < 25\n                            ? 'text-yellow-500'\n                            : 'text-red-500'\n                      }`}\n                    />\n                    <span\n                      className={`text-sm ml-1 ${\n                        analysisResults.risks.overallRisk < 10\n                          ? 'text-green-600'\n                          : analysisResults.risks.overallRisk < 25\n                            ? 'text-yellow-600'\n                            : 'text-red-600'\n                      }`}\n                    >\n                      {analysisResults.risks.overallRisk < 10\n                        ? 'Low Risk'\n                        : analysisResults.risks.overallRisk < 25\n                          ? 'Medium Risk'\n                          : 'High Risk'}\n                    </span>\n                  </div>\n                </div>\n                <Brain className=\"h-8 w-8 text-purple-600\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Timeline Analysis */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              Timeline Analysis ({timeHorizon} Months)\n            </h3>\n            <ResponsiveContainer width=\"100%\" height={400}>\n              <ComposedChart data={analysisResults.timeline}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"month\" />\n                <YAxis tickFormatter={value => formatCurrency(value)} />\n                <Tooltip formatter={value => formatCurrency(value)} />\n                <Legend />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"cumulativeProfit\"\n                  stroke=\"#10B981\"\n                  fill=\"#10B981\"\n                  fillOpacity={0.3}\n                  name=\"Cumulative Profit\"\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"cumulativeInvestment\"\n                  stroke=\"#EF4444\"\n                  fill=\"#EF4444\"\n                  fillOpacity={0.3}\n                  name=\"Cumulative Investment\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"netPosition\"\n                  stroke=\"#3B82F6\"\n                  strokeWidth={3}\n                  name=\"Net Position\"\n                />\n                <Bar dataKey=\"revenue\" fill=\"#8B5CF6\" name=\"Monthly Revenue\" />\n              </ComposedChart>\n            </ResponsiveContainer>\n          </div>\n\n          {/* Sensitivity Analysis */}\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Sensitivity Analysis</h3>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart data={analysisResults.sensitivity}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"parameter\" angle={-45} textAnchor=\"end\" height={80} />\n                  <YAxis />\n                  <Tooltip />\n                  <Legend />\n                  <Bar dataKey=\"low\" fill=\"#EF4444\" name=\"Low Case\" />\n                  <Bar dataKey=\"base\" fill=\"#6B7280\" name=\"Base Case\" />\n                  <Bar dataKey=\"high\" fill=\"#10B981\" name=\"High Case\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Risk Assessment</h3>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <RadarChart\n                  data={[\n                    { risk: 'Economic', value: analysisResults.risks.economic },\n                    { risk: 'Supply Chain', value: analysisResults.risks.supplyChain },\n                    { risk: 'Competitive', value: analysisResults.risks.competitive },\n                    { risk: 'Regulatory', value: analysisResults.risks.regulatory },\n                  ]}\n                >\n                  <PolarGrid />\n                  <PolarAngleAxis dataKey=\"risk\" />\n                  <PolarRadiusAxis angle={90} domain={[0, 50]} />\n                  <Radar\n                    name=\"Risk Level\"\n                    dataKey=\"value\"\n                    stroke=\"#EF4444\"\n                    fill=\"#EF4444\"\n                    fillOpacity={0.3}\n                    strokeWidth={2}\n                  />\n                  <Tooltip />\n                </RadarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Monte Carlo Results */}\n          {showAdvanced && (\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                Monte Carlo Simulation (1,000 scenarios)\n              </h3>\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <ScatterChart data={analysisResults.monteCarlo.slice(0, 200)}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis\n                    dataKey=\"revenue\"\n                    name=\"Revenue\"\n                    tickFormatter={value => formatCurrency(value)}\n                  />\n                  <YAxis dataKey=\"roi\" name=\"ROI\" tickFormatter={value => formatPercent(value)} />\n                  <Tooltip\n                    formatter={(value, name) => [\n                      name === 'Revenue' ? formatCurrency(value) : formatPercent(value),\n                      name,\n                    ]}\n                  />\n                  <Scatter\n                    name=\"Scenarios\"\n                    data={analysisResults.monteCarlo.slice(0, 200)}\n                    fill=\"#3B82F6\"\n                  />\n                </ScatterChart>\n              </ResponsiveContainer>\n            </div>\n          )}\n        </>\n      )}\n\n      {/* Saved Scenarios */}\n      {savedScenarios.length > 0 && (\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Saved Scenarios</h3>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {savedScenarios.map(scenario => (\n              <div\n                key={scenario.id}\n                className=\"p-4 border border-gray-200 rounded-lg hover:bg-gray-50\"\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h4 className=\"font-medium text-gray-900\">{scenario.name}</h4>\n                  <button\n                    onClick={() => loadScenario(scenario)}\n                    className=\"text-blue-600 hover:text-blue-800 text-sm\"\n                  >\n                    Load\n                  </button>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  Created: {new Date(scenario.createdAt).toLocaleDateString()}\n                </p>\n                <div className=\"mt-2 text-sm\">\n                  <p className=\"text-gray-600\">\n                    Revenue Impact: {formatCurrency(scenario.results.financial.revenueChange)}\n                  </p>\n                  <p className=\"text-gray-600\">\n                    ROI: {formatPercent(scenario.results.financial.roi)}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default WhatIfAnalysisComprehensive\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\WorkingCapitalComprehensive.jsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'loadWorkingCapitalData'. Either include it or remove the dependency array.",
        "line": 82,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 82,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [loadWorkingCapitalData]",
            "fix": { "range": [1442, 1444], "text": "[loadWorkingCapitalData]" }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'calculateScenarioImpact'. Either include it or remove the dependency array.",
        "line": 88,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 88,
        "endColumn": 31,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [scenarios, analysisData, calculateScenarioImpact]",
            "fix": {
              "range": [1534, 1559],
              "text": "[scenarios, analysisData, calculateScenarioImpact]"
            }
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'index' is defined but never used.",
        "line": 517,
        "column": 65,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 517,
        "endColumn": 70,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [16993, 17000], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react'\nimport {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  ScatterChart,\n  Scatter,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ComposedChart,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  PieChart,\n  Pie,\n  Cell,\n  Treemap,\n} from 'recharts'\nimport {\n  DollarSign,\n  TrendingUp,\n  TrendingDown,\n  Calculator,\n  Brain,\n  Target,\n  Settings,\n  Download,\n  RefreshCw,\n  AlertTriangle,\n  CheckCircle,\n  Play,\n  BarChart3,\n  PieChart as PieChartIcon,\n  Activity,\n  Users,\n  Package,\n  ArrowUpRight,\n  ArrowDownRight,\n  Lightbulb,\n  Save,\n  RotateCcw,\n  Sliders,\n  Zap,\n  Calendar,\n  Filter,\n  Search,\n  Eye,\n  EyeOff,\n} from 'lucide-react'\n\nconst WorkingCapitalComprehensive = () => {\n  const [scenarios, setScenarios] = useState({\n    receivablesDays: 45,\n    payablesDays: 30,\n    inventoryDays: 60,\n    salesGrowth: 15,\n    marginImprovement: 2,\n    seasonalityFactor: 1.0,\n    creditTerms: 30,\n    supplierTerms: 45,\n    inventoryTurnover: 6.1,\n    cashConversionCycle: 75,\n  })\n\n  const [analysisData, setAnalysisData] = useState(null)\n  const [activeView, setActiveView] = useState('overview')\n  const [loading, setLoading] = useState(true)\n  const [calculating, setCalculating] = useState(false)\n  const [showAdvanced, setShowAdvanced] = useState(false)\n\n  useEffect(() => {\n    loadWorkingCapitalData()\n  }, [])\n\n  useEffect(() => {\n    if (analysisData) {\n      calculateScenarioImpact()\n    }\n  }, [scenarios, analysisData])\n\n  const loadWorkingCapitalData = async () => {\n    setLoading(true)\n    try {\n      // Simulate API call\n      await new Promise(resolve => setTimeout(resolve, 1000))\n\n      const data = {\n        current: {\n          cash: 285000,\n          receivables: 420000,\n          inventory: 680000,\n          payables: 315000,\n          workingCapital: 1070000,\n          cashConversionCycle: 75,\n          currentRatio: 2.1,\n          quickRatio: 1.4,\n        },\n        historical: generateHistoricalData(),\n        benchmarks: generateBenchmarkData(),\n        cashFlow: generateCashFlowData(),\n        components: generateComponentAnalysis(),\n        forecasts: generateForecastData(),\n        risks: generateRiskAnalysis(),\n      }\n\n      setAnalysisData(data)\n    } catch (error) {\n      console.error('Failed to load working capital data:', error)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const calculateScenarioImpact = async () => {\n    setCalculating(true)\n\n    try {\n      await new Promise(resolve => setTimeout(resolve, 300))\n\n      const current = analysisData.current\n      const dailySales = 3170000 / 365 // Annual revenue / 365\n\n      // Calculate new working capital components\n      const newReceivables = dailySales * scenarios.receivablesDays\n      const newInventory = dailySales * scenarios.inventoryDays * 0.7 // Cost of goods\n      const newPayables = dailySales * scenarios.payablesDays * 0.7\n\n      const newWorkingCapital = newReceivables + newInventory - newPayables\n      const workingCapitalChange = newWorkingCapital - current.workingCapital\n\n      const newCashConversionCycle =\n        scenarios.receivablesDays + scenarios.inventoryDays - scenarios.payablesDays\n\n      setAnalysisData(prev => ({\n        ...prev,\n        scenario: {\n          receivables: newReceivables,\n          inventory: newInventory,\n          payables: newPayables,\n          workingCapital: newWorkingCapital,\n          workingCapitalChange: workingCapitalChange,\n          cashConversionCycle: newCashConversionCycle,\n          cashImpact: -workingCapitalChange, // Negative WC change = positive cash impact\n          roi: (workingCapitalChange / current.workingCapital) * 100,\n        },\n      }))\n    } catch (error) {\n      console.error('Failed to calculate scenario impact:', error)\n    } finally {\n      setCalculating(false)\n    }\n  }\n\n  const generateHistoricalData = () => {\n    const months = []\n    for (let i = 11; i >= 0; i--) {\n      const date = new Date()\n      date.setMonth(date.getMonth() - i)\n\n      const baseWC = 1000000\n      const seasonal = Math.sin((date.getMonth() / 12) * 2 * Math.PI) * 100000\n      const trend = i * 5000\n      const noise = (Math.random() - 0.5) * 50000\n\n      months.push({\n        month: date.toLocaleString('default', { month: 'short' }),\n        workingCapital: baseWC + seasonal + trend + noise,\n        receivables: 400000 + seasonal * 0.4 + noise * 0.3,\n        inventory: 650000 + seasonal * 0.6 + noise * 0.4,\n        payables: 300000 + seasonal * 0.2 + noise * 0.2,\n        cashConversionCycle: 70 + seasonal / 10000 + noise / 20000,\n        currentRatio: 2.0 + seasonal / 500000 + noise / 1000000,\n      })\n    }\n    return months\n  }\n\n  const generateBenchmarkData = () => [\n    { metric: 'Working Capital Ratio', current: 2.1, industry: 1.8, best: 2.5 },\n    { metric: 'Cash Conversion Cycle', current: 75, industry: 85, best: 60 },\n    { metric: 'Receivables Days', current: 45, industry: 50, best: 35 },\n    { metric: 'Inventory Days', current: 60, industry: 70, best: 45 },\n    { metric: 'Payables Days', current: 30, industry: 35, best: 45 },\n  ]\n\n  const generateCashFlowData = () => {\n    const data = []\n    for (let i = 0; i < 12; i++) {\n      const date = new Date()\n      date.setMonth(date.getMonth() + i)\n\n      data.push({\n        month: date.toLocaleString('default', { month: 'short' }),\n        operatingCashFlow: 180000 + (Math.random() - 0.5) * 40000,\n        freeCashFlow: 120000 + (Math.random() - 0.5) * 30000,\n        workingCapitalChange: (Math.random() - 0.5) * 50000,\n        capex: -45000 + (Math.random() - 0.5) * 20000,\n      })\n    }\n    return data\n  }\n\n  const generateComponentAnalysis = () => [\n    {\n      component: 'Accounts Receivable',\n      current: 420000,\n      optimal: 350000,\n      opportunity: 70000,\n      days: 45,\n      optimalDays: 35,\n      trend: 'stable',\n    },\n    {\n      component: 'Inventory',\n      current: 680000,\n      optimal: 580000,\n      opportunity: 100000,\n      days: 60,\n      optimalDays: 45,\n      trend: 'increasing',\n    },\n    {\n      component: 'Accounts Payable',\n      current: 315000,\n      optimal: 420000,\n      opportunity: -105000,\n      days: 30,\n      optimalDays: 40,\n      trend: 'stable',\n    },\n  ]\n\n  const generateForecastData = () => {\n    const data = []\n    for (let i = 0; i < 6; i++) {\n      const date = new Date()\n      date.setMonth(date.getMonth() + i)\n\n      data.push({\n        month: date.toLocaleString('default', { month: 'short' }),\n        baseline: 1070000 + i * 15000,\n        optimistic: 1070000 + i * 25000,\n        pessimistic: 1070000 + i * 5000,\n        target: 1000000,\n      })\n    }\n    return data\n  }\n\n  const generateRiskAnalysis = () => [\n    {\n      risk: 'Customer Concentration',\n      level: 'Medium',\n      impact: 'High',\n      probability: 'Low',\n      mitigation: 'Diversify customer base',\n    },\n    {\n      risk: 'Seasonal Demand',\n      level: 'High',\n      impact: 'Medium',\n      probability: 'High',\n      mitigation: 'Build inventory buffer',\n    },\n    {\n      risk: 'Supplier Delays',\n      level: 'Medium',\n      impact: 'Medium',\n      probability: 'Medium',\n      mitigation: 'Multiple supplier strategy',\n    },\n  ]\n\n  const formatCurrency = value => {\n    return new Intl.NumberFormat('en-GB', {\n      style: 'currency',\n      currency: 'GBP',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value)\n  }\n\n  const formatPercent = value => {\n    return `${value > 0 ? '+' : ''}${value.toFixed(1)}%`\n  }\n\n  const resetScenarios = () => {\n    setScenarios({\n      receivablesDays: 45,\n      payablesDays: 30,\n      inventoryDays: 60,\n      salesGrowth: 15,\n      marginImprovement: 2,\n      seasonalityFactor: 1.0,\n      creditTerms: 30,\n      supplierTerms: 45,\n      inventoryTurnover: 6.1,\n      cashConversionCycle: 75,\n    })\n  }\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading Working Capital Intelligence...</p>\n        </div>\n      </div>\n    )\n  }\n\n  const COLORS = ['#3B82F6', '#10B981', '#F59E0B', '#EF4444', '#8B5CF6', '#06B6D4']\n\n  return (\n    <div className=\"space-y-6 p-6 bg-gray-50 min-h-screen\">\n      {/* Header */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Working Capital Intelligence</h1>\n            <p className=\"text-gray-600\">Advanced cash flow optimization and scenario analysis</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={() => setShowAdvanced(!showAdvanced)}\n              className=\"flex items-center space-x-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700\"\n            >\n              {showAdvanced ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n              <span>{showAdvanced ? 'Hide' : 'Show'} Advanced</span>\n            </button>\n            <button\n              onClick={resetScenarios}\n              className=\"flex items-center space-x-2 px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700\"\n            >\n              <RotateCcw className=\"h-4 w-4\" />\n              <span>Reset</span>\n            </button>\n            <button className=\"flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50\">\n              <Download className=\"h-4 w-4\" />\n              <span>Export</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation Tabs */}\n      <div className=\"bg-white rounded-xl shadow-sm border border-gray-100\">\n        <div className=\"border-b border-gray-200\">\n          <nav className=\"flex space-x-8 px-6\">\n            {[\n              { id: 'overview', label: 'Overview', icon: BarChart3 },\n              { id: 'scenarios', label: 'Scenario Analysis', icon: Sliders },\n              { id: 'forecasting', label: 'Cash Flow Forecast', icon: TrendingUp },\n              { id: 'optimization', label: 'Optimization', icon: Target },\n              { id: 'benchmarks', label: 'Benchmarks', icon: Activity },\n            ].map(tab => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveView(tab.id)}\n                className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${\n                  activeView === tab.id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <tab.icon className=\"h-4 w-4\" />\n                <span>{tab.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl p-6 border border-blue-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-blue-600 text-sm font-medium\">Working Capital</p>\n              <p className=\"text-3xl font-bold text-blue-900\">\n                {formatCurrency(analysisData?.current?.workingCapital || 0)}\n              </p>\n              <div className=\"flex items-center mt-2\">\n                <TrendingUp className=\"h-4 w-4 text-green-500\" />\n                <span className=\"text-sm text-green-600 ml-1\">+15.5%</span>\n              </div>\n            </div>\n            <DollarSign className=\"h-8 w-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-green-50 to-green-100 rounded-xl p-6 border border-green-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-green-600 text-sm font-medium\">Cash Conversion Cycle</p>\n              <p className=\"text-3xl font-bold text-green-900\">\n                {analysisData?.current?.cashConversionCycle || 75} days\n              </p>\n              <div className=\"flex items-center mt-2\">\n                <Target className=\"h-4 w-4 text-green-500\" />\n                <span className=\"text-sm text-green-600 ml-1\">Target: 60 days</span>\n              </div>\n            </div>\n            <Calendar className=\"h-8 w-8 text-green-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-orange-50 to-orange-100 rounded-xl p-6 border border-orange-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-orange-600 text-sm font-medium\">Current Ratio</p>\n              <p className=\"text-3xl font-bold text-orange-900\">\n                {analysisData?.current?.currentRatio || 2.1}\n              </p>\n              <div className=\"flex items-center mt-2\">\n                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                <span className=\"text-sm text-green-600 ml-1\">Healthy</span>\n              </div>\n            </div>\n            <Activity className=\"h-8 w-8 text-orange-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-gradient-to-br from-purple-50 to-purple-100 rounded-xl p-6 border border-purple-200\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-purple-600 text-sm font-medium\">\n                {analysisData?.scenario ? 'Scenario Impact' : 'Free Cash Flow'}\n              </p>\n              <p className=\"text-3xl font-bold text-purple-900\">\n                {analysisData?.scenario\n                  ? formatCurrency(analysisData.scenario.cashImpact)\n                  : formatCurrency(120000)}\n              </p>\n              <div className=\"flex items-center mt-2\">\n                {analysisData?.scenario?.cashImpact > 0 ? (\n                  <ArrowUpRight className=\"h-4 w-4 text-green-500\" />\n                ) : (\n                  <ArrowDownRight className=\"h-4 w-4 text-red-500\" />\n                )}\n                <span\n                  className={`text-sm ml-1 ${\n                    analysisData?.scenario?.cashImpact > 0 ? 'text-green-600' : 'text-red-600'\n                  }`}\n                >\n                  {analysisData?.scenario\n                    ? analysisData.scenario.cashImpact > 0\n                      ? 'Cash Positive'\n                      : 'Cash Negative'\n                    : 'Monthly'}\n                </span>\n              </div>\n            </div>\n            <Calculator className=\"h-8 w-8 text-purple-600\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content Based on Active View */}\n      {activeView === 'overview' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Working Capital Trend</h3>\n            <ResponsiveContainer width=\"100%\" height={300}>\n              <ComposedChart data={analysisData?.historical || []}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"month\" />\n                <YAxis tickFormatter={value => formatCurrency(value)} />\n                <Tooltip formatter={value => formatCurrency(value)} />\n                <Legend />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"workingCapital\"\n                  stroke=\"#3B82F6\"\n                  fill=\"#3B82F6\"\n                  fillOpacity={0.3}\n                  name=\"Working Capital\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"receivables\"\n                  stroke=\"#10B981\"\n                  strokeWidth={2}\n                  name=\"Receivables\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"inventory\"\n                  stroke=\"#F59E0B\"\n                  strokeWidth={2}\n                  name=\"Inventory\"\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"payables\"\n                  stroke=\"#EF4444\"\n                  strokeWidth={2}\n                  name=\"Payables\"\n                />\n              </ComposedChart>\n            </ResponsiveContainer>\n          </div>\n\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Component Analysis</h3>\n            <div className=\"space-y-4\">\n              {(analysisData?.components || []).map((component, index) => (\n                <div key={component.component} className=\"p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-semibold text-gray-900\">{component.component}</h4>\n                    <span\n                      className={`px-2 py-1 rounded text-xs font-medium ${\n                        component.trend === 'increasing'\n                          ? 'bg-red-100 text-red-800'\n                          : component.trend === 'decreasing'\n                            ? 'bg-green-100 text-green-800'\n                            : 'bg-gray-100 text-gray-800'\n                      }`}\n                    >\n                      {component.trend}\n                    </span>\n                  </div>\n                  <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                    <div>\n                      <p className=\"text-gray-600\">Current</p>\n                      <p className=\"font-semibold\">{formatCurrency(component.current)}</p>\n                      <p className=\"text-xs text-gray-500\">{component.days} days</p>\n                    </div>\n                    <div>\n                      <p className=\"text-gray-600\">Optimal</p>\n                      <p className=\"font-semibold\">{formatCurrency(component.optimal)}</p>\n                      <p className=\"text-xs text-gray-500\">{component.optimalDays} days</p>\n                    </div>\n                  </div>\n                  <div className=\"mt-2\">\n                    <p className=\"text-xs text-gray-600\">Opportunity</p>\n                    <p\n                      className={`font-semibold ${\n                        component.opportunity > 0 ? 'text-green-600' : 'text-red-600'\n                      }`}\n                    >\n                      {formatCurrency(Math.abs(component.opportunity))}\n                      {component.opportunity > 0 ? ' savings' : ' investment'}\n                    </p>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeView === 'scenarios' && (\n        <div className=\"space-y-6\">\n          {/* Scenario Controls */}\n          <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n            <div className=\"flex items-center justify-between mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">Interactive Scenario Analysis</h3>\n              <div className=\"flex items-center space-x-2\">\n                {calculating && (\n                  <div className=\"flex items-center space-x-2 text-blue-600\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600\"></div>\n                    <span className=\"text-sm\">Calculating...</span>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {/* Working Capital Components */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium text-gray-900 border-b pb-2\">\n                  Working Capital Components\n                </h4>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Receivables Days: {scenarios.receivablesDays}\n                  </label>\n                  <input\n                    type=\"range\"\n                    min=\"20\"\n                    max=\"90\"\n                    value={scenarios.receivablesDays}\n                    onChange={e =>\n                      setScenarios(prev => ({ ...prev, receivablesDays: parseInt(e.target.value) }))\n                    }\n                    className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                    <span>20</span>\n                    <span>90</span>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Inventory Days: {scenarios.inventoryDays}\n                  </label>\n                  <input\n                    type=\"range\"\n                    min=\"30\"\n                    max=\"120\"\n                    value={scenarios.inventoryDays}\n                    onChange={e =>\n                      setScenarios(prev => ({ ...prev, inventoryDays: parseInt(e.target.value) }))\n                    }\n                    className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                    <span>30</span>\n                    <span>120</span>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Payables Days: {scenarios.payablesDays}\n                  </label>\n                  <input\n                    type=\"range\"\n                    min=\"15\"\n                    max=\"60\"\n                    value={scenarios.payablesDays}\n                    onChange={e =>\n                      setScenarios(prev => ({ ...prev, payablesDays: parseInt(e.target.value) }))\n                    }\n                    className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                    <span>15</span>\n                    <span>60</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Business Parameters */}\n              <div className=\"space-y-4\">\n                <h4 className=\"font-medium text-gray-900 border-b pb-2\">Business Parameters</h4>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Sales Growth: {scenarios.salesGrowth}%\n                  </label>\n                  <input\n                    type=\"range\"\n                    min=\"-10\"\n                    max=\"50\"\n                    value={scenarios.salesGrowth}\n                    onChange={e =>\n                      setScenarios(prev => ({ ...prev, salesGrowth: parseInt(e.target.value) }))\n                    }\n                    className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                    <span>-10%</span>\n                    <span>50%</span>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Margin Improvement: {scenarios.marginImprovement}%\n                  </label>\n                  <input\n                    type=\"range\"\n                    min=\"-5\"\n                    max=\"10\"\n                    value={scenarios.marginImprovement}\n                    onChange={e =>\n                      setScenarios(prev => ({\n                        ...prev,\n                        marginImprovement: parseInt(e.target.value),\n                      }))\n                    }\n                    className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                    <span>-5%</span>\n                    <span>10%</span>\n                  </div>\n                </div>\n\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    Seasonality Factor: {scenarios.seasonalityFactor.toFixed(1)}x\n                  </label>\n                  <input\n                    type=\"range\"\n                    min=\"0.5\"\n                    max=\"2.0\"\n                    step=\"0.1\"\n                    value={scenarios.seasonalityFactor}\n                    onChange={e =>\n                      setScenarios(prev => ({\n                        ...prev,\n                        seasonalityFactor: parseFloat(e.target.value),\n                      }))\n                    }\n                    className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n                  />\n                  <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                    <span>0.5x</span>\n                    <span>2.0x</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Advanced Parameters */}\n              {showAdvanced && (\n                <div className=\"space-y-4\">\n                  <h4 className=\"font-medium text-gray-900 border-b pb-2\">Advanced Parameters</h4>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Credit Terms: {scenarios.creditTerms} days\n                    </label>\n                    <input\n                      type=\"range\"\n                      min=\"15\"\n                      max=\"90\"\n                      value={scenarios.creditTerms}\n                      onChange={e =>\n                        setScenarios(prev => ({ ...prev, creditTerms: parseInt(e.target.value) }))\n                      }\n                      className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Supplier Terms: {scenarios.supplierTerms} days\n                    </label>\n                    <input\n                      type=\"range\"\n                      min=\"15\"\n                      max=\"90\"\n                      value={scenarios.supplierTerms}\n                      onChange={e =>\n                        setScenarios(prev => ({ ...prev, supplierTerms: parseInt(e.target.value) }))\n                      }\n                      className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n                    />\n                  </div>\n\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                      Inventory Turnover: {scenarios.inventoryTurnover.toFixed(1)}x\n                    </label>\n                    <input\n                      type=\"range\"\n                      min=\"2\"\n                      max=\"12\"\n                      step=\"0.1\"\n                      value={scenarios.inventoryTurnover}\n                      onChange={e =>\n                        setScenarios(prev => ({\n                          ...prev,\n                          inventoryTurnover: parseFloat(e.target.value),\n                        }))\n                      }\n                      className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Scenario Results */}\n          {analysisData?.scenario && (\n            <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Scenario Impact Analysis</h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n                  <p className=\"text-sm text-blue-600 font-medium\">Working Capital Change</p>\n                  <p className=\"text-2xl font-bold text-blue-900\">\n                    {formatCurrency(analysisData.scenario.workingCapitalChange)}\n                  </p>\n                  <p className=\"text-sm text-blue-600\">\n                    {formatPercent(\n                      (analysisData.scenario.workingCapitalChange /\n                        analysisData.current.workingCapital) *\n                        100\n                    )}\n                  </p>\n                </div>\n\n                <div className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n                  <p className=\"text-sm text-green-600 font-medium\">Cash Impact</p>\n                  <p className=\"text-2xl font-bold text-green-900\">\n                    {formatCurrency(analysisData.scenario.cashImpact)}\n                  </p>\n                  <p className=\"text-sm text-green-600\">\n                    {analysisData.scenario.cashImpact > 0 ? 'Cash Positive' : 'Cash Negative'}\n                  </p>\n                </div>\n\n                <div className=\"p-4 bg-orange-50 rounded-lg border border-orange-200\">\n                  <p className=\"text-sm text-orange-600 font-medium\">New Cash Cycle</p>\n                  <p className=\"text-2xl font-bold text-orange-900\">\n                    {analysisData.scenario.cashConversionCycle} days\n                  </p>\n                  <p className=\"text-sm text-orange-600\">\n                    {analysisData.scenario.cashConversionCycle -\n                      analysisData.current.cashConversionCycle >\n                    0\n                      ? '+'\n                      : ''}\n                    {analysisData.scenario.cashConversionCycle -\n                      analysisData.current.cashConversionCycle}{' '}\n                    days\n                  </p>\n                </div>\n\n                <div className=\"p-4 bg-purple-50 rounded-lg border border-purple-200\">\n                  <p className=\"text-sm text-purple-600 font-medium\">ROI Impact</p>\n                  <p className=\"text-2xl font-bold text-purple-900\">\n                    {formatPercent(analysisData.scenario.roi)}\n                  </p>\n                  <p className=\"text-sm text-purple-600\">\n                    {analysisData.scenario.roi > 0 ? 'Positive' : 'Negative'} Return\n                  </p>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {activeView === 'forecasting' && (\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Cash Flow Forecast</h3>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <ComposedChart data={analysisData?.cashFlow || []}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis tickFormatter={value => formatCurrency(value)} />\n              <Tooltip formatter={value => formatCurrency(value)} />\n              <Legend />\n              <Bar dataKey=\"operatingCashFlow\" fill=\"#3B82F6\" name=\"Operating Cash Flow\" />\n              <Bar dataKey=\"capex\" fill=\"#EF4444\" name=\"Capital Expenditure\" />\n              <Line\n                type=\"monotone\"\n                dataKey=\"freeCashFlow\"\n                stroke=\"#10B981\"\n                strokeWidth={3}\n                name=\"Free Cash Flow\"\n              />\n              <Area\n                type=\"monotone\"\n                dataKey=\"workingCapitalChange\"\n                stroke=\"#F59E0B\"\n                fill=\"#F59E0B\"\n                fillOpacity={0.3}\n                name=\"Working Capital Change\"\n              />\n            </ComposedChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n\n      {activeView === 'optimization' && (\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Optimization Opportunities</h3>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <BarChart data={analysisData?.components || []}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"component\" />\n              <YAxis tickFormatter={value => formatCurrency(value)} />\n              <Tooltip formatter={value => formatCurrency(value)} />\n              <Legend />\n              <Bar dataKey=\"current\" fill=\"#94A3B8\" name=\"Current\" />\n              <Bar dataKey=\"optimal\" fill=\"#3B82F6\" name=\"Optimal\" />\n              <Bar dataKey=\"opportunity\" fill=\"#10B981\" name=\"Opportunity\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n\n      {activeView === 'benchmarks' && (\n        <div className=\"bg-white rounded-xl shadow-sm border border-gray-100 p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Industry Benchmarks</h3>\n          <div className=\"space-y-4\">\n            {(analysisData?.benchmarks || []).map((benchmark, index) => (\n              <div\n                key={benchmark.metric}\n                className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div\n                    className=\"w-4 h-4 rounded-full\"\n                    style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                  />\n                  <span className=\"font-medium text-gray-900\">{benchmark.metric}</span>\n                </div>\n                <div className=\"flex items-center space-x-6 text-sm\">\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-600\">Current</p>\n                    <p className=\"font-semibold text-gray-900\">{benchmark.current}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-600\">Industry</p>\n                    <p className=\"font-semibold text-gray-900\">{benchmark.industry}</p>\n                  </div>\n                  <div className=\"text-center\">\n                    <p className=\"text-gray-600\">Best in Class</p>\n                    <p className=\"font-semibold text-green-600\">{benchmark.best}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default WorkingCapitalComprehensive\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\WorkingCapitalEnterprise.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\analytics\\AnalyticsDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'onClose' is defined but never used.",
        "line": 588,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 588,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "onClose" },
            "fix": { "range": [20746, 20755], "text": "" },
            "desc": "Remove unused variable 'onClose'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\nimport {\n  Plus,\n  Save,\n  FolderOpen,\n  Download,\n  Play,\n  Settings,\n  Trash2,\n  BarChart3,\n  LineChart as LineChartIcon,\n  PieChart as PieChartIcon,\n  Table as TableIcon,\n} from 'lucide-react';\n\n/**\n * AnalyticsDashboard Component\n *\n * Custom report builder with:\n * - Metric selector (revenue, units, margin, etc.)\n * - Dimension selector (product, region, channel, time)\n * - Visualization type selector (line, bar, pie, table)\n * - Filter builder with conditions\n * - Save/load report configurations\n * - Export functionality\n */\nfunction AnalyticsDashboard() {\n  const queryClient = useQueryClient();\n\n  // Report configuration state\n  const [reportConfig, setReportConfig] = useState({\n    name: 'Untitled Report',\n    metrics: ['revenue'],\n    dimensions: ['product'],\n    visualization: 'bar',\n    filters: [],\n    timeRange: '30d',\n    groupBy: 'day',\n  });\n\n  const [showSaveModal, setShowSaveModal] = useState(false);\n  const [showLoadModal, setShowLoadModal] = useState(false);\n\n  // Fetch report data based on configuration\n  const { data: reportData, isLoading, refetch } = useQuery({\n    queryKey: ['analytics', 'custom-report', reportConfig],\n    queryFn: async () => {\n      const response = await fetch('/api/v1/analytics/custom-report', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(reportConfig),\n      });\n      if (!response.ok) throw new Error('Failed to fetch report data');\n      const result = await response.json();\n      return result.data;\n    },\n    enabled: false, // Manual trigger\n  });\n\n  // Fetch saved reports\n  const { data: savedReports = [] } = useQuery({\n    queryKey: ['analytics', 'saved-reports'],\n    queryFn: async () => {\n      const response = await fetch('/api/v1/analytics/reports');\n      if (!response.ok) throw new Error('Failed to fetch saved reports');\n      const result = await response.json();\n      return result.data || [];\n    },\n  });\n\n  // Save report mutation\n  const saveReportMutation = useMutation({\n    mutationFn: async (config) => {\n      const response = await fetch('/api/v1/analytics/reports', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(config),\n      });\n      if (!response.ok) throw new Error('Failed to save report');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries(['analytics', 'saved-reports']);\n      setShowSaveModal(false);\n    },\n  });\n\n  const handleRunReport = () => {\n    refetch();\n  };\n\n  const handleSaveReport = () => {\n    if (!reportConfig.name || reportConfig.name === 'Untitled Report') {\n      alert('Please enter a report name');\n      return;\n    }\n    saveReportMutation.mutate(reportConfig);\n  };\n\n  const handleLoadReport = (report) => {\n    setReportConfig(report);\n    setShowLoadModal(false);\n    refetch();\n  };\n\n  const handleExport = (format) => {\n    console.log('Export report as:', format);\n    // TODO: Implement actual export\n  };\n\n  const handleAddFilter = () => {\n    setReportConfig({\n      ...reportConfig,\n      filters: [\n        ...reportConfig.filters,\n        { field: 'product', operator: 'equals', value: '' },\n      ],\n    });\n  };\n\n  const handleRemoveFilter = (index) => {\n    const newFilters = reportConfig.filters.filter((_, i) => i !== index);\n    setReportConfig({ ...reportConfig, filters: newFilters });\n  };\n\n  const handleUpdateFilter = (index, field, value) => {\n    const newFilters = [...reportConfig.filters];\n    newFilters[index] = { ...newFilters[index], [field]: value };\n    setReportConfig({ ...reportConfig, filters: newFilters });\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Custom Analytics</h1>\n        <p className=\"text-gray-600 mt-1\">\n          Build custom reports with flexible metrics, dimensions, and visualizations\n        </p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-4 gap-6\">\n        {/* Configuration Panel */}\n        <div className=\"lg:col-span-1 space-y-6\">\n          {/* Report Name */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n              Report Name\n            </label>\n            <input\n              type=\"text\"\n              value={reportConfig.name}\n              onChange={(e) =>\n                setReportConfig({ ...reportConfig, name: e.target.value })\n              }\n              className=\"w-full border border-gray-300 rounded-lg p-2\"\n              placeholder=\"Enter report name\"\n            />\n          </div>\n\n          {/* Metrics Selector */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-sm font-semibold text-gray-900 mb-3\">Metrics</h3>\n            <div className=\"space-y-2\">\n              {AVAILABLE_METRICS.map((metric) => (\n                <label key={metric.id} className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={reportConfig.metrics.includes(metric.id)}\n                    onChange={(e) => {\n                      const newMetrics = e.target.checked\n                        ? [...reportConfig.metrics, metric.id]\n                        : reportConfig.metrics.filter((m) => m !== metric.id);\n                      setReportConfig({ ...reportConfig, metrics: newMetrics });\n                    }}\n                    className=\"w-4 h-4\"\n                  />\n                  <span className=\"text-sm text-gray-700\">{metric.label}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* Dimensions Selector */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-sm font-semibold text-gray-900 mb-3\">Dimensions</h3>\n            <div className=\"space-y-2\">\n              {AVAILABLE_DIMENSIONS.map((dimension) => (\n                <label key={dimension.id} className=\"flex items-center gap-2\">\n                  <input\n                    type=\"checkbox\"\n                    checked={reportConfig.dimensions.includes(dimension.id)}\n                    onChange={(e) => {\n                      const newDimensions = e.target.checked\n                        ? [...reportConfig.dimensions, dimension.id]\n                        : reportConfig.dimensions.filter((d) => d !== dimension.id);\n                      setReportConfig({ ...reportConfig, dimensions: newDimensions });\n                    }}\n                    className=\"w-4 h-4\"\n                  />\n                  <span className=\"text-sm text-gray-700\">{dimension.label}</span>\n                </label>\n              ))}\n            </div>\n          </div>\n\n          {/* Visualization Type */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-sm font-semibold text-gray-900 mb-3\">\n              Visualization\n            </h3>\n            <div className=\"grid grid-cols-2 gap-2\">\n              {VISUALIZATION_TYPES.map((viz) => {\n                const Icon = viz.icon;\n                return (\n                  <button\n                    key={viz.id}\n                    onClick={() =>\n                      setReportConfig({ ...reportConfig, visualization: viz.id })\n                    }\n                    className={`p-3 rounded-lg border-2 transition-colors ${\n                      reportConfig.visualization === viz.id\n                        ? 'border-blue-600 bg-blue-50'\n                        : 'border-gray-200 bg-white hover:bg-gray-50'\n                    }`}\n                  >\n                    <Icon className=\"w-5 h-5 mx-auto mb-1\" />\n                    <p className=\"text-xs text-center\">{viz.label}</p>\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Time Range */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h3 className=\"text-sm font-semibold text-gray-900 mb-3\">Time Range</h3>\n            <select\n              value={reportConfig.timeRange}\n              onChange={(e) =>\n                setReportConfig({ ...reportConfig, timeRange: e.target.value })\n              }\n              className=\"w-full border border-gray-300 rounded-lg p-2\"\n            >\n              <option value=\"7d\">Last 7 days</option>\n              <option value=\"30d\">Last 30 days</option>\n              <option value=\"90d\">Last 90 days</option>\n              <option value=\"1y\">Last 12 months</option>\n              <option value=\"ytd\">Year to date</option>\n            </select>\n          </div>\n\n          {/* Actions */}\n          <div className=\"space-y-2\">\n            <button\n              onClick={handleRunReport}\n              disabled={reportConfig.metrics.length === 0}\n              className=\"w-full py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2 font-semibold disabled:bg-gray-300 disabled:cursor-not-allowed\"\n            >\n              <Play className=\"w-4 h-4\" />\n              Run Report\n            </button>\n            <button\n              onClick={() => setShowSaveModal(true)}\n              className=\"w-full py-2 bg-white text-gray-700 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors flex items-center justify-center gap-2\"\n            >\n              <Save className=\"w-4 h-4\" />\n              Save Report\n            </button>\n            <button\n              onClick={() => setShowLoadModal(true)}\n              className=\"w-full py-2 bg-white text-gray-700 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors flex items-center justify-center gap-2\"\n            >\n              <FolderOpen className=\"w-4 h-4\" />\n              Load Report\n            </button>\n          </div>\n        </div>\n\n        {/* Results Panel */}\n        <div className=\"lg:col-span-3 space-y-6\">\n          {/* Filters */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Filters</h2>\n              <button\n                onClick={handleAddFilter}\n                className=\"flex items-center gap-2 px-3 py-1 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm\"\n              >\n                <Plus className=\"w-4 h-4\" />\n                Add Filter\n              </button>\n            </div>\n\n            {reportConfig.filters.length === 0 ? (\n              <p className=\"text-sm text-gray-500\">No filters applied</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {reportConfig.filters.map((filter, index) => (\n                  <div key={index} className=\"flex items-center gap-2\">\n                    <select\n                      value={filter.field}\n                      onChange={(e) =>\n                        handleUpdateFilter(index, 'field', e.target.value)\n                      }\n                      className=\"flex-1 border border-gray-300 rounded-lg p-2 text-sm\"\n                    >\n                      {FILTERABLE_FIELDS.map((field) => (\n                        <option key={field.id} value={field.id}>\n                          {field.label}\n                        </option>\n                      ))}\n                    </select>\n\n                    <select\n                      value={filter.operator}\n                      onChange={(e) =>\n                        handleUpdateFilter(index, 'operator', e.target.value)\n                      }\n                      className=\"flex-1 border border-gray-300 rounded-lg p-2 text-sm\"\n                    >\n                      <option value=\"equals\">Equals</option>\n                      <option value=\"not_equals\">Not Equals</option>\n                      <option value=\"contains\">Contains</option>\n                      <option value=\"greater_than\">Greater Than</option>\n                      <option value=\"less_than\">Less Than</option>\n                    </select>\n\n                    <input\n                      type=\"text\"\n                      value={filter.value}\n                      onChange={(e) =>\n                        handleUpdateFilter(index, 'value', e.target.value)\n                      }\n                      placeholder=\"Value\"\n                      className=\"flex-1 border border-gray-300 rounded-lg p-2 text-sm\"\n                    />\n\n                    <button\n                      onClick={() => handleRemoveFilter(index)}\n                      className=\"p-2 text-red-600 hover:bg-red-50 rounded-lg transition-colors\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Visualization */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                {reportConfig.name}\n              </h2>\n              <div className=\"flex items-center gap-2\">\n                <button\n                  onClick={() => handleExport('csv')}\n                  className=\"p-2 text-gray-600 hover:bg-gray-100 rounded-lg transition-colors\"\n                  title=\"Export CSV\"\n                >\n                  <Download className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n\n            {isLoading ? (\n              <div className=\"flex items-center justify-center h-96\">\n                <div className=\"text-center\">\n                  <div className=\"w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n                  <p className=\"text-gray-600\">Loading report data...</p>\n                </div>\n              </div>\n            ) : !reportData ? (\n              <div className=\"flex items-center justify-center h-96\">\n                <div className=\"text-center\">\n                  <BarChart3 className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n                  <p className=\"text-gray-500\">Click \"Run Report\" to view results</p>\n                </div>\n              </div>\n            ) : (\n              <ReportVisualization\n                data={reportData}\n                type={reportConfig.visualization}\n                metrics={reportConfig.metrics}\n                dimensions={reportConfig.dimensions}\n              />\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Save Modal */}\n      {showSaveModal && (\n        <Modal onClose={() => setShowSaveModal(false)}>\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Save Report</h2>\n          <p className=\"text-sm text-gray-600 mb-4\">\n            Saving report: <strong>{reportConfig.name}</strong>\n          </p>\n          <div className=\"flex gap-2 justify-end\">\n            <button\n              onClick={() => setShowSaveModal(false)}\n              className=\"px-4 py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300\"\n            >\n              Cancel\n            </button>\n            <button\n              onClick={handleSaveReport}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\"\n            >\n              Save\n            </button>\n          </div>\n        </Modal>\n      )}\n\n      {/* Load Modal */}\n      {showLoadModal && (\n        <Modal onClose={() => setShowLoadModal(false)}>\n          <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Load Report</h2>\n          {savedReports.length === 0 ? (\n            <p className=\"text-sm text-gray-600\">No saved reports found</p>\n          ) : (\n            <div className=\"space-y-2 max-h-96 overflow-y-auto\">\n              {savedReports.map((report) => (\n                <button\n                  key={report.id}\n                  onClick={() => handleLoadReport(report)}\n                  className=\"w-full p-3 bg-gray-50 hover:bg-gray-100 rounded-lg text-left transition-colors\"\n                >\n                  <p className=\"font-medium text-gray-900\">{report.name}</p>\n                  <p className=\"text-xs text-gray-600\">\n                    {report.metrics.length} metrics • {report.dimensions.length} dimensions\n                  </p>\n                </button>\n              ))}\n            </div>\n          )}\n        </Modal>\n      )}\n    </div>\n  );\n}\n\n/**\n * ReportVisualization Component\n */\nfunction ReportVisualization({ data, type, metrics, dimensions }) {\n  if (!data || data.length === 0) {\n    return <p className=\"text-center text-gray-500 py-12\">No data available</p>;\n  }\n\n  if (type === 'line') {\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <LineChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n          <XAxis dataKey={dimensions[0]} style={{ fontSize: '12px' }} />\n          <YAxis style={{ fontSize: '12px' }} />\n          <Tooltip />\n          <Legend />\n          {metrics.map((metric, index) => (\n            <Line\n              key={metric}\n              type=\"monotone\"\n              dataKey={metric}\n              stroke={CHART_COLORS[index % CHART_COLORS.length]}\n              strokeWidth={2}\n              dot={{ r: 3 }}\n            />\n          ))}\n        </LineChart>\n      </ResponsiveContainer>\n    );\n  }\n\n  if (type === 'bar') {\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <BarChart data={data} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n          <XAxis dataKey={dimensions[0]} style={{ fontSize: '12px' }} />\n          <YAxis style={{ fontSize: '12px' }} />\n          <Tooltip />\n          <Legend />\n          {metrics.map((metric, index) => (\n            <Bar\n              key={metric}\n              dataKey={metric}\n              fill={CHART_COLORS[index % CHART_COLORS.length]}\n              radius={[4, 4, 0, 0]}\n            />\n          ))}\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  }\n\n  if (type === 'pie') {\n    return (\n      <ResponsiveContainer width=\"100%\" height={400}>\n        <PieChart>\n          <Pie\n            data={data}\n            dataKey={metrics[0]}\n            nameKey={dimensions[0]}\n            cx=\"50%\"\n            cy=\"50%\"\n            outerRadius={120}\n            label\n          >\n            {data.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={CHART_COLORS[index % CHART_COLORS.length]} />\n            ))}\n          </Pie>\n          <Tooltip />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n    );\n  }\n\n  // Table view\n  return (\n    <div className=\"overflow-x-auto\">\n      <table className=\"w-full\">\n        <thead>\n          <tr className=\"bg-gray-50 border-b border-gray-200\">\n            {dimensions.map((dim) => (\n              <th\n                key={dim}\n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                {dim}\n              </th>\n            ))}\n            {metrics.map((metric) => (\n              <th\n                key={metric}\n                className=\"px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                {metric}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200\">\n          {data.map((row, index) => (\n            <tr key={index} className=\"hover:bg-gray-50\">\n              {dimensions.map((dim) => (\n                <td key={dim} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                  {row[dim]}\n                </td>\n              ))}\n              {metrics.map((metric) => (\n                <td key={metric} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 text-right\">\n                  {typeof row[metric] === 'number' ? row[metric].toLocaleString() : row[metric]}\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\n/**\n * Modal Component\n */\nfunction Modal({ children, onClose }) {\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto p-6\">\n        {children}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Constants\n */\nconst AVAILABLE_METRICS = [\n  { id: 'revenue', label: 'Revenue' },\n  { id: 'units', label: 'Units Sold' },\n  { id: 'margin', label: 'Gross Margin' },\n  { id: 'cost', label: 'Cost of Goods' },\n  { id: 'profit', label: 'Net Profit' },\n];\n\nconst AVAILABLE_DIMENSIONS = [\n  { id: 'product', label: 'Product' },\n  { id: 'region', label: 'Region' },\n  { id: 'channel', label: 'Channel' },\n  { id: 'time', label: 'Time Period' },\n  { id: 'customer', label: 'Customer Segment' },\n];\n\nconst VISUALIZATION_TYPES = [\n  { id: 'bar', label: 'Bar Chart', icon: BarChart3 },\n  { id: 'line', label: 'Line Chart', icon: LineChartIcon },\n  { id: 'pie', label: 'Pie Chart', icon: PieChartIcon },\n  { id: 'table', label: 'Data Table', icon: TableIcon },\n];\n\nconst FILTERABLE_FIELDS = [\n  { id: 'product', label: 'Product' },\n  { id: 'region', label: 'Region' },\n  { id: 'channel', label: 'Channel' },\n  { id: 'revenue', label: 'Revenue' },\n  { id: 'units', label: 'Units' },\n];\n\nconst CHART_COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ef4444'];\n\nexport default AnalyticsDashboard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\analytics\\WhatIfAnalysis.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Icon' is defined but never used.",
        "line": 404,
        "column": 92,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 404,
        "endColumn": 96,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [14417, 14429], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  ReferenceLine,\n} from 'recharts';\nimport {\n  Play,\n  RotateCcw,\n  TrendingUp,\n  DollarSign,\n  Package,\n  Users,\n  Download,\n  AlertTriangle,\n} from 'lucide-react';\n\n/**\n * WhatIfAnalysis Component\n *\n * Scenario modeling interface with:\n * - Scenario builder with parameter sliders\n * - Impact calculator for revenue, margin, units\n * - Comparison view (baseline vs. scenario)\n * - Sensitivity analysis visualization\n * - Export scenario results\n *\n * Use cases:\n * - Price optimization (\"What if we increase price by 10%?\")\n * - Demand modeling (\"What if demand drops 20%?\")\n * - Cost analysis (\"What if COGS increases 15%?\")\n * - Promotion planning (\"What if we run a 25% off sale?\")\n */\nfunction WhatIfAnalysis() {\n  // Baseline state (current reality)\n  const [baseline] = useState({\n    price: 25.00,\n    demand: 10000,\n    cogs: 12.50,\n    marketingSpend: 5000,\n    conversionRate: 3.5,\n  });\n\n  // Scenario state (what-if parameters)\n  const [scenario, setScenario] = useState({ ...baseline });\n\n  const [showComparison, setShowComparison] = useState(false);\n  const [sensitivityMetric, setSensitivityMetric] = useState('revenue');\n\n  // Calculate scenario mutation\n  const calculateScenarioMutation = useMutation({\n    mutationFn: async (params) => {\n      const response = await fetch('/api/v1/analytics/what-if/calculate', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(params),\n      });\n      if (!response.ok) throw new Error('Failed to calculate scenario');\n      return response.json();\n    },\n  });\n\n  const handleRunScenario = () => {\n    calculateScenarioMutation.mutate({\n      baseline,\n      scenario,\n    });\n    setShowComparison(true);\n  };\n\n  const handleReset = () => {\n    setScenario({ ...baseline });\n    setShowComparison(false);\n    calculateScenarioMutation.reset();\n  };\n\n  const handleExport = () => {\n    console.log('Export scenario results');\n    const exportData = {\n      baseline,\n      scenario,\n      results: calculateScenarioMutation.data?.data,\n      timestamp: new Date().toISOString(),\n    };\n    const dataStr = JSON.stringify(exportData, null, 2);\n    const dataBlob = new Blob([dataStr], { type: 'application/json' });\n    const url = URL.createObjectURL(dataBlob);\n    const link = document.createElement('a');\n    link.href = url;\n    link.download = `what-if-scenario-${Date.now()}.json`;\n    link.click();\n  };\n\n  // Calculate impacts\n  const baselineRevenue = baseline.price * baseline.demand;\n  const baselineProfit = (baseline.price - baseline.cogs) * baseline.demand - baseline.marketingSpend;\n  const baselineMargin = ((baseline.price - baseline.cogs) / baseline.price) * 100;\n\n  const scenarioRevenue = scenario.price * scenario.demand;\n  const scenarioProfit = (scenario.price - scenario.cogs) * scenario.demand - scenario.marketingSpend;\n  const scenarioMargin = ((scenario.price - scenario.cogs) / scenario.price) * 100;\n\n  const revenueChange = ((scenarioRevenue - baselineRevenue) / baselineRevenue) * 100;\n  const profitChange = ((scenarioProfit - baselineProfit) / baselineProfit) * 100;\n  const marginChange = scenarioMargin - baselineMargin;\n\n  // Sensitivity analysis data\n  const sensitivityData = generateSensitivityData(baseline, sensitivityMetric);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">What-If Analysis</h1>\n        <p className=\"text-gray-600 mt-1\">\n          Model scenarios and analyze potential impacts on revenue, profit, and operations\n        </p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Parameter Controls */}\n        <div className=\"lg:col-span-1 space-y-6\">\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n              Scenario Parameters\n            </h2>\n\n            <div className=\"space-y-6\">\n              {/* Price Slider */}\n              <ParameterSlider\n                label=\"Price\"\n                value={scenario.price}\n                min={baseline.price * 0.5}\n                max={baseline.price * 2}\n                step={0.50}\n                baseline={baseline.price}\n                format={(v) => `£${v.toFixed(2)}`}\n                onChange={(value) => setScenario({ ...scenario, price: value })}\n                icon={DollarSign}\n              />\n\n              {/* Demand Slider */}\n              <ParameterSlider\n                label=\"Demand (units)\"\n                value={scenario.demand}\n                min={baseline.demand * 0.3}\n                max={baseline.demand * 1.7}\n                step={100}\n                baseline={baseline.demand}\n                format={(v) => v.toLocaleString()}\n                onChange={(value) => setScenario({ ...scenario, demand: value })}\n                icon={Package}\n              />\n\n              {/* COGS Slider */}\n              <ParameterSlider\n                label=\"Cost of Goods Sold\"\n                value={scenario.cogs}\n                min={baseline.cogs * 0.7}\n                max={baseline.cogs * 1.5}\n                step={0.25}\n                baseline={baseline.cogs}\n                format={(v) => `£${v.toFixed(2)}`}\n                onChange={(value) => setScenario({ ...scenario, cogs: value })}\n                icon={TrendingUp}\n              />\n\n              {/* Marketing Spend Slider */}\n              <ParameterSlider\n                label=\"Marketing Spend\"\n                value={scenario.marketingSpend}\n                min={0}\n                max={baseline.marketingSpend * 3}\n                step={500}\n                baseline={baseline.marketingSpend}\n                format={(v) => `£${v.toLocaleString()}`}\n                onChange={(value) => setScenario({ ...scenario, marketingSpend: value })}\n                icon={Users}\n              />\n\n              {/* Conversion Rate Slider */}\n              <ParameterSlider\n                label=\"Conversion Rate\"\n                value={scenario.conversionRate}\n                min={1.0}\n                max={10.0}\n                step={0.1}\n                baseline={baseline.conversionRate}\n                format={(v) => `${v.toFixed(1)}%`}\n                onChange={(value) => setScenario({ ...scenario, conversionRate: value })}\n                icon={TrendingUp}\n              />\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"mt-6 space-y-2\">\n              <button\n                onClick={handleRunScenario}\n                className=\"w-full py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center justify-center gap-2 font-semibold\"\n              >\n                <Play className=\"w-5 h-5\" />\n                Run Scenario\n              </button>\n              <button\n                onClick={handleReset}\n                className=\"w-full py-2 bg-white text-gray-700 rounded-lg border border-gray-300 hover:bg-gray-50 transition-colors flex items-center justify-center gap-2\"\n              >\n                <RotateCcw className=\"w-4 h-4\" />\n                Reset to Baseline\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Results Panel */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Impact Summary */}\n          <div className=\"grid md:grid-cols-3 gap-4\">\n            <ImpactCard\n              label=\"Revenue Impact\"\n              baseline={baselineRevenue}\n              scenario={scenarioRevenue}\n              change={revenueChange}\n              format=\"currency\"\n            />\n            <ImpactCard\n              label=\"Profit Impact\"\n              baseline={baselineProfit}\n              scenario={scenarioProfit}\n              change={profitChange}\n              format=\"currency\"\n            />\n            <ImpactCard\n              label=\"Margin Impact\"\n              baseline={baselineMargin}\n              scenario={scenarioMargin}\n              change={marginChange}\n              format=\"percentage\"\n            />\n          </div>\n\n          {/* Comparison Chart */}\n          {showComparison && (\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">\n                  Baseline vs. Scenario Comparison\n                </h2>\n                <button\n                  onClick={handleExport}\n                  className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2\"\n                >\n                  <Download className=\"w-4 h-4\" />\n                  Export\n                </button>\n              </div>\n\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <BarChart\n                  data={[\n                    {\n                      name: 'Revenue',\n                      Baseline: baselineRevenue,\n                      Scenario: scenarioRevenue,\n                    },\n                    {\n                      name: 'Profit',\n                      Baseline: baselineProfit,\n                      Scenario: scenarioProfit,\n                    },\n                    {\n                      name: 'Units',\n                      Baseline: baseline.demand,\n                      Scenario: scenario.demand,\n                    },\n                  ]}\n                  margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n                >\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                  <XAxis dataKey=\"name\" style={{ fontSize: '12px' }} />\n                  <YAxis style={{ fontSize: '12px' }} />\n                  <Tooltip />\n                  <Legend />\n                  <Bar dataKey=\"Baseline\" fill=\"#9ca3af\" radius={[4, 4, 0, 0]} />\n                  <Bar dataKey=\"Scenario\" fill=\"#3b82f6\" radius={[4, 4, 0, 0]} />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          )}\n\n          {/* Sensitivity Analysis */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                Sensitivity Analysis\n              </h2>\n              <select\n                value={sensitivityMetric}\n                onChange={(e) => setSensitivityMetric(e.target.value)}\n                className=\"border border-gray-300 rounded-lg p-2 text-sm\"\n              >\n                <option value=\"revenue\">Revenue Sensitivity</option>\n                <option value=\"profit\">Profit Sensitivity</option>\n                <option value=\"margin\">Margin Sensitivity</option>\n              </select>\n            </div>\n\n            <p className=\"text-sm text-gray-600 mb-4\">\n              Shows how {sensitivityMetric} changes with ±20% variation in each parameter\n            </p>\n\n            <ResponsiveContainer width=\"100%\" height={350}>\n              <RadarChart data={sensitivityData}>\n                <PolarGrid />\n                <PolarAngleAxis dataKey=\"parameter\" style={{ fontSize: '12px' }} />\n                <PolarRadiusAxis style={{ fontSize: '12px' }} />\n                <Radar\n                  name=\"Negative Change (-20%)\"\n                  dataKey=\"negative\"\n                  stroke=\"#ef4444\"\n                  fill=\"#ef4444\"\n                  fillOpacity={0.3}\n                />\n                <Radar\n                  name=\"Positive Change (+20%)\"\n                  dataKey=\"positive\"\n                  stroke=\"#10b981\"\n                  fill=\"#10b981\"\n                  fillOpacity={0.3}\n                />\n                <Legend />\n                <Tooltip />\n              </RadarChart>\n            </ResponsiveContainer>\n          </div>\n\n          {/* Scenario Insights */}\n          {showComparison && (\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <AlertTriangle className=\"w-5 h-5 text-yellow-600\" />\n                <h2 className=\"text-lg font-semibold text-gray-900\">\n                  Scenario Insights\n                </h2>\n              </div>\n\n              <div className=\"space-y-3\">\n                <ScenarioInsight\n                  condition={revenueChange < -10}\n                  severity=\"warning\"\n                  title=\"Significant Revenue Decline\"\n                  message={`Revenue would decrease by ${Math.abs(revenueChange).toFixed(1)}%, impacting overall profitability.`}\n                />\n                <ScenarioInsight\n                  condition={profitChange < -15}\n                  severity=\"critical\"\n                  title=\"Profit Margin at Risk\"\n                  message={`Profit would decline by ${Math.abs(profitChange).toFixed(1)}%, potentially unsustainable.`}\n                />\n                <ScenarioInsight\n                  condition={scenarioMargin < 30}\n                  severity=\"warning\"\n                  title=\"Low Gross Margin\"\n                  message={`Margin of ${scenarioMargin.toFixed(1)}% is below industry target of 30%.`}\n                />\n                <ScenarioInsight\n                  condition={revenueChange > 20}\n                  severity=\"success\"\n                  title=\"Strong Revenue Growth\"\n                  message={`Revenue would increase by ${revenueChange.toFixed(1)}%, significantly improving performance.`}\n                />\n                <ScenarioInsight\n                  condition={profitChange > 25}\n                  severity=\"success\"\n                  title=\"Exceptional Profit Growth\"\n                  message={`Profit would increase by ${profitChange.toFixed(1)}%, excellent opportunity.`}\n                />\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * ParameterSlider Component\n */\nfunction ParameterSlider({ label, value, min, max, step, baseline, format, onChange, icon: Icon }) {\n  const percentChange = ((value - baseline) / baseline) * 100;\n  const isIncreased = value > baseline;\n  const isDecreased = value < baseline;\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-between mb-2\">\n        <div className=\"flex items-center gap-2\">\n          <Icon className=\"w-4 h-4 text-gray-600\" />\n          <label className=\"text-sm font-medium text-gray-700\">{label}</label>\n        </div>\n        <span className=\"text-sm font-semibold text-gray-900\">{format(value)}</span>\n      </div>\n\n      <input\n        type=\"range\"\n        min={min}\n        max={max}\n        step={step}\n        value={value}\n        onChange={(e) => onChange(parseFloat(e.target.value))}\n        className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n      />\n\n      <div className=\"flex items-center justify-between mt-1 text-xs text-gray-500\">\n        <span>{format(min)}</span>\n        <span className={`font-medium ${isIncreased ? 'text-green-600' : isDecreased ? 'text-red-600' : 'text-gray-600'}`}>\n          {percentChange > 0 ? '+' : ''}{percentChange.toFixed(1)}% vs baseline\n        </span>\n        <span>{format(max)}</span>\n      </div>\n    </div>\n  );\n}\n\n/**\n * ImpactCard Component\n */\nfunction ImpactCard({ label, baseline, scenario, change, format }) {\n  const isPositive = change > 0;\n  const isNegative = change < 0;\n\n  const formatValue = (value) => {\n    if (format === 'currency') {\n      return `£${value.toLocaleString(undefined, { minimumFractionDigits: 0, maximumFractionDigits: 0 })}`;\n    }\n    if (format === 'percentage') {\n      return `${value.toFixed(1)}%`;\n    }\n    return value.toLocaleString();\n  };\n\n  return (\n    <div className={`rounded-lg p-6 border-2 ${isPositive ? 'border-green-500 bg-green-50' : isNegative ? 'border-red-500 bg-red-50' : 'border-gray-300 bg-gray-50'}`}>\n      <p className=\"text-sm font-medium text-gray-700 mb-1\">{label}</p>\n      <p className={`text-2xl font-bold mb-1 ${isPositive ? 'text-green-900' : isNegative ? 'text-red-900' : 'text-gray-900'}`}>\n        {formatValue(scenario)}\n      </p>\n      <div className=\"flex items-center gap-2\">\n        <span className=\"text-xs text-gray-600\">\n          Baseline: {formatValue(baseline)}\n        </span>\n        <span className={`text-xs font-semibold ${isPositive ? 'text-green-700' : isNegative ? 'text-red-700' : 'text-gray-700'}`}>\n          {change > 0 ? '+' : ''}{change.toFixed(1)}%\n        </span>\n      </div>\n    </div>\n  );\n}\n\n/**\n * ScenarioInsight Component\n */\nfunction ScenarioInsight({ condition, severity, title, message }) {\n  if (!condition) return null;\n\n  const severityConfig = {\n    success: {\n      bg: 'bg-green-50',\n      border: 'border-green-200',\n      text: 'text-green-900',\n      icon: '✓',\n    },\n    warning: {\n      bg: 'bg-yellow-50',\n      border: 'border-yellow-200',\n      text: 'text-yellow-900',\n      icon: '⚠',\n    },\n    critical: {\n      bg: 'bg-red-50',\n      border: 'border-red-200',\n      text: 'text-red-900',\n      icon: '⚠',\n    },\n  };\n\n  const config = severityConfig[severity];\n\n  return (\n    <div className={`p-4 rounded-lg border ${config.bg} ${config.border}`}>\n      <div className=\"flex items-start gap-2\">\n        <span className=\"text-lg\">{config.icon}</span>\n        <div className=\"flex-1\">\n          <h3 className={`font-semibold ${config.text} mb-1`}>{title}</h3>\n          <p className={`text-sm ${config.text}`}>{message}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Helper Functions\n */\n\nfunction generateSensitivityData(baseline, metric) {\n  const parameters = [\n    { name: 'Price', key: 'price' },\n    { name: 'Demand', key: 'demand' },\n    { name: 'COGS', key: 'cogs' },\n    { name: 'Marketing', key: 'marketingSpend' },\n    { name: 'Conv. Rate', key: 'conversionRate' },\n  ];\n\n  return parameters.map((param) => {\n    const negativeScenario = { ...baseline, [param.key]: baseline[param.key] * 0.8 };\n    const positiveScenario = { ...baseline, [param.key]: baseline[param.key] * 1.2 };\n\n    const baselineValue = calculateMetric(baseline, metric);\n    const negativeValue = calculateMetric(negativeScenario, metric);\n    const positiveValue = calculateMetric(positiveScenario, metric);\n\n    return {\n      parameter: param.name,\n      negative: ((negativeValue - baselineValue) / baselineValue) * 100,\n      positive: ((positiveValue - baselineValue) / baselineValue) * 100,\n    };\n  });\n}\n\nfunction calculateMetric(scenario, metric) {\n  const revenue = scenario.price * scenario.demand;\n  const profit = (scenario.price - scenario.cogs) * scenario.demand - scenario.marketingSpend;\n  const margin = ((scenario.price - scenario.cogs) / scenario.price) * 100;\n\n  if (metric === 'revenue') return revenue;\n  if (metric === 'profit') return profit;\n  if (metric === 'margin') return margin;\n  return 0;\n}\n\nexport default WhatIfAnalysis;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\auth\\SignUpPage.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\dashboard\\DrilldownModal.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'kpi' is defined but never used.",
        "line": 132,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 132,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "kpi" },
            "fix": { "range": [4718, 4722], "text": "" },
            "desc": "Remove unused variable 'kpi'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'timeRange' is defined but never used.",
        "line": 132,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 132,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "timeRange" },
            "fix": { "range": [4721, 4732], "text": "" },
            "desc": "Remove unused variable 'timeRange'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'kpi' is defined but never used.",
        "line": 171,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 171,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "kpi" },
            "fix": { "range": [6073, 6077], "text": "" },
            "desc": "Remove unused variable 'kpi'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'timeRange' is defined but never used.",
        "line": 171,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 171,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "timeRange" },
            "fix": { "range": [6076, 6087], "text": "" },
            "desc": "Remove unused variable 'timeRange'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'kpi' is defined but never used.",
        "line": 221,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 221,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "kpi" },
            "fix": { "range": [7793, 7797], "text": "" },
            "desc": "Remove unused variable 'kpi'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'timeRange' is defined but never used.",
        "line": 221,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 221,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "timeRange" },
            "fix": { "range": [7796, 7807], "text": "" },
            "desc": "Remove unused variable 'timeRange'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'index' is defined but never used.",
        "line": 250,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 250,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [9289, 9296], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport { X, Download, ArrowUp, ArrowDown } from 'lucide-react';\n\n/**\n * DrilldownModal Component\n *\n * Detailed KPI drilldown modal with three view modes:\n * - By Market (UK, EU, US breakdown)\n * - By Channel (Amazon FBA, Shopify DTC breakdown)\n * - By Product (9 SKU performance table)\n *\n * Features:\n * - Time range selector (7d, 30d, 90d, 1y)\n * - Export functionality\n * - Chart visualizations (placeholders for now)\n * - Responsive design\n *\n * @param {Object} props\n * @param {Object} props.kpi - KPI data object with details\n * @param {Function} props.onClose - Close handler\n */\nfunction DrilldownModal({ kpi, onClose }) {\n  const [view, setView] = useState('market'); // market, channel, product\n  const [timeRange, setTimeRange] = useState('30d'); // 7d, 30d, 90d, 1y\n\n  if (!kpi) return null;\n\n  const handleExport = () => {\n    // TODO: Implement export functionality\n    console.log('Export drilldown data for:', kpi.id, view, timeRange);\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-xl max-w-6xl w-full max-h-[90vh] overflow-hidden shadow-2xl\">\n        {/* Header */}\n        <div className=\"p-6 border-b border-gray-200 bg-gray-50\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-2xl font-bold text-gray-900\">\n                KPI Drilldown: {kpi.label}\n              </h2>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                Detailed breakdown and analysis\n              </p>\n            </div>\n            <button\n              onClick={onClose}\n              className=\"p-2 hover:bg-gray-200 rounded-full transition-colors\"\n            >\n              <X className=\"w-6 h-6 text-gray-600\" />\n            </button>\n          </div>\n\n          {/* View selector */}\n          <div className=\"flex items-center gap-2 mt-4\">\n            <button\n              onClick={() => setView('market')}\n              className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                view === 'market'\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-white text-gray-700 hover:bg-gray-100'\n              }`}\n            >\n              By Market\n            </button>\n            <button\n              onClick={() => setView('channel')}\n              className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                view === 'channel'\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-white text-gray-700 hover:bg-gray-100'\n              }`}\n            >\n              By Channel\n            </button>\n            <button\n              onClick={() => setView('product')}\n              className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                view === 'product'\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-white text-gray-700 hover:bg-gray-100'\n              }`}\n            >\n              By Product\n            </button>\n\n            <div className=\"ml-auto flex items-center gap-2\">\n              {/* Time range selector */}\n              <div className=\"flex items-center gap-1 bg-gray-200 rounded-lg p-1\">\n                {['7d', '30d', '90d', '1y'].map((range) => (\n                  <button\n                    key={range}\n                    onClick={() => setTimeRange(range)}\n                    className={`px-3 py-1 rounded text-sm font-medium transition-colors ${\n                      timeRange === range\n                        ? 'bg-white text-gray-900 shadow'\n                        : 'text-gray-600 hover:text-gray-900'\n                    }`}\n                  >\n                    {range.toUpperCase()}\n                  </button>\n                ))}\n              </div>\n\n              {/* Export button */}\n              <button\n                onClick={handleExport}\n                className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center gap-2\"\n              >\n                <Download className=\"w-4 h-4\" />\n                Export\n              </button>\n            </div>\n          </div>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 overflow-y-auto max-h-[calc(90vh-200px)]\">\n          {view === 'market' && <MarketBreakdown kpi={kpi} timeRange={timeRange} />}\n          {view === 'channel' && <ChannelBreakdown kpi={kpi} timeRange={timeRange} />}\n          {view === 'product' && <ProductBreakdown kpi={kpi} timeRange={timeRange} />}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * MarketBreakdown Component\n */\nfunction MarketBreakdown({ kpi, timeRange }) {\n  const markets = [\n    { id: 'uk', name: 'United Kingdom', value: 42500, change: 12.5, share: 45 },\n    { id: 'eu', name: 'European Union', value: 35200, change: 8.2, share: 37 },\n    { id: 'us', name: 'United States', value: 17300, change: -2.1, share: 18 },\n  ];\n\n  return (\n    <div>\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Performance by Market</h3>\n\n      <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n        {markets.map((market) => (\n          <div key={market.id} className=\"bg-gray-50 rounded-lg p-6 border border-gray-200\">\n            <h4 className=\"text-sm font-medium text-gray-600 mb-2\">\n              {market.name} ({market.share}%)\n            </h4>\n            <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n              £{market.value.toLocaleString()}\n            </div>\n            <TrendIndicator change={market.change} />\n          </div>\n        ))}\n      </div>\n\n      {/* Chart placeholder */}\n      <div className=\"bg-gray-100 rounded-lg p-8 flex items-center justify-center\">\n        <div className=\"text-center text-gray-500\">\n          <p className=\"font-medium\">Market Trend Chart</p>\n          <p className=\"text-sm\">Chart visualization coming soon</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * ChannelBreakdown Component\n */\nfunction ChannelBreakdown({ kpi, timeRange }) {\n  const channels = [\n    { id: 'amazon-fba', name: 'Amazon FBA', value: 58200, change: 15.3, share: 61 },\n    { id: 'shopify-dtc', name: 'Shopify DTC', value: 36800, change: 9.7, share: 39 },\n  ];\n\n  return (\n    <div>\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Performance by Channel</h3>\n\n      <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n        {channels.map((channel) => (\n          <div key={channel.id} className=\"bg-gray-50 rounded-lg p-6 border border-gray-200\">\n            <h4 className=\"text-sm font-medium text-gray-600 mb-2\">\n              {channel.name} ({channel.share}%)\n            </h4>\n            <div className=\"text-3xl font-bold text-gray-900 mb-2\">\n              £{channel.value.toLocaleString()}\n            </div>\n            <TrendIndicator change={channel.change} />\n\n            {/* Share bar */}\n            <div className=\"mt-4\">\n              <div className=\"w-full bg-gray-200 rounded-full h-3\">\n                <div\n                  className={`h-3 rounded-full ${\n                    channel.id === 'amazon-fba' ? 'bg-orange-500' : 'bg-cyan-500'\n                  }`}\n                  style={{ width: `${channel.share}%` }}\n                />\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Chart placeholder */}\n      <div className=\"bg-gray-100 rounded-lg p-8 flex items-center justify-center\">\n        <div className=\"text-center text-gray-500\">\n          <p className=\"font-medium\">Channel Trend Chart</p>\n          <p className=\"text-sm\">Chart visualization coming soon</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * ProductBreakdown Component\n */\nfunction ProductBreakdown({ kpi, timeRange }) {\n  const products = [\n    { sku: 'PROD-001', name: 'Product A', value: 12500, change: 18.2 },\n    { sku: 'PROD-002', name: 'Product B', value: 11200, change: 12.5 },\n    { sku: 'PROD-003', name: 'Product C', value: 9800, change: -3.1 },\n    { sku: 'PROD-004', name: 'Product D', value: 9100, change: 7.8 },\n    { sku: 'PROD-005', name: 'Product E', value: 8500, change: 22.1 },\n    { sku: 'PROD-006', name: 'Product F', value: 7600, change: -5.4 },\n    { sku: 'PROD-007', name: 'Product G', value: 6900, change: 4.2 },\n    { sku: 'PROD-008', name: 'Product H', value: 5400, change: 9.6 },\n    { sku: 'PROD-009', name: 'Product I', value: 4000, change: -8.9 },\n  ];\n\n  return (\n    <div>\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Performance by Product</h3>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"w-full\">\n          <thead>\n            <tr className=\"border-b-2 border-gray-200 bg-gray-50\">\n              <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">SKU</th>\n              <th className=\"text-left py-3 px-4 font-semibold text-gray-700\">Product</th>\n              <th className=\"text-right py-3 px-4 font-semibold text-gray-700\">Value</th>\n              <th className=\"text-right py-3 px-4 font-semibold text-gray-700\">Change</th>\n              <th className=\"text-right py-3 px-4 font-semibold text-gray-700\">Share</th>\n            </tr>\n          </thead>\n          <tbody>\n            {products.map((product, index) => {\n              const totalValue = products.reduce((sum, p) => sum + p.value, 0);\n              const share = ((product.value / totalValue) * 100).toFixed(1);\n\n              return (\n                <tr key={product.sku} className=\"border-b border-gray-100 hover:bg-gray-50\">\n                  <td className=\"py-3 px-4 font-mono text-sm font-medium\">{product.sku}</td>\n                  <td className=\"py-3 px-4\">{product.name}</td>\n                  <td className=\"py-3 px-4 text-right font-semibold\">\n                    £{product.value.toLocaleString()}\n                  </td>\n                  <td className=\"py-3 px-4 text-right\">\n                    <TrendIndicator change={product.change} compact />\n                  </td>\n                  <td className=\"py-3 px-4 text-right text-gray-600\">{share}%</td>\n                </tr>\n              );\n            })}\n          </tbody>\n          <tfoot>\n            <tr className=\"border-t-2 border-gray-200 bg-gray-50 font-semibold\">\n              <td className=\"py-3 px-4\" colSpan=\"2\">\n                Total\n              </td>\n              <td className=\"py-3 px-4 text-right\">\n                £{products.reduce((sum, p) => sum + p.value, 0).toLocaleString()}\n              </td>\n              <td className=\"py-3 px-4\"></td>\n              <td className=\"py-3 px-4 text-right\">100%</td>\n            </tr>\n          </tfoot>\n        </table>\n      </div>\n    </div>\n  );\n}\n\n/**\n * TrendIndicator Component\n */\nfunction TrendIndicator({ change, compact = false }) {\n  const isPositive = change > 0;\n  const isNeutral = change === 0;\n\n  if (compact) {\n    return (\n      <span\n        className={`inline-flex items-center gap-1 ${\n          isNeutral\n            ? 'text-gray-600'\n            : isPositive\n            ? 'text-green-600'\n            : 'text-red-600'\n        }`}\n      >\n        {!isNeutral && (isPositive ? <ArrowUp className=\"w-4 h-4\" /> : <ArrowDown className=\"w-4 h-4\" />)}\n        <span className=\"font-semibold\">\n          {isPositive ? '+' : ''}{change.toFixed(1)}%\n        </span>\n      </span>\n    );\n  }\n\n  return (\n    <div\n      className={`inline-flex items-center gap-2 px-3 py-1 rounded-lg ${\n        isNeutral\n          ? 'bg-gray-100 text-gray-700'\n          : isPositive\n          ? 'bg-green-100 text-green-700'\n          : 'bg-red-100 text-red-700'\n      }`}\n    >\n      {!isNeutral && (isPositive ? <ArrowUp className=\"w-5 h-5\" /> : <ArrowDown className=\"w-5 h-5\" />)}\n      <span className=\"font-semibold text-lg\">\n        {isPositive ? '+' : ''}{change.toFixed(1)}%\n      </span>\n      <span className=\"text-sm\">vs last period</span>\n    </div>\n  );\n}\n\nexport default DrilldownModal;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\dashboard\\KPIStrip.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'lastMessage' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 39,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 39,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "lastMessage" },
            "fix": { "range": [939, 1171], "text": "" },
            "desc": "Remove unused variable 'lastMessage'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { useSSE } from '@/services/sse/useSSE';\nimport {\n  DollarSign,\n  Package,\n  Warehouse,\n  Clock,\n  TrendingUp,\n  Target,\n  ArrowUp,\n  ArrowDown,\n  Minus,\n} from 'lucide-react';\n\n/**\n * KPIStrip Component\n *\n * Displays 6 top-level KPIs with real-time SSE updates:\n * 1. Revenue (today, MTD, YTD)\n * 2. Production Output (units, OEE)\n * 3. Inventory Value\n * 4. Cash Conversion Cycle\n * 5. On-Time Delivery Rate\n * 6. Forecast Accuracy\n *\n * Features:\n * - Real-time SSE updates for live data\n * - Sparklines for trend visualization\n * - Trend badges (up/down/neutral)\n * - Status indicators (excellent/good/warning/critical)\n * - Click handlers for drilldown modals\n *\n * @param {Object} props\n * @param {Object} props.data - KPI data object\n * @param {Function} props.onKPIClick - Click handler for KPI drilldown\n */\nfunction KPIStrip({ data, onKPIClick }) {\n  // SSE integration for real-time updates\n  const { lastMessage } = useSSE('dashboard', {\n    enabled: true,\n    onMessage: (message) => {\n      if (message.type === 'kpi:update') {\n        // Parent component handles query invalidation via TanStack Query\n      }\n    },\n  });\n\n  if (!data) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4\">\n        {[...Array(6)].map((_, i) => (\n          <div key={i} className=\"bg-white rounded-lg shadow p-6 animate-pulse\">\n            <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n            <div className=\"h-8 bg-gray-200 rounded\"></div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  const kpis = [\n    {\n      id: 'revenue',\n      label: 'Revenue',\n      value: data.revenue?.today || 0,\n      format: 'currency',\n      comparison: {\n        label: 'vs Yesterday',\n        value: data.revenue?.change || 0,\n        type: getTrend(data.revenue?.change),\n      },\n      status: getStatus(data.revenue?.target, data.revenue?.today),\n      icon: DollarSign,\n      sparkline: data.revenue?.sparkline || [],\n      details: {\n        mtd: data.revenue?.mtd || 0,\n        ytd: data.revenue?.ytd || 0,\n      },\n    },\n    {\n      id: 'production',\n      label: 'Production Output',\n      value: data.production?.units || 0,\n      format: 'number',\n      suffix: 'units',\n      comparison: {\n        label: 'OEE',\n        value: data.production?.oee || 0,\n        type: getOEEStatus(data.production?.oee),\n      },\n      status: getStatus(data.production?.target, data.production?.units),\n      icon: Package,\n      sparkline: data.production?.sparkline || [],\n      details: {\n        oee: data.production?.oee || 0,\n        target: data.production?.target || 0,\n      },\n    },\n    {\n      id: 'inventory',\n      label: 'Inventory Value',\n      value: data.inventory?.value || 0,\n      format: 'currency',\n      comparison: {\n        label: 'vs Last Week',\n        value: data.inventory?.change || 0,\n        type: getTrend(data.inventory?.change),\n      },\n      status: 'good',\n      icon: Warehouse,\n      sparkline: data.inventory?.sparkline || [],\n      details: {\n        units: data.inventory?.units || 0,\n        skus: data.inventory?.skus || 0,\n      },\n    },\n    {\n      id: 'ccc',\n      label: 'Cash Conversion Cycle',\n      value: data.ccc?.days || 0,\n      format: 'number',\n      suffix: 'days',\n      comparison: {\n        label: 'Target: <55d',\n        value: 55 - (data.ccc?.days || 0),\n        type: data.ccc?.days < 55 ? 'up' : 'down',\n      },\n      status: getCCCStatus(data.ccc?.days),\n      icon: Clock,\n      sparkline: data.ccc?.sparkline || [],\n      details: {\n        dio: data.ccc?.dio || 0,\n        dso: data.ccc?.dso || 0,\n        dpo: data.ccc?.dpo || 0,\n      },\n    },\n    {\n      id: 'otd',\n      label: 'On-Time Delivery',\n      value: data.otd?.rate || 0,\n      format: 'percentage',\n      comparison: {\n        label: 'vs Last Month',\n        value: data.otd?.change || 0,\n        type: getTrend(data.otd?.change),\n      },\n      status: getPercentageStatus(data.otd?.rate, 95),\n      icon: TrendingUp,\n      sparkline: data.otd?.sparkline || [],\n      details: {\n        onTime: data.otd?.onTime || 0,\n        total: data.otd?.total || 0,\n      },\n    },\n    {\n      id: 'forecast',\n      label: 'Forecast Accuracy',\n      value: data.forecast?.accuracy || 0,\n      format: 'percentage',\n      comparison: {\n        label: 'Target: >85%',\n        value: (data.forecast?.accuracy || 0) - 85,\n        type: (data.forecast?.accuracy || 0) >= 85 ? 'up' : 'down',\n      },\n      status: getPercentageStatus(data.forecast?.accuracy, 85),\n      icon: Target,\n      sparkline: data.forecast?.sparkline || [],\n      details: {\n        mape: data.forecast?.mape || 0,\n        models: data.forecast?.models || 0,\n      },\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-4\">\n      {kpis.map((kpi) => (\n        <KPICard key={kpi.id} kpi={kpi} onClick={() => onKPIClick && onKPIClick(kpi)} />\n      ))}\n    </div>\n  );\n}\n\n/**\n * KPICard Component\n *\n * Individual KPI card with status, trend, and sparkline\n */\nfunction KPICard({ kpi, onClick }) {\n  const statusColors = {\n    excellent: 'border-green-500 bg-green-50',\n    good: 'border-blue-500 bg-blue-50',\n    warning: 'border-yellow-500 bg-yellow-50',\n    critical: 'border-red-500 bg-red-50',\n  };\n\n  const Icon = kpi.icon;\n\n  return (\n    <div\n      className={`p-4 rounded-lg border-2 cursor-pointer hover:shadow-lg hover:scale-105 transition-all ${\n        statusColors[kpi.status] || statusColors.good\n      }`}\n      onClick={onClick}\n    >\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex items-center gap-2\">\n          <Icon className=\"w-5 h-5 text-gray-600\" />\n          <span className=\"text-xs font-medium text-gray-700 uppercase tracking-wide\">\n            {kpi.label}\n          </span>\n        </div>\n        <StatusBadge status={kpi.status} />\n      </div>\n\n      {/* Value */}\n      <div className=\"mb-2\">\n        <div className=\"text-2xl font-bold text-gray-900\">\n          {formatValue(kpi.value, kpi.format)}\n          {kpi.suffix && <span className=\"text-sm font-normal text-gray-600 ml-1\">{kpi.suffix}</span>}\n        </div>\n        <TrendBadge comparison={kpi.comparison} />\n      </div>\n\n      {/* Sparkline */}\n      {kpi.sparkline && kpi.sparkline.length > 0 && (\n        <div className=\"mt-3\">\n          <Sparkline data={kpi.sparkline} color={getSparklineColor(kpi.status)} />\n        </div>\n      )}\n\n      {/* Details */}\n      {kpi.details && (\n        <div className=\"mt-3 pt-3 border-t border-gray-200 text-xs text-gray-600\">\n          {kpi.id === 'revenue' && (\n            <>\n              <div>MTD: {formatValue(kpi.details.mtd, 'currency')}</div>\n              <div>YTD: {formatValue(kpi.details.ytd, 'currency')}</div>\n            </>\n          )}\n          {kpi.id === 'production' && (\n            <>\n              <div>OEE: {kpi.details.oee}%</div>\n              <div>Target: {kpi.details.target}</div>\n            </>\n          )}\n          {kpi.id === 'inventory' && (\n            <>\n              <div>{kpi.details.units} units</div>\n              <div>{kpi.details.skus} SKUs</div>\n            </>\n          )}\n          {kpi.id === 'ccc' && (\n            <>\n              <div>DIO: {kpi.details.dio}d</div>\n              <div>DSO: {kpi.details.dso}d | DPO: {kpi.details.dpo}d</div>\n            </>\n          )}\n          {kpi.id === 'otd' && (\n            <div>{kpi.details.onTime} / {kpi.details.total} deliveries</div>\n          )}\n          {kpi.id === 'forecast' && (\n            <>\n              <div>MAPE: {kpi.details.mape}%</div>\n              <div>{kpi.details.models} models</div>\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * StatusBadge Component\n */\nfunction StatusBadge({ status }) {\n  const config = {\n    excellent: { label: 'Excellent', className: 'bg-green-600 text-white' },\n    good: { label: 'Good', className: 'bg-blue-600 text-white' },\n    warning: { label: 'Warning', className: 'bg-yellow-600 text-white' },\n    critical: { label: 'Critical', className: 'bg-red-600 text-white' },\n  };\n\n  const { label, className } = config[status] || config.good;\n\n  return (\n    <span className={`px-2 py-1 rounded text-xs font-semibold ${className}`}>\n      {label}\n    </span>\n  );\n}\n\n/**\n * TrendBadge Component\n */\nfunction TrendBadge({ comparison }) {\n  if (!comparison) return null;\n\n  const { label, value, type } = comparison;\n\n  const config = {\n    up: { icon: ArrowUp, className: 'text-green-600 bg-green-100' },\n    down: { icon: ArrowDown, className: 'text-red-600 bg-red-100' },\n    neutral: { icon: Minus, className: 'text-gray-600 bg-gray-100' },\n  };\n\n  const { icon: Icon, className } = config[type] || config.neutral;\n\n  return (\n    <div className={`inline-flex items-center gap-1 px-2 py-1 rounded text-xs font-medium mt-1 ${className}`}>\n      <Icon className=\"w-3 h-3\" />\n      <span>{label}</span>\n      {value !== null && value !== undefined && (\n        <span className=\"font-semibold\">\n          {value > 0 ? '+' : ''}{value.toFixed(1)}\n        </span>\n      )}\n    </div>\n  );\n}\n\n/**\n * Sparkline Component\n */\nfunction Sparkline({ data, color = '#3b82f6' }) {\n  if (!data || data.length === 0) return null;\n\n  const width = 100;\n  const height = 20;\n  const max = Math.max(...data);\n  const min = Math.min(...data);\n  const range = max - min || 1;\n\n  const points = data\n    .map((value, index) => {\n      const x = (index / (data.length - 1)) * width;\n      const y = height - ((value - min) / range) * height;\n      return `${x},${y}`;\n    })\n    .join(' ');\n\n  return (\n    <svg width=\"100%\" height={height} viewBox={`0 0 ${width} ${height}`} preserveAspectRatio=\"none\">\n      <polyline\n        points={points}\n        fill=\"none\"\n        stroke={color}\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n}\n\n/**\n * Helper Functions\n */\n\nfunction formatValue(value, format) {\n  if (value === null || value === undefined) return 'N/A';\n\n  switch (format) {\n    case 'currency':\n      return new Intl.NumberFormat('en-GB', {\n        style: 'currency',\n        currency: 'GBP',\n        minimumFractionDigits: 0,\n      }).format(value);\n    case 'percentage':\n      return `${value.toFixed(1)}%`;\n    case 'number':\n      return value.toLocaleString();\n    default:\n      return value;\n  }\n}\n\nfunction getTrend(change) {\n  if (change > 0) return 'up';\n  if (change < 0) return 'down';\n  return 'neutral';\n}\n\nfunction getStatus(target, actual) {\n  if (!target || !actual) return 'good';\n  const percentage = (actual / target) * 100;\n  if (percentage >= 100) return 'excellent';\n  if (percentage >= 90) return 'good';\n  if (percentage >= 75) return 'warning';\n  return 'critical';\n}\n\nfunction getCCCStatus(days) {\n  if (!days) return 'good';\n  if (days < 40) return 'excellent';\n  if (days < 55) return 'good';\n  if (days < 70) return 'warning';\n  return 'critical';\n}\n\nfunction getOEEStatus(oee) {\n  if (!oee) return 'neutral';\n  if (oee >= 85) return 'up';\n  if (oee >= 75) return 'neutral';\n  return 'down';\n}\n\nfunction getPercentageStatus(actual, target) {\n  if (!actual) return 'good';\n  if (actual >= target) return 'excellent';\n  if (actual >= target * 0.9) return 'good';\n  if (actual >= target * 0.75) return 'warning';\n  return 'critical';\n}\n\nfunction getSparklineColor(status) {\n  const colors = {\n    excellent: '#10b981',\n    good: '#3b82f6',\n    warning: '#f59e0b',\n    critical: '#ef4444',\n  };\n  return colors[status] || colors.good;\n}\n\nexport default KPIStrip;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\dashboard\\QuickActions.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\dashboard\\WorkingCapitalSnapshot.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'status' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 285,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 285,
        "endColumn": 11
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'width' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 307,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 307,
        "endColumn": 14
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  TrendingUp,\n  TrendingDown,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  DollarSign,\n  ArrowRight,\n} from 'lucide-react';\n\n/**\n * WorkingCapitalSnapshot Component\n *\n * Displays a compact summary of working capital metrics:\n * - Cash Conversion Cycle (CCC) with status\n * - Cash runway visualization\n * - Breach indicators and warnings\n * - Quick mitigation action buttons\n * - Link to full Working Capital analysis suite\n *\n * @param {Object} props\n * @param {Object} props.data - Working capital data from API\n * @param {Object} props.data.ccc - Cash Conversion Cycle metrics\n * @param {number} props.data.ccc.value - CCC in days\n * @param {string} props.data.ccc.status - Status: 'excellent' | 'good' | 'warning' | 'critical'\n * @param {Object} props.data.ccc.components - DIO, DSO, DPO breakdown\n * @param {Object} props.data.runway - Cash runway metrics\n * @param {number} props.data.runway.months - Months of runway remaining\n * @param {number} props.data.runway.cashBalance - Current cash balance\n * @param {number} props.data.runway.burnRate - Monthly burn rate\n * @param {Array} props.data.runway.projection - 12-month projection data\n * @param {Array} props.data.breaches - Array of detected breach windows\n * @param {Array} props.data.mitigationActions - Recommended quick actions\n */\nfunction WorkingCapitalSnapshot({ data }) {\n  if (!data) {\n    return (\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Working Capital</h3>\n        <p className=\"text-gray-500\">Loading working capital data...</p>\n      </div>\n    );\n  }\n\n  const { ccc, runway, breaches = [], mitigationActions = [] } = data;\n\n  return (\n    <div className=\"bg-white rounded-lg shadow\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-semibold\">Working Capital</h3>\n          <Link\n            to=\"/working-capital\"\n            className=\"text-sm text-blue-600 hover:text-blue-700 flex items-center gap-1\"\n          >\n            Full Analysis <ArrowRight className=\"w-4 h-4\" />\n          </Link>\n        </div>\n      </div>\n\n      <div className=\"p-6 space-y-6\">\n        {/* Cash Conversion Cycle */}\n        <div>\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-gray-600\">Cash Conversion Cycle</span>\n            <CCCStatusBadge status={ccc?.status} />\n          </div>\n\n          <div className=\"flex items-baseline gap-2\">\n            <span className=\"text-3xl font-bold\">{ccc?.value?.toFixed(1) || '0.0'}</span>\n            <span className=\"text-gray-500\">days</span>\n          </div>\n\n          {/* Target indicator */}\n          <div className=\"mt-2 flex items-center gap-2 text-sm\">\n            <div className=\"flex-1 bg-gray-200 rounded-full h-2\">\n              <div\n                className={`h-2 rounded-full ${getCCCBarColor(ccc?.status)}`}\n                style={{ width: `${Math.min((ccc?.value / 55) * 100, 100)}%` }}\n              />\n            </div>\n            <span className=\"text-gray-500 text-xs\">Target: &lt;55d</span>\n          </div>\n\n          {/* Components breakdown */}\n          {ccc?.components && (\n            <div className=\"mt-3 grid grid-cols-3 gap-2 text-xs\">\n              <div className=\"bg-blue-50 rounded p-2\">\n                <div className=\"text-gray-600\">DIO</div>\n                <div className=\"font-semibold\">{ccc.components.dio?.toFixed(0)}d</div>\n              </div>\n              <div className=\"bg-green-50 rounded p-2\">\n                <div className=\"text-gray-600\">DSO</div>\n                <div className=\"font-semibold\">{ccc.components.dso?.toFixed(0)}d</div>\n              </div>\n              <div className=\"bg-purple-50 rounded p-2\">\n                <div className=\"text-gray-600\">DPO</div>\n                <div className=\"font-semibold\">{ccc.components.dpo?.toFixed(0)}d</div>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Cash Runway */}\n        <div>\n          <div className=\"flex items-center justify-between mb-3\">\n            <span className=\"text-sm text-gray-600\">Cash Runway</span>\n            <RunwayStatusBadge months={runway?.months} />\n          </div>\n\n          <div className=\"space-y-2\">\n            {/* Runway months */}\n            <div className=\"flex items-baseline gap-2\">\n              <Clock className=\"w-5 h-5 text-gray-400\" />\n              <span className=\"text-2xl font-bold\">{runway?.months?.toFixed(1) || '0.0'}</span>\n              <span className=\"text-gray-500\">months</span>\n            </div>\n\n            {/* Cash balance */}\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <DollarSign className=\"w-4 h-4\" />\n              <span>Balance: £{runway?.cashBalance?.toLocaleString() || '0'}</span>\n            </div>\n\n            {/* Burn rate */}\n            <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n              <TrendingDown className=\"w-4 h-4\" />\n              <span>Burn: £{runway?.burnRate?.toLocaleString() || '0'}/mo</span>\n            </div>\n          </div>\n\n          {/* Mini runway chart */}\n          {runway?.projection && runway.projection.length > 0 && (\n            <div className=\"mt-4\">\n              <MiniRunwayChart\n                data={runway.projection}\n                breaches={breaches}\n                currentBalance={runway.cashBalance}\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Breach Indicators */}\n        {breaches.length > 0 && (\n          <div className=\"bg-red-50 border border-red-200 rounded-lg p-4\">\n            <div className=\"flex items-start gap-2\">\n              <AlertTriangle className=\"w-5 h-5 text-red-600 mt-0.5\" />\n              <div className=\"flex-1\">\n                <h4 className=\"font-semibold text-red-900 text-sm\">\n                  {breaches.length} Breach{breaches.length > 1 ? 'es' : ''} Detected\n                </h4>\n                <div className=\"mt-2 space-y-1\">\n                  {breaches.slice(0, 2).map((breach, index) => (\n                    <div key={index} className=\"text-xs text-red-700\">\n                      <span className=\"font-medium\">Month {breach.month}:</span>{' '}\n                      £{Math.abs(breach.deficit).toLocaleString()} deficit\n                    </div>\n                  ))}\n                  {breaches.length > 2 && (\n                    <div className=\"text-xs text-red-600\">\n                      +{breaches.length - 2} more breach{breaches.length - 2 > 1 ? 'es' : ''}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Quick Mitigation Actions */}\n        {mitigationActions.length > 0 && (\n          <div>\n            <h4 className=\"text-sm font-semibold text-gray-700 mb-3\">Quick Actions</h4>\n            <div className=\"space-y-2\">\n              {mitigationActions.slice(0, 3).map((action, index) => (\n                <button\n                  key={index}\n                  className=\"w-full text-left px-3 py-2 bg-gray-50 hover:bg-gray-100 rounded border border-gray-200 text-sm transition-colors\"\n                  onClick={() => handleActionClick(action)}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"font-medium\">{action.title}</span>\n                    <span className=\"text-green-600 text-xs font-semibold\">\n                      +£{action.impact?.toLocaleString()}\n                    </span>\n                  </div>\n                  {action.description && (\n                    <div className=\"text-xs text-gray-600 mt-1\">{action.description}</div>\n                  )}\n                </button>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Default mitigation actions if none provided */}\n        {mitigationActions.length === 0 && (\n          <div>\n            <h4 className=\"text-sm font-semibold text-gray-700 mb-3\">Quick Actions</h4>\n            <div className=\"space-y-2\">\n              <ActionButton\n                title=\"Accelerate Collections\"\n                description=\"Reduce DSO by 5 days\"\n                impact=\"15,000\"\n                onClick={() => handleDefaultAction('collections')}\n              />\n              <ActionButton\n                title=\"Extend Payables\"\n                description=\"Negotiate 15-day extension\"\n                impact=\"12,000\"\n                onClick={() => handleDefaultAction('payables')}\n              />\n              <ActionButton\n                title=\"Optimize Inventory\"\n                description=\"Reduce DIO by 3 days\"\n                impact=\"8,500\"\n                onClick={() => handleDefaultAction('inventory')}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n/**\n * CCC Status Badge Component\n */\nfunction CCCStatusBadge({ status }) {\n  const config = {\n    excellent: {\n      icon: CheckCircle,\n      label: 'Excellent',\n      className: 'bg-green-100 text-green-800',\n    },\n    good: {\n      icon: CheckCircle,\n      label: 'Good',\n      className: 'bg-blue-100 text-blue-800',\n    },\n    warning: {\n      icon: AlertTriangle,\n      label: 'Warning',\n      className: 'bg-yellow-100 text-yellow-800',\n    },\n    critical: {\n      icon: AlertTriangle,\n      label: 'Critical',\n      className: 'bg-red-100 text-red-800',\n    },\n  };\n\n  const { icon: Icon, label, className } = config[status] || config.good;\n\n  return (\n    <span className={`inline-flex items-center gap-1 px-2 py-1 rounded text-xs font-medium ${className}`}>\n      <Icon className=\"w-3 h-3\" />\n      {label}\n    </span>\n  );\n}\n\n/**\n * Runway Status Badge Component\n */\nfunction RunwayStatusBadge({ months }) {\n  let status = 'good';\n  let label = 'Healthy';\n  let className = 'bg-green-100 text-green-800';\n\n  if (months < 3) {\n    status = 'critical';\n    label = 'Critical';\n    className = 'bg-red-100 text-red-800';\n  } else if (months < 6) {\n    status = 'warning';\n    label = 'Warning';\n    className = 'bg-yellow-100 text-yellow-800';\n  } else if (months < 12) {\n    status = 'good';\n    label = 'Good';\n    className = 'bg-blue-100 text-blue-800';\n  }\n\n  return (\n    <span className={`inline-flex items-center gap-1 px-2 py-1 rounded text-xs font-medium ${className}`}>\n      {label}\n    </span>\n  );\n}\n\n/**\n * Mini Runway Chart Component\n * Displays a compact 12-month cash projection\n */\nfunction MiniRunwayChart({ data, breaches = [], currentBalance }) {\n  if (!data || data.length === 0) {\n    return null;\n  }\n\n  // Calculate chart dimensions\n  const width = 100; // percentage\n  const height = 60; // pixels\n  const maxValue = Math.max(...data.map(d => d.balance), currentBalance || 0);\n  const minValue = Math.min(...data.map(d => d.balance), 0);\n  const range = maxValue - minValue;\n\n  // Generate SVG path\n  const points = data.map((point, index) => {\n    const x = (index / (data.length - 1)) * 100;\n    const y = height - ((point.balance - minValue) / range) * height;\n    return `${x},${y}`;\n  }).join(' ');\n\n  // Identify breach points\n  const breachMonths = new Set(breaches.map(b => b.month));\n\n  return (\n    <div className=\"relative\">\n      <svg\n        viewBox={`0 0 100 ${height}`}\n        className=\"w-full\"\n        style={{ height: `${height}px` }}\n      >\n        {/* Zero line */}\n        <line\n          x1=\"0\"\n          y1={height - ((0 - minValue) / range) * height}\n          x2=\"100\"\n          y2={height - ((0 - minValue) / range) * height}\n          stroke=\"#e5e7eb\"\n          strokeWidth=\"0.5\"\n          strokeDasharray=\"2,2\"\n        />\n\n        {/* Runway projection line */}\n        <polyline\n          points={points}\n          fill=\"none\"\n          stroke={breaches.length > 0 ? '#ef4444' : '#10b981'}\n          strokeWidth=\"2\"\n        />\n\n        {/* Breach indicators */}\n        {data.map((point, index) => {\n          if (breachMonths.has(index)) {\n            const x = (index / (data.length - 1)) * 100;\n            const y = height - ((point.balance - minValue) / range) * height;\n            return (\n              <circle\n                key={index}\n                cx={x}\n                cy={y}\n                r=\"2\"\n                fill=\"#ef4444\"\n                stroke=\"white\"\n                strokeWidth=\"1\"\n              />\n            );\n          }\n          return null;\n        })}\n      </svg>\n\n      {/* Chart labels */}\n      <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n        <span>Now</span>\n        <span>12 months</span>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Action Button Component\n */\nfunction ActionButton({ title, description, impact, onClick }) {\n  return (\n    <button\n      className=\"w-full text-left px-3 py-2 bg-gray-50 hover:bg-gray-100 rounded border border-gray-200 text-sm transition-colors\"\n      onClick={onClick}\n    >\n      <div className=\"flex items-center justify-between\">\n        <span className=\"font-medium\">{title}</span>\n        <span className=\"text-green-600 text-xs font-semibold\">+£{impact}</span>\n      </div>\n      {description && (\n        <div className=\"text-xs text-gray-600 mt-1\">{description}</div>\n      )}\n    </button>\n  );\n}\n\n/**\n * Helper Functions\n */\n\nfunction getCCCBarColor(status) {\n  const colors = {\n    excellent: 'bg-green-500',\n    good: 'bg-blue-500',\n    warning: 'bg-yellow-500',\n    critical: 'bg-red-500',\n  };\n  return colors[status] || colors.good;\n}\n\nfunction handleActionClick(action) {\n  // TODO: Implement action handler\n  // This will navigate to the full Working Capital suite with the action pre-selected\n  console.log('Action clicked:', action);\n  // For now, navigate to working capital page\n  window.location.href = '/working-capital?action=' + encodeURIComponent(action.id || action.title);\n}\n\nfunction handleDefaultAction(actionType) {\n  // TODO: Implement default action handler\n  console.log('Default action:', actionType);\n  window.location.href = '/working-capital?action=' + actionType;\n}\n\nexport default WorkingCapitalSnapshot;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\dashboard\\charts\\ChartCard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\dashboard\\charts\\InventoryLevelsChart.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\dashboard\\charts\\ProductionOutputChart.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\dashboard\\charts\\SalesRevenueChart.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\dashboard\\charts\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\forecasting\\ForecastResults.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\forecasting\\ForecastingDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [24, 35], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'completedForecasts' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 43,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 43,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "completedForecasts" },
            "fix": { "range": [1399, 1417], "text": "" },
            "desc": "Remove unused variable 'completedForecasts'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'lastMessage' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 92,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "lastMessage" },
            "fix": { "range": [3005, 3795], "text": "" },
            "desc": "Remove unused variable 'lastMessage'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { useSSE } from '@/services/sse/useSSE';\nimport {\n  PlayCircle,\n  RefreshCw,\n  CheckCircle,\n  AlertCircle,\n  Clock,\n  TrendingUp,\n  Settings,\n} from 'lucide-react';\n\n/**\n * ForecastingDashboard Component\n *\n * Main forecasting interface with:\n * - Model selection (ARIMA, LSTM, Prophet, Random Forest, Ensemble)\n * - Forecast horizon selector (7, 14, 30, 90 days)\n * - Product/SKU selector\n * - Region/channel filters\n * - Job progress tracking via SSE\n * - Navigation to comparison and results\n *\n * Workflow: Select parameters → Run forecast → Track progress → View results → Compare models → Use in optimization\n */\nfunction ForecastingDashboard() {\n  const navigate = useNavigate();\n\n  // Form state\n  const [selectedProducts, setSelectedProducts] = useState([]);\n  const [selectedModels, setSelectedModels] = useState(['ensemble']);\n  const [horizon, setHorizon] = useState(30);\n  const [region, setRegion] = useState('all');\n  const [channel, setChannel] = useState('all');\n  const [useEnsemble, setUseEnsemble] = useState(true);\n\n  // Job tracking state\n  const [currentJob, setCurrentJob] = useState(null);\n  const [jobProgress, setJobProgress] = useState(0);\n  const [jobStatus, setJobStatus] = useState(null);\n  const [completedForecasts, setCompletedForecasts] = useState([]);\n\n  // Fetch available products\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: ['products', 'list'],\n    queryFn: async () => {\n      const response = await fetch('/api/v1/products');\n      if (!response.ok) throw new Error('Failed to fetch products');\n      const result = await response.json();\n      return result.data || [];\n    },\n  });\n\n  // Fetch recent forecasts\n  const { data: recentForecasts = [], refetch: refetchForecasts } = useQuery({\n    queryKey: ['forecasts', 'recent'],\n    queryFn: async () => {\n      const response = await fetch('/api/v1/forecasts/recent');\n      if (!response.ok) throw new Error('Failed to fetch recent forecasts');\n      const result = await response.json();\n      return result.data || [];\n    },\n  });\n\n  // Run forecast mutation\n  const runForecastMutation = useMutation({\n    mutationFn: async (forecastParams) => {\n      const response = await fetch('/api/v1/forecasts/train', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(forecastParams),\n      });\n      if (!response.ok) throw new Error('Failed to start forecast job');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      if (data.success && data.data.jobId) {\n        setCurrentJob(data.data.jobId);\n        setJobStatus('running');\n        setJobProgress(0);\n      }\n    },\n    onError: (error) => {\n      console.error('Forecast job error:', error);\n      setJobStatus('error');\n    },\n  });\n\n  // SSE for job progress\n  const { lastMessage } = useSSE('forecast', {\n    enabled: !!currentJob,\n    onMessage: (message) => {\n      if (message.type === 'forecast:progress' && message.jobId === currentJob) {\n        setJobProgress(message.progress || 0);\n        setJobStatus(message.status);\n\n        if (message.status === 'completed') {\n          setCompletedForecasts((prev) => [...prev, message.result]);\n          refetchForecasts();\n          setTimeout(() => {\n            setCurrentJob(null);\n            setJobStatus(null);\n            setJobProgress(0);\n          }, 2000);\n        }\n\n        if (message.status === 'failed') {\n          setTimeout(() => {\n            setCurrentJob(null);\n            setJobStatus(null);\n            setJobProgress(0);\n          }, 3000);\n        }\n      }\n    },\n  });\n\n  const handleRunForecast = () => {\n    if (selectedProducts.length === 0) {\n      alert('Please select at least one product');\n      return;\n    }\n\n    if (selectedModels.length === 0) {\n      alert('Please select at least one model');\n      return;\n    }\n\n    const forecastParams = {\n      productIds: selectedProducts,\n      models: selectedModels,\n      horizon,\n      region: region !== 'all' ? region : undefined,\n      channel: channel !== 'all' ? channel : undefined,\n      useEnsemble,\n    };\n\n    runForecastMutation.mutate(forecastParams);\n  };\n\n  const isRunning = jobStatus === 'running';\n  const canRun = selectedProducts.length > 0 && selectedModels.length > 0 && !isRunning;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Demand Forecasting</h1>\n        <p className=\"text-gray-600 mt-1\">\n          AI-powered demand prediction with ensemble models • Target accuracy: &gt;85%\n        </p>\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Configuration Panel */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Model Selection */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2\">\n              <TrendingUp className=\"w-5 h-5 text-blue-600\" />\n              Model Selection\n            </h2>\n\n            <div className=\"space-y-4\">\n              {/* Ensemble toggle */}\n              <div className=\"flex items-center justify-between p-4 bg-blue-50 rounded-lg border-2 border-blue-200\">\n                <div>\n                  <label className=\"font-semibold text-gray-900\">Ensemble Mode (Recommended)</label>\n                  <p className=\"text-sm text-gray-600\">\n                    Combines multiple models with weighted averaging for best accuracy\n                  </p>\n                </div>\n                <input\n                  type=\"checkbox\"\n                  checked={useEnsemble}\n                  onChange={(e) => setUseEnsemble(e.target.checked)}\n                  className=\"w-6 h-6\"\n                />\n              </div>\n\n              {/* Individual models */}\n              <div className=\"grid md:grid-cols-2 gap-3\">\n                {MODELS.map((model) => (\n                  <ModelCard\n                    key={model.id}\n                    model={model}\n                    selected={selectedModels.includes(model.id)}\n                    disabled={useEnsemble}\n                    onToggle={() => {\n                      if (useEnsemble) return;\n                      setSelectedModels((prev) =>\n                        prev.includes(model.id)\n                          ? prev.filter((m) => m !== model.id)\n                          : [...prev, model.id]\n                      );\n                    }}\n                  />\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Forecast Parameters */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4 flex items-center gap-2\">\n              <Settings className=\"w-5 h-5 text-blue-600\" />\n              Forecast Parameters\n            </h2>\n\n            <div className=\"space-y-6\">\n              {/* Product Selection */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Products / SKUs *\n                </label>\n                <select\n                  multiple\n                  value={selectedProducts}\n                  onChange={(e) =>\n                    setSelectedProducts(Array.from(e.target.selectedOptions, (opt) => opt.value))\n                  }\n                  className=\"w-full border border-gray-300 rounded-lg p-2 h-32\"\n                  disabled={productsLoading}\n                >\n                  {productsLoading ? (\n                    <option>Loading products...</option>\n                  ) : (\n                    products.map((product) => (\n                      <option key={product.id} value={product.id}>\n                        {product.sku} - {product.name}\n                      </option>\n                    ))\n                  )}\n                </select>\n                <p className=\"text-xs text-gray-500 mt-1\">Hold Ctrl/Cmd to select multiple</p>\n              </div>\n\n              {/* Horizon Selector */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Forecast Horizon\n                </label>\n                <div className=\"grid grid-cols-4 gap-2\">\n                  {[7, 14, 30, 90].map((days) => (\n                    <button\n                      key={days}\n                      onClick={() => setHorizon(days)}\n                      className={`py-2 px-4 rounded-lg border-2 font-medium transition-colors ${\n                        horizon === days\n                          ? 'border-blue-600 bg-blue-50 text-blue-700'\n                          : 'border-gray-200 bg-white text-gray-700 hover:bg-gray-50'\n                      }`}\n                    >\n                      {days} days\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              {/* Region Filter */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Region</label>\n                <select\n                  value={region}\n                  onChange={(e) => setRegion(e.target.value)}\n                  className=\"w-full border border-gray-300 rounded-lg p-2\"\n                >\n                  <option value=\"all\">All Regions</option>\n                  <option value=\"uk\">United Kingdom</option>\n                  <option value=\"eu\">European Union</option>\n                  <option value=\"us\">United States</option>\n                </select>\n              </div>\n\n              {/* Channel Filter */}\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">Channel</label>\n                <select\n                  value={channel}\n                  onChange={(e) => setChannel(e.target.value)}\n                  className=\"w-full border border-gray-300 rounded-lg p-2\"\n                >\n                  <option value=\"all\">All Channels</option>\n                  <option value=\"amazon-fba\">Amazon FBA</option>\n                  <option value=\"shopify-dtc\">Shopify DTC</option>\n                </select>\n              </div>\n            </div>\n          </div>\n\n          {/* Run Forecast Button */}\n          <button\n            onClick={handleRunForecast}\n            disabled={!canRun}\n            className={`w-full py-4 rounded-lg font-semibold text-lg flex items-center justify-center gap-3 transition-colors ${\n              canRun\n                ? 'bg-blue-600 text-white hover:bg-blue-700'\n                : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n            }`}\n          >\n            {isRunning ? (\n              <>\n                <RefreshCw className=\"w-6 h-6 animate-spin\" />\n                Running Forecast...\n              </>\n            ) : (\n              <>\n                <PlayCircle className=\"w-6 h-6\" />\n                Run Forecast\n              </>\n            )}\n          </button>\n        </div>\n\n        {/* Status Panel */}\n        <div className=\"space-y-6\">\n          {/* Job Progress */}\n          {currentJob && (\n            <div className=\"bg-white rounded-lg shadow p-6\">\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Job Progress</h2>\n              <JobProgressCard\n                jobId={currentJob}\n                status={jobStatus}\n                progress={jobProgress}\n              />\n            </div>\n          )}\n\n          {/* Recent Forecasts */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Forecasts</h2>\n            {recentForecasts.length === 0 ? (\n              <p className=\"text-sm text-gray-500\">No recent forecasts</p>\n            ) : (\n              <div className=\"space-y-3\">\n                {recentForecasts.slice(0, 5).map((forecast) => (\n                  <RecentForecastCard\n                    key={forecast.id}\n                    forecast={forecast}\n                    onClick={() => navigate(`/forecasting/results/${forecast.id}`)}\n                  />\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Actions</h2>\n            <div className=\"space-y-2\">\n              <button\n                onClick={() => navigate('/forecasting/comparison')}\n                className=\"w-full py-2 px-4 bg-gray-100 hover:bg-gray-200 rounded-lg text-left font-medium transition-colors\"\n              >\n                Compare Models\n              </button>\n              <button\n                onClick={() => navigate('/analytics/what-if')}\n                className=\"w-full py-2 px-4 bg-gray-100 hover:bg-gray-200 rounded-lg text-left font-medium transition-colors\"\n              >\n                What-If Analysis\n              </button>\n              <button\n                onClick={() => navigate('/inventory/optimization')}\n                className=\"w-full py-2 px-4 bg-green-100 hover:bg-green-200 text-green-800 rounded-lg text-left font-medium transition-colors\"\n              >\n                Use in Optimization\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * ModelCard Component\n */\nfunction ModelCard({ model, selected, disabled, onToggle }) {\n  return (\n    <button\n      onClick={onToggle}\n      disabled={disabled}\n      className={`p-4 rounded-lg border-2 text-left transition-all ${\n        disabled\n          ? 'border-gray-200 bg-gray-50 opacity-50 cursor-not-allowed'\n          : selected\n          ? 'border-blue-600 bg-blue-50'\n          : 'border-gray-200 bg-white hover:bg-gray-50'\n      }`}\n    >\n      <div className=\"flex items-start justify-between mb-2\">\n        <h3 className=\"font-semibold text-gray-900\">{model.name}</h3>\n        {!disabled && (\n          <input\n            type=\"checkbox\"\n            checked={selected}\n            onChange={() => {}}\n            className=\"w-5 h-5\"\n            disabled={disabled}\n          />\n        )}\n      </div>\n      <p className=\"text-sm text-gray-600 mb-2\">{model.description}</p>\n      <div className=\"flex items-center gap-2 text-xs text-gray-500\">\n        <Clock className=\"w-3 h-3\" />\n        {model.trainingTime}\n      </div>\n    </button>\n  );\n}\n\n/**\n * JobProgressCard Component\n */\nfunction JobProgressCard({ jobId, status, progress }) {\n  const statusConfig = {\n    running: {\n      icon: RefreshCw,\n      color: 'text-blue-600',\n      bgColor: 'bg-blue-50',\n      label: 'Running',\n    },\n    completed: {\n      icon: CheckCircle,\n      color: 'text-green-600',\n      bgColor: 'bg-green-50',\n      label: 'Completed',\n    },\n    failed: {\n      icon: AlertCircle,\n      color: 'text-red-600',\n      bgColor: 'bg-red-50',\n      label: 'Failed',\n    },\n  };\n\n  const config = statusConfig[status] || statusConfig.running;\n  const Icon = config.icon;\n\n  return (\n    <div className={`p-4 rounded-lg ${config.bgColor}`}>\n      <div className=\"flex items-center gap-3 mb-3\">\n        <Icon className={`w-5 h-5 ${config.color} ${status === 'running' ? 'animate-spin' : ''}`} />\n        <div>\n          <p className={`font-semibold ${config.color}`}>{config.label}</p>\n          <p className=\"text-xs text-gray-600\">Job ID: {jobId.slice(0, 8)}</p>\n        </div>\n      </div>\n\n      {status === 'running' && (\n        <>\n          <div className=\"w-full bg-gray-200 rounded-full h-2 mb-2\">\n            <div\n              className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\n              style={{ width: `${progress}%` }}\n            />\n          </div>\n          <p className=\"text-sm text-gray-600\">{progress}% complete</p>\n        </>\n      )}\n    </div>\n  );\n}\n\n/**\n * RecentForecastCard Component\n */\nfunction RecentForecastCard({ forecast, onClick }) {\n  const accuracy = forecast.accuracy || forecast.mape ? 100 - forecast.mape : null;\n  const isGood = accuracy && accuracy >= 85;\n\n  return (\n    <button\n      onClick={onClick}\n      className=\"w-full p-3 bg-gray-50 hover:bg-gray-100 rounded-lg text-left transition-colors border border-gray-200\"\n    >\n      <div className=\"flex items-center justify-between mb-1\">\n        <span className=\"font-medium text-sm\">{forecast.productName || forecast.productId}</span>\n        {accuracy && (\n          <span\n            className={`text-xs font-semibold px-2 py-1 rounded ${\n              isGood ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'\n            }`}\n          >\n            {accuracy.toFixed(1)}%\n          </span>\n        )}\n      </div>\n      <p className=\"text-xs text-gray-600\">\n        {forecast.model} • {forecast.horizon}d • {new Date(forecast.createdAt).toLocaleDateString()}\n      </p>\n    </button>\n  );\n}\n\n/**\n * Model Definitions\n */\nconst MODELS = [\n  {\n    id: 'arima',\n    name: 'ARIMA',\n    description: 'Auto-Regressive Integrated Moving Average for trend and seasonality',\n    trainingTime: '~2 min',\n  },\n  {\n    id: 'lstm',\n    name: 'LSTM',\n    description: 'Long Short-Term Memory neural network for complex patterns',\n    trainingTime: '~5 min',\n  },\n  {\n    id: 'prophet',\n    name: 'Prophet',\n    description: \"Facebook's additive regression model with seasonal components\",\n    trainingTime: '~3 min',\n  },\n  {\n    id: 'randomforest',\n    name: 'Random Forest',\n    description: 'Ensemble decision trees with bootstrap aggregating',\n    trainingTime: '~4 min',\n  },\n];\n\nexport default ForecastingDashboard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\forecasting\\ModelComparison.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'status' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 439,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 439,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useQuery } from '@tanstack/react-query';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Area,\n  AreaChart,\n} from 'recharts';\nimport {\n  ArrowRight,\n  CheckCircle,\n  TrendingUp,\n  Award,\n  AlertTriangle,\n  Download,\n} from 'lucide-react';\n\n/**\n * ModelComparison Component\n *\n * Side-by-side model comparison interface with:\n * - Accuracy metrics table (MAPE, RMSE, MAE, R²)\n * - Confidence interval visualization\n * - Historical performance charts\n * - Model selection for optimization\n * - \"Use in Optimization\" workflow trigger\n *\n * Workflow: Compare models → Select best model → Push to inventory optimization\n */\nfunction ModelComparison() {\n  const navigate = useNavigate();\n\n  const [selectedProduct, setSelectedProduct] = useState('PROD-001');\n  const [selectedModelForOptimization, setSelectedModelForOptimization] = useState(null);\n  const [comparisonView, setComparisonView] = useState('metrics'); // metrics, charts, history\n\n  // Fetch forecast comparison data\n  const { data: comparisonData, isLoading } = useQuery({\n    queryKey: ['forecasts', 'comparison', selectedProduct],\n    queryFn: async () => {\n      const response = await fetch(`/api/v1/forecasts/comparison?productId=${selectedProduct}`);\n      if (!response.ok) throw new Error('Failed to fetch comparison data');\n      const result = await response.json();\n      return result.data;\n    },\n  });\n\n  // Fetch available products\n  const { data: products = [] } = useQuery({\n    queryKey: ['products', 'with-forecasts'],\n    queryFn: async () => {\n      const response = await fetch('/api/v1/products?hasForecasts=true');\n      if (!response.ok) throw new Error('Failed to fetch products');\n      const result = await response.json();\n      return result.data || [];\n    },\n  });\n\n  const handleUseInOptimization = () => {\n    if (!selectedModelForOptimization) {\n      alert('Please select a model first');\n      return;\n    }\n\n    // Navigate to inventory optimization with selected forecast\n    navigate('/inventory/optimization', {\n      state: {\n        forecastModel: selectedModelForOptimization,\n        productId: selectedProduct,\n        comparisonData,\n      },\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading model comparison...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const models = comparisonData?.models || [];\n  const bestModel = models.find((m) => m.isBest);\n  const hasSelection = selectedModelForOptimization !== null;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Model Comparison</h1>\n            <p className=\"text-gray-600 mt-1\">\n              Compare forecast models and select the best performer for optimization\n            </p>\n          </div>\n          <button\n            onClick={handleUseInOptimization}\n            disabled={!hasSelection}\n            className={`px-6 py-3 rounded-lg font-semibold flex items-center gap-2 transition-colors ${\n              hasSelection\n                ? 'bg-green-600 text-white hover:bg-green-700'\n                : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n            }`}\n          >\n            Use in Optimization\n            <ArrowRight className=\"w-5 h-5\" />\n          </button>\n        </div>\n      </div>\n\n      {/* Product Selector */}\n      <div className=\"mb-6 bg-white rounded-lg shadow p-4\">\n        <label className=\"block text-sm font-medium text-gray-700 mb-2\">Select Product</label>\n        <select\n          value={selectedProduct}\n          onChange={(e) => {\n            setSelectedProduct(e.target.value);\n            setSelectedModelForOptimization(null);\n          }}\n          className=\"w-full md:w-96 border border-gray-300 rounded-lg p-2\"\n        >\n          {products.map((product) => (\n            <option key={product.id} value={product.id}>\n              {product.sku} - {product.name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {/* View Tabs */}\n      <div className=\"mb-6 flex gap-2\">\n        <button\n          onClick={() => setComparisonView('metrics')}\n          className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n            comparisonView === 'metrics'\n              ? 'bg-blue-600 text-white'\n              : 'bg-white text-gray-700 hover:bg-gray-50'\n          }`}\n        >\n          Accuracy Metrics\n        </button>\n        <button\n          onClick={() => setComparisonView('charts')}\n          className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n            comparisonView === 'charts'\n              ? 'bg-blue-600 text-white'\n              : 'bg-white text-gray-700 hover:bg-gray-50'\n          }`}\n        >\n          Forecast Charts\n        </button>\n        <button\n          onClick={() => setComparisonView('history')}\n          className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n            comparisonView === 'history'\n              ? 'bg-blue-600 text-white'\n              : 'bg-white text-gray-700 hover:bg-gray-50'\n          }`}\n        >\n          Historical Performance\n        </button>\n      </div>\n\n      {/* Metrics View */}\n      {comparisonView === 'metrics' && (\n        <div className=\"space-y-6\">\n          {/* Best Model Recommendation */}\n          {bestModel && (\n            <div className=\"bg-green-50 border-2 border-green-500 rounded-lg p-6\">\n              <div className=\"flex items-start gap-4\">\n                <Award className=\"w-8 h-8 text-green-600 flex-shrink-0\" />\n                <div className=\"flex-1\">\n                  <h2 className=\"text-xl font-bold text-green-900 mb-2\">\n                    Recommended Model: {bestModel.name}\n                  </h2>\n                  <p className=\"text-green-800 mb-3\">{bestModel.description}</p>\n                  <div className=\"grid md:grid-cols-4 gap-4\">\n                    <MetricBadge label=\"MAPE\" value={`${bestModel.metrics.mape.toFixed(2)}%`} />\n                    <MetricBadge label=\"RMSE\" value={bestModel.metrics.rmse.toFixed(2)} />\n                    <MetricBadge label=\"MAE\" value={bestModel.metrics.mae.toFixed(2)} />\n                    <MetricBadge label=\"R²\" value={bestModel.metrics.r2.toFixed(3)} />\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Accuracy Metrics Table */}\n          <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <h2 className=\"text-lg font-semibold text-gray-900\">Accuracy Metrics Comparison</h2>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                Lower is better for MAPE, RMSE, MAE • Higher is better for R²\n              </p>\n            </div>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full\">\n                <thead>\n                  <tr className=\"bg-gray-50 border-b border-gray-200\">\n                    <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Model\n                    </th>\n                    <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      MAPE (%)\n                    </th>\n                    <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      RMSE\n                    </th>\n                    <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      MAE\n                    </th>\n                    <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      R²\n                    </th>\n                    <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Training Time\n                    </th>\n                    <th className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                      Select\n                    </th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white divide-y divide-gray-200\">\n                  {models.map((model) => (\n                    <tr\n                      key={model.id}\n                      className={`hover:bg-gray-50 ${\n                        selectedModelForOptimization === model.id ? 'bg-blue-50' : ''\n                      }`}\n                    >\n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center gap-2\">\n                          {model.isBest && <Award className=\"w-4 h-4 text-yellow-500\" />}\n                          <span className=\"font-medium text-gray-900\">{model.name}</span>\n                        </div>\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-center\">\n                        <AccuracyBadge value={model.metrics.mape} type=\"mape\" />\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-center text-gray-900\">\n                        {model.metrics.rmse.toFixed(2)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-center text-gray-900\">\n                        {model.metrics.mae.toFixed(2)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-center text-gray-900\">\n                        {model.metrics.r2.toFixed(3)}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-center text-sm text-gray-600\">\n                        {model.trainingTime}\n                      </td>\n                      <td className=\"px-6 py-4 whitespace-nowrap text-center\">\n                        <input\n                          type=\"radio\"\n                          name=\"selected-model\"\n                          checked={selectedModelForOptimization === model.id}\n                          onChange={() => setSelectedModelForOptimization(model.id)}\n                          className=\"w-5 h-5 cursor-pointer\"\n                        />\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Charts View */}\n      {comparisonView === 'charts' && (\n        <div className=\"space-y-6\">\n          {models.map((model) => (\n            <div key={model.id} className=\"bg-white rounded-lg shadow p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center gap-3\">\n                  {model.isBest && <Award className=\"w-6 h-6 text-yellow-500\" />}\n                  <h2 className=\"text-lg font-semibold text-gray-900\">{model.name}</h2>\n                  <AccuracyBadge value={model.metrics.mape} type=\"mape\" />\n                </div>\n                <input\n                  type=\"radio\"\n                  name=\"selected-model-chart\"\n                  checked={selectedModelForOptimization === model.id}\n                  onChange={() => setSelectedModelForOptimization(model.id)}\n                  className=\"w-5 h-5 cursor-pointer\"\n                />\n              </div>\n\n              {/* Forecast Chart with Confidence Intervals */}\n              <ResponsiveContainer width=\"100%\" height={300}>\n                <AreaChart data={model.forecastData} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n                  <defs>\n                    <linearGradient id={`confidence-${model.id}`} x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.3} />\n                      <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0} />\n                    </linearGradient>\n                  </defs>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n                  <XAxis\n                    dataKey=\"date\"\n                    tickFormatter={(date) => new Date(date).toLocaleDateString('en-GB', { day: 'numeric', month: 'short' })}\n                    style={{ fontSize: '12px' }}\n                  />\n                  <YAxis style={{ fontSize: '12px' }} />\n                  <Tooltip content={<ForecastTooltip />} />\n                  <Legend />\n                  {/* Confidence interval */}\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"upperBound\"\n                    stroke=\"none\"\n                    fill={`url(#confidence-${model.id})`}\n                    name=\"Confidence Interval\"\n                  />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"lowerBound\"\n                    stroke=\"none\"\n                    fill=\"white\"\n                  />\n                  {/* Actual values */}\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"actual\"\n                    stroke=\"#10b981\"\n                    strokeWidth={2}\n                    dot={{ r: 3 }}\n                    name=\"Actual\"\n                  />\n                  {/* Predicted values */}\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"predicted\"\n                    stroke=\"#3b82f6\"\n                    strokeWidth={2}\n                    strokeDasharray=\"5 5\"\n                    dot={{ r: 3 }}\n                    name=\"Predicted\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {/* Historical Performance View */}\n      {comparisonView === 'history' && (\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Historical Accuracy Trends\n          </h2>\n          <ResponsiveContainer width=\"100%\" height={400}>\n            <LineChart data={comparisonData?.historicalPerformance || []} margin={{ top: 10, right: 30, left: 0, bottom: 0 }}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n              <XAxis\n                dataKey=\"date\"\n                tickFormatter={(date) => new Date(date).toLocaleDateString('en-GB', { month: 'short', year: '2-digit' })}\n                style={{ fontSize: '12px' }}\n              />\n              <YAxis\n                label={{ value: 'MAPE (%)', angle: -90, position: 'insideLeft' }}\n                style={{ fontSize: '12px' }}\n              />\n              <Tooltip />\n              <Legend />\n              {models.map((model, index) => (\n                <Line\n                  key={model.id}\n                  type=\"monotone\"\n                  dataKey={model.id}\n                  name={model.name}\n                  stroke={MODEL_COLORS[index % MODEL_COLORS.length]}\n                  strokeWidth={2}\n                  dot={{ r: 3 }}\n                />\n              ))}\n              {/* Target line at 15% MAPE (85% accuracy) */}\n              <Line\n                type=\"monotone\"\n                dataKey=\"target\"\n                name=\"Target (15% MAPE)\"\n                stroke=\"#ef4444\"\n                strokeWidth={2}\n                strokeDasharray=\"5 5\"\n                dot={false}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * MetricBadge Component\n */\nfunction MetricBadge({ label, value }) {\n  return (\n    <div className=\"bg-white rounded-lg p-3 border border-green-200\">\n      <p className=\"text-xs text-gray-600 mb-1\">{label}</p>\n      <p className=\"text-lg font-bold text-gray-900\">{value}</p>\n    </div>\n  );\n}\n\n/**\n * AccuracyBadge Component\n */\nfunction AccuracyBadge({ value, type }) {\n  let status = 'good';\n  let className = 'bg-green-100 text-green-800';\n\n  if (type === 'mape') {\n    if (value > 20) {\n      status = 'poor';\n      className = 'bg-red-100 text-red-800';\n    } else if (value > 15) {\n      status = 'fair';\n      className = 'bg-yellow-100 text-yellow-800';\n    } else if (value > 10) {\n      status = 'good';\n      className = 'bg-green-100 text-green-800';\n    } else {\n      status = 'excellent';\n      className = 'bg-blue-100 text-blue-800';\n    }\n  }\n\n  return (\n    <span className={`inline-block px-3 py-1 rounded-full text-sm font-semibold ${className}`}>\n      {value.toFixed(2)}%\n    </span>\n  );\n}\n\n/**\n * ForecastTooltip Component\n */\nfunction ForecastTooltip({ active, payload, label }) {\n  if (!active || !payload || payload.length === 0) return null;\n\n  return (\n    <div className=\"bg-white border border-gray-200 rounded shadow-lg p-3\">\n      <p className=\"font-medium text-gray-900 mb-2\">\n        {new Date(label).toLocaleDateString('en-GB', { day: 'numeric', month: 'short', year: 'numeric' })}\n      </p>\n      {payload.map((entry, index) => (\n        <div key={index} className=\"flex items-center justify-between gap-4 text-sm\">\n          <span className=\"flex items-center gap-2\">\n            <span className=\"w-3 h-3 rounded\" style={{ backgroundColor: entry.color }} />\n            {entry.name}\n          </span>\n          <span className=\"font-semibold\">{entry.value?.toFixed(0)}</span>\n        </div>\n      ))}\n    </div>\n  );\n}\n\n/**\n * Constants\n */\nconst MODEL_COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#8b5cf6', '#ef4444'];\n\nexport default ModelComparison;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\inventory\\InventoryDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Icon' is defined but never used.",
        "line": 59,
        "column": 65,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 59,
        "endColumn": 69,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [1145, 1157], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Inventory Dashboard Component\n *\n * Multi-warehouse inventory management:\n * - Real-time stock levels across warehouses\n * - Stock value and turnover metrics\n * - Low stock and overstock alerts\n * - ABC analysis\n * - Warehouse comparison\n * - SKU performance tracking\n */\n\nimport { useState } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport {\n  Package,\n  TrendingUp,\n  TrendingDown,\n  AlertTriangle,\n  Warehouse,\n  BarChart3,\n  DollarSign,\n  Activity,\n  Filter,\n  Download,\n} from 'lucide-react';\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  PieChart,\n  Pie,\n  Cell,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ComposedChart,\n  Area,\n  Scatter,\n  ScatterChart,\n  ZAxis,\n} from 'recharts';\nimport { useSSE } from '../../hooks/useSSE';\n\n// Warehouse locations\nconst WAREHOUSES = {\n  UK: { id: 'uk', name: 'UK Warehouse', color: '#3b82f6' },\n  EU: { id: 'eu', name: 'EU Warehouse', color: '#10b981' },\n  USA: { id: 'usa', name: 'USA Warehouse', color: '#f59e0b' },\n};\n\n/**\n * Inventory Metric Card\n */\nfunction InventoryMetricCard({ label, value, unit, trend, icon: Icon, format = 'number' }) {\n  const StatusIcon = trend >= 0 ? TrendingUp : TrendingDown;\n  const trendColor = trend >= 0 ? 'text-green-600' : 'text-red-600';\n\n  const formattedValue = format === 'currency'\n    ? `£${value.toLocaleString()}`\n    : format === 'percentage'\n    ? `${value.toFixed(1)}%`\n    : value.toLocaleString();\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className=\"p-3 bg-blue-100 rounded-lg\">\n            <Icon className=\"w-6 h-6 text-blue-600\" />\n          </div>\n          <div>\n            <p className=\"text-sm font-medium text-gray-600\">{label}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex items-baseline gap-2\">\n        <span className=\"text-3xl font-bold text-gray-900\">{formattedValue}</span>\n        {unit && <span className=\"text-sm text-gray-600\">{unit}</span>}\n      </div>\n\n      {trend !== undefined && (\n        <div className={`flex items-center gap-1 mt-2 ${trendColor}`}>\n          <StatusIcon className=\"w-4 h-4\" />\n          <span className=\"text-sm font-medium\">\n            {Math.abs(trend).toFixed(1)}% vs last month\n          </span>\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Warehouse Comparison Chart\n */\nfunction WarehouseComparisonChart({ warehouseData }) {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        Stock Levels by Warehouse\n      </h3>\n\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart data={warehouseData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"warehouse\" />\n          <YAxis label={{ value: 'Units', angle: -90, position: 'insideLeft' }} />\n          <Tooltip formatter={(value) => value.toLocaleString()} />\n          <Legend />\n\n          <Bar dataKey=\"inStock\" stackId=\"a\" fill=\"#10b981\" name=\"In Stock\" />\n          <Bar dataKey=\"reserved\" stackId=\"a\" fill=\"#f59e0b\" name=\"Reserved\" />\n          <Bar dataKey=\"available\" fill=\"#3b82f6\" name=\"Available\" />\n        </BarChart>\n      </ResponsiveContainer>\n\n      {/* Warehouse Stats Grid */}\n      <div className=\"mt-6 grid grid-cols-3 gap-4\">\n        {warehouseData.map((warehouse) => (\n          <div key={warehouse.id} className=\"p-4 bg-gray-50 rounded-lg\">\n            <h4 className=\"font-semibold text-gray-900 mb-2\">{warehouse.warehouse}</h4>\n            <div className=\"space-y-1 text-sm\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600\">Total:</span>\n                <span className=\"font-medium text-gray-900\">{warehouse.inStock.toLocaleString()}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600\">Available:</span>\n                <span className=\"font-medium text-green-600\">{warehouse.available.toLocaleString()}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600\">Reserved:</span>\n                <span className=\"font-medium text-orange-600\">{warehouse.reserved.toLocaleString()}</span>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-gray-600\">Value:</span>\n                <span className=\"font-medium text-gray-900\">£{warehouse.value.toLocaleString()}</span>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n/**\n * ABC Analysis Chart\n */\nfunction ABCAnalysisChart({ abcData }) {\n  const chartData = [\n    { category: 'A - High Value', count: abcData.categoryA?.count || 0, value: abcData.categoryA?.value || 0, color: '#ef4444' },\n    { category: 'B - Medium Value', count: abcData.categoryB?.count || 0, value: abcData.categoryB?.value || 0, color: '#f59e0b' },\n    { category: 'C - Low Value', count: abcData.categoryC?.count || 0, value: abcData.categoryC?.value || 0, color: '#10b981' },\n  ];\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        ABC Analysis\n      </h3>\n      <p className=\"text-sm text-gray-600 mb-4\">\n        Classification of SKUs by value contribution (A: 80%, B: 15%, C: 5%)\n      </p>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <ResponsiveContainer width=\"100%\" height={250}>\n          <PieChart>\n            <Pie\n              data={chartData}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              label={({ category, value }) => `${category.split(' - ')[0]}: £${(value/1000).toFixed(0)}k`}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n            >\n              {chartData.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={entry.color} />\n              ))}\n            </Pie>\n            <Tooltip formatter={(value) => `£${value.toLocaleString()}`} />\n          </PieChart>\n        </ResponsiveContainer>\n\n        <div className=\"flex flex-col justify-center\">\n          <div className=\"space-y-4\">\n            {chartData.map((item) => (\n              <div key={item.category} className=\"p-3 bg-gray-50 rounded-lg\">\n                <div className=\"flex items-center gap-2 mb-2\">\n                  <div\n                    className=\"w-3 h-3 rounded-full\"\n                    style={{ backgroundColor: item.color }}\n                  />\n                  <span className=\"font-semibold text-gray-900\">{item.category}</span>\n                </div>\n                <div className=\"grid grid-cols-2 gap-2 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">SKUs:</span>\n                    <span className=\"ml-2 font-medium text-gray-900\">{item.count}</span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">Value:</span>\n                    <span className=\"ml-2 font-medium text-gray-900\">£{(item.value/1000).toFixed(0)}k</span>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Stock Turnover Chart\n */\nfunction StockTurnoverChart({ turnoverData }) {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        Stock Turnover Trend (Last 6 Months)\n      </h3>\n\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <ComposedChart data={turnoverData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"month\"\n            tickFormatter={(month) => new Date(month).toLocaleDateString('en-GB', { month: 'short' })}\n          />\n          <YAxis yAxisId=\"left\" label={{ value: 'Turnover Ratio', angle: -90, position: 'insideLeft' }} />\n          <YAxis yAxisId=\"right\" orientation=\"right\" label={{ value: 'Days', angle: 90, position: 'insideRight' }} />\n          <Tooltip\n            labelFormatter={(month) => new Date(month).toLocaleDateString('en-GB', { month: 'long', year: 'numeric' })}\n          />\n          <Legend />\n\n          <Area\n            yAxisId=\"left\"\n            type=\"monotone\"\n            dataKey=\"turnoverRatio\"\n            fill=\"#3b82f6\"\n            fillOpacity={0.1}\n            stroke=\"none\"\n          />\n          <Line\n            yAxisId=\"left\"\n            type=\"monotone\"\n            dataKey=\"turnoverRatio\"\n            stroke=\"#3b82f6\"\n            strokeWidth={3}\n            dot={{ fill: '#3b82f6', r: 4 }}\n            name=\"Turnover Ratio\"\n          />\n          <Line\n            yAxisId=\"right\"\n            type=\"monotone\"\n            dataKey=\"daysOnHand\"\n            stroke=\"#10b981\"\n            strokeWidth={2}\n            dot={{ fill: '#10b981', r: 4 }}\n            name=\"Days on Hand\"\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n\n      <div className=\"mt-4 grid grid-cols-3 gap-4\">\n        <div className=\"text-center p-3 bg-blue-50 rounded\">\n          <div className=\"text-2xl font-bold text-blue-600\">\n            {turnoverData[turnoverData.length - 1]?.turnoverRatio.toFixed(1) || 0}\n          </div>\n          <div className=\"text-xs text-gray-600 mt-1\">Current Turnover Ratio</div>\n        </div>\n        <div className=\"text-center p-3 bg-green-50 rounded\">\n          <div className=\"text-2xl font-bold text-green-600\">\n            {turnoverData[turnoverData.length - 1]?.daysOnHand.toFixed(0) || 0}\n          </div>\n          <div className=\"text-xs text-gray-600 mt-1\">Days on Hand</div>\n        </div>\n        <div className=\"text-center p-3 bg-orange-50 rounded\">\n          <div className=\"text-2xl font-bold text-orange-600\">\n            {Math.round(365 / (turnoverData[turnoverData.length - 1]?.turnoverRatio || 1))}\n          </div>\n          <div className=\"text-xs text-gray-600 mt-1\">Days Between Turns</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Top SKUs Table\n */\nfunction TopSKUsTable({ skus, metric = 'value' }) {\n  const [sortBy, setSortBy] = useState(metric);\n  const [sortOrder, setSortOrder] = useState('desc');\n\n  const sortedSKUs = [...skus].sort((a, b) => {\n    const aVal = a[sortBy];\n    const bVal = b[sortBy];\n    return sortOrder === 'asc' ? aVal - bVal : bVal - aVal;\n  });\n\n  const handleSort = (column) => {\n    if (sortBy === column) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortBy(column);\n      setSortOrder('desc');\n    }\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900\">Top Performing SKUs</h3>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                SKU\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Product\n              </th>\n              <th\n                onClick={() => handleSort('quantity')}\n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n              >\n                Quantity {sortBy === 'quantity' && (sortOrder === 'asc' ? '↑' : '↓')}\n              </th>\n              <th\n                onClick={() => handleSort('value')}\n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n              >\n                Value {sortBy === 'value' && (sortOrder === 'asc' ? '↑' : '↓')}\n              </th>\n              <th\n                onClick={() => handleSort('turnover')}\n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n              >\n                Turnover {sortBy === 'turnover' && (sortOrder === 'asc' ? '↑' : '↓')}\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Status\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {sortedSKUs.slice(0, 10).map((sku) => (\n              <tr key={sku.sku} className=\"hover:bg-gray-50\">\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"font-medium text-gray-900\">{sku.sku}</div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900\">{sku.name}</div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900\">{sku.quantity.toLocaleString()}</div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900\">£{sku.value.toLocaleString()}</div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900\">{sku.turnover.toFixed(1)}x</div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className={`px-2 py-1 text-xs font-medium rounded ${\n                    sku.status === 'in_stock' ? 'bg-green-100 text-green-700' :\n                    sku.status === 'low_stock' ? 'bg-yellow-100 text-yellow-700' :\n                    'bg-red-100 text-red-700'\n                  }`}>\n                    {sku.status.replace('_', ' ')}\n                  </span>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Main Inventory Dashboard Component\n */\nexport default function InventoryDashboard() {\n  const queryClient = useQueryClient();\n  const [selectedWarehouse, setSelectedWarehouse] = useState('all');\n  const [dateRange, setDateRange] = useState('month');\n\n  // Fetch inventory data\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['inventory', 'dashboard', selectedWarehouse, dateRange],\n    queryFn: async () => {\n      const params = new URLSearchParams({ warehouse: selectedWarehouse, dateRange });\n      const response = await fetch(`/api/v1/inventory/dashboard?${params}`, {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to fetch inventory data');\n      const result = await response.json();\n      return result.data;\n    },\n    refetchInterval: 60000, // Refetch every minute\n  });\n\n  // SSE for real-time inventory updates\n  const { connected } = useSSE('inventory', {\n    enabled: true,\n    onMessage: (message) => {\n      if (message.type === 'inventory:update' || message.type === 'inventory:alert') {\n        queryClient.invalidateQueries(['inventory', 'dashboard']);\n      }\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading inventory data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n        <p className=\"text-red-800\">Error loading inventory data: {error.message}</p>\n      </div>\n    );\n  }\n\n  const {\n    overview = {},\n    warehouses = [],\n    abc = {},\n    turnover = [],\n    topSKUs = [],\n  } = data || {};\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Inventory Dashboard</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Multi-warehouse stock management\n            {connected && (\n              <span className=\"ml-2 inline-flex items-center gap-1 text-green-600\">\n                <span className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                Live\n              </span>\n            )}\n          </p>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex items-center gap-3\">\n          <select\n            value={selectedWarehouse}\n            onChange={(e) => setSelectedWarehouse(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"all\">All Warehouses</option>\n            {Object.values(WAREHOUSES).map(warehouse => (\n              <option key={warehouse.id} value={warehouse.id}>\n                {warehouse.name}\n              </option>\n            ))}\n          </select>\n\n          <select\n            value={dateRange}\n            onChange={(e) => setDateRange(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"week\">This Week</option>\n            <option value=\"month\">This Month</option>\n            <option value=\"quarter\">This Quarter</option>\n            <option value=\"year\">This Year</option>\n          </select>\n\n          <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2\">\n            <Download className=\"w-4 h-4\" />\n            Export\n          </button>\n        </div>\n      </div>\n\n      {/* Metrics Cards */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <InventoryMetricCard\n          label=\"Total Stock Value\"\n          value={overview.totalValue || 0}\n          trend={overview.valueTrend}\n          icon={DollarSign}\n          format=\"currency\"\n        />\n\n        <InventoryMetricCard\n          label=\"Total Units\"\n          value={overview.totalUnits || 0}\n          trend={overview.unitsTrend}\n          icon={Package}\n          format=\"number\"\n        />\n\n        <InventoryMetricCard\n          label=\"Avg Turnover Ratio\"\n          value={overview.avgTurnover || 0}\n          unit=\"x per year\"\n          trend={overview.turnoverTrend}\n          icon={Activity}\n          format=\"number\"\n        />\n\n        <InventoryMetricCard\n          label=\"Days on Hand\"\n          value={overview.daysOnHand || 0}\n          unit=\"days\"\n          trend={-overview.daysOnHandTrend}\n          icon={BarChart3}\n          format=\"number\"\n        />\n      </div>\n\n      {/* Warehouse Comparison */}\n      <WarehouseComparisonChart warehouseData={warehouses} />\n\n      {/* Charts Row */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <ABCAnalysisChart abcData={abc} />\n        <StockTurnoverChart turnoverData={turnover} />\n      </div>\n\n      {/* Top SKUs Table */}\n      <TopSKUsTable skus={topSKUs} />\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\inventory\\StockAlerts.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'lastMessage' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 450,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 450,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "lastMessage" },
            "fix": { "range": [15533, 15546], "text": "" },
            "desc": "Remove unused variable 'lastMessage'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Stock Alerts Component\n *\n * Real-time inventory alerts and actions:\n * - Low stock warnings\n * - Overstock alerts\n * - Expiration warnings\n * - Dead stock identification\n * - Quick action buttons (reorder, transfer, mark down)\n * - Alert history and trends\n */\n\nimport { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport {\n  AlertTriangle,\n  AlertCircle,\n  Clock,\n  TrendingDown,\n  Package,\n  XCircle,\n  CheckCircle2,\n  ShoppingCart,\n  RefreshCw,\n  ArrowRight,\n  Tag,\n  X,\n} from 'lucide-react';\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  PieChart,\n  Pie,\n  Cell,\n} from 'recharts';\nimport { useSSE } from '../../hooks/useSSE';\n\n// Alert types and severity\nconst ALERT_TYPES = {\n  LOW_STOCK: { label: 'Low Stock', icon: AlertTriangle, color: 'orange' },\n  OUT_OF_STOCK: { label: 'Out of Stock', icon: XCircle, color: 'red' },\n  OVERSTOCK: { label: 'Overstock', icon: Package, color: 'yellow' },\n  EXPIRING_SOON: { label: 'Expiring Soon', icon: Clock, color: 'orange' },\n  DEAD_STOCK: { label: 'Dead Stock', icon: TrendingDown, color: 'gray' },\n};\n\nconst ALERT_SEVERITY = {\n  critical: { label: 'Critical', color: 'bg-red-500', textColor: 'text-red-600', borderColor: 'border-red-500' },\n  high: { label: 'High', color: 'bg-orange-500', textColor: 'text-orange-600', borderColor: 'border-orange-500' },\n  medium: { label: 'Medium', color: 'bg-yellow-500', textColor: 'text-yellow-600', borderColor: 'border-yellow-500' },\n  low: { label: 'Low', color: 'bg-blue-500', textColor: 'text-blue-600', borderColor: 'border-blue-500' },\n};\n\n/**\n * Stock Alert Card\n */\nfunction StockAlertCard({ alert, onAction, onDismiss }) {\n  const alertType = ALERT_TYPES[alert.type] || ALERT_TYPES.LOW_STOCK;\n  const severity = ALERT_SEVERITY[alert.severity] || ALERT_SEVERITY.medium;\n  const Icon = alertType.icon;\n\n  const [showActions, setShowActions] = useState(false);\n\n  return (\n    <div className={`rounded-lg border-2 ${severity.borderColor} bg-white p-4 hover:shadow-md transition-shadow`}>\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex items-center gap-3 flex-1\">\n          <div className={`p-2 rounded-lg ${severity.color} bg-opacity-10`}>\n            <Icon className={`w-5 h-5 ${severity.textColor}`} />\n          </div>\n          <div className=\"flex-1\">\n            <div className=\"flex items-center gap-2 mb-1\">\n              <h4 className=\"font-semibold text-gray-900\">{alert.sku}</h4>\n              <span className={`px-2 py-0.5 rounded text-xs font-medium ${severity.color} text-white`}>\n                {severity.label}\n              </span>\n            </div>\n            <p className=\"text-sm text-gray-600\">{alert.productName}</p>\n          </div>\n        </div>\n        <button\n          onClick={() => onDismiss(alert.id)}\n          className=\"text-gray-400 hover:text-gray-600\"\n        >\n          <X className=\"w-4 h-4\" />\n        </button>\n      </div>\n\n      {/* Alert Details */}\n      <div className=\"space-y-2 mb-3\">\n        <div className=\"flex items-center justify-between text-sm\">\n          <span className=\"text-gray-600\">Type:</span>\n          <span className=\"font-medium text-gray-900\">{alertType.label}</span>\n        </div>\n\n        {alert.currentStock !== undefined && (\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-600\">Current Stock:</span>\n            <span className={`font-medium ${\n              alert.currentStock === 0 ? 'text-red-600' :\n              alert.currentStock < alert.reorderPoint ? 'text-orange-600' :\n              'text-gray-900'\n            }`}>\n              {alert.currentStock} units\n            </span>\n          </div>\n        )}\n\n        {alert.reorderPoint && (\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-600\">Reorder Point:</span>\n            <span className=\"font-medium text-gray-900\">{alert.reorderPoint} units</span>\n          </div>\n        )}\n\n        {alert.warehouse && (\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-600\">Warehouse:</span>\n            <span className=\"font-medium text-gray-900\">{alert.warehouse}</span>\n          </div>\n        )}\n\n        {alert.daysUntilExpiry && (\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-600\">Days Until Expiry:</span>\n            <span className={`font-medium ${\n              alert.daysUntilExpiry <= 7 ? 'text-red-600' :\n              alert.daysUntilExpiry <= 30 ? 'text-orange-600' :\n              'text-gray-900'\n            }`}>\n              {alert.daysUntilExpiry} days\n            </span>\n          </div>\n        )}\n\n        {alert.daysStagnant && (\n          <div className=\"flex items-center justify-between text-sm\">\n            <span className=\"text-gray-600\">Days Stagnant:</span>\n            <span className=\"font-medium text-gray-900\">{alert.daysStagnant} days</span>\n          </div>\n        )}\n\n        {alert.message && (\n          <div className=\"mt-2 p-2 bg-gray-50 rounded text-sm text-gray-700\">\n            {alert.message}\n          </div>\n        )}\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"border-t border-gray-200 pt-3\">\n        <button\n          onClick={() => setShowActions(!showActions)}\n          className=\"text-sm text-blue-600 hover:text-blue-700 font-medium flex items-center gap-1\"\n        >\n          Quick Actions\n          <ArrowRight className={`w-4 h-4 transition-transform ${showActions ? 'rotate-90' : ''}`} />\n        </button>\n\n        {showActions && (\n          <div className=\"mt-3 grid grid-cols-2 gap-2\">\n            {alert.type === 'LOW_STOCK' || alert.type === 'OUT_OF_STOCK' ? (\n              <>\n                <button\n                  onClick={() => onAction('reorder', alert)}\n                  className=\"px-3 py-2 bg-blue-600 text-white rounded text-sm font-medium hover:bg-blue-700 flex items-center justify-center gap-1\"\n                >\n                  <ShoppingCart className=\"w-4 h-4\" />\n                  Reorder\n                </button>\n                <button\n                  onClick={() => onAction('transfer', alert)}\n                  className=\"px-3 py-2 border border-gray-300 rounded text-sm font-medium text-gray-700 hover:bg-gray-50 flex items-center justify-center gap-1\"\n                >\n                  <RefreshCw className=\"w-4 h-4\" />\n                  Transfer\n                </button>\n              </>\n            ) : null}\n\n            {alert.type === 'OVERSTOCK' || alert.type === 'DEAD_STOCK' ? (\n              <>\n                <button\n                  onClick={() => onAction('markdown', alert)}\n                  className=\"px-3 py-2 bg-orange-600 text-white rounded text-sm font-medium hover:bg-orange-700 flex items-center justify-center gap-1\"\n                >\n                  <Tag className=\"w-4 h-4\" />\n                  Mark Down\n                </button>\n                <button\n                  onClick={() => onAction('transfer', alert)}\n                  className=\"px-3 py-2 border border-gray-300 rounded text-sm font-medium text-gray-700 hover:bg-gray-50 flex items-center justify-center gap-1\"\n                >\n                  <RefreshCw className=\"w-4 h-4\" />\n                  Transfer\n                </button>\n              </>\n            ) : null}\n\n            {alert.type === 'EXPIRING_SOON' ? (\n              <>\n                <button\n                  onClick={() => onAction('markdown', alert)}\n                  className=\"px-3 py-2 bg-orange-600 text-white rounded text-sm font-medium hover:bg-orange-700 flex items-center justify-center gap-1\"\n                >\n                  <Tag className=\"w-4 h-4\" />\n                  Mark Down\n                </button>\n                <button\n                  onClick={() => onAction('transfer', alert)}\n                  className=\"px-3 py-2 border border-gray-300 rounded text-sm font-medium text-gray-700 hover:bg-gray-50 flex items-center justify-center gap-1\"\n                >\n                  <RefreshCw className=\"w-4 h-4\" />\n                  Transfer\n                </button>\n              </>\n            ) : null}\n          </div>\n        )}\n      </div>\n\n      {/* Timestamp */}\n      <div className=\"mt-3 text-xs text-gray-500\">\n        Alert created: {new Date(alert.createdAt).toLocaleString()}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Alert Summary Cards\n */\nfunction AlertSummaryCards({ summary }) {\n  const cards = [\n    { label: 'Critical Alerts', value: summary.critical || 0, color: 'bg-red-500', icon: AlertTriangle },\n    { label: 'High Priority', value: summary.high || 0, color: 'bg-orange-500', icon: AlertCircle },\n    { label: 'Medium Priority', value: summary.medium || 0, color: 'bg-yellow-500', icon: AlertCircle },\n    { label: 'Total Alerts', value: summary.total || 0, color: 'bg-blue-500', icon: Package },\n  ];\n\n  return (\n    <div className=\"grid md:grid-cols-4 gap-4\">\n      {cards.map((card) => {\n        const Icon = card.icon;\n        return (\n          <div key={card.label} className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className={`p-3 rounded-lg ${card.color} bg-opacity-10`}>\n                <Icon className={`w-6 h-6 ${card.color.replace('bg-', 'text-')}`} />\n              </div>\n            </div>\n            <div className=\"text-3xl font-bold text-gray-900\">{card.value}</div>\n            <div className=\"text-sm text-gray-600 mt-1\">{card.label}</div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\n/**\n * Alerts by Type Chart\n */\nfunction AlertsByTypeChart({ alertsData }) {\n  const chartData = Object.entries(ALERT_TYPES).map(([key, type]) => ({\n    name: type.label,\n    count: alertsData[key] || 0,\n    color: type.color === 'red' ? '#ef4444' :\n           type.color === 'orange' ? '#f97316' :\n           type.color === 'yellow' ? '#eab308' :\n           '#6b7280',\n  }));\n\n  const total = chartData.reduce((sum, item) => sum + item.count, 0);\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        Alerts by Type\n      </h3>\n\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <ResponsiveContainer width=\"100%\" height={200}>\n          <PieChart>\n            <Pie\n              data={chartData.filter(d => d.count > 0)}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              label={({ name, count }) => `${name}: ${count}`}\n              outerRadius={70}\n              fill=\"#8884d8\"\n              dataKey=\"count\"\n            >\n              {chartData.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={entry.color} />\n              ))}\n            </Pie>\n            <Tooltip />\n          </PieChart>\n        </ResponsiveContainer>\n\n        <div className=\"flex flex-col justify-center\">\n          <div className=\"space-y-2\">\n            {chartData\n              .filter(d => d.count > 0)\n              .sort((a, b) => b.count - a.count)\n              .map((item) => (\n                <div key={item.name} className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center gap-2\">\n                    <div\n                      className=\"w-3 h-3 rounded-full\"\n                      style={{ backgroundColor: item.color }}\n                    />\n                    <span className=\"text-sm text-gray-700\">{item.name}</span>\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-900\">\n                    {item.count} ({total > 0 ? ((item.count / total) * 100).toFixed(0) : 0}%)\n                  </span>\n                </div>\n              ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Alert Trend Chart\n */\nfunction AlertTrendChart({ trendData }) {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        Alert Trend (Last 30 Days)\n      </h3>\n\n      <ResponsiveContainer width=\"100%\" height={250}>\n        <LineChart data={trendData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"date\"\n            tickFormatter={(date) => new Date(date).toLocaleDateString('en-GB', { day: '2-digit', month: 'short' })}\n          />\n          <YAxis />\n          <Tooltip labelFormatter={(date) => new Date(date).toLocaleDateString()} />\n          <Legend />\n\n          <Line\n            type=\"monotone\"\n            dataKey=\"critical\"\n            stroke=\"#ef4444\"\n            strokeWidth={2}\n            dot={{ fill: '#ef4444', r: 3 }}\n            name=\"Critical\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"high\"\n            stroke=\"#f97316\"\n            strokeWidth={2}\n            dot={{ fill: '#f97316', r: 3 }}\n            name=\"High\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"total\"\n            stroke=\"#3b82f6\"\n            strokeWidth={2}\n            dot={{ fill: '#3b82f6', r: 3 }}\n            name=\"Total\"\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\n/**\n * Main Stock Alerts Component\n */\nexport default function StockAlerts() {\n  const queryClient = useQueryClient();\n  const [filterSeverity, setFilterSeverity] = useState('ALL');\n  const [filterType, setFilterType] = useState('ALL');\n  const [showDismissed, setShowDismissed] = useState(false);\n\n  // Fetch alerts\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['inventory', 'alerts', filterSeverity, filterType, showDismissed],\n    queryFn: async () => {\n      const params = new URLSearchParams({\n        severity: filterSeverity,\n        type: filterType,\n        includeDismissed: showDismissed.toString(),\n      });\n      const response = await fetch(`/api/v1/inventory/alerts?${params}`, {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to fetch alerts');\n      const result = await response.json();\n      return result.data;\n    },\n    refetchInterval: 30000,\n  });\n\n  // Dismiss alert mutation\n  const dismissAlertMutation = useMutation({\n    mutationFn: async (alertId) => {\n      const response = await fetch(`/api/v1/inventory/alerts/${alertId}/dismiss`, {\n        method: 'PATCH',\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to dismiss alert');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries(['inventory', 'alerts']);\n    },\n  });\n\n  // Handle action mutation\n  const handleActionMutation = useMutation({\n    mutationFn: async ({ action, alert }) => {\n      const response = await fetch(`/api/v1/inventory/alerts/${alert.id}/action`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify({ action, sku: alert.sku, warehouse: alert.warehouse }),\n      });\n      if (!response.ok) throw new Error(`Failed to execute ${action}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries(['inventory', 'alerts']);\n    },\n  });\n\n  // SSE for real-time alerts\n  const { connected, lastMessage } = useSSE('inventory', {\n    enabled: true,\n    onMessage: (message) => {\n      if (message.type === 'inventory:alert') {\n        queryClient.invalidateQueries(['inventory', 'alerts']);\n        // Show toast notification for new alert\n        console.log('New inventory alert:', message.data);\n      }\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading alerts...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n        <p className=\"text-red-800\">Error loading alerts: {error.message}</p>\n      </div>\n    );\n  }\n\n  const {\n    alerts = [],\n    summary = {},\n    byType = {},\n    trend = [],\n  } = data || {};\n\n  // Filter alerts\n  const filteredAlerts = alerts.filter(alert => {\n    const matchesSeverity = filterSeverity === 'ALL' || alert.severity === filterSeverity.toLowerCase();\n    const matchesType = filterType === 'ALL' || alert.type === filterType;\n    return matchesSeverity && matchesType;\n  });\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Stock Alerts</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Real-time inventory alerts and actions\n            {connected && (\n              <span className=\"ml-2 inline-flex items-center gap-1 text-green-600\">\n                <span className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                Live\n              </span>\n            )}\n          </p>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex items-center gap-3\">\n          <select\n            value={filterSeverity}\n            onChange={(e) => setFilterSeverity(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"ALL\">All Severities</option>\n            {Object.keys(ALERT_SEVERITY).map(severity => (\n              <option key={severity} value={severity.toUpperCase()}>\n                {ALERT_SEVERITY[severity].label}\n              </option>\n            ))}\n          </select>\n\n          <select\n            value={filterType}\n            onChange={(e) => setFilterType(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"ALL\">All Types</option>\n            {Object.entries(ALERT_TYPES).map(([key, type]) => (\n              <option key={key} value={key}>\n                {type.label}\n              </option>\n            ))}\n          </select>\n\n          <label className=\"flex items-center gap-2 text-sm text-gray-700\">\n            <input\n              type=\"checkbox\"\n              checked={showDismissed}\n              onChange={(e) => setShowDismissed(e.target.checked)}\n              className=\"rounded\"\n            />\n            Show Dismissed\n          </label>\n        </div>\n      </div>\n\n      {/* Summary Cards */}\n      <AlertSummaryCards summary={summary} />\n\n      {/* Charts */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <AlertsByTypeChart alertsData={byType} />\n        <AlertTrendChart trendData={trend} />\n      </div>\n\n      {/* Alerts List */}\n      <div>\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n          Active Alerts ({filteredAlerts.length})\n        </h2>\n\n        {filteredAlerts.length === 0 ? (\n          <div className=\"bg-white rounded-lg shadow p-12 text-center\">\n            <CheckCircle2 className=\"w-16 h-16 text-green-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">No Active Alerts</h3>\n            <p className=\"text-gray-600\">\n              {filterSeverity !== 'ALL' || filterType !== 'ALL'\n                ? 'No alerts match the selected filters.'\n                : 'All inventory levels are within acceptable ranges.'}\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {filteredAlerts.map((alert) => (\n              <StockAlertCard\n                key={alert.id}\n                alert={alert}\n                onAction={(action, alert) => handleActionMutation.mutate({ action, alert })}\n                onDismiss={(id) => dismissAlertMutation.mutate(id)}\n              />\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\production\\DowntimeTracker.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\production\\OEEDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Icon' is defined but never used.",
        "line": 54,
        "column": 74,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 54,
        "endColumn": 78,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [1008, 1020], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * OEE (Overall Equipment Effectiveness) Dashboard Component\n *\n * Comprehensive OEE monitoring with formula breakdown:\n * - OEE = Availability × Performance × Quality\n * - Real-time metrics and trends\n * - Machine-by-machine breakdown\n * - Loss analysis (Six Big Losses)\n * - Shift comparison\n */\n\nimport { useState } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport {\n  Activity,\n  TrendingUp,\n  TrendingDown,\n  Minus,\n  Clock,\n  Zap,\n  CheckCircle2,\n  AlertTriangle,\n  Target,\n  BarChart3,\n  Calendar,\n  ChevronDown,\n  ChevronUp,\n} from 'lucide-react';\nimport {\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ReferenceLine,\n  ComposedChart,\n  Area,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n} from 'recharts';\nimport { useSSE } from '../../hooks/useSSE';\n\n/**\n * OEE Metric Card Component\n */\nfunction OEEMetricCard({ label, value, target, formula, breakdown, icon: Icon, color }) {\n  const [showBreakdown, setShowBreakdown] = useState(false);\n\n  const percentage = value;\n  const targetPercentage = target;\n  const difference = percentage - targetPercentage;\n  const status = percentage >= targetPercentage ? 'good' : percentage >= targetPercentage - 5 ? 'warning' : 'poor';\n\n  const statusColors = {\n    good: 'border-green-500 bg-green-50',\n    warning: 'border-yellow-500 bg-yellow-50',\n    poor: 'border-red-500 bg-red-50',\n  };\n\n  const trendColors = {\n    good: 'text-green-600',\n    warning: 'text-yellow-600',\n    poor: 'text-red-600',\n  };\n\n  return (\n    <div className={`rounded-lg border-2 ${statusColors[status]} p-6 transition-all`}>\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className={`p-3 rounded-lg ${color}`}>\n            <Icon className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <p className=\"text-sm font-medium text-gray-600\">{label}</p>\n            <p className=\"text-xs text-gray-500\">{formula}</p>\n          </div>\n        </div>\n        <button\n          onClick={() => setShowBreakdown(!showBreakdown)}\n          className=\"text-gray-400 hover:text-gray-600\"\n        >\n          {showBreakdown ? <ChevronUp className=\"w-5 h-5\" /> : <ChevronDown className=\"w-5 h-5\" />}\n        </button>\n      </div>\n\n      {/* Value */}\n      <div className=\"mb-4\">\n        <div className=\"flex items-baseline gap-2\">\n          <span className=\"text-4xl font-bold text-gray-900\">{percentage.toFixed(1)}%</span>\n          <span className={`text-sm font-medium ${trendColors[status]}`}>\n            {difference >= 0 ? '+' : ''}{difference.toFixed(1)}%\n          </span>\n        </div>\n        <div className=\"flex items-center gap-2 mt-2\">\n          <span className=\"text-sm text-gray-600\">Target: {targetPercentage}%</span>\n          {difference >= 0 ? (\n            <TrendingUp className=\"w-4 h-4 text-green-600\" />\n          ) : (\n            <TrendingDown className=\"w-4 h-4 text-red-600\" />\n          )}\n        </div>\n      </div>\n\n      {/* Progress Bar */}\n      <div className=\"relative w-full bg-gray-200 rounded-full h-3 mb-4\">\n        <div\n          className={`h-3 rounded-full transition-all ${\n            status === 'good' ? 'bg-green-500' :\n            status === 'warning' ? 'bg-yellow-500' :\n            'bg-red-500'\n          }`}\n          style={{ width: `${Math.min(percentage, 100)}%` }}\n        />\n        <div\n          className=\"absolute top-0 h-3 w-0.5 bg-gray-800\"\n          style={{ left: `${targetPercentage}%` }}\n        />\n      </div>\n\n      {/* Breakdown */}\n      {showBreakdown && breakdown && (\n        <div className=\"mt-4 pt-4 border-t border-gray-200 space-y-2\">\n          {Object.entries(breakdown).map(([key, val]) => (\n            <div key={key} className=\"flex items-center justify-between text-sm\">\n              <span className=\"text-gray-600\">{key}</span>\n              <span className=\"font-medium text-gray-900\">{val}</span>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Machine OEE Table\n */\nfunction MachineOEETable({ machines }) {\n  const [sortBy, setSortBy] = useState('oee');\n  const [sortOrder, setSortOrder] = useState('desc');\n\n  const sortedMachines = [...machines].sort((a, b) => {\n    const aVal = a[sortBy];\n    const bVal = b[sortBy];\n    return sortOrder === 'asc' ? aVal - bVal : bVal - aVal;\n  });\n\n  const handleSort = (column) => {\n    if (sortBy === column) {\n      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortBy(column);\n      setSortOrder('desc');\n    }\n  };\n\n  const getStatusBadge = (value, target) => {\n    const status = value >= target ? 'good' : value >= target - 5 ? 'warning' : 'poor';\n    const colors = {\n      good: 'bg-green-100 text-green-700 border-green-300',\n      warning: 'bg-yellow-100 text-yellow-700 border-yellow-300',\n      poor: 'bg-red-100 text-red-700 border-red-300',\n    };\n    return (\n      <span className={`px-2 py-1 rounded text-xs font-medium border ${colors[status]}`}>\n        {value.toFixed(1)}%\n      </span>\n    );\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Machine\n              </th>\n              <th\n                onClick={() => handleSort('oee')}\n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n              >\n                OEE {sortBy === 'oee' && (sortOrder === 'asc' ? '↑' : '↓')}\n              </th>\n              <th\n                onClick={() => handleSort('availability')}\n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n              >\n                Availability {sortBy === 'availability' && (sortOrder === 'asc' ? '↑' : '↓')}\n              </th>\n              <th\n                onClick={() => handleSort('performance')}\n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n              >\n                Performance {sortBy === 'performance' && (sortOrder === 'asc' ? '↑' : '↓')}\n              </th>\n              <th\n                onClick={() => handleSort('quality')}\n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100\"\n              >\n                Quality {sortBy === 'quality' && (sortOrder === 'asc' ? '↑' : '↓')}\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Status\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {sortedMachines.map((machine) => (\n              <tr key={machine.id} className=\"hover:bg-gray-50\">\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center\">\n                    <div className=\"font-medium text-gray-900\">{machine.name}</div>\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {getStatusBadge(machine.oee, 85)}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {getStatusBadge(machine.availability, 90)}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {getStatusBadge(machine.performance, 95)}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  {getStatusBadge(machine.quality, 99)}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className={`px-2 py-1 rounded text-xs font-medium ${\n                    machine.status === 'running' ? 'bg-green-100 text-green-700' :\n                    machine.status === 'idle' ? 'bg-yellow-100 text-yellow-700' :\n                    'bg-red-100 text-red-700'\n                  }`}>\n                    {machine.status}\n                  </span>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Six Big Losses Analysis\n */\nfunction SixBigLossesChart({ lossData }) {\n  const losses = [\n    { category: 'Breakdowns', value: lossData.breakdowns || 0, color: '#ef4444' },\n    { category: 'Setup/Adjustments', value: lossData.setup || 0, color: '#f97316' },\n    { category: 'Small Stops', value: lossData.smallStops || 0, color: '#f59e0b' },\n    { category: 'Reduced Speed', value: lossData.reducedSpeed || 0, color: '#eab308' },\n    { category: 'Startup Rejects', value: lossData.startupRejects || 0, color: '#84cc16' },\n    { category: 'Production Rejects', value: lossData.productionRejects || 0, color: '#22c55e' },\n  ];\n\n  const totalLoss = losses.reduce((sum, loss) => sum + loss.value, 0);\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        Six Big Losses Analysis\n      </h3>\n\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart data={losses} layout=\"vertical\">\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis type=\"number\" domain={[0, 100]} tickFormatter={(v) => `${v}%`} />\n          <YAxis type=\"category\" dataKey=\"category\" width={150} />\n          <Tooltip formatter={(value) => `${value.toFixed(1)}%`} />\n          <Bar dataKey=\"value\" fill=\"#3b82f6\">\n            {losses.map((entry, index) => (\n              <Bar key={`cell-${index}`} fill={entry.color} />\n            ))}\n          </Bar>\n        </BarChart>\n      </ResponsiveContainer>\n\n      <div className=\"mt-4 grid grid-cols-2 md:grid-cols-3 gap-4\">\n        {losses.map((loss) => (\n          <div key={loss.category} className=\"flex items-center gap-2\">\n            <div\n              className=\"w-3 h-3 rounded-full\"\n              style={{ backgroundColor: loss.color }}\n            />\n            <div className=\"flex-1\">\n              <p className=\"text-xs text-gray-600\">{loss.category}</p>\n              <p className=\"text-sm font-medium text-gray-900\">\n                {loss.value.toFixed(1)}%\n              </p>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      <div className=\"mt-4 pt-4 border-t border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-sm font-medium text-gray-700\">Total Loss</span>\n          <span className=\"text-lg font-bold text-red-600\">{totalLoss.toFixed(1)}%</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * OEE Trend Chart\n */\nfunction OEETrendChart({ trendData }) {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        OEE Trend (Last 30 Days)\n      </h3>\n\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <ComposedChart data={trendData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"date\"\n            tickFormatter={(date) => new Date(date).toLocaleDateString('en-GB', { day: '2-digit', month: 'short' })}\n          />\n          <YAxis domain={[0, 100]} tickFormatter={(v) => `${v}%`} />\n          <Tooltip\n            labelFormatter={(date) => new Date(date).toLocaleDateString()}\n            formatter={(value) => `${value.toFixed(1)}%`}\n          />\n          <Legend />\n\n          <ReferenceLine y={85} stroke=\"#10b981\" strokeDasharray=\"3 3\" label=\"Target: 85%\" />\n\n          <Area\n            type=\"monotone\"\n            dataKey=\"oee\"\n            fill=\"#3b82f6\"\n            fillOpacity={0.1}\n            stroke=\"none\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"availability\"\n            stroke=\"#8b5cf6\"\n            strokeWidth={2}\n            dot={false}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"performance\"\n            stroke=\"#ec4899\"\n            strokeWidth={2}\n            dot={false}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"quality\"\n            stroke=\"#10b981\"\n            strokeWidth={2}\n            dot={false}\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"oee\"\n            stroke=\"#3b82f6\"\n            strokeWidth={3}\n            dot={{ fill: '#3b82f6', r: 4 }}\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\n/**\n * Shift Comparison Radar Chart\n */\nfunction ShiftComparisonChart({ shiftData }) {\n  const radarData = [\n    { metric: 'OEE', ...shiftData.reduce((acc, shift) => ({ ...acc, [shift.name]: shift.oee }), {}) },\n    { metric: 'Availability', ...shiftData.reduce((acc, shift) => ({ ...acc, [shift.name]: shift.availability }), {}) },\n    { metric: 'Performance', ...shiftData.reduce((acc, shift) => ({ ...acc, [shift.name]: shift.performance }), {}) },\n    { metric: 'Quality', ...shiftData.reduce((acc, shift) => ({ ...acc, [shift.name]: shift.quality }), {}) },\n  ];\n\n  const colors = ['#3b82f6', '#10b981', '#f59e0b'];\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        Shift Comparison\n      </h3>\n\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <RadarChart data={radarData}>\n          <PolarGrid />\n          <PolarAngleAxis dataKey=\"metric\" />\n          <PolarRadiusAxis domain={[0, 100]} />\n          <Tooltip formatter={(value) => `${value.toFixed(1)}%`} />\n          <Legend />\n\n          {shiftData.map((shift, index) => (\n            <Radar\n              key={shift.name}\n              name={shift.name}\n              dataKey={shift.name}\n              stroke={colors[index % colors.length]}\n              fill={colors[index % colors.length]}\n              fillOpacity={0.3}\n            />\n          ))}\n        </RadarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\n/**\n * Main OEE Dashboard Component\n */\nexport default function OEEDashboard() {\n  const queryClient = useQueryClient();\n  const [dateRange, setDateRange] = useState('today');\n  const [selectedMachine, setSelectedMachine] = useState('all');\n\n  // Fetch OEE data\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['production', 'oee', dateRange, selectedMachine],\n    queryFn: async () => {\n      const params = new URLSearchParams({ dateRange, machine: selectedMachine });\n      const response = await fetch(`/api/v1/production/oee?${params}`, {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to fetch OEE data');\n      const result = await response.json();\n      return result.data;\n    },\n    refetchInterval: 30000,\n  });\n\n  // SSE for real-time OEE updates\n  const { connected } = useSSE('production', {\n    enabled: true,\n    onMessage: (message) => {\n      if (message.type === 'oee:update') {\n        queryClient.invalidateQueries(['production', 'oee']);\n      }\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading OEE data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n        <p className=\"text-red-800\">Error loading OEE data: {error.message}</p>\n      </div>\n    );\n  }\n\n  const { overall, machines = [], trend = [], shifts = [], losses = {} } = data || {};\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">OEE Dashboard</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Overall Equipment Effectiveness Monitoring\n            {connected && (\n              <span className=\"ml-2 inline-flex items-center gap-1 text-green-600\">\n                <span className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                Live\n              </span>\n            )}\n          </p>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex items-center gap-3\">\n          <select\n            value={dateRange}\n            onChange={(e) => setDateRange(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"today\">Today</option>\n            <option value=\"yesterday\">Yesterday</option>\n            <option value=\"week\">This Week</option>\n            <option value=\"month\">This Month</option>\n          </select>\n\n          <select\n            value={selectedMachine}\n            onChange={(e) => setSelectedMachine(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"all\">All Machines</option>\n            {machines.map(machine => (\n              <option key={machine.id} value={machine.id}>\n                {machine.name}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* OEE Formula Overview */}\n      <div className=\"bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-6\">\n        <div className=\"flex items-center gap-2 mb-4\">\n          <Target className=\"w-6 h-6 text-blue-600\" />\n          <h2 className=\"text-xl font-semibold text-gray-900\">OEE Calculation</h2>\n        </div>\n        <div className=\"flex flex-wrap items-center gap-4 text-lg\">\n          <div className=\"flex items-center gap-2\">\n            <span className=\"font-medium text-gray-700\">OEE =</span>\n            <span className=\"px-3 py-1 bg-purple-100 text-purple-700 rounded font-semibold\">\n              Availability\n            </span>\n            <span className=\"text-gray-500\">×</span>\n            <span className=\"px-3 py-1 bg-pink-100 text-pink-700 rounded font-semibold\">\n              Performance\n            </span>\n            <span className=\"text-gray-500\">×</span>\n            <span className=\"px-3 py-1 bg-green-100 text-green-700 rounded font-semibold\">\n              Quality\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* OEE Metrics Cards */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <OEEMetricCard\n          label=\"Overall OEE\"\n          value={overall?.oee || 0}\n          target={85}\n          formula=\"A × P × Q\"\n          breakdown={{\n            'World Class': '85%+',\n            'Current': `${(overall?.oee || 0).toFixed(1)}%`,\n          }}\n          icon={Activity}\n          color=\"bg-blue-600\"\n        />\n\n        <OEEMetricCard\n          label=\"Availability\"\n          value={overall?.availability || 0}\n          target={90}\n          formula=\"Run Time / Planned Time\"\n          breakdown={{\n            'Planned Time': `${overall?.breakdown?.plannedTime || 0} min`,\n            'Run Time': `${overall?.breakdown?.runTime || 0} min`,\n            'Downtime': `${overall?.breakdown?.downtime || 0} min`,\n          }}\n          icon={Clock}\n          color=\"bg-purple-600\"\n        />\n\n        <OEEMetricCard\n          label=\"Performance\"\n          value={overall?.performance || 0}\n          target={95}\n          formula=\"(Ideal × Total) / Run Time\"\n          breakdown={{\n            'Ideal Cycle Time': `${overall?.breakdown?.idealCycleTime || 0}s`,\n            'Total Count': `${overall?.breakdown?.totalCount || 0} units`,\n            'Run Time': `${overall?.breakdown?.runTime || 0} min`,\n          }}\n          icon={Zap}\n          color=\"bg-pink-600\"\n        />\n\n        <OEEMetricCard\n          label=\"Quality\"\n          value={overall?.quality || 0}\n          target={99}\n          formula=\"Good Count / Total Count\"\n          breakdown={{\n            'Total Count': `${overall?.breakdown?.totalCount || 0} units`,\n            'Good Count': `${overall?.breakdown?.goodCount || 0} units`,\n            'Reject Count': `${overall?.breakdown?.rejectCount || 0} units`,\n          }}\n          icon={CheckCircle2}\n          color=\"bg-green-600\"\n        />\n      </div>\n\n      {/* Charts Row 1 */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <OEETrendChart trendData={trend} />\n        <SixBigLossesChart lossData={losses} />\n      </div>\n\n      {/* Charts Row 2 */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <ShiftComparisonChart shiftData={shifts} />\n\n        {/* Quick Stats */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            Quick Statistics\n          </h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600\">Best Performing Machine</span>\n              <span className=\"font-semibold text-gray-900\">\n                {machines.length > 0 ? machines[0].name : 'N/A'}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600\">Average Downtime</span>\n              <span className=\"font-semibold text-gray-900\">\n                {overall?.breakdown?.downtime || 0} min\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600\">Total Units Produced</span>\n              <span className=\"font-semibold text-gray-900\">\n                {overall?.breakdown?.totalCount || 0}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-gray-600\">Defect Rate</span>\n              <span className=\"font-semibold text-red-600\">\n                {overall?.breakdown?.rejectCount && overall?.breakdown?.totalCount\n                  ? ((overall.breakdown.rejectCount / overall.breakdown.totalCount) * 100).toFixed(2)\n                  : 0}%\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Machine Breakdown Table */}\n      <MachineOEETable machines={machines} />\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\production\\ProductionDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useState' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useState" },
            "fix": { "range": [12, 26], "text": "" },
            "desc": "Remove unused variable 'useState'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'lastMessage' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 44,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 44,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "lastMessage" },
            "fix": { "range": [1270, 1283], "text": "" },
            "desc": "Remove unused variable 'lastMessage'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Icon' is defined but never used.",
        "line": 346,
        "column": 48,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 346,
        "endColumn": 52,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [12878, 12890], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'actual' is defined but never used.",
        "line": 433,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 433,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "actual" },
            "fix": { "range": [16101, 16109], "text": "" },
            "desc": "Remove unused variable 'actual'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport { useSSE } from '@/services/sse/useSSE';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  Activity,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n  TrendingUp,\n  TrendingDown,\n  Gauge,\n  Package,\n  AlertCircle,\n} from 'lucide-react';\n\n/**\n * ProductionDashboard Component\n *\n * Main production monitoring interface with:\n * - Active jobs board (summary view)\n * - OEE metrics (Availability, Performance, Quality)\n * - Downtime tracker\n * - Quality metrics (First Pass Yield, Defect Rate)\n * - Real-time updates via SSE\n */\nfunction ProductionDashboard() {\n  const navigate = useNavigate();\n  const queryClient = useQueryClient();\n\n  // Fetch production overview data\n  const { data: overviewData, isLoading } = useQuery({\n    queryKey: ['production', 'overview'],\n    queryFn: async () => {\n      const response = await fetch('/api/v1/production/overview');\n      if (!response.ok) throw new Error('Failed to fetch production overview');\n      const result = await response.json();\n      return result.data;\n    },\n    refetchInterval: 30000, // Refetch every 30 seconds as fallback\n  });\n\n  // SSE for real-time production updates\n  const { connected, lastMessage } = useSSE('production', {\n    enabled: true,\n    onMessage: (message) => {\n      // Invalidate queries based on update type\n      if (message.type === 'job:status') {\n        queryClient.invalidateQueries(['production', 'overview']);\n        queryClient.invalidateQueries(['production', 'jobs']);\n      }\n      if (message.type === 'oee:update') {\n        queryClient.invalidateQueries(['production', 'overview']);\n        queryClient.invalidateQueries(['production', 'oee']);\n      }\n      if (message.type === 'downtime:event') {\n        queryClient.invalidateQueries(['production', 'overview']);\n        queryClient.invalidateQueries(['production', 'downtime']);\n      }\n      if (message.type === 'quality:alert') {\n        queryClient.invalidateQueries(['production', 'overview']);\n        queryClient.invalidateQueries(['production', 'quality']);\n      }\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading production dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  const {\n    activeJobs = [],\n    oee = {},\n    downtime = {},\n    quality = {},\n    alerts = [],\n  } = overviewData || {};\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-6\">\n      {/* Header */}\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Production Dashboard</h1>\n            <p className=\"text-gray-600 mt-1\">\n              Real-time manufacturing operations monitoring • Target OEE: &gt;85%\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            {/* SSE Status Indicator */}\n            <div className=\"flex items-center gap-2 px-3 py-2 bg-white rounded-lg border border-gray-200\">\n              <div className={`w-3 h-3 rounded-full ${connected ? 'bg-green-500 animate-pulse' : 'bg-red-500'}`} />\n              <span className=\"text-sm text-gray-700\">\n                {connected ? 'Live' : 'Disconnected'}\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Critical Alerts */}\n      {alerts.length > 0 && (\n        <div className=\"mb-6 bg-red-50 border-2 border-red-500 rounded-lg p-4\">\n          <div className=\"flex items-start gap-3\">\n            <AlertTriangle className=\"w-6 h-6 text-red-600 flex-shrink-0 mt-0.5\" />\n            <div className=\"flex-1\">\n              <h2 className=\"text-lg font-semibold text-red-900 mb-2\">\n                {alerts.length} Critical Alert{alerts.length > 1 ? 's' : ''}\n              </h2>\n              <div className=\"space-y-2\">\n                {alerts.slice(0, 3).map((alert, index) => (\n                  <div key={index} className=\"flex items-center justify-between bg-white rounded p-3\">\n                    <div>\n                      <p className=\"font-medium text-red-900\">{alert.title}</p>\n                      <p className=\"text-sm text-red-700\">{alert.description}</p>\n                    </div>\n                    <button\n                      onClick={() => navigate(alert.actionUrl)}\n                      className=\"px-3 py-1 bg-red-600 text-white rounded hover:bg-red-700 text-sm font-medium\"\n                    >\n                      {alert.actionLabel || 'View'}\n                    </button>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* OEE Summary Cards */}\n      <div className=\"grid md:grid-cols-4 gap-4 mb-6\">\n        <OEECard\n          label=\"Overall OEE\"\n          value={oee.overall || 0}\n          target={85}\n          icon={Gauge}\n          trend={oee.trend}\n          onClick={() => navigate('/production/oee')}\n        />\n        <OEECard\n          label=\"Availability\"\n          value={oee.availability || 0}\n          target={90}\n          icon={Clock}\n          trend={oee.availabilityTrend}\n          onClick={() => navigate('/production/oee')}\n        />\n        <OEECard\n          label=\"Performance\"\n          value={oee.performance || 0}\n          target={95}\n          icon={TrendingUp}\n          trend={oee.performanceTrend}\n          onClick={() => navigate('/production/oee')}\n        />\n        <OEECard\n          label=\"Quality\"\n          value={oee.quality || 0}\n          target={99}\n          icon={CheckCircle}\n          trend={oee.qualityTrend}\n          onClick={() => navigate('/production/quality')}\n        />\n      </div>\n\n      <div className=\"grid lg:grid-cols-3 gap-6\">\n        {/* Active Jobs Summary */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Active Jobs Board */}\n          <div className=\"bg-white rounded-lg shadow\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Active Production Jobs</h2>\n                <button\n                  onClick={() => navigate('/production/jobs')}\n                  className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors text-sm font-medium\"\n                >\n                  View Job Board\n                </button>\n              </div>\n            </div>\n            <div className=\"p-6\">\n              {activeJobs.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <Package className=\"w-12 h-12 text-gray-300 mx-auto mb-3\" />\n                  <p className=\"text-gray-500\">No active production jobs</p>\n                </div>\n              ) : (\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  {activeJobs.slice(0, 4).map((job) => (\n                    <JobCard\n                      key={job.id}\n                      job={job}\n                      onClick={() => navigate(`/production/jobs/${job.id}`)}\n                    />\n                  ))}\n                </div>\n              )}\n              {activeJobs.length > 4 && (\n                <div className=\"mt-4 text-center\">\n                  <button\n                    onClick={() => navigate('/production/jobs')}\n                    className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\n                  >\n                    View all {activeJobs.length} active jobs →\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Quality Metrics Summary */}\n          <div className=\"bg-white rounded-lg shadow\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Quality Metrics</h2>\n                <button\n                  onClick={() => navigate('/production/quality')}\n                  className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\n                >\n                  View Details →\n                </button>\n              </div>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <MetricCard\n                  label=\"First Pass Yield\"\n                  value={`${quality.fpy || 0}%`}\n                  target={95}\n                  actual={quality.fpy || 0}\n                  status={getQualityStatus(quality.fpy, 95)}\n                />\n                <MetricCard\n                  label=\"Defect Rate\"\n                  value={`${quality.defectRate || 0}%`}\n                  target={2}\n                  actual={quality.defectRate || 0}\n                  status={getQualityStatus(100 - quality.defectRate, 98)}\n                  inverse\n                />\n                <MetricCard\n                  label=\"Scrap Rate\"\n                  value={`${quality.scrapRate || 0}%`}\n                  target={1}\n                  actual={quality.scrapRate || 0}\n                  status={getQualityStatus(100 - quality.scrapRate, 99)}\n                  inverse\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* Downtime Summary */}\n          <div className=\"bg-white rounded-lg shadow\">\n            <div className=\"p-6 border-b border-gray-200\">\n              <div className=\"flex items-center justify-between\">\n                <h2 className=\"text-lg font-semibold text-gray-900\">Downtime</h2>\n                <button\n                  onClick={() => navigate('/production/downtime')}\n                  className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\"\n                >\n                  View All →\n                </button>\n              </div>\n            </div>\n            <div className=\"p-6\">\n              <div className=\"mb-4\">\n                <div className=\"flex items-baseline gap-2 mb-1\">\n                  <span className=\"text-3xl font-bold text-gray-900\">\n                    {downtime.totalMinutes || 0}\n                  </span>\n                  <span className=\"text-gray-600\">min</span>\n                </div>\n                <p className=\"text-sm text-gray-600\">Total downtime today</p>\n              </div>\n\n              {downtime.events && downtime.events.length > 0 ? (\n                <div className=\"space-y-2\">\n                  <p className=\"text-sm font-medium text-gray-700 mb-2\">Recent Events</p>\n                  {downtime.events.slice(0, 3).map((event, index) => (\n                    <div key={index} className=\"flex items-start gap-2 p-2 bg-gray-50 rounded\">\n                      <AlertCircle className={`w-4 h-4 flex-shrink-0 mt-0.5 ${getSeverityColor(event.severity)}`} />\n                      <div className=\"flex-1 min-w-0\">\n                        <p className=\"text-sm font-medium text-gray-900 truncate\">\n                          {event.reason}\n                        </p>\n                        <p className=\"text-xs text-gray-600\">{event.duration} min</p>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-sm text-gray-500\">No downtime events today</p>\n              )}\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Actions</h2>\n            <div className=\"space-y-2\">\n              <ActionButton\n                label=\"View Job Board\"\n                onClick={() => navigate('/production/jobs')}\n              />\n              <ActionButton\n                label=\"OEE Dashboard\"\n                onClick={() => navigate('/production/oee')}\n              />\n              <ActionButton\n                label=\"Downtime Tracker\"\n                onClick={() => navigate('/production/downtime')}\n              />\n              <ActionButton\n                label=\"Quality Metrics\"\n                onClick={() => navigate('/production/quality')}\n              />\n              <ActionButton\n                label=\"Maintenance Schedule\"\n                onClick={() => navigate('/production/maintenance')}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * OEECard Component\n */\nfunction OEECard({ label, value, target, icon: Icon, trend, onClick }) {\n  const percentage = value;\n  const status = getOEEStatus(percentage, target);\n  const trendValue = trend?.value || 0;\n  const trendDirection = trendValue > 0 ? 'up' : trendValue < 0 ? 'down' : 'neutral';\n\n  const statusColors = {\n    excellent: 'border-green-500 bg-green-50',\n    good: 'border-blue-500 bg-blue-50',\n    warning: 'border-yellow-500 bg-yellow-50',\n    critical: 'border-red-500 bg-red-50',\n  };\n\n  return (\n    <button\n      onClick={onClick}\n      className={`p-6 rounded-lg border-2 text-left transition-all hover:shadow-lg ${statusColors[status]}`}\n    >\n      <div className=\"flex items-center justify-between mb-3\">\n        <Icon className=\"w-6 h-6 text-gray-700\" />\n        <span className=\"text-xs font-semibold text-gray-600\">Target: {target}%</span>\n      </div>\n      <p className=\"text-sm font-medium text-gray-700 mb-1\">{label}</p>\n      <div className=\"flex items-baseline gap-2\">\n        <span className=\"text-3xl font-bold text-gray-900\">{percentage.toFixed(1)}%</span>\n        {trendDirection !== 'neutral' && (\n          <span className={`text-sm font-medium flex items-center gap-1 ${trendDirection === 'up' ? 'text-green-600' : 'text-red-600'}`}>\n            {trendDirection === 'up' ? <TrendingUp className=\"w-4 h-4\" /> : <TrendingDown className=\"w-4 h-4\" />}\n            {Math.abs(trendValue).toFixed(1)}%\n          </span>\n        )}\n      </div>\n    </button>\n  );\n}\n\n/**\n * JobCard Component\n */\nfunction JobCard({ job, onClick }) {\n  const statusConfig = {\n    scheduled: { label: 'Scheduled', className: 'bg-gray-100 text-gray-800' },\n    in_progress: { label: 'In Progress', className: 'bg-blue-100 text-blue-800' },\n    completed: { label: 'Completed', className: 'bg-green-100 text-green-800' },\n    failed: { label: 'Failed', className: 'bg-red-100 text-red-800' },\n    paused: { label: 'Paused', className: 'bg-yellow-100 text-yellow-800' },\n  };\n\n  const config = statusConfig[job.status] || statusConfig.scheduled;\n\n  return (\n    <button\n      onClick={onClick}\n      className=\"w-full p-4 bg-gray-50 hover:bg-gray-100 rounded-lg border border-gray-200 text-left transition-colors\"\n    >\n      <div className=\"flex items-start justify-between mb-2\">\n        <div>\n          <p className=\"font-semibold text-gray-900\">{job.name}</p>\n          <p className=\"text-sm text-gray-600\">{job.productName}</p>\n        </div>\n        <span className={`px-2 py-1 rounded text-xs font-semibold ${config.className}`}>\n          {config.label}\n        </span>\n      </div>\n      <div className=\"flex items-center justify-between text-sm\">\n        <span className=\"text-gray-600\">\n          {job.completedUnits || 0} / {job.targetUnits} units\n        </span>\n        <span className=\"font-semibold text-gray-900\">\n          {job.progress || 0}%\n        </span>\n      </div>\n      {job.status === 'in_progress' && (\n        <div className=\"mt-2 w-full bg-gray-200 rounded-full h-2\">\n          <div\n            className=\"bg-blue-600 h-2 rounded-full transition-all\"\n            style={{ width: `${job.progress || 0}%` }}\n          />\n        </div>\n      )}\n    </button>\n  );\n}\n\n/**\n * MetricCard Component\n */\nfunction MetricCard({ label, value, target, actual, status, inverse = false }) {\n  const statusColors = {\n    excellent: 'text-green-600',\n    good: 'text-blue-600',\n    warning: 'text-yellow-600',\n    critical: 'text-red-600',\n  };\n\n  return (\n    <div className=\"p-4 bg-gray-50 rounded-lg\">\n      <p className=\"text-sm text-gray-600 mb-1\">{label}</p>\n      <p className={`text-2xl font-bold ${statusColors[status]}`}>{value}</p>\n      <p className=\"text-xs text-gray-500 mt-1\">\n        Target: {inverse ? '<' : '>'}{target}%\n      </p>\n    </div>\n  );\n}\n\n/**\n * ActionButton Component\n */\nfunction ActionButton({ label, onClick }) {\n  return (\n    <button\n      onClick={onClick}\n      className=\"w-full py-2 px-4 bg-gray-100 hover:bg-gray-200 rounded-lg text-left font-medium text-gray-700 transition-colors\"\n    >\n      {label}\n    </button>\n  );\n}\n\n/**\n * Helper Functions\n */\n\nfunction getOEEStatus(value, target) {\n  if (value >= target) return 'excellent';\n  if (value >= target * 0.95) return 'good';\n  if (value >= target * 0.85) return 'warning';\n  return 'critical';\n}\n\nfunction getQualityStatus(value, target) {\n  if (value >= target) return 'excellent';\n  if (value >= target * 0.98) return 'good';\n  if (value >= target * 0.95) return 'warning';\n  return 'critical';\n}\n\nfunction getSeverityColor(severity) {\n  const colors = {\n    low: 'text-blue-600',\n    medium: 'text-yellow-600',\n    high: 'text-orange-600',\n    critical: 'text-red-600',\n  };\n  return colors[severity] || colors.medium;\n}\n\nexport default ProductionDashboard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\production\\ProductionJobBoard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'arrayMove' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 25,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "arrayMove" },
            "fix": { "range": [591, 604], "text": "" },
            "desc": "Remove unused variable 'arrayMove'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'isEditing' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 258,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 258,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "isEditing" },
            "fix": { "range": [7550, 7559], "text": "" },
            "desc": "Remove unused variable 'isEditing'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'setIsEditing' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 258,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 258,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "setIsEditing" },
            "fix": { "range": [7559, 7573], "text": "" },
            "desc": "Remove unused variable 'setIsEditing'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'lastMessage' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 463,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 463,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "lastMessage" },
            "fix": { "range": [15409, 15422], "text": "" },
            "desc": "Remove unused variable 'lastMessage'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Production Job Board Component\n *\n * Kanban-style production job management with drag-and-drop:\n * - 5 columns: Pending, In Progress, Quality Check, Complete, On Hold\n * - Drag jobs between status columns\n * - Real-time SSE updates\n * - Job details modal\n * - Priority indicators and time tracking\n */\n\nimport { useState } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport {\n  DndContext,\n  DragOverlay,\n  closestCorners,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  SortableContext,\n  arrayMove,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport {\n  Clock,\n  AlertCircle,\n  CheckCircle2,\n  Pause,\n  Play,\n  MoreVertical,\n  Calendar,\n  User,\n  Package,\n  TrendingUp,\n  X,\n} from 'lucide-react';\nimport { useSSE } from '../../hooks/useSSE';\n\n// Job statuses\nconst JOB_STATUSES = {\n  PENDING: { id: 'pending', label: 'Pending', color: 'gray', icon: Clock },\n  IN_PROGRESS: { id: 'in_progress', label: 'In Progress', color: 'blue', icon: Play },\n  QUALITY_CHECK: { id: 'quality_check', label: 'Quality Check', color: 'yellow', icon: AlertCircle },\n  COMPLETE: { id: 'complete', label: 'Complete', color: 'green', icon: CheckCircle2 },\n  ON_HOLD: { id: 'on_hold', label: 'On Hold', color: 'red', icon: Pause },\n};\n\n// Priority levels\nconst PRIORITY_LEVELS = {\n  LOW: { label: 'Low', color: 'bg-gray-100 text-gray-700 border-gray-300' },\n  MEDIUM: { label: 'Medium', color: 'bg-blue-100 text-blue-700 border-blue-300' },\n  HIGH: { label: 'High', color: 'bg-orange-100 text-orange-700 border-orange-300' },\n  URGENT: { label: 'Urgent', color: 'bg-red-100 text-red-700 border-red-300' },\n};\n\n/**\n * Sortable Job Card\n */\nfunction SortableJobCard({ job, onClick }) {\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: job.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n      {...listeners}\n      className=\"cursor-move\"\n    >\n      <JobCard job={job} onClick={onClick} />\n    </div>\n  );\n}\n\n/**\n * Job Card Component\n */\nfunction JobCard({ job, onClick }) {\n  const priority = PRIORITY_LEVELS[job.priority] || PRIORITY_LEVELS.MEDIUM;\n\n  // Calculate progress percentage\n  const progress = job.completedQuantity && job.targetQuantity\n    ? (job.completedQuantity / job.targetQuantity) * 100\n    : 0;\n\n  // Calculate time elapsed\n  const startTime = job.startTime ? new Date(job.startTime) : null;\n  const elapsedHours = startTime\n    ? Math.floor((Date.now() - startTime.getTime()) / (1000 * 60 * 60))\n    : 0;\n\n  return (\n    <div\n      onClick={onClick}\n      className=\"bg-white rounded-lg shadow-sm border border-gray-200 p-4 hover:shadow-md transition-shadow\"\n    >\n      {/* Header */}\n      <div className=\"flex items-start justify-between mb-3\">\n        <div className=\"flex-1\">\n          <div className=\"flex items-center gap-2 mb-1\">\n            <span className=\"font-semibold text-gray-900\">#{job.jobNumber}</span>\n            <span className={`px-2 py-0.5 rounded text-xs font-medium border ${priority.color}`}>\n              {priority.label}\n            </span>\n          </div>\n          <p className=\"text-sm text-gray-600\">{job.productName}</p>\n        </div>\n        <button\n          onClick={(e) => {\n            e.stopPropagation();\n            // Handle menu open\n          }}\n          className=\"text-gray-400 hover:text-gray-600\"\n        >\n          <MoreVertical className=\"w-4 h-4\" />\n        </button>\n      </div>\n\n      {/* Progress Bar */}\n      {job.targetQuantity && (\n        <div className=\"mb-3\">\n          <div className=\"flex items-center justify-between text-xs text-gray-600 mb-1\">\n            <span>{job.completedQuantity || 0} / {job.targetQuantity} units</span>\n            <span>{progress.toFixed(0)}%</span>\n          </div>\n          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n            <div\n              className=\"bg-blue-500 h-2 rounded-full transition-all\"\n              style={{ width: `${Math.min(progress, 100)}%` }}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Details */}\n      <div className=\"space-y-2\">\n        {job.assignedTo && (\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <User className=\"w-4 h-4\" />\n            <span>{job.assignedTo}</span>\n          </div>\n        )}\n\n        {job.dueDate && (\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <Calendar className=\"w-4 h-4\" />\n            <span>Due: {new Date(job.dueDate).toLocaleDateString()}</span>\n          </div>\n        )}\n\n        {startTime && (\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <Clock className=\"w-4 h-4\" />\n            <span>\n              {elapsedHours > 0 ? `${elapsedHours}h elapsed` : 'Just started'}\n            </span>\n          </div>\n        )}\n\n        {job.machine && (\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\n            <Package className=\"w-4 h-4\" />\n            <span>{job.machine}</span>\n          </div>\n        )}\n      </div>\n\n      {/* Alerts */}\n      {job.alerts && job.alerts.length > 0 && (\n        <div className=\"mt-3 pt-3 border-t border-gray-200\">\n          {job.alerts.map((alert, index) => (\n            <div key={index} className=\"flex items-center gap-2 text-xs text-orange-600\">\n              <AlertCircle className=\"w-3 h-3\" />\n              <span>{alert}</span>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n\n/**\n * Job Column Component\n */\nfunction JobColumn({ status, jobs }) {\n  const StatusIcon = JOB_STATUSES[status].icon;\n  const statusConfig = JOB_STATUSES[status];\n\n  const colorClasses = {\n    gray: 'bg-gray-50 border-gray-300 text-gray-700',\n    blue: 'bg-blue-50 border-blue-300 text-blue-700',\n    yellow: 'bg-yellow-50 border-yellow-300 text-yellow-700',\n    green: 'bg-green-50 border-green-300 text-green-700',\n    red: 'bg-red-50 border-red-300 text-red-700',\n  };\n\n  return (\n    <div className=\"flex flex-col h-full bg-gray-50 rounded-lg p-4\">\n      {/* Column Header */}\n      <div className={`flex items-center gap-2 p-3 rounded-lg border mb-4 ${colorClasses[statusConfig.color]}`}>\n        <StatusIcon className=\"w-5 h-5\" />\n        <h3 className=\"font-semibold\">{statusConfig.label}</h3>\n        <span className=\"ml-auto text-sm font-medium\">\n          {jobs.length}\n        </span>\n      </div>\n\n      {/* Job Cards */}\n      <SortableContext\n        items={jobs.map(job => job.id)}\n        strategy={verticalListSortingStrategy}\n      >\n        <div className=\"flex-1 space-y-3 overflow-y-auto\">\n          {jobs.length === 0 ? (\n            <div className=\"text-center text-sm text-gray-400 py-8\">\n              No jobs in this status\n            </div>\n          ) : (\n            jobs.map(job => (\n              <SortableJobCard\n                key={job.id}\n                job={job}\n                onClick={() => {/* Will be handled by parent */}}\n              />\n            ))\n          )}\n        </div>\n      </SortableContext>\n    </div>\n  );\n}\n\n/**\n * Job Details Modal\n */\nfunction JobDetailsModal({ job, onClose, onUpdate }) {\n  const [isEditing, setIsEditing] = useState(false);\n\n  if (!job) return null;\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-xl shadow-2xl max-w-3xl w-full max-h-[90vh] overflow-y-auto\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-gray-900\">Job #{job.jobNumber}</h2>\n            <p className=\"text-gray-600 mt-1\">{job.productName}</p>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"text-gray-400 hover:text-gray-600 transition-colors\"\n          >\n            <X className=\"w-6 h-6\" />\n          </button>\n        </div>\n\n        {/* Content */}\n        <div className=\"p-6 space-y-6\">\n          {/* Status and Priority */}\n          <div className=\"grid md:grid-cols-2 gap-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Status\n              </label>\n              <select\n                value={job.status}\n                onChange={(e) => onUpdate({ ...job, status: e.target.value })}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              >\n                {Object.values(JOB_STATUSES).map(status => (\n                  <option key={status.id} value={status.id}>\n                    {status.label}\n                  </option>\n                ))}\n              </select>\n            </div>\n\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Priority\n              </label>\n              <select\n                value={job.priority}\n                onChange={(e) => onUpdate({ ...job, priority: e.target.value })}\n                className=\"w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n              >\n                {Object.keys(PRIORITY_LEVELS).map(priority => (\n                  <option key={priority} value={priority}>\n                    {PRIORITY_LEVELS[priority].label}\n                  </option>\n                ))}\n              </select>\n            </div>\n          </div>\n\n          {/* Production Details */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Production Details</h3>\n            <div className=\"grid md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Target Quantity</label>\n                <p className=\"mt-1 text-gray-900\">{job.targetQuantity} units</p>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Completed</label>\n                <p className=\"mt-1 text-gray-900\">{job.completedQuantity || 0} units</p>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Machine</label>\n                <p className=\"mt-1 text-gray-900\">{job.machine || 'Not assigned'}</p>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Assigned To</label>\n                <p className=\"mt-1 text-gray-900\">{job.assignedTo || 'Unassigned'}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Timeline */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Timeline</h3>\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Created</label>\n                <p className=\"mt-1 text-gray-900\">\n                  {job.createdAt ? new Date(job.createdAt).toLocaleString() : 'N/A'}\n                </p>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Started</label>\n                <p className=\"mt-1 text-gray-900\">\n                  {job.startTime ? new Date(job.startTime).toLocaleString() : 'Not started'}\n                </p>\n              </div>\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700\">Due Date</label>\n                <p className=\"mt-1 text-gray-900\">\n                  {job.dueDate ? new Date(job.dueDate).toLocaleString() : 'N/A'}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          {/* Notes/Comments */}\n          {job.notes && (\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Notes</h3>\n              <p className=\"text-gray-700 bg-gray-50 p-4 rounded-lg\">\n                {job.notes}\n              </p>\n            </div>\n          )}\n\n          {/* Activity Log */}\n          {job.activityLog && job.activityLog.length > 0 && (\n            <div>\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Activity Log</h3>\n              <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                {job.activityLog.map((activity, index) => (\n                  <div key={index} className=\"flex items-start gap-3 text-sm\">\n                    <div className=\"w-2 h-2 bg-blue-500 rounded-full mt-1.5\" />\n                    <div className=\"flex-1\">\n                      <p className=\"text-gray-900\">{activity.action}</p>\n                      <p className=\"text-gray-500 text-xs\">\n                        {new Date(activity.timestamp).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Footer */}\n        <div className=\"flex items-center justify-end gap-3 p-6 border-t border-gray-200\">\n          <button\n            onClick={onClose}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors\"\n          >\n            Close\n          </button>\n          <button\n            onClick={() => {\n              // Handle save\n              onClose();\n            }}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            Save Changes\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Main Production Job Board Component\n */\nexport default function ProductionJobBoard() {\n  const queryClient = useQueryClient();\n  const [selectedJob, setSelectedJob] = useState(null);\n  const [activeId, setActiveId] = useState(null);\n  const [filterPriority, setFilterPriority] = useState('ALL');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Fetch jobs\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['production', 'jobs'],\n    queryFn: async () => {\n      const response = await fetch('/api/v1/production/jobs', {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to fetch jobs');\n      const result = await response.json();\n      return result.data;\n    },\n    refetchInterval: 30000, // Fallback polling every 30s\n  });\n\n  // Update job status mutation\n  const updateJobMutation = useMutation({\n    mutationFn: async ({ jobId, updates }) => {\n      const response = await fetch(`/api/v1/production/jobs/${jobId}`, {\n        method: 'PATCH',\n        headers: { 'Content-Type': 'application/json' },\n        credentials: 'include',\n        body: JSON.stringify(updates),\n      });\n      if (!response.ok) throw new Error('Failed to update job');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries(['production', 'jobs']);\n      queryClient.invalidateQueries(['production', 'overview']);\n    },\n  });\n\n  // SSE for real-time job updates\n  const { connected, lastMessage } = useSSE('production', {\n    enabled: true,\n    onMessage: (message) => {\n      if (message.type === 'job:status' || message.type === 'job:progress') {\n        queryClient.invalidateQueries(['production', 'jobs']);\n      }\n    },\n  });\n\n  // Drag and drop sensors\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Handle drag end\n  const handleDragEnd = (event) => {\n    const { active, over } = event;\n\n    if (!over) {\n      setActiveId(null);\n      return;\n    }\n\n    const jobId = active.id;\n    const newStatus = over.id;\n\n    // Find the job\n    const job = Object.values(jobsByStatus)\n      .flat()\n      .find(j => j.id === jobId);\n\n    if (job && job.status !== newStatus) {\n      // Update job status\n      updateJobMutation.mutate({\n        jobId,\n        updates: { status: newStatus },\n      });\n    }\n\n    setActiveId(null);\n  };\n\n  const handleDragStart = (event) => {\n    setActiveId(event.active.id);\n  };\n\n  // Group jobs by status\n  const jobsByStatus = data?.jobs?.reduce((acc, job) => {\n    const status = job.status || 'pending';\n    if (!acc[status]) acc[status] = [];\n    acc[status].push(job);\n    return acc;\n  }, {}) || {};\n\n  // Ensure all statuses have arrays\n  Object.keys(JOB_STATUSES).forEach(status => {\n    if (!jobsByStatus[status]) jobsByStatus[status] = [];\n  });\n\n  // Apply filters\n  const filteredJobsByStatus = Object.keys(jobsByStatus).reduce((acc, status) => {\n    acc[status] = jobsByStatus[status].filter(job => {\n      const matchesPriority = filterPriority === 'ALL' || job.priority === filterPriority;\n      const matchesSearch = !searchQuery ||\n        job.jobNumber?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n        job.productName?.toLowerCase().includes(searchQuery.toLowerCase());\n      return matchesPriority && matchesSearch;\n    });\n    return acc;\n  }, {});\n\n  // Get active job for drag overlay\n  const activeJob = activeId\n    ? Object.values(jobsByStatus).flat().find(job => job.id === activeId)\n    : null;\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading jobs...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n        <p className=\"text-red-800\">Error loading jobs: {error.message}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Production Job Board</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Drag and drop jobs to update their status\n            {connected && (\n              <span className=\"ml-2 inline-flex items-center gap-1 text-green-600\">\n                <span className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                Live\n              </span>\n            )}\n          </p>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex items-center gap-3\">\n          <input\n            type=\"text\"\n            placeholder=\"Search jobs...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n          />\n          <select\n            value={filterPriority}\n            onChange={(e) => setFilterPriority(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"ALL\">All Priorities</option>\n            {Object.keys(PRIORITY_LEVELS).map(priority => (\n              <option key={priority} value={priority}>\n                {PRIORITY_LEVELS[priority].label}\n              </option>\n            ))}\n          </select>\n        </div>\n      </div>\n\n      {/* Job Board */}\n      <DndContext\n        sensors={sensors}\n        collisionDetection={closestCorners}\n        onDragStart={handleDragStart}\n        onDragEnd={handleDragEnd}\n      >\n        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-5 gap-4 min-h-[600px]\">\n          {Object.keys(JOB_STATUSES).map(status => (\n            <SortableContext\n              key={status}\n              items={[status]}\n              strategy={verticalListSortingStrategy}\n            >\n              <JobColumn\n                status={status}\n                jobs={filteredJobsByStatus[status] || []}\n              />\n            </SortableContext>\n          ))}\n        </div>\n\n        <DragOverlay>\n          {activeJob ? (\n            <div className=\"rotate-3 scale-105\">\n              <JobCard job={activeJob} onClick={() => {}} />\n            </div>\n          ) : null}\n        </DragOverlay>\n      </DndContext>\n\n      {/* Job Details Modal */}\n      {selectedJob && (\n        <JobDetailsModal\n          job={selectedJob}\n          onClose={() => setSelectedJob(null)}\n          onUpdate={(updatedJob) => {\n            updateJobMutation.mutate({\n              jobId: updatedJob.id,\n              updates: updatedJob,\n            });\n          }}\n        />\n      )}\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\pages\\production\\QualityMetrics.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Icon' is defined but never used.",
        "line": 50,
        "column": 71,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 75,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [916, 928], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'index' is defined but never used.",
        "line": 170,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 170,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [5047, 5054], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Quality Metrics Component\n *\n * Comprehensive quality monitoring and analysis:\n * - First Pass Yield (FPY) tracking\n * - Defect rate monitoring\n * - Pareto analysis (80/20 rule)\n * - Statistical Process Control (SPC) charts\n * - Quality trend analysis\n * - Root cause tracking\n */\n\nimport { useState } from 'react';\nimport { useQuery, useQueryClient } from '@tanstack/react-query';\nimport {\n  CheckCircle2,\n  XCircle,\n  TrendingUp,\n  TrendingDown,\n  AlertTriangle,\n  BarChart3,\n  Activity,\n  Target,\n  Filter,\n  Calendar,\n} from 'lucide-react';\nimport {\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  LineChart,\n  Line,\n  ComposedChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ReferenceLine,\n  Area,\n  Scatter,\n  ScatterChart,\n  ZAxis,\n} from 'recharts';\nimport { useSSE } from '../../hooks/useSSE';\n\n/**\n * Quality Metric Card\n */\nfunction QualityMetricCard({ label, value, target, unit, trend, icon: Icon, status }) {\n  const statusColors = {\n    good: 'border-green-500 bg-green-50',\n    warning: 'border-yellow-500 bg-yellow-50',\n    poor: 'border-red-500 bg-red-50',\n  };\n\n  const StatusIcon = trend >= 0 ? TrendingUp : TrendingDown;\n  const trendColor = trend >= 0 ? 'text-green-600' : 'text-red-600';\n\n  return (\n    <div className={`rounded-lg border-2 ${statusColors[status]} p-6`}>\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center gap-3\">\n          <div className={`p-3 rounded-lg ${\n            status === 'good' ? 'bg-green-600' :\n            status === 'warning' ? 'bg-yellow-600' :\n            'bg-red-600'\n          }`}>\n            <Icon className=\"w-6 h-6 text-white\" />\n          </div>\n          <div>\n            <p className=\"text-sm font-medium text-gray-600\">{label}</p>\n            <p className=\"text-xs text-gray-500\">Target: {target}{unit}</p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"flex items-baseline gap-2 mb-2\">\n        <span className=\"text-4xl font-bold text-gray-900\">{value}{unit}</span>\n        {trend !== undefined && (\n          <div className={`flex items-center gap-1 ${trendColor}`}>\n            <StatusIcon className=\"w-4 h-4\" />\n            <span className=\"text-sm font-medium\">\n              {Math.abs(trend).toFixed(1)}%\n            </span>\n          </div>\n        )}\n      </div>\n\n      <div className=\"relative w-full bg-gray-200 rounded-full h-2\">\n        <div\n          className={`h-2 rounded-full ${\n            status === 'good' ? 'bg-green-500' :\n            status === 'warning' ? 'bg-yellow-500' :\n            'bg-red-500'\n          }`}\n          style={{ width: `${Math.min((value / target) * 100, 100)}%` }}\n        />\n      </div>\n    </div>\n  );\n}\n\n/**\n * Pareto Chart Component\n */\nfunction ParetoChart({ defectTypes }) {\n  // Calculate Pareto data\n  const sorted = [...defectTypes].sort((a, b) => b.count - a.count);\n  const total = sorted.reduce((sum, d) => sum + d.count, 0);\n\n  let cumulative = 0;\n  const paretoData = sorted.map(defect => {\n    cumulative += defect.count;\n    return {\n      type: defect.type,\n      count: defect.count,\n      percentage: (defect.count / total) * 100,\n      cumulative: (cumulative / total) * 100,\n    };\n  });\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        Pareto Analysis - Defect Types\n      </h3>\n      <p className=\"text-sm text-gray-600 mb-4\">\n        Focus on the vital few defects that cause most quality issues (80/20 rule)\n      </p>\n\n      <ResponsiveContainer width=\"100%\" height={350}>\n        <ComposedChart data={paretoData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"type\" angle={-45} textAnchor=\"end\" height={100} />\n          <YAxis yAxisId=\"left\" label={{ value: 'Count', angle: -90, position: 'insideLeft' }} />\n          <YAxis\n            yAxisId=\"right\"\n            orientation=\"right\"\n            domain={[0, 100]}\n            tickFormatter={(v) => `${v}%`}\n            label={{ value: 'Cumulative %', angle: 90, position: 'insideRight' }}\n          />\n          <Tooltip\n            formatter={(value, name) => [\n              name === 'cumulative' ? `${value.toFixed(1)}%` : value,\n              name === 'count' ? 'Defects' :\n              name === 'percentage' ? 'Percentage' :\n              'Cumulative %'\n            ]}\n          />\n          <Legend />\n\n          <Bar yAxisId=\"left\" dataKey=\"count\" fill=\"#3b82f6\" name=\"Defect Count\" />\n          <Line\n            yAxisId=\"right\"\n            type=\"monotone\"\n            dataKey=\"cumulative\"\n            stroke=\"#ef4444\"\n            strokeWidth={3}\n            name=\"Cumulative %\"\n            dot={{ fill: '#ef4444', r: 5 }}\n          />\n          <ReferenceLine yAxisId=\"right\" y={80} stroke=\"#10b981\" strokeDasharray=\"3 3\" label=\"80%\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n\n      {/* Defect Summary */}\n      <div className=\"mt-6 grid grid-cols-2 md:grid-cols-4 gap-4\">\n        {paretoData.slice(0, 4).map((defect, index) => (\n          <div key={defect.type} className=\"text-center p-3 bg-gray-50 rounded-lg\">\n            <div className=\"text-2xl font-bold text-gray-900\">{defect.count}</div>\n            <div className=\"text-xs text-gray-600 mt-1\">{defect.type}</div>\n            <div className=\"text-xs text-gray-500 mt-1\">\n              {defect.percentage.toFixed(1)}%\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Statistical Process Control (SPC) Chart\n */\nfunction SPCChart({ spcData, metric }) {\n  const { dataPoints, ucl, lcl, mean, sigma } = spcData;\n\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        Statistical Process Control - {metric}\n      </h3>\n      <p className=\"text-sm text-gray-600 mb-4\">\n        Control chart showing process variation and control limits (±3σ)\n      </p>\n\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <LineChart data={dataPoints}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"timestamp\"\n            tickFormatter={(ts) => new Date(ts).toLocaleTimeString('en-GB', { hour: '2-digit', minute: '2-digit' })}\n          />\n          <YAxis domain={[Math.max(0, lcl - 5), ucl + 5]} />\n          <Tooltip\n            labelFormatter={(ts) => new Date(ts).toLocaleString()}\n            formatter={(value) => value.toFixed(2)}\n          />\n          <Legend />\n\n          {/* Control limits */}\n          <ReferenceLine y={ucl} stroke=\"#ef4444\" strokeDasharray=\"3 3\" label=\"UCL\" />\n          <ReferenceLine y={mean} stroke=\"#10b981\" strokeDasharray=\"3 3\" label=\"Mean\" />\n          <ReferenceLine y={lcl} stroke=\"#ef4444\" strokeDasharray=\"3 3\" label=\"LCL\" />\n\n          {/* Data points */}\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            stroke=\"#3b82f6\"\n            strokeWidth={2}\n            dot={(props) => {\n              const { cx, cy, payload } = props;\n              const isOutOfControl = payload.value > ucl || payload.value < lcl;\n              return (\n                <circle\n                  cx={cx}\n                  cy={cy}\n                  r={isOutOfControl ? 6 : 4}\n                  fill={isOutOfControl ? '#ef4444' : '#3b82f6'}\n                  stroke={isOutOfControl ? '#dc2626' : '#2563eb'}\n                  strokeWidth={2}\n                />\n              );\n            }}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n\n      {/* SPC Stats */}\n      <div className=\"mt-4 grid grid-cols-4 gap-4\">\n        <div className=\"text-center p-3 bg-gray-50 rounded\">\n          <div className=\"text-lg font-bold text-gray-900\">{mean.toFixed(2)}</div>\n          <div className=\"text-xs text-gray-600\">Mean</div>\n        </div>\n        <div className=\"text-center p-3 bg-gray-50 rounded\">\n          <div className=\"text-lg font-bold text-gray-900\">{sigma.toFixed(2)}</div>\n          <div className=\"text-xs text-gray-600\">Std Dev (σ)</div>\n        </div>\n        <div className=\"text-center p-3 bg-red-50 rounded\">\n          <div className=\"text-lg font-bold text-red-600\">{ucl.toFixed(2)}</div>\n          <div className=\"text-xs text-gray-600\">UCL (+3σ)</div>\n        </div>\n        <div className=\"text-center p-3 bg-red-50 rounded\">\n          <div className=\"text-lg font-bold text-red-600\">{lcl.toFixed(2)}</div>\n          <div className=\"text-xs text-gray-600\">LCL (-3σ)</div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n/**\n * FPY Trend Chart\n */\nfunction FPYTrendChart({ trendData }) {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        First Pass Yield Trend (Last 30 Days)\n      </h3>\n\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <ComposedChart data={trendData}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"date\"\n            tickFormatter={(date) => new Date(date).toLocaleDateString('en-GB', { day: '2-digit', month: 'short' })}\n          />\n          <YAxis domain={[0, 100]} tickFormatter={(v) => `${v}%`} />\n          <Tooltip\n            labelFormatter={(date) => new Date(date).toLocaleDateString()}\n            formatter={(value) => `${value.toFixed(1)}%`}\n          />\n          <Legend />\n\n          <ReferenceLine y={99} stroke=\"#10b981\" strokeDasharray=\"3 3\" label=\"Target: 99%\" />\n\n          <Area\n            type=\"monotone\"\n            dataKey=\"fpy\"\n            fill=\"#3b82f6\"\n            fillOpacity={0.1}\n            stroke=\"none\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"fpy\"\n            stroke=\"#3b82f6\"\n            strokeWidth={3}\n            dot={{ fill: '#3b82f6', r: 4 }}\n            name=\"FPY\"\n          />\n          <Line\n            type=\"monotone\"\n            dataKey=\"target\"\n            stroke=\"#10b981\"\n            strokeWidth={2}\n            strokeDasharray=\"5 5\"\n            dot={false}\n            name=\"Target\"\n          />\n        </ComposedChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\n/**\n * Quality Alerts Panel\n */\nfunction QualityAlertsPanel({ alerts }) {\n  return (\n    <div className=\"bg-white rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n        Quality Alerts ({alerts.length})\n      </h3>\n\n      <div className=\"space-y-3 max-h-96 overflow-y-auto\">\n        {alerts.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <CheckCircle2 className=\"w-12 h-12 text-green-500 mx-auto mb-2\" />\n            <p className=\"text-gray-600\">No quality alerts</p>\n          </div>\n        ) : (\n          alerts.map((alert) => (\n            <div\n              key={alert.id}\n              className={`p-4 rounded-lg border-2 ${\n                alert.severity === 'critical' ? 'border-red-500 bg-red-50' :\n                alert.severity === 'high' ? 'border-orange-500 bg-orange-50' :\n                'border-yellow-500 bg-yellow-50'\n              }`}\n            >\n              <div className=\"flex items-start gap-3\">\n                <AlertTriangle className={`w-5 h-5 mt-0.5 ${\n                  alert.severity === 'critical' ? 'text-red-600' :\n                  alert.severity === 'high' ? 'text-orange-600' :\n                  'text-yellow-600'\n                }`} />\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center justify-between mb-1\">\n                    <h4 className=\"font-semibold text-gray-900\">{alert.title}</h4>\n                    <span className=\"text-xs text-gray-500\">\n                      {new Date(alert.timestamp).toLocaleTimeString()}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-gray-700 mb-2\">{alert.message}</p>\n                  {alert.product && (\n                    <p className=\"text-xs text-gray-600\">Product: {alert.product}</p>\n                  )}\n                  {alert.machine && (\n                    <p className=\"text-xs text-gray-600\">Machine: {alert.machine}</p>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n\n/**\n * Root Cause Analysis Table\n */\nfunction RootCauseTable({ rootCauses }) {\n  return (\n    <div className=\"bg-white rounded-lg shadow overflow-hidden\">\n      <div className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">\n          Root Cause Analysis\n        </h3>\n      </div>\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gray-50\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Root Cause\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Occurrences\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Impact\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Last Occurrence\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Status\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {rootCauses.map((cause) => (\n              <tr key={cause.id} className=\"hover:bg-gray-50\">\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm font-medium text-gray-900\">{cause.description}</div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-900\">{cause.occurrences}</div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className={`px-2 py-1 text-xs font-medium rounded border ${\n                    cause.impact === 'high' ? 'bg-red-100 text-red-700 border-red-300' :\n                    cause.impact === 'medium' ? 'bg-yellow-100 text-yellow-700 border-yellow-300' :\n                    'bg-green-100 text-green-700 border-green-300'\n                  }`}>\n                    {cause.impact}\n                  </span>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"text-sm text-gray-500\">\n                    {new Date(cause.lastOccurrence).toLocaleDateString()}\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className={`px-2 py-1 text-xs font-medium rounded ${\n                    cause.status === 'resolved' ? 'bg-green-100 text-green-700' :\n                    cause.status === 'investigating' ? 'bg-blue-100 text-blue-700' :\n                    'bg-yellow-100 text-yellow-700'\n                  }`}>\n                    {cause.status}\n                  </span>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n}\n\n/**\n * Main Quality Metrics Component\n */\nexport default function QualityMetrics() {\n  const queryClient = useQueryClient();\n  const [dateRange, setDateRange] = useState('today');\n  const [selectedProduct, setSelectedProduct] = useState('all');\n\n  // Fetch quality data\n  const { data, isLoading, error } = useQuery({\n    queryKey: ['production', 'quality', dateRange, selectedProduct],\n    queryFn: async () => {\n      const params = new URLSearchParams({ dateRange, product: selectedProduct });\n      const response = await fetch(`/api/v1/production/quality?${params}`, {\n        credentials: 'include',\n      });\n      if (!response.ok) throw new Error('Failed to fetch quality data');\n      const result = await response.json();\n      return result.data;\n    },\n    refetchInterval: 30000,\n  });\n\n  // SSE for real-time quality updates\n  const { connected } = useSSE('production', {\n    enabled: true,\n    onMessage: (message) => {\n      if (message.type === 'quality:alert' || message.type === 'quality:update') {\n        queryClient.invalidateQueries(['production', 'quality']);\n      }\n    },\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-96\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600\">Loading quality data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-red-50 border border-red-200 rounded-lg p-6\">\n        <p className=\"text-red-800\">Error loading quality data: {error.message}</p>\n      </div>\n    );\n  }\n\n  const {\n    overview = {},\n    defectTypes = [],\n    fpyTrend = [],\n    spc = {},\n    alerts = [],\n    rootCauses = [],\n  } = data || {};\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Quality Metrics</h1>\n          <p className=\"text-gray-600 mt-1\">\n            Real-time quality monitoring and analysis\n            {connected && (\n              <span className=\"ml-2 inline-flex items-center gap-1 text-green-600\">\n                <span className=\"w-2 h-2 bg-green-500 rounded-full\" />\n                Live\n              </span>\n            )}\n          </p>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex items-center gap-3\">\n          <select\n            value={dateRange}\n            onChange={(e) => setDateRange(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"today\">Today</option>\n            <option value=\"yesterday\">Yesterday</option>\n            <option value=\"week\">This Week</option>\n            <option value=\"month\">This Month</option>\n          </select>\n\n          <select\n            value={selectedProduct}\n            onChange={(e) => setSelectedProduct(e.target.value)}\n            className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500\"\n          >\n            <option value=\"all\">All Products</option>\n            {/* Product options would be populated from API */}\n          </select>\n        </div>\n      </div>\n\n      {/* Quality Metrics Cards */}\n      <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <QualityMetricCard\n          label=\"First Pass Yield\"\n          value={overview.fpy || 0}\n          target={99}\n          unit=\"%\"\n          trend={overview.fpyTrend}\n          icon={CheckCircle2}\n          status={overview.fpy >= 99 ? 'good' : overview.fpy >= 95 ? 'warning' : 'poor'}\n        />\n\n        <QualityMetricCard\n          label=\"Defect Rate\"\n          value={overview.defectRate || 0}\n          target={1}\n          unit=\"%\"\n          trend={-overview.defectRateTrend}\n          icon={XCircle}\n          status={overview.defectRate <= 1 ? 'good' : overview.defectRate <= 3 ? 'warning' : 'poor'}\n        />\n\n        <QualityMetricCard\n          label=\"Total Inspections\"\n          value={overview.totalInspections || 0}\n          target={overview.targetInspections || 1000}\n          unit=\"\"\n          trend={overview.inspectionsTrend}\n          icon={Activity}\n          status=\"good\"\n        />\n\n        <QualityMetricCard\n          label=\"Rework Rate\"\n          value={overview.reworkRate || 0}\n          target={2}\n          unit=\"%\"\n          trend={-overview.reworkRateTrend}\n          icon={AlertTriangle}\n          status={overview.reworkRate <= 2 ? 'good' : overview.reworkRate <= 5 ? 'warning' : 'poor'}\n        />\n      </div>\n\n      {/* Charts Row 1 */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <ParetoChart defectTypes={defectTypes} />\n        <QualityAlertsPanel alerts={alerts} />\n      </div>\n\n      {/* Charts Row 2 */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <FPYTrendChart trendData={fpyTrend} />\n        <SPCChart spcData={spc} metric=\"Defect Rate\" />\n      </div>\n\n      {/* Root Cause Analysis */}\n      <RootCauseTable rootCauses={rootCauses} />\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\server.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'statSync' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 30,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "statSync" },
            "fix": { "range": [1066, 1076], "text": "" },
            "desc": "Remove unused variable 'statSync'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 43,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 43,
        "endColumn": 16
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 45,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 45,
        "endColumn": 25
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 46,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 46,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 48,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 48,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 56,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 56,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 57,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 57,
        "endColumn": 35
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 58,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 58,
        "endColumn": 38
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 61,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 61,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 62,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 62,
        "endColumn": 37
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 68,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 68,
        "endColumn": 17
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 915,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 915,
        "endColumn": 37
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 916,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 916,
        "endColumn": 38
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 917,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 917,
        "endColumn": 41
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 919,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 919,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 1071,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 1071,
        "endColumn": 18
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 1071,
        "column": 53,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 1071,
        "endColumn": 60
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 1104,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1104,
        "endColumn": 23
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 1111,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 1111,
        "endColumn": 14
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 1114,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 1114,
        "endColumn": 12
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 1115,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 1115,
        "endColumn": 12
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 1118,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 1118,
        "endColumn": 12
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 1123,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 1123,
        "endColumn": 12
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 1134,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 1134,
        "endColumn": 42
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 1138,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 1138,
        "endColumn": 12
      }
    ],
    "suppressedMessages": [],
    "errorCount": 25,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Sentia Manufacturing MCP Server - Main Implementation\n *\n * Enterprise-grade Model Context Protocol server with comprehensive\n * business intelligence capabilities for manufacturing operations.\n *\n * Features:\n * - Full MCP SDK integration with dual transport support\n * - Dynamic tool loading and execution\n * - Enterprise security with JWT authentication\n * - Comprehensive monitoring and metrics\n * - Production-ready error handling and logging\n *\n * @version 3.0.0\n * @author Sentia Manufacturing Team\n */\n\nimport { Server } from '@modelcontextprotocol/sdk/server/index.js'\nimport { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js'\nimport { SSEServerTransport } from '@modelcontextprotocol/sdk/server/sse.js'\nimport express from 'express'\nimport cors from 'cors'\nimport helmet from 'helmet'\nimport compression from 'compression'\nimport { rateLimit } from 'express-rate-limit'\nimport jwt from 'jsonwebtoken'\nimport { config } from 'dotenv'\nimport { fileURLToPath } from 'url'\nimport { dirname, join } from 'path'\nimport { readdirSync, statSync } from 'fs'\nimport winston from 'winston'\nimport { v4 as uuidv4 } from 'uuid'\nimport { Pool } from 'pg'\n\n// Load environment variables\nconfig()\n\nconst __filename = fileURLToPath(import.meta.url)\nconst __dirname = dirname(__filename)\n\n// Server Configuration\nconst SERVER_CONFIG = {\n  name: process.env.MCP_SERVER_NAME || 'sentia-manufacturing-mcp',\n  version: '3.0.0',\n  port: parseInt(process.env.MCP_SERVER_PORT) || 3001,\n  environment: process.env.NODE_ENV || 'development',\n  cors: {\n    origins: process.env.CORS_ORIGINS?.split(',') || [\n      'https://sentia-manufacturing-development.onrender.com',\n      'https://sentia-manufacturing-testing.onrender.com',\n      'https://sentia-manufacturing-production.onrender.com',\n      'http://localhost:3000',\n    ],\n  },\n  security: {\n    jwtSecret: process.env.JWT_SECRET || 'fallback-secret-for-dev',\n    rateLimitMax: parseInt(process.env.RATE_LIMIT_MAX) || 100,\n    rateLimitWindow: parseInt(process.env.RATE_LIMIT_WINDOW) || 15 * 60 * 1000, // 15 minutes\n  },\n  database: {\n    url: process.env.DATABASE_URL,\n    maxConnections: parseInt(process.env.DB_MAX_CONNECTIONS) || 10,\n  },\n}\n\n// Enhanced Winston Logger with Correlation IDs\nconst logger = winston.createLogger({\n  level: process.env.LOG_LEVEL || 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json(),\n    winston.format.printf(({ timestamp, level, message, correlationId, ...meta }) => {\n      return JSON.stringify({\n        timestamp,\n        level,\n        message,\n        correlationId,\n        ...meta,\n      })\n    })\n  ),\n  defaultMeta: { service: 'sentia-mcp-server' },\n  transports: [\n    new winston.transports.Console({\n      format: winston.format.combine(winston.format.colorize(), winston.format.simple()),\n    }),\n    new winston.transports.File({\n      filename: 'logs/error.log',\n      level: 'error',\n      maxsize: 5242880, // 5MB\n      maxFiles: 5,\n    }),\n    new winston.transports.File({\n      filename: 'logs/combined.log',\n      maxsize: 5242880, // 5MB\n      maxFiles: 5,\n    }),\n  ],\n})\n\n// Database Pool\nconst dbPool = new Pool({\n  connectionString: SERVER_CONFIG.database.url,\n  max: SERVER_CONFIG.database.maxConnections,\n  idleTimeoutMillis: 30000,\n  connectionTimeoutMillis: 10000,\n  ssl: SERVER_CONFIG.environment === 'production' ? { rejectUnauthorized: false } : false,\n})\n\n/**\n * Main MCP Server Class\n * Handles tool registration, execution, and transport management\n */\nclass SentiaMCPServer {\n  constructor() {\n    this.server = new Server(\n      {\n        name: SERVER_CONFIG.name,\n        version: SERVER_CONFIG.version,\n      },\n      {\n        capabilities: {\n          tools: {},\n          resources: {},\n          prompts: {},\n        },\n      }\n    )\n\n    this.tools = new Map()\n    this.resources = new Map()\n    this.prompts = new Map()\n    this.connections = new Map()\n    this.metrics = {\n      requests: 0,\n      errors: 0,\n      toolExecutions: 0,\n      averageResponseTime: 0,\n      uptime: Date.now(),\n    }\n\n    this.setupToolHandlers()\n    this.setupResourceHandlers()\n    this.setupPromptHandlers()\n    this.loadTools()\n    this.initializeExpress()\n  }\n\n  /**\n   * Set up MCP tool handlers\n   */\n  setupToolHandlers() {\n    this.server.setRequestHandler('tools/list', async () => {\n      const toolsList = Array.from(this.tools.values()).map(tool => ({\n        name: tool.name,\n        description: tool.description,\n        inputSchema: tool.inputSchema || { type: 'object', properties: {} },\n      }))\n\n      logger.info('Tools list requested', {\n        correlationId: uuidv4(),\n        toolsCount: toolsList.length,\n      })\n\n      return { tools: toolsList }\n    })\n\n    this.server.setRequestHandler('tools/call', async request => {\n      const correlationId = uuidv4()\n      const startTime = Date.now()\n\n      try {\n        const { name, arguments: args } = request.params\n\n        logger.info('Tool execution started', {\n          correlationId,\n          toolName: name,\n          arguments: args,\n        })\n\n        if (!this.tools.has(name)) {\n          throw new Error(`Tool ${name} not found`)\n        }\n\n        const tool = this.tools.get(name)\n\n        // Validate parameters if schema exists\n        if (tool.inputSchema) {\n          this.validateToolParameters(args, tool.inputSchema)\n        }\n\n        // Execute tool with enhanced context\n        const result = await tool.execute({\n          ...args,\n          correlationId,\n          timestamp: new Date().toISOString(),\n          environment: SERVER_CONFIG.environment,\n        })\n\n        const executionTime = Date.now() - startTime\n        this.updateMetrics('toolExecution', executionTime)\n\n        logger.info('Tool execution completed', {\n          correlationId,\n          toolName: name,\n          executionTime,\n          success: true,\n        })\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: typeof result === 'string' ? result : JSON.stringify(result, null, 2),\n            },\n          ],\n        }\n      } catch (error) {\n        const executionTime = Date.now() - startTime\n        this.updateMetrics('error', executionTime)\n\n        logger.error('Tool execution failed', {\n          correlationId,\n          toolName: request.params.name,\n          error: error.message,\n          stack: error.stack,\n          executionTime,\n        })\n\n        return {\n          content: [\n            {\n              type: 'text',\n              text: `Error executing tool: ${error.message}`,\n            },\n          ],\n          isError: true,\n        }\n      }\n    })\n  }\n\n  /**\n   * Set up MCP resource handlers for file operations\n   */\n  setupResourceHandlers() {\n    this.server.setRequestHandler('resources/list', async () => {\n      return {\n        resources: Array.from(this.resources.keys()).map(uri => ({\n          uri,\n          name: this.resources.get(uri).name,\n          description: this.resources.get(uri).description,\n          mimeType: this.resources.get(uri).mimeType,\n        })),\n      }\n    })\n\n    this.server.setRequestHandler('resources/read', async request => {\n      const { uri } = request.params\n      const correlationId = uuidv4()\n\n      try {\n        if (!this.resources.has(uri)) {\n          throw new Error(`Resource ${uri} not found`)\n        }\n\n        const resource = this.resources.get(uri)\n        const content = await resource.read()\n\n        logger.info('Resource read', {\n          correlationId,\n          uri,\n          contentType: resource.mimeType,\n        })\n\n        return {\n          contents: [\n            {\n              uri,\n              mimeType: resource.mimeType,\n              text: content,\n            },\n          ],\n        }\n      } catch (error) {\n        logger.error('Resource read failed', {\n          correlationId,\n          uri,\n          error: error.message,\n        })\n\n        throw error\n      }\n    })\n  }\n\n  /**\n   * Set up MCP prompt handlers for common operations\n   */\n  setupPromptHandlers() {\n    this.server.setRequestHandler('prompts/list', async () => {\n      return {\n        prompts: Array.from(this.prompts.values()).map(prompt => ({\n          name: prompt.name,\n          description: prompt.description,\n          arguments: prompt.arguments || [],\n        })),\n      }\n    })\n\n    this.server.setRequestHandler('prompts/get', async request => {\n      const { name, arguments: args } = request.params\n      const correlationId = uuidv4()\n\n      try {\n        if (!this.prompts.has(name)) {\n          throw new Error(`Prompt ${name} not found`)\n        }\n\n        const prompt = this.prompts.get(name)\n        const messages = await prompt.generate(args)\n\n        logger.info('Prompt generated', {\n          correlationId,\n          promptName: name,\n          messagesCount: messages.length,\n        })\n\n        return { messages }\n      } catch (error) {\n        logger.error('Prompt generation failed', {\n          correlationId,\n          promptName: name,\n          error: error.message,\n        })\n\n        throw error\n      }\n    })\n  }\n\n  /**\n   * Dynamically load tools from tools directory\n   */\n  async loadTools() {\n    const toolsDir = join(__dirname, '..', 'tools')\n\n    try {\n      const toolFiles = this.findToolFiles(toolsDir)\n\n      logger.info('Loading tools', {\n        toolsDirectory: toolsDir,\n        foundFiles: toolFiles.length,\n      })\n\n      for (const toolFile of toolFiles) {\n        try {\n          const toolModule = await import(toolFile)\n          const tool = toolModule.default || toolModule\n\n          if (tool && tool.name && typeof tool.execute === 'function') {\n            this.tools.set(tool.name, {\n              name: tool.name,\n              description: tool.description || `Execute ${tool.name}`,\n              inputSchema: tool.inputSchema,\n              execute: tool.execute.bind(tool),\n              category: tool.category || 'general',\n              version: tool.version || '1.0.0',\n            })\n\n            logger.info('Tool loaded successfully', {\n              toolName: tool.name,\n              category: tool.category,\n              file: toolFile,\n            })\n          } else {\n            logger.warn('Invalid tool format', { file: toolFile })\n          }\n        } catch (error) {\n          logger.error('Failed to load tool', {\n            file: toolFile,\n            error: error.message,\n          })\n        }\n      }\n\n      logger.info('Tool loading completed', {\n        totalTools: this.tools.size,\n        categories: [...new Set(Array.from(this.tools.values()).map(t => t.category))],\n      })\n    } catch (error) {\n      logger.error('Tools directory scan failed', {\n        directory: toolsDir,\n        error: error.message,\n      })\n    }\n\n    // Load default system tools\n    this.loadSystemTools()\n    this.loadPromptTemplates()\n  }\n\n  /**\n   * Recursively find tool files\n   */\n  findToolFiles(dir) {\n    const files = []\n\n    try {\n      const entries = readdirSync(dir, { withFileTypes: true })\n\n      for (const entry of entries) {\n        const fullPath = join(dir, entry.name)\n\n        if (entry.isDirectory()) {\n          files.push(...this.findToolFiles(fullPath))\n        } else if (entry.name.endsWith('.js') && !entry.name.endsWith('.test.js')) {\n          files.push(fullPath)\n        }\n      }\n    } catch (error) {\n      logger.warn('Directory scan failed', { directory: dir, error: error.message })\n    }\n\n    return files\n  }\n\n  /**\n   * Load built-in system tools\n   */\n  loadSystemTools() {\n    // System Status Tool\n    this.tools.set('system-status', {\n      name: 'system-status',\n      description: 'Get comprehensive system health and performance metrics',\n      category: 'system',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          includeMetrics: { type: 'boolean', default: true },\n          includeConnections: { type: 'boolean', default: true },\n        },\n      },\n      execute: async params => {\n        const status = await this.getSystemStatus(params)\n        return status\n      },\n    })\n\n    // Tool Registry Tool\n    this.tools.set('list-tools', {\n      name: 'list-tools',\n      description: 'List all available tools with detailed information',\n      category: 'system',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          category: { type: 'string', description: 'Filter by category' },\n        },\n      },\n      execute: async params => {\n        let tools = Array.from(this.tools.values())\n\n        if (params.category) {\n          tools = tools.filter(tool => tool.category === params.category)\n        }\n\n        return {\n          tools: tools.map(tool => ({\n            name: tool.name,\n            description: tool.description,\n            category: tool.category,\n            version: tool.version,\n            hasSchema: !!tool.inputSchema,\n          })),\n          categories: [...new Set(Array.from(this.tools.values()).map(t => t.category))],\n          totalCount: tools.length,\n        }\n      },\n    })\n\n    // Database Query Tool\n    this.tools.set('database-query', {\n      name: 'database-query',\n      description: 'Execute read-only database queries for analytics',\n      category: 'database',\n      inputSchema: {\n        type: 'object',\n        properties: {\n          query: { type: 'string', description: 'SQL query to execute' },\n          params: { type: 'array', description: 'Query parameters' },\n        },\n        required: ['query'],\n      },\n      execute: async params => {\n        return await this.executeReadOnlyQuery(params.query, params.params || [])\n      },\n    })\n  }\n\n  /**\n   * Load prompt templates for common operations\n   */\n  loadPromptTemplates() {\n    // Manufacturing Analysis Prompt\n    this.prompts.set('manufacturing-analysis', {\n      name: 'manufacturing-analysis',\n      description: 'Generate detailed manufacturing analysis prompts',\n      arguments: [\n        { name: 'metric', description: 'The metric to analyze (OEE, quality, throughput, etc.)' },\n        { name: 'timeframe', description: 'Analysis timeframe (daily, weekly, monthly)' },\n        { name: 'context', description: 'Additional context or constraints' },\n      ],\n      generate: async args => {\n        const { metric, timeframe, context } = args\n\n        return [\n          {\n            role: 'system',\n            content: {\n              type: 'text',\n              text: `You are an expert manufacturing analyst specializing in ${metric} optimization. \n                     Provide detailed insights based on ${timeframe} data analysis.\n                     ${context ? `Additional context: ${context}` : ''}`,\n            },\n          },\n          {\n            role: 'user',\n            content: {\n              type: 'text',\n              text: `Analyze the ${metric} performance over the past ${timeframe} and provide:\n                     1. Key trends and patterns\n                     2. Performance against industry benchmarks\n                     3. Root cause analysis of any issues\n                     4. Specific improvement recommendations\n                     5. Implementation timeline and expected ROI`,\n            },\n          },\n        ]\n      },\n    })\n\n    // Working Capital Optimization Prompt\n    this.prompts.set('working-capital-optimization', {\n      name: 'working-capital-optimization',\n      description: 'Generate working capital optimization analysis prompts',\n      arguments: [\n        { name: 'currentCCC', description: 'Current cash conversion cycle in days' },\n        { name: 'targetCCC', description: 'Target cash conversion cycle in days' },\n        { name: 'constraints', description: 'Business constraints or limitations' },\n      ],\n      generate: async args => {\n        const { currentCCC, targetCCC, constraints } = args\n\n        return [\n          {\n            role: 'system',\n            content: {\n              type: 'text',\n              text: `You are a CFO advisor specializing in working capital optimization for manufacturing companies.\n                     Focus on actionable strategies to improve cash flow and operational efficiency.`,\n            },\n          },\n          {\n            role: 'user',\n            content: {\n              type: 'text',\n              text: `Analyze working capital optimization opportunities:\n                     Current CCC: ${currentCCC} days\n                     Target CCC: ${targetCCC} days\n                     Constraints: ${constraints || 'None specified'}\n                     \n                     Provide:\n                     1. DSO optimization strategies\n                     2. DPO extension opportunities\n                     3. DIO reduction recommendations\n                     4. Implementation roadmap with quick wins\n                     5. Risk mitigation strategies\n                     6. Expected cash flow impact`,\n            },\n          },\n        ]\n      },\n    })\n  }\n\n  /**\n   * Initialize Express server for HTTP transport and health endpoints\n   */\n  initializeExpress() {\n    this.app = express()\n\n    // Security middleware\n    this.app.use(\n      helmet({\n        contentSecurityPolicy: {\n          directives: {\n            defaultSrc: [\"'self'\"],\n            scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n            styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n            imgSrc: [\"'self'\", 'data:', 'https:'],\n          },\n        },\n      })\n    )\n\n    // CORS configuration\n    this.app.use(\n      cors({\n        origin: SERVER_CONFIG.cors.origins,\n        credentials: true,\n        methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],\n        allowedHeaders: ['Content-Type', 'Authorization', 'X-Correlation-ID'],\n      })\n    )\n\n    // Compression and parsing\n    this.app.use(compression())\n    this.app.use(express.json({ limit: '10mb' }))\n    this.app.use(express.urlencoded({ extended: true, limit: '10mb' }))\n\n    // Rate limiting\n    const limiter = rateLimit({\n      windowMs: SERVER_CONFIG.security.rateLimitWindow,\n      max: SERVER_CONFIG.security.rateLimitMax,\n      message: {\n        error: 'Too many requests',\n        retryAfter: Math.ceil(SERVER_CONFIG.security.rateLimitWindow / 1000),\n      },\n      standardHeaders: true,\n      legacyHeaders: false,\n    })\n    this.app.use('/api/', limiter)\n\n    // Correlation ID middleware\n    this.app.use((req, res, next) => {\n      req.correlationId = req.headers['x-correlation-id'] || uuidv4()\n      res.setHeader('X-Correlation-ID', req.correlationId)\n      next()\n    })\n\n    // Request logging\n    this.app.use((req, res, next) => {\n      logger.info('HTTP request', {\n        correlationId: req.correlationId,\n        method: req.method,\n        url: req.url,\n        userAgent: req.headers['user-agent'],\n        ip: req.ip,\n      })\n      next()\n    })\n\n    this.setupRoutes()\n  }\n\n  /**\n   * Set up Express routes\n   */\n  setupRoutes() {\n    // Health check endpoint\n    this.app.get('/health', async (req, res) => {\n      try {\n        const health = await this.getSystemStatus({\n          includeMetrics: true,\n          includeConnections: true,\n        })\n\n        res.json({\n          status: health.status,\n          timestamp: new Date().toISOString(),\n          version: SERVER_CONFIG.version,\n          environment: SERVER_CONFIG.environment,\n          ...health,\n        })\n      } catch (error) {\n        logger.error('Health check failed', {\n          correlationId: req.correlationId,\n          error: error.message,\n        })\n\n        res.status(503).json({\n          status: 'unhealthy',\n          error: error.message,\n          timestamp: new Date().toISOString(),\n        })\n      }\n    })\n\n    // Metrics endpoint\n    this.app.get('/metrics', (req, res) => {\n      res.json({\n        ...this.metrics,\n        uptime: Date.now() - this.metrics.uptime,\n        timestamp: new Date().toISOString(),\n      })\n    })\n\n    // Tool execution endpoint\n    this.app.post('/api/tools/:toolName', this.authenticateRequest.bind(this), async (req, res) => {\n      const { toolName } = req.params\n      const correlationId = req.correlationId\n      const startTime = Date.now()\n\n      try {\n        if (!this.tools.has(toolName)) {\n          return res.status(404).json({\n            error: `Tool ${toolName} not found`,\n            correlationId,\n          })\n        }\n\n        const tool = this.tools.get(toolName)\n\n        // Validate parameters\n        if (tool.inputSchema) {\n          this.validateToolParameters(req.body, tool.inputSchema)\n        }\n\n        const result = await tool.execute({\n          ...req.body,\n          correlationId,\n          timestamp: new Date().toISOString(),\n          environment: SERVER_CONFIG.environment,\n        })\n\n        const executionTime = Date.now() - startTime\n        this.updateMetrics('toolExecution', executionTime)\n\n        res.json({\n          success: true,\n          result,\n          executionTime,\n          correlationId,\n        })\n      } catch (error) {\n        const executionTime = Date.now() - startTime\n        this.updateMetrics('error', executionTime)\n\n        logger.error('HTTP tool execution failed', {\n          correlationId,\n          toolName,\n          error: error.message,\n          stack: error.stack,\n        })\n\n        res.status(500).json({\n          success: false,\n          error: error.message,\n          correlationId,\n          executionTime,\n        })\n      }\n    })\n\n    // Tools list endpoint\n    this.app.get('/api/tools', (req, res) => {\n      const { category } = req.query\n      let tools = Array.from(this.tools.values())\n\n      if (category) {\n        tools = tools.filter(tool => tool.category === category)\n      }\n\n      res.json({\n        tools: tools.map(tool => ({\n          name: tool.name,\n          description: tool.description,\n          category: tool.category,\n          version: tool.version,\n          hasSchema: !!tool.inputSchema,\n        })),\n        categories: [...new Set(Array.from(this.tools.values()).map(t => t.category))],\n        totalCount: tools.length,\n      })\n    })\n\n    // SSE endpoint for real-time updates\n    this.app.get('/api/events', (req, res) => {\n      res.writeHead(200, {\n        'Content-Type': 'text/event-stream',\n        'Cache-Control': 'no-cache',\n        Connection: 'keep-alive',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Headers': 'Cache-Control',\n      })\n\n      const connectionId = uuidv4()\n      this.connections.set(connectionId, res)\n\n      // Send welcome message\n      res.write(\n        `data: ${JSON.stringify({\n          type: 'connection',\n          connectionId,\n          message: 'Connected to MCP Server events',\n          timestamp: new Date().toISOString(),\n        })}\\n\\n`\n      )\n\n      // Handle client disconnect\n      req.on('close', () => {\n        this.connections.delete(connectionId)\n        logger.info('SSE connection closed', { connectionId })\n      })\n\n      // Keep-alive ping\n      const keepAlive = setInterval(() => {\n        res.write(\n          `data: ${JSON.stringify({\n            type: 'ping',\n            timestamp: new Date().toISOString(),\n          })}\\n\\n`\n        )\n      }, 30000)\n\n      req.on('close', () => {\n        clearInterval(keepAlive)\n      })\n    })\n  }\n\n  /**\n   * JWT Authentication middleware\n   */\n  async authenticateRequest(req, res, next) {\n    try {\n      const authHeader = req.headers.authorization\n\n      if (!authHeader || !authHeader.startsWith('Bearer ')) {\n        // In development, allow unauthenticated requests\n        if (SERVER_CONFIG.environment === 'development') {\n          return next()\n        }\n\n        return res.status(401).json({\n          error: 'Authentication required',\n          correlationId: req.correlationId,\n        })\n      }\n\n      const token = authHeader.substring(7)\n      const decoded = jwt.verify(token, SERVER_CONFIG.security.jwtSecret)\n\n      req.user = decoded\n      next()\n    } catch (error) {\n      logger.warn('Authentication failed', {\n        correlationId: req.correlationId,\n        error: error.message,\n      })\n\n      res.status(401).json({\n        error: 'Invalid token',\n        correlationId: req.correlationId,\n      })\n    }\n  }\n\n  /**\n   * Validate tool parameters against schema\n   */\n  validateToolParameters(params, schema) {\n    // Basic schema validation - in production use a proper JSON schema validator\n    if (schema.required) {\n      for (const field of schema.required) {\n        if (!(field in params)) {\n          throw new Error(`Missing required parameter: ${field}`)\n        }\n      }\n    }\n\n    // Type validation for properties\n    if (schema.properties) {\n      for (const [field, fieldSchema] of Object.entries(schema.properties)) {\n        if (field in params) {\n          const value = params[field]\n          const expectedType = fieldSchema.type\n\n          if (expectedType === 'string' && typeof value !== 'string') {\n            throw new Error(`Parameter ${field} must be a string`)\n          }\n          if (expectedType === 'number' && typeof value !== 'number') {\n            throw new Error(`Parameter ${field} must be a number`)\n          }\n          if (expectedType === 'boolean' && typeof value !== 'boolean') {\n            throw new Error(`Parameter ${field} must be a boolean`)\n          }\n          if (expectedType === 'array' && !Array.isArray(value)) {\n            throw new Error(`Parameter ${field} must be an array`)\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Get comprehensive system status\n   */\n  async getSystemStatus(params = {}) {\n    const { includeMetrics = true, includeConnections = true } = params\n\n    try {\n      // Database health check\n      const dbHealth = await this.checkDatabaseHealth()\n\n      const status = {\n        status: dbHealth.connected ? 'healthy' : 'degraded',\n        server: {\n          uptime: Date.now() - this.metrics.uptime,\n          version: SERVER_CONFIG.version,\n          environment: SERVER_CONFIG.environment,\n          memory: {\n            used: Math.round(process.memoryUsage().heapUsed / 1024 / 1024),\n            total: Math.round(process.memoryUsage().heapTotal / 1024 / 1024),\n            external: Math.round(process.memoryUsage().external / 1024 / 1024),\n          },\n          cpu: process.cpuUsage(),\n        },\n        database: dbHealth,\n        tools: {\n          total: this.tools.size,\n          categories: [...new Set(Array.from(this.tools.values()).map(t => t.category))],\n        },\n      }\n\n      if (includeMetrics) {\n        status.metrics = { ...this.metrics }\n      }\n\n      if (includeConnections) {\n        status.connections = {\n          active: this.connections.size,\n          total: this.metrics.requests,\n        }\n      }\n\n      return status\n    } catch (error) {\n      logger.error('System status check failed', { error: error.message })\n      return {\n        status: 'unhealthy',\n        error: error.message,\n        timestamp: new Date().toISOString(),\n      }\n    }\n  }\n\n  /**\n   * Check database connectivity and performance\n   */\n  async checkDatabaseHealth() {\n    try {\n      const startTime = Date.now()\n      const result = await dbPool.query('SELECT NOW(), version()')\n      const latency = Date.now() - startTime\n\n      return {\n        connected: true,\n        latency,\n        timestamp: result.rows[0].now,\n        version: result.rows[0].version,\n        poolSize: dbPool.totalCount,\n        idleConnections: dbPool.idleCount,\n        waitingClients: dbPool.waitingCount,\n      }\n    } catch (error) {\n      return {\n        connected: false,\n        error: error.message,\n        timestamp: new Date().toISOString(),\n      }\n    }\n  }\n\n  /**\n   * Execute read-only database queries\n   */\n  async executeReadOnlyQuery(query, params = []) {\n    // Ensure query is read-only\n    const readOnlyPattern = /^\\s*(SELECT|WITH|EXPLAIN)\\s+/i\n    if (!readOnlyPattern.test(query.trim())) {\n      throw new Error('Only read-only queries are allowed')\n    }\n\n    try {\n      const startTime = Date.now()\n      const result = await dbPool.query(query, params)\n      const executionTime = Date.now() - startTime\n\n      logger.info('Database query executed', {\n        query: query.substring(0, 100),\n        rowCount: result.rowCount,\n        executionTime,\n      })\n\n      return {\n        success: true,\n        rows: result.rows,\n        rowCount: result.rowCount,\n        executionTime,\n        fields: result.fields?.map(f => ({ name: f.name, type: f.dataTypeID })),\n      }\n    } catch (error) {\n      logger.error('Database query failed', {\n        query: query.substring(0, 100),\n        error: error.message,\n      })\n\n      throw new Error(`Database query failed: ${error.message}`)\n    }\n  }\n\n  /**\n   * Update server metrics\n   */\n  updateMetrics(type, duration = 0) {\n    this.metrics.requests++\n\n    if (type === 'error') {\n      this.metrics.errors++\n    } else if (type === 'toolExecution') {\n      this.metrics.toolExecutions++\n    }\n\n    // Update average response time\n    if (duration > 0) {\n      this.metrics.averageResponseTime = (this.metrics.averageResponseTime + duration) / 2\n    }\n  }\n\n  /**\n   * Broadcast events to SSE connections\n   */\n  broadcastEvent(event) {\n    const eventData = JSON.stringify({\n      ...event,\n      timestamp: new Date().toISOString(),\n    })\n\n    for (const [connectionId, res] of this.connections) {\n      try {\n        res.write(`data: ${eventData}\\n\\n`)\n      } catch (error) {\n        logger.warn('Failed to send SSE event', { connectionId, error: error.message })\n        this.connections.delete(connectionId)\n      }\n    }\n  }\n\n  /**\n   * Start the MCP server with dual transport support\n   */\n  async start() {\n    try {\n      // Start HTTP server\n      const httpServer = this.app.listen(SERVER_CONFIG.port, () => {\n        logger.info('MCP Server started', {\n          port: SERVER_CONFIG.port,\n          environment: SERVER_CONFIG.environment,\n          version: SERVER_CONFIG.version,\n          toolsLoaded: this.tools.size,\n        })\n      })\n\n      // Handle graceful shutdown\n      this.setupGracefulShutdown(httpServer)\n\n      // Setup stdio transport for Claude Desktop\n      if (process.env.MCP_TRANSPORT === 'stdio' || !process.env.MCP_TRANSPORT) {\n        const transport = new StdioServerTransport()\n        await this.server.connect(transport)\n        logger.info('MCP stdio transport connected')\n      }\n\n      return httpServer\n    } catch (error) {\n      logger.error('Failed to start MCP server', { error: error.message })\n      throw error\n    }\n  }\n\n  /**\n   * Setup graceful shutdown handling\n   */\n  setupGracefulShutdown(httpServer) {\n    const shutdown = async signal => {\n      logger.info('Graceful shutdown initiated', { signal })\n\n      // Close HTTP server\n      httpServer.close(() => {\n        logger.info('HTTP server closed')\n      })\n\n      // Close database connections\n      await dbPool.end()\n      logger.info('Database connections closed')\n\n      // Close all SSE connections\n      for (const [connectionId, res] of this.connections) {\n        try {\n          res.end()\n        } catch (error) {\n          logger.warn('Error closing SSE connection', { connectionId })\n        }\n      }\n      this.connections.clear()\n\n      logger.info('Graceful shutdown completed')\n      process.exit(0)\n    }\n\n    process.on('SIGTERM', () => shutdown('SIGTERM'))\n    process.on('SIGINT', () => shutdown('SIGINT'))\n\n    // Handle uncaught exceptions\n    process.on('uncaughtException', error => {\n      logger.error('Uncaught exception', { error: error.message, stack: error.stack })\n      shutdown('uncaughtException')\n    })\n\n    process.on('unhandledRejection', (reason, promise) => {\n      logger.error('Unhandled rejection', { reason, promise })\n      shutdown('unhandledRejection')\n    })\n  }\n}\n\n// Export the server class for testing and extension\nexport { SentiaMCPServer }\n\n// Start the server if this file is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  const server = new SentiaMCPServer()\n  server.start().catch(error => {\n    logger.error('Server startup failed', { error: error.message })\n    process.exit(1)\n  })\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\APIIntegration.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\DemandForecastingEngine.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\FinancialAlgorithms.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\WorkingCapitalEngine.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\ai\\aiInferenceService.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\api.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\api\\analyticsApi.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\api\\apiClient.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\api\\baseApi.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\api\\baseApi.old.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\api\\dashboardApi.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'timeRange' is assigned a value but never used.",
        "line": 147,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 147,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "timeRange" },
            "fix": { "range": [3217, 3234], "text": "" },
            "desc": "Remove unused variable 'timeRange'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { api } from './baseApi'\n\n/**\n * Dashboard API Service\n * Handles all dashboard-related API calls - Updated to match actual backend endpoints\n */\nclass DashboardApi {\n  /**\n   * Get comprehensive dashboard summary data\n   */\n  async getSummary() {\n    try {\n      return await api.get('/dashboard/summary')\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to fetch summary:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get working capital data\n   */\n  async getWorkingCapital() {\n    try {\n      return await api.get('/financial/working-capital')\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to fetch working capital:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get cash flow data\n   */\n  async getCashFlow() {\n    try {\n      return await api.get('/financial/cash-flow')\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to fetch cash flow:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get enhanced forecasting data\n   */\n  async getForecasting() {\n    try {\n      return await api.get('/forecasting/enhanced')\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to fetch forecasting:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get working capital overview (detailed)\n   */\n  async getWorkingCapitalOverview() {\n    try {\n      return await api.get('/working-capital/overview')\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to fetch working capital overview:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get production jobs data\n   */\n  async getProductionJobs() {\n    try {\n      return await api.get('/production/jobs')\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to fetch production jobs:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get quality metrics\n   */\n  async getQualityMetrics() {\n    try {\n      return await api.get('/quality/metrics')\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to fetch quality metrics:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get inventory levels\n   */\n  async getInventoryLevels() {\n    try {\n      return await api.get('/inventory/levels')\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to fetch inventory levels:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get demand forecasting data\n   */\n  async getDemandForecast() {\n    try {\n      return await api.get('/forecasting/demand')\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to fetch demand forecast:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get analytics KPIs\n   */\n  async getAnalyticsKPIs() {\n    try {\n      return await api.get('/analytics/kpis')\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to fetch analytics KPIs:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Get units sold data\n   */\n  async getUnitsSold(timeRange = 'quarter') {\n    try {\n      return await api.get(`/production/units-sold`, { params: { timeRange } })\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to fetch units sold:', error)\n      throw error\n    }\n  }\n\n  /**\n   * Legacy methods for backward compatibility\n   */\n  async getMetrics() {\n    return this.getSummary()\n  }\n\n  async getKPIs(timeRange = '30d') {\n    return this.getAnalyticsKPIs()\n  }\n\n  async getRealtimeStatus() {\n    return this.getSummary()\n  }\n\n  async getWidgetData(widgetId) {\n    // Route to appropriate API based on widget type\n    switch (widgetId) {\n      case 'working-capital':\n        return this.getWorkingCapital()\n      case 'production':\n        return this.getProductionJobs()\n      case 'quality':\n        return this.getQualityMetrics()\n      case 'inventory':\n        return this.getInventoryLevels()\n      case 'forecasting':\n        return this.getForecasting()\n      default:\n        return this.getSummary()\n    }\n  }\n\n  async saveLayout(layout) {\n    try {\n      return await api.post('/dashboard/layout', { layout })\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to save layout:', error)\n      // Fallback to localStorage\n      localStorage.setItem('dashboard-layout', JSON.stringify(layout))\n      return { success: true, source: 'localStorage' }\n    }\n  }\n\n  async getLayout() {\n    try {\n      return await api.get('/dashboard/layout')\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to get layout:', error)\n      // Fallback to localStorage\n      const layout = localStorage.getItem('dashboard-layout')\n      return layout ? JSON.parse(layout) : null\n    }\n  }\n\n  async exportData(format = 'json') {\n    try {\n      return await api.get('/dashboard/export', { format })\n    } catch (error) {\n      console.error('[DashboardAPI] Failed to export data:', error)\n      throw error\n    }\n  }\n}\n\nexport const dashboardApi = new DashboardApi()\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\api\\forecastingApi.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\api\\plAnalysisApi.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\api\\productSalesApi.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\api\\regionalPerformanceApi.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\api\\stockLevelsApi.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\api\\workingCapitalApi.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\dashboardService.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\logger\\enterprise-logger.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\mcpClient.js",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 98,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 98,
        "endColumn": 31
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 99,
        "column": 60,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 99,
        "endColumn": 67
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'callback' is defined but never used.",
        "line": 348,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 348,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "callback" },
            "fix": { "range": [9543, 9551], "text": "()" },
            "desc": "Remove unused variable 'callback'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * MCP Client for Dashboard Integration\n *\n * Provides a client library for secure communication with the MCP server\n * from the dashboard application. Handles authentication, request/response\n * processing, and error handling.\n *\n * Features:\n * - Environment-aware server URLs\n * - JWT token management\n * - Automatic retry with exponential backoff\n * - Request/response logging\n * - Real-time data streaming\n * - Tool execution interface\n */\n\nimport axios from 'axios'\nimport { getMCPConfig } from '../../config/database-config.js'\n\nclass MCPClient {\n  constructor() {\n    this.config = getMCPConfig()\n    this.baseURL = this.config.url\n    this.token = null\n    this.tokenExpiry = null\n    this.isAuthenticated = false\n\n    // Create axios instance with default config\n    this.client = axios.create({\n      baseURL: this.baseURL,\n      timeout: this.config.timeout || 30000,\n      headers: {\n        'Content-Type': 'application/json',\n        'User-Agent': 'Sentia-Dashboard/3.0.0',\n      },\n    })\n\n    // Add request interceptor for authentication\n    this.client.interceptors.request.use(\n      async config => {\n        await this.ensureAuthenticated()\n        if (this.token) {\n          config.headers.Authorization = `Bearer ${this.token}`\n        }\n        return config\n      },\n      error => {\n        console.error('MCP request interceptor error:', error)\n        return Promise.reject(error)\n      }\n    )\n\n    // Add response interceptor for error handling\n    this.client.interceptors.response.use(\n      response => response,\n      async error => {\n        if (error.response?.status === 401) {\n          // Token expired, clear and retry\n          this.clearAuthentication()\n          if (!error.config._retry) {\n            error.config._retry = true\n            await this.ensureAuthenticated()\n            error.config.headers.Authorization = `Bearer ${this.token}`\n            return this.client.request(error.config)\n          }\n        }\n        return Promise.reject(error)\n      }\n    )\n\n    console.log('MCPClient initialized', {\n      baseURL: this.baseURL,\n      environment: this.config.environment,\n    })\n  }\n\n  /**\n   * Ensure we have a valid authentication token\n   */\n  async ensureAuthenticated() {\n    if (this.isAuthenticated && this.token && this.tokenExpiry > Date.now()) {\n      return // Token is still valid\n    }\n\n    try {\n      await this.authenticate()\n    } catch (error) {\n      console.error('MCP authentication failed:', error)\n      throw new Error('Failed to authenticate with MCP server')\n    }\n  }\n\n  /**\n   * Authenticate with the MCP server\n   */\n  async authenticate() {\n    try {\n      const clientId = process.env.MCP_CLIENT_ID || 'sentia-dashboard'\n      const clientSecret = this.config.auth?.jwt_secret || process.env.MCP_JWT_SECRET\n\n      if (!clientSecret) {\n        throw new Error('MCP JWT secret not configured')\n      }\n\n      const response = await axios.post(`${this.baseURL}/api/dashboard/auth/token`, {\n        clientId,\n        clientSecret,\n        environment: this.config.environment,\n      })\n\n      if (response.data.access_token) {\n        this.token = response.data.access_token\n        this.tokenExpiry = Date.now() + response.data.expires_in * 1000\n        this.isAuthenticated = true\n\n        console.log('MCP authentication successful', {\n          environment: this.config.environment,\n          expiresIn: response.data.expires_in,\n        })\n      } else {\n        throw new Error('No access token received')\n      }\n    } catch (error) {\n      console.error('MCP authentication error:', error.response?.data || error.message)\n      this.clearAuthentication()\n      throw error\n    }\n  }\n\n  /**\n   * Clear authentication state\n   */\n  clearAuthentication() {\n    this.token = null\n    this.tokenExpiry = null\n    this.isAuthenticated = false\n  }\n\n  /**\n   * Check MCP server health\n   */\n  async getHealth() {\n    try {\n      const response = await axios.get(`${this.baseURL}/api/dashboard/health`)\n      return response.data\n    } catch (error) {\n      console.error('MCP health check failed:', error)\n      return {\n        status: 'error',\n        error: error.message,\n        timestamp: new Date().toISOString(),\n      }\n    }\n  }\n\n  /**\n   * Get MCP server status and capabilities\n   */\n  async getStatus() {\n    try {\n      const response = await this.client.get('/api/dashboard/status')\n      return response.data\n    } catch (error) {\n      console.error('Failed to get MCP status:', error)\n      throw this.handleError(error, 'Failed to retrieve MCP server status')\n    }\n  }\n\n  /**\n   * Get available tools\n   */\n  async getTools() {\n    try {\n      const response = await this.client.get('/api/dashboard/tools')\n      return response.data\n    } catch (error) {\n      console.error('Failed to get MCP tools:', error)\n      throw this.handleError(error, 'Failed to retrieve available tools')\n    }\n  }\n\n  /**\n   * Execute a tool\n   */\n  async executeTool(toolName, args = {}, options = {}) {\n    try {\n      const response = await this.client.post('/api/dashboard/tools/execute', {\n        tool: toolName,\n        arguments: args,\n        options,\n      })\n\n      console.log('Tool executed successfully', {\n        tool: toolName,\n        requestId: response.data.requestId,\n        executionTime: response.data.executionTime,\n      })\n\n      return response.data\n    } catch (error) {\n      console.error('Tool execution failed:', error)\n      throw this.handleError(error, `Failed to execute tool: ${toolName}`)\n    }\n  }\n\n  /**\n   * Get real-time dashboard data\n   */\n  async getRealtimeData(metrics = [], timeframe = '24h') {\n    try {\n      const response = await this.client.get('/api/dashboard/data/realtime', {\n        params: { metrics: metrics.join(','), timeframe },\n      })\n      return response.data\n    } catch (error) {\n      console.error('Failed to get realtime data:', error)\n      throw this.handleError(error, 'Failed to retrieve real-time data')\n    }\n  }\n\n  /**\n   * Trigger data synchronization\n   */\n  async triggerSync(services = [], syncType = 'incremental', force = false) {\n    try {\n      const response = await this.client.post('/api/dashboard/sync/trigger', {\n        services,\n        syncType,\n        force,\n      })\n\n      console.log('Data sync triggered', {\n        syncId: response.data.syncId,\n        services,\n        syncType,\n      })\n\n      return response.data\n    } catch (error) {\n      console.error('Failed to trigger sync:', error)\n      throw this.handleError(error, 'Failed to trigger data synchronization')\n    }\n  }\n\n  /**\n   * Get synchronization status\n   */\n  async getSyncStatus(syncId = null) {\n    try {\n      const url = syncId ? `/api/dashboard/sync/status/${syncId}` : '/api/dashboard/sync/status'\n\n      const response = await this.client.get(url)\n      return response.data\n    } catch (error) {\n      console.error('Failed to get sync status:', error)\n      throw this.handleError(error, 'Failed to retrieve synchronization status')\n    }\n  }\n\n  /**\n   * Specific tool execution methods\n   */\n\n  // Xero tools\n  async getXeroContacts(options = {}) {\n    return this.executeTool('xero_get_contacts', options)\n  }\n\n  async getXeroInvoices(options = {}) {\n    return this.executeTool('xero_get_invoices', options)\n  }\n\n  async getXeroBankTransactions(options = {}) {\n    return this.executeTool('xero_get_bank_transactions', options)\n  }\n\n  // Shopify tools\n  async getShopifyOrders(region = 'uk', options = {}) {\n    return this.executeTool('shopify_get_orders', { region, ...options })\n  }\n\n  async getShopifyProducts(region = 'uk', options = {}) {\n    return this.executeTool('shopify_get_products', { region, ...options })\n  }\n\n  async getShopifyInventory(region = 'uk', options = {}) {\n    return this.executeTool('shopify_get_inventory', { region, ...options })\n  }\n\n  // Amazon tools\n  async getAmazonOrders(region = 'uk', options = {}) {\n    return this.executeTool('amazon_get_orders', { region, ...options })\n  }\n\n  async getAmazonInventory(region = 'uk', options = {}) {\n    return this.executeTool('amazon_get_inventory', { region, ...options })\n  }\n\n  // Unleashed tools\n  async getUnleashedProducts(options = {}) {\n    return this.executeTool('unleashed_get_products', options)\n  }\n\n  async getUnleashedInventory(options = {}) {\n    return this.executeTool('unleashed_get_inventory', options)\n  }\n\n  async getUnleashedSalesOrders(options = {}) {\n    return this.executeTool('unleashed_get_sales_orders', options)\n  }\n\n  // Analytics tools\n  async analyzeWorkingCapital(timeframe = '90d', includeProjections = true) {\n    return this.executeTool('analyze_working_capital', {\n      timeframe,\n      includeProjections,\n    })\n  }\n\n  async forecastDemand(productSKU, horizon = 30, method = 'hybrid') {\n    return this.executeTool('forecast_demand', {\n      productSKU,\n      horizon,\n      method,\n    })\n  }\n\n  async optimizeInventory(warehouse = null, includeRecommendations = true) {\n    return this.executeTool('optimize_inventory', {\n      warehouse,\n      includeRecommendations,\n    })\n  }\n\n  /**\n   * Real-time data streaming (WebSocket)\n   */\n  establishRealtimeConnection() {\n    // TODO: Implement WebSocket connection for real-time updates\n    const wsUrl = this.baseURL.replace('http', 'ws') + '/api/dashboard/stream'\n\n    console.log('Establishing real-time connection:', wsUrl)\n\n    // This would establish a WebSocket connection for real-time updates\n    // Implementation depends on the specific WebSocket setup\n\n    return {\n      subscribe: callback => {\n        console.log('Subscribing to real-time updates')\n        // TODO: Implement subscription logic\n      },\n      unsubscribe: () => {\n        console.log('Unsubscribing from real-time updates')\n        // TODO: Implement unsubscription logic\n      },\n    }\n  }\n\n  /**\n   * Error handling utility\n   */\n  handleError(error, defaultMessage) {\n    if (error.response) {\n      // Server responded with error status\n      const { status, data } = error.response\n      return new Error(data.error || data.message || `HTTP ${status}: ${defaultMessage}`)\n    } else if (error.request) {\n      // Request was made but no response received\n      return new Error('No response from MCP server - check connectivity')\n    } else {\n      // Something else happened\n      return new Error(error.message || defaultMessage)\n    }\n  }\n\n  /**\n   * Utility methods\n   */\n  isConnected() {\n    return this.isAuthenticated && this.token && this.tokenExpiry > Date.now()\n  }\n\n  getConnectionInfo() {\n    return {\n      baseURL: this.baseURL,\n      environment: this.config.environment,\n      authenticated: this.isAuthenticated,\n      tokenExpiry: this.tokenExpiry ? new Date(this.tokenExpiry).toISOString() : null,\n    }\n  }\n}\n\n// Singleton instance\nlet mcpClient = null\n\n/**\n * Get or create MCP client instance\n */\nexport function getMCPClient() {\n  if (!mcpClient) {\n    mcpClient = new MCPClient()\n  }\n  return mcpClient\n}\n\n/**\n * Initialize MCP client with custom config\n */\nexport function initializeMCPClient(config = {}) {\n  mcpClient = new MCPClient(config)\n  return mcpClient\n}\n\n/**\n * Check if MCP client is available\n */\nexport function isMCPAvailable() {\n  try {\n    const client = getMCPClient()\n    return client.isConnected()\n  } catch (error) {\n    console.error('MCP availability check failed:', error)\n    return false\n  }\n}\n\nexport default MCPClient\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\monitoring\\healthMonitor.test.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\pdfService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'col3Width' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 333,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 333,
        "endColumn": 18
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'col4Width' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 376,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 376,
        "endColumn": 18
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'col4Width' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 420,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 420,
        "endColumn": 18
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 471,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 471,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import jsPDF from 'jspdf'\nimport { format } from 'date-fns'\n\n/**\n * Generate and download a PDF report\n * @param {Object} reportData - Complete report data\n */\nexport const generatePDF = async reportData => {\n  try {\n    const pdf = new jsPDF('p', 'mm', 'a4')\n    const pageWidth = pdf.internal.pageSize.getWidth()\n    const pageHeight = pdf.internal.pageSize.getHeight()\n    const margin = 20\n    const contentWidth = pageWidth - margin * 2\n    let currentY = margin\n\n    // Company branding and header\n    addHeader(pdf, pageWidth, margin)\n    currentY += 30\n\n    // Report title and metadata\n    pdf.setFontSize(24)\n    pdf.setFont(undefined, 'bold')\n    pdf.text('Manufacturing Dashboard Report', margin, currentY)\n    currentY += 15\n\n    pdf.setFontSize(12)\n    pdf.setFont(undefined, 'normal')\n    pdf.setTextColor(100, 100, 100)\n    pdf.text(`Generated: ${format(new Date(), \"MMMM d, yyyy 'at' h:mm a\")}`, margin, currentY)\n    currentY += 8\n    pdf.text(`Report Period: ${reportData.metadata.reportPeriod.formatted}`, margin, currentY)\n    currentY += 20\n\n    // Executive Summary\n    if (reportData.executiveSummary) {\n      currentY = addExecutiveSummary(\n        pdf,\n        reportData.executiveSummary,\n        margin,\n        currentY,\n        contentWidth,\n        pageHeight\n      )\n    }\n\n    // Add each selected section\n    for (const [, sectionData] of Object.entries(reportData.sections)) {\n      // Check if we need a new page before starting section\n      const estimatedSectionHeight = 80 // Estimate section header + some content\n      if (currentY + estimatedSectionHeight > pageHeight - 40) {\n        pdf.addPage()\n        addHeader(pdf, pageWidth, margin)\n        currentY = margin + 30\n      }\n\n      currentY = addSection(pdf, sectionData, margin, currentY, contentWidth, pageHeight)\n      currentY += 15\n    }\n\n    // Footer\n    addFooter(pdf, pageWidth, pageHeight, margin)\n\n    // Generate filename with timestamp\n    const timestamp = format(new Date(), 'yyyy-MM-dd_HH-mm')\n    const filename = `Sentia_Manufacturing_Report_${timestamp}.pdf`\n\n    // Save the PDF\n    pdf.save(filename)\n\n    return { success: true, filename }\n  } catch (error) {\n    console.error('Error generating PDF:', error)\n    throw new Error(`Failed to generate PDF: ${error.message}`)\n  }\n}\n\n/**\n * Add company header to PDF\n */\nconst addHeader = (pdf, pageWidth, margin) => {\n  // Company logo area (placeholder)\n  pdf.setFillColor(59, 130, 246) // Blue color\n  pdf.roundedRect(margin, margin, 30, 15, 2, 2, 'F')\n\n  // Company logo text\n  pdf.setFontSize(14)\n  pdf.setFont(undefined, 'bold')\n  pdf.setTextColor(255, 255, 255)\n  pdf.text('S', margin + 12, margin + 10)\n\n  // Company name\n  pdf.setFontSize(16)\n  pdf.setFont(undefined, 'bold')\n  pdf.setTextColor(0, 0, 0)\n  pdf.text('Sentia Manufacturing', margin + 35, margin + 8)\n\n  pdf.setFontSize(12)\n  pdf.setFont(undefined, 'normal')\n  pdf.setTextColor(100, 100, 100)\n  pdf.text('Enterprise Manufacturing Intelligence', margin + 35, margin + 16)\n\n  // Horizontal line\n  pdf.setDrawColor(200, 200, 200)\n  pdf.line(margin, margin + 25, pageWidth - margin, margin + 25)\n}\n\n/**\n * Add executive summary section\n */\nconst addExecutiveSummary = (pdf, summary, margin, startY, contentWidth, pageHeight) => {\n  let currentY = startY\n\n  // Section header\n  pdf.setFontSize(18)\n  pdf.setFont(undefined, 'bold')\n  pdf.setTextColor(0, 0, 0)\n  pdf.text('Executive Summary', margin, currentY)\n  currentY += 12\n\n  // Status\n  pdf.setFontSize(12)\n  pdf.setFont(undefined, 'bold')\n  pdf.text('Status:', margin, currentY)\n  pdf.setFont(undefined, 'normal')\n  pdf.text(summary.status, margin + 20, currentY)\n  currentY += 10\n\n  // Report Period\n  pdf.setFont(undefined, 'bold')\n  pdf.text('Period:', margin, currentY)\n  pdf.setFont(undefined, 'normal')\n  pdf.text(summary.reportPeriod, margin + 20, currentY)\n  currentY += 15\n\n  // Key Insights\n  if (summary.keyInsights && summary.keyInsights.length > 0) {\n    pdf.setFont(undefined, 'bold')\n    pdf.text('Key Insights:', margin, currentY)\n    currentY += 8\n\n    pdf.setFont(undefined, 'normal')\n    summary.keyInsights.forEach(insight => {\n      const lines = pdf.splitTextToSize(`• ${insight}`, contentWidth - 10)\n      lines.forEach(line => {\n        if (currentY > pageHeight - 30) {\n          pdf.addPage()\n          addHeader(pdf, pdf.internal.pageSize.getWidth(), margin)\n          currentY = margin + 40\n        }\n        pdf.text(line, margin + 5, currentY)\n        currentY += 6\n      })\n      currentY += 2\n    })\n  }\n\n  // Recommendation\n  if (summary.recommendation) {\n    currentY += 5\n    pdf.setFont(undefined, 'bold')\n    pdf.text('Recommendation:', margin, currentY)\n    currentY += 8\n\n    pdf.setFont(undefined, 'normal')\n    const recLines = pdf.splitTextToSize(summary.recommendation, contentWidth)\n    recLines.forEach(line => {\n      if (currentY > pageHeight - 30) {\n        pdf.addPage()\n        addHeader(pdf, pdf.internal.pageSize.getWidth(), margin)\n        currentY = margin + 40\n      }\n      pdf.text(line, margin, currentY)\n      currentY += 6\n    })\n  }\n\n  return currentY + 20\n}\n\n/**\n * Add a data section to the PDF\n */\nconst addSection = (pdf, sectionData, margin, startY, contentWidth, pageHeight) => {\n  let currentY = startY\n\n  // Section header\n  pdf.setFontSize(16)\n  pdf.setFont(undefined, 'bold')\n  pdf.setTextColor(0, 0, 0)\n  pdf.text(sectionData.title, margin, currentY)\n  currentY += 10\n\n  // Section description\n  if (sectionData.description) {\n    pdf.setFontSize(11)\n    pdf.setFont(undefined, 'normal')\n    pdf.setTextColor(100, 100, 100)\n    const descLines = pdf.splitTextToSize(sectionData.description, contentWidth)\n    descLines.forEach(line => {\n      pdf.text(line, margin, currentY)\n      currentY += 6\n    })\n    currentY += 10\n  }\n\n  // Add section data based on type\n  if (sectionData.data && Array.isArray(sectionData.data)) {\n    // Check if we have enough space for the table, if not break to new page\n    if (currentY > pageHeight - 120) {\n      pdf.addPage()\n      addHeader(pdf, pdf.internal.pageSize.getWidth(), margin)\n      currentY = margin + 30\n\n      // Re-add section header on new page\n      pdf.setFontSize(16)\n      pdf.setFont(undefined, 'bold')\n      pdf.setTextColor(0, 0, 0)\n      pdf.text(sectionData.title, margin, currentY)\n      currentY += 15\n    }\n\n    if (sectionData.title === 'Capital Position' || sectionData.title === 'Performance Metrics') {\n      // KPI format\n      currentY = addKPITable(pdf, sectionData.data, margin, currentY, contentWidth)\n    } else if (sectionData.title === 'Regional Performance') {\n      // Regional table format\n      currentY = addRegionalTable(pdf, sectionData.data, margin, currentY, contentWidth)\n    } else if (sectionData.title === 'P&L Analysis') {\n      // P&L table format\n      currentY = addPLTable(pdf, sectionData.data, margin, currentY, contentWidth)\n    } else if (sectionData.title === 'Product Sales Performance') {\n      // Product Sales table format\n      currentY = addProductSalesTable(pdf, sectionData.data, margin, currentY, contentWidth)\n    } else {\n      // Generic data format\n      currentY = addGenericTable(pdf, sectionData.data, margin, currentY, contentWidth)\n    }\n  }\n\n  // Add summary if available\n  if (sectionData.summary && typeof sectionData.summary === 'object') {\n    // Check if summary box fits, if not move to new page\n    if (currentY > pageHeight - 60) {\n      pdf.addPage()\n      addHeader(pdf, pdf.internal.pageSize.getWidth(), margin)\n      currentY = margin + 30\n    }\n    currentY += 10\n    currentY = addSummaryBox(pdf, sectionData.summary, margin, currentY, contentWidth)\n  }\n\n  return currentY\n}\n\n/**\n * Add KPI table\n */\nconst addKPITable = (pdf, data, margin, startY, contentWidth) => {\n  let currentY = startY\n  const baseRowHeight = 12\n  const headerHeight = 15\n  const col1Width = contentWidth * 0.4 // 40% for metric name\n  const col2Width = contentWidth * 0.25 // 25% for value\n  const col3Width = contentWidth * 0.35 // 35% for description\n\n  // Table header\n  pdf.setFillColor(245, 245, 245)\n  pdf.rect(margin, currentY, contentWidth, headerHeight, 'F')\n  pdf.setFontSize(11)\n  pdf.setFont(undefined, 'bold')\n  pdf.text('Metric', margin + 5, currentY + 10)\n  pdf.text('Value', margin + col1Width + 5, currentY + 10)\n  pdf.text('Description', margin + col1Width + col2Width + 5, currentY + 10)\n  currentY += headerHeight\n\n  // Table rows\n  pdf.setFont(undefined, 'normal')\n  data.forEach((item, index) => {\n    // Calculate required height for this row\n    const metricText = pdf.splitTextToSize(item.label, col1Width - 10)\n    const helperText = pdf.splitTextToSize(item.helper || '', col3Width - 10)\n    const rowHeight = Math.max(\n      baseRowHeight,\n      Math.max(metricText.length, helperText.length) * 6 + 6\n    )\n\n    // Check if row fits on current page\n    const pageHeight = pdf.internal.pageSize.getHeight()\n    if (currentY + rowHeight > pageHeight - 30) {\n      pdf.addPage()\n      addHeader(pdf, pdf.internal.pageSize.getWidth(), margin)\n      currentY = margin + 30\n\n      // Re-add table header\n      pdf.setFillColor(245, 245, 245)\n      pdf.rect(margin, currentY, contentWidth, headerHeight, 'F')\n      pdf.setFontSize(11)\n      pdf.setFont(undefined, 'bold')\n      pdf.text('Metric', margin + 5, currentY + 10)\n      pdf.text('Value', margin + col1Width + 5, currentY + 10)\n      pdf.text('Description', margin + col1Width + col2Width + 5, currentY + 10)\n      currentY += headerHeight\n      pdf.setFont(undefined, 'normal')\n    }\n\n    if (index % 2 === 0) {\n      pdf.setFillColor(250, 250, 250)\n      pdf.rect(margin, currentY, contentWidth, rowHeight, 'F')\n    }\n\n    // Draw text with proper wrapping\n    pdf.text(metricText, margin + 5, currentY + 8)\n    pdf.setFont(undefined, 'bold')\n    pdf.text(item.value, margin + col1Width + 5, currentY + 8)\n    pdf.setFont(undefined, 'normal')\n    pdf.text(helperText, margin + col1Width + col2Width + 5, currentY + 8)\n    currentY += rowHeight\n  })\n\n  return currentY\n}\n\n/**\n * Add regional performance table\n */\nconst addRegionalTable = (pdf, data, margin, startY, contentWidth) => {\n  let currentY = startY\n  const rowHeight = 12\n  const headerHeight = 15\n  const col1Width = contentWidth * 0.33 // 33% for region\n  const col2Width = contentWidth * 0.33 // 33% for revenue\n  const col3Width = contentWidth * 0.34 // 34% for EBITDA\n\n  // Table header\n  pdf.setFillColor(245, 245, 245)\n  pdf.rect(margin, currentY, contentWidth, headerHeight, 'F')\n  pdf.setFontSize(11)\n  pdf.setFont(undefined, 'bold')\n  pdf.text('Region', margin + 5, currentY + 10)\n  pdf.text('Revenue', margin + col1Width + 5, currentY + 10)\n  pdf.text('EBITDA', margin + col1Width + col2Width + 5, currentY + 10)\n  currentY += headerHeight\n\n  // Table rows\n  pdf.setFont(undefined, 'normal')\n  data.forEach((item, index) => {\n    if (index % 2 === 0) {\n      pdf.setFillColor(250, 250, 250)\n      pdf.rect(margin, currentY, contentWidth, rowHeight, 'F')\n    }\n\n    pdf.text(item.region, margin + 5, currentY + 8)\n    pdf.text(`$${(item.revenue / 1000000).toFixed(1)}M`, margin + col1Width + 5, currentY + 8)\n    pdf.text(\n      `$${(item.ebitda / 1000000).toFixed(1)}M`,\n      margin + col1Width + col2Width + 5,\n      currentY + 8\n    )\n    currentY += rowHeight\n  })\n\n  return currentY\n}\n\n/**\n * Add P&L table\n */\nconst addPLTable = (pdf, data, margin, startY, contentWidth) => {\n  let currentY = startY\n  const rowHeight = 10\n  const headerHeight = 12\n  const col1Width = contentWidth * 0.25 // 25% for month\n  const col2Width = contentWidth * 0.25 // 25% for revenue\n  const col3Width = contentWidth * 0.25 // 25% for gross profit\n  const col4Width = contentWidth * 0.25 // 25% for EBITDA\n\n  // Show only last 6 months for space\n  const recentData = data.slice(-6)\n\n  // Table header\n  pdf.setFillColor(245, 245, 245)\n  pdf.rect(margin, currentY, contentWidth, headerHeight, 'F')\n  pdf.setFontSize(10)\n  pdf.setFont(undefined, 'bold')\n  pdf.text('Month', margin + 5, currentY + 8)\n  pdf.text('Revenue', margin + col1Width + 5, currentY + 8)\n  pdf.text('Gross Profit', margin + col1Width + col2Width + 5, currentY + 8)\n  pdf.text('EBITDA', margin + col1Width + col2Width + col3Width + 5, currentY + 8)\n  currentY += headerHeight\n\n  // Table rows\n  pdf.setFont(undefined, 'normal')\n  recentData.forEach((item, index) => {\n    if (index % 2 === 0) {\n      pdf.setFillColor(250, 250, 250)\n      pdf.rect(margin, currentY, contentWidth, rowHeight, 'F')\n    }\n\n    pdf.text(item.month, margin + 5, currentY + 7)\n    pdf.text(`$${item.revenue}K`, margin + col1Width + 5, currentY + 7)\n    pdf.text(`$${item.grossProfit}K`, margin + col1Width + col2Width + 5, currentY + 7)\n    pdf.text(`$${item.ebitda}K`, margin + col1Width + col2Width + col3Width + 5, currentY + 7)\n    currentY += rowHeight\n  })\n\n  return currentY\n}\n\n/**\n * Add product sales performance table\n */\nconst addProductSalesTable = (pdf, data, margin, startY, contentWidth) => {\n  let currentY = startY\n  const rowHeight = 12\n  const headerHeight = 15\n  const col1Width = contentWidth * 0.25 // 25% for product name\n  const col2Width = contentWidth * 0.25 // 25% for revenue\n  const col3Width = contentWidth * 0.25 // 25% for units\n  const col4Width = contentWidth * 0.25 // 25% for growth/market share\n\n  // Table header\n  pdf.setFillColor(245, 245, 245)\n  pdf.rect(margin, currentY, contentWidth, headerHeight, 'F')\n  pdf.setFontSize(11)\n  pdf.setFont(undefined, 'bold')\n  pdf.text('Product', margin + 5, currentY + 10)\n  pdf.text('Revenue', margin + col1Width + 5, currentY + 10)\n  pdf.text('Units Sold', margin + col1Width + col2Width + 5, currentY + 10)\n  pdf.text('Growth Rate', margin + col1Width + col2Width + col3Width + 5, currentY + 10)\n  currentY += headerHeight\n\n  // Table rows\n  pdf.setFont(undefined, 'normal')\n  data.forEach((item, index) => {\n    // Check if row fits on current page\n    const pageHeight = pdf.internal.pageSize.getHeight()\n    if (currentY + rowHeight > pageHeight - 30) {\n      pdf.addPage()\n      addHeader(pdf, pdf.internal.pageSize.getWidth(), margin)\n      currentY = margin + 30\n\n      // Re-add table header\n      pdf.setFillColor(245, 245, 245)\n      pdf.rect(margin, currentY, contentWidth, headerHeight, 'F')\n      pdf.setFontSize(11)\n      pdf.setFont(undefined, 'bold')\n      pdf.text('Product', margin + 5, currentY + 10)\n      pdf.text('Revenue', margin + col1Width + 5, currentY + 10)\n      pdf.text('Units Sold', margin + col1Width + col2Width + 5, currentY + 10)\n      pdf.text('Growth Rate', margin + col1Width + col2Width + col3Width + 5, currentY + 10)\n      currentY += headerHeight\n      pdf.setFont(undefined, 'normal')\n    }\n\n    if (index % 2 === 0) {\n      pdf.setFillColor(250, 250, 250)\n      pdf.rect(margin, currentY, contentWidth, rowHeight, 'F')\n    }\n\n    // Extract data from item (handle both object and JSON string formats)\n    let product, revenue, units, growthRate\n\n    if (typeof item === 'string') {\n      try {\n        const parsedItem = JSON.parse(item)\n        product = parsedItem.product || 'N/A'\n        revenue = parsedItem.revenue || 0\n        units = parsedItem.units || 0\n        growthRate = parsedItem.growthRate || 0\n      } catch (e) {\n        product = 'Invalid Data'\n        revenue = 0\n        units = 0\n        growthRate = 0\n      }\n    } else if (typeof item === 'object') {\n      product = item.product || item.name || 'N/A'\n      revenue = item.revenue || item.sales || 0\n      units = item.units || item.unitsSold || 0\n      growthRate = item.growthRate || item.growth || 0\n    } else {\n      product = String(item)\n      revenue = 0\n      units = 0\n      growthRate = 0\n    }\n\n    // Format the data\n    const formattedRevenue =\n      revenue >= 1000000 ? `$${(revenue / 1000000).toFixed(1)}M` : `$${Math.round(revenue / 1000)}K`\n    const formattedUnits = units >= 1000 ? `${Math.round(units / 1000)}K` : `${units}`\n    const formattedGrowth = `${Number(growthRate).toFixed(1)}%`\n\n    pdf.text(product, margin + 5, currentY + 8)\n    pdf.text(formattedRevenue, margin + col1Width + 5, currentY + 8)\n    pdf.text(formattedUnits, margin + col1Width + col2Width + 5, currentY + 8)\n    pdf.text(formattedGrowth, margin + col1Width + col2Width + col3Width + 5, currentY + 8)\n    currentY += rowHeight\n  })\n\n  return currentY\n}\n\n/**\n * Add generic table for other data types\n */\nconst addGenericTable = (pdf, data, margin, startY, contentWidth) => {\n  let currentY = startY\n\n  // Simple list format for generic data\n  pdf.setFontSize(11)\n  pdf.setFont(undefined, 'normal')\n\n  data.forEach(item => {\n    const text = typeof item === 'object' ? JSON.stringify(item) : String(item)\n    const lines = pdf.splitTextToSize(`• ${text}`, contentWidth)\n    lines.forEach(line => {\n      pdf.text(line, margin + 5, currentY)\n      currentY += 6\n    })\n    currentY += 2\n  })\n\n  return currentY\n}\n\n/**\n * Add summary box\n */\nconst addSummaryBox = (pdf, summary, margin, startY, contentWidth) => {\n  // Check if summary exists and has content\n  if (!summary || typeof summary !== 'object') {\n    return startY\n  }\n\n  let currentY = startY\n  let contentHeight = 0\n\n  // Calculate required height based on content\n  pdf.setFontSize(10)\n  let summaryLines = []\n\n  if (summary.status) {\n    summaryLines.push(`Status: ${summary.status}`)\n  }\n  if (summary.keyInsight) {\n    const insightLines = pdf.splitTextToSize(summary.keyInsight, contentWidth - 10)\n    summaryLines = summaryLines.concat(insightLines)\n  }\n\n  // Additional summary fields\n  if (summary.totalRevenue) {\n    summaryLines.push(`Total Revenue: ${summary.totalRevenue}`)\n  }\n  if (summary.avgGrossMargin) {\n    summaryLines.push(`Average Gross Margin: ${summary.avgGrossMargin}`)\n  }\n  if (summary.bestMonth) {\n    summaryLines.push(`Best performing month: ${summary.bestMonth}`)\n  }\n  if (summary.topRegion) {\n    summaryLines.push(`Top performing region: ${summary.topRegion}`)\n  }\n\n  // If no content, don't draw the box\n  if (summaryLines.length === 0) {\n    return startY\n  }\n\n  contentHeight = summaryLines.length * 5 + 15 // 5px per line + padding\n\n  // Summary box background\n  pdf.setFillColor(249, 250, 251)\n  pdf.setDrawColor(200, 200, 200)\n  pdf.roundedRect(margin, currentY, contentWidth, contentHeight, 2, 2, 'FD')\n\n  currentY += 8\n  pdf.setFontSize(10)\n  pdf.setFont(undefined, 'bold')\n  pdf.text('Summary:', margin + 5, currentY)\n  currentY += 6\n\n  // Add summary content\n  pdf.setFont(undefined, 'normal')\n  summaryLines.forEach(line => {\n    pdf.text(line, margin + 5, currentY)\n    currentY += 5\n  })\n\n  return startY + contentHeight + 5\n}\n\n/**\n * Add footer to PDF\n */\nconst addFooter = (pdf, pageWidth, pageHeight, margin) => {\n  const footerY = pageHeight - 15\n\n  // Footer line\n  pdf.setDrawColor(200, 200, 200)\n  pdf.line(margin, footerY - 5, pageWidth - margin, footerY - 5)\n\n  // Footer text\n  pdf.setFontSize(9)\n  pdf.setTextColor(100, 100, 100)\n  pdf.text('CapLiquify Manufacturing Platform Report', margin, footerY)\n\n  // Page number\n  const pageNum = pdf.internal.getCurrentPageInfo().pageNumber\n  pdf.text(`Page ${pageNum}`, pageWidth - margin - 20, footerY)\n\n  // Generation timestamp\n  pdf.text(\n    `Generated: ${format(new Date(), 'yyyy-MM-dd HH:mm')}`,\n    pageWidth - margin - 70,\n    footerY + 5\n  )\n}\n\nexport default generatePDF\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\realtime\\sseClient.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\services\\reportGenerator.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'summaryData' is defined but never used.",
        "line": 300,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 300,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "summaryData" },
            "fix": { "range": [10283, 10296], "text": "" },
            "desc": "Remove unused variable 'summaryData'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { format } from 'date-fns'\nimport plAnalysisApi from '@/services/api/plAnalysisApi'\nimport productSalesApi from '@/services/api/productSalesApi'\nimport stockLevelsApi from '@/services/api/stockLevelsApi'\n\n// Static data that matches the dashboard\nconst capitalKpis = [\n  { label: 'Global working capital', value: '$9.2M', helper: 'Across all subsidiaries' },\n  { label: 'Cash coverage', value: '214 days', helper: 'Including credit facilities' },\n  { label: 'Intercompany exposure', value: '$1.1M', helper: 'Pending settlements' },\n  { label: 'FX sensitivity', value: '$380K', helper: '±1% USD/EUR/JPY' },\n]\n\nconst regionalPerformance = [\n  { region: 'UK', revenue: 4200000, ebitda: 980000 },\n  { region: 'US', revenue: 3850000, ebitda: 820000 },\n  { region: 'EU', revenue: 6150000, ebitda: 1140000 },\n]\n\n/**\n * Generate a comprehensive report with selected dashboard data\n * @param {Object} selectedSections - Which sections to include\n * @param {Object} dateRange - Date range for the report\n * @returns {Object} Complete report data\n */\nexport const generateReport = async (selectedSections, dateRange) => {\n  const reportData = {\n    metadata: {\n      title: 'CapLiquify Manufacturing Platform Report',\n      generatedAt: new Date().toISOString(),\n      reportPeriod: {\n        from: dateRange.from,\n        to: dateRange.to,\n        formatted: `${format(dateRange.from, 'MMMM d, yyyy')} - ${format(dateRange.to, 'MMMM d, yyyy')}`,\n      },\n      sections: selectedSections,\n    },\n    sections: {},\n  }\n\n  try {\n    // Fetch Capital Position KPIs\n    if (selectedSections.capitalKpis) {\n      reportData.sections.capitalKpis = {\n        title: 'Capital Position',\n        description: 'Key metrics reviewed in the weekly treasury meeting',\n        data: capitalKpis,\n        summary: generateCapitalSummary(capitalKpis),\n      }\n    }\n\n    // Fetch Performance KPIs\n    if (selectedSections.performanceKpis) {\n      const kpiResponse = await plAnalysisApi.getKPISummary()\n      reportData.sections.performanceKpis = {\n        title: 'Performance Metrics',\n        description: 'Key business performance indicators tracked for operational excellence',\n        data: kpiResponse.success\n          ? [\n              {\n                label: 'Annual revenue',\n                value: kpiResponse.data.annualRevenue.value,\n                helper: kpiResponse.data.annualRevenue.helper,\n              },\n              {\n                label: 'Units sold',\n                value: kpiResponse.data.unitsSold.value,\n                helper: kpiResponse.data.unitsSold.helper,\n              },\n              {\n                label: 'Gross margin',\n                value: kpiResponse.data.grossMargin.value,\n                helper: kpiResponse.data.grossMargin.helper,\n              },\n            ]\n          : [],\n        summary: generatePerformanceSummary(kpiResponse.data),\n      }\n    }\n\n    // Fetch P&L Analysis\n    if (selectedSections.plAnalysis) {\n      const plResponse = await plAnalysisApi.getPLAnalysis()\n      const plSummaryResponse = await plAnalysisApi.getPLSummary('year')\n\n      reportData.sections.plAnalysis = {\n        title: 'P&L Analysis',\n        description: 'Monthly profit and loss trends',\n        data: plResponse.success ? plResponse.data : [],\n        summary: generatePLSummary(\n          plResponse.success ? plResponse.data : [],\n          plSummaryResponse.success ? plSummaryResponse.data : null\n        ),\n        chartData: plResponse.success ? plResponse.data : [],\n      }\n    }\n\n    // Regional Performance\n    if (selectedSections.regionalContribution) {\n      reportData.sections.regionalContribution = {\n        title: 'Regional Performance',\n        description: 'Revenue and EBITDA by region',\n        data: regionalPerformance,\n        summary: generateRegionalSummary(regionalPerformance),\n      }\n    }\n\n    // Stock Levels\n    if (selectedSections.stockLevels) {\n      try {\n        const stockResponse = await stockLevelsApi.getStockLevels()\n        reportData.sections.stockLevels = {\n          title: 'Current Stock Levels',\n          description: 'Inventory status and stock levels',\n          data: stockResponse.success ? stockResponse.data : [],\n          summary: generateStockSummary(stockResponse.data),\n        }\n      } catch (error) {\n        console.error('Error fetching stock levels:', error)\n        reportData.sections.stockLevels = {\n          title: 'Current Stock Levels',\n          description: 'Inventory status and stock levels',\n          data: [],\n          summary: { status: 'Data unavailable', message: 'Stock levels could not be retrieved' },\n        }\n      }\n    }\n\n    // Product Sales\n    if (selectedSections.productSales) {\n      const salesResponse = await productSalesApi.getProductSalesData()\n      reportData.sections.productSales = {\n        title: 'Product Sales Performance',\n        description: 'Revenue by product line',\n        data: salesResponse.success ? salesResponse.data : [],\n        summary: generateProductSalesSummary(salesResponse.data),\n      }\n    }\n\n    // Generate executive summary\n    reportData.executiveSummary = generateExecutiveSummary(reportData.sections, dateRange)\n  } catch (error) {\n    console.error('Error generating report:', error)\n    throw new Error(`Failed to generate report: ${error.message}`)\n  }\n\n  return reportData\n}\n\n/**\n * Generate summary for capital position\n */\nconst generateCapitalSummary = capitalData => {\n  const workingCapital = capitalData.find(item => item.label.includes('working capital'))\n  const cashCoverage = capitalData.find(item => item.label.includes('Cash coverage'))\n\n  return {\n    workingCapital: workingCapital?.value || 'N/A',\n    cashCoverage: cashCoverage?.value || 'N/A',\n    status: 'Strong liquidity position maintained',\n    keyInsight: 'Global working capital remains healthy with adequate cash coverage',\n  }\n}\n\n/**\n * Generate summary for performance metrics\n */\nconst generatePerformanceSummary = performanceData => {\n  if (!performanceData) return { status: 'Data unavailable' }\n\n  return {\n    revenue: performanceData.annualRevenue?.value || 'N/A',\n    units: performanceData.unitsSold?.value || 'N/A',\n    margin: performanceData.grossMargin?.value || 'N/A',\n    status: 'Performance targets on track',\n    keyInsight: 'Strong revenue growth with healthy margin maintenance',\n  }\n}\n\n/**\n * Generate summary for regional performance\n */\nconst generateRegionalSummary = regionalData => {\n  const totalRevenue = regionalData.reduce((sum, region) => sum + region.revenue, 0)\n  const totalEbitda = regionalData.reduce((sum, region) => sum + region.ebitda, 0)\n  const avgEbitdaMargin = (totalEbitda / totalRevenue) * 100\n\n  const topRegion = regionalData.reduce((prev, current) =>\n    prev.revenue > current.revenue ? prev : current\n  )\n\n  return {\n    totalRevenue: `$${(totalRevenue / 1000000).toFixed(1)}M`,\n    totalEbitda: `$${(totalEbitda / 1000000).toFixed(1)}M`,\n    avgEbitdaMargin: `${avgEbitdaMargin.toFixed(1)}%`,\n    topRegion: topRegion.region,\n    status: 'Balanced regional performance',\n    keyInsight: `${topRegion.region} leads revenue generation with strong EBITDA margins`,\n  }\n}\n\n/**\n * Generate summary for stock levels\n */\nconst generateStockSummary = stockData => {\n  if (!stockData || !Array.isArray(stockData)) {\n    return { status: 'Data unavailable', message: 'Stock level data not accessible' }\n  }\n\n  const lowStockItems = stockData.filter(item => item.status === 'Low' || item.level < 20)\n  const optimalStockItems = stockData.filter(\n    item => item.status === 'Optimal' || (item.level >= 20 && item.level <= 80)\n  )\n\n  return {\n    totalItems: stockData.length,\n    lowStockCount: lowStockItems.length,\n    optimalStockCount: optimalStockItems.length,\n    status: lowStockItems.length > 0 ? 'Attention required' : 'Stock levels healthy',\n    keyInsight:\n      lowStockItems.length > 0\n        ? `${lowStockItems.length} items require restocking attention`\n        : 'All inventory levels within optimal ranges',\n  }\n}\n\n/**\n * Generate summary for product sales\n */\nconst generateProductSalesSummary = salesData => {\n  if (!salesData || !Array.isArray(salesData)) {\n    return { status: 'Data unavailable', message: 'Product sales data not accessible' }\n  }\n\n  const totalSales = salesData.reduce(\n    (sum, product) => sum + (product.sales || product.revenue || 0),\n    0\n  )\n  const topProduct = salesData.reduce((prev, current) =>\n    (prev.sales || prev.revenue || 0) > (current.sales || current.revenue || 0) ? prev : current\n  )\n\n  return {\n    totalSales: `$${(totalSales / 1000000).toFixed(1)}M`,\n    topProduct: topProduct.name || topProduct.product || 'N/A',\n    productCount: salesData.length,\n    status: 'Product performance tracked',\n    keyInsight: `${topProduct.name || topProduct.product} leads product sales performance`,\n  }\n}\n\n/**\n * Generate executive summary\n */\nconst generateExecutiveSummary = (sections, dateRange) => {\n  const insights = []\n  let overallStatus = 'Operational'\n\n  if (sections.capitalKpis) {\n    insights.push('Strong capital position maintained with healthy working capital levels')\n  }\n\n  if (sections.performanceKpis) {\n    insights.push(\n      'Key performance indicators showing positive trends across revenue and margin metrics'\n    )\n  }\n\n  if (sections.plAnalysis) {\n    insights.push('P&L analysis reveals consistent profitability trends with seasonal variations')\n  }\n\n  if (sections.regionalContribution) {\n    insights.push(\n      'Regional performance balanced across all markets with EU leading revenue contribution'\n    )\n  }\n\n  if (sections.stockLevels) {\n    insights.push('Inventory management requires attention for optimal stock level maintenance')\n  }\n\n  if (sections.productSales) {\n    insights.push('Product sales performance tracking enables informed strategic decisions')\n  }\n\n  return {\n    status: overallStatus,\n    reportPeriod: format(dateRange.from, 'MMMM yyyy'),\n    keyInsights: insights,\n    recommendation:\n      'Continue monitoring key metrics while focusing on inventory optimization and regional growth opportunities',\n    dataQuality: 'High - All critical systems operational and providing real-time data',\n  }\n}\n\n/**\n * Generate summary for P&L analysis\n */\nconst generatePLSummary = (plData, summaryData) => {\n  if (!plData || !Array.isArray(plData) || plData.length === 0) {\n    return { status: 'Data unavailable', message: 'P&L analysis data not accessible' }\n  }\n\n  const totalRevenue = plData.reduce((sum, item) => sum + (item.revenue || 0), 0)\n  const totalGrossProfit = plData.reduce((sum, item) => sum + (item.grossProfit || 0), 0)\n  const totalEbitda = plData.reduce((sum, item) => sum + (item.ebitda || 0), 0)\n\n  const avgGrossMargin =\n    totalRevenue > 0 ? ((totalGrossProfit / totalRevenue) * 100).toFixed(1) : '0'\n  const avgEbitdaMargin = totalRevenue > 0 ? ((totalEbitda / totalRevenue) * 100).toFixed(1) : '0'\n\n  const bestMonth = plData.reduce((prev, current) =>\n    (prev.revenue || 0) > (current.revenue || 0) ? prev : current\n  )\n\n  return {\n    totalRevenue: `$${(totalRevenue / 1000).toFixed(0)}K`,\n    totalGrossProfit: `$${(totalGrossProfit / 1000).toFixed(0)}K`,\n    totalEbitda: `$${(totalEbitda / 1000).toFixed(0)}K`,\n    avgGrossMargin: `${avgGrossMargin}%`,\n    avgEbitdaMargin: `${avgEbitdaMargin}%`,\n    bestMonth: bestMonth.month || 'N/A',\n    status: 'P&L trends analyzed',\n    keyInsight: `${bestMonth.month} showed strongest performance with $${bestMonth.revenue}K revenue`,\n  }\n}\n\nexport default generateReport\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\utils\\cn.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\utils\\error-handler.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'next' is defined but never used.",
        "line": 377,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 377,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "next" },
            "fix": { "range": [9827, 9833], "text": "" },
            "desc": "Remove unused variable 'next'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'monitoringPeriod' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 429,
        "column": 57,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 429,
        "endColumn": 73,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "monitoringPeriod" },
            "fix": { "range": [11093, 11119], "text": "" },
            "desc": "Remove unused variable 'monitoringPeriod'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Enterprise Error Handling Utilities\n *\n * Comprehensive error handling, classification, and recovery mechanisms\n * for the MCP server and manufacturing applications.\n */\n\nimport { createLogger } from './logger.js'\n\n/**\n * Error classifications for proper handling and reporting\n */\nexport const ERROR_TYPES = {\n  VALIDATION: 'ValidationError',\n  AUTHENTICATION: 'AuthenticationError',\n  AUTHORIZATION: 'AuthorizationError',\n  NOT_FOUND: 'NotFoundError',\n  CONFLICT: 'ConflictError',\n  RATE_LIMIT: 'RateLimitError',\n  DATABASE: 'DatabaseError',\n  EXTERNAL_API: 'ExternalAPIError',\n  TOOL_EXECUTION: 'ToolExecutionError',\n  CONFIGURATION: 'ConfigurationError',\n  TIMEOUT: 'TimeoutError',\n  NETWORK: 'NetworkError',\n  INTERNAL: 'InternalError',\n}\n\n/**\n * Error severity levels for monitoring and alerting\n */\nexport const ERROR_SEVERITY = {\n  LOW: 'low',\n  MEDIUM: 'medium',\n  HIGH: 'high',\n  CRITICAL: 'critical',\n}\n\n/**\n * Base error class with enhanced metadata\n */\nexport class MCPError extends Error {\n  constructor(message, type = ERROR_TYPES.INTERNAL, options = {}) {\n    super(message)\n\n    this.name = this.constructor.name\n    this.type = type\n    this.severity = options.severity || ERROR_SEVERITY.MEDIUM\n    this.correlationId = options.correlationId\n    this.code = options.code\n    this.details = options.details || {}\n    this.timestamp = new Date().toISOString()\n    this.retryable = options.retryable || false\n    this.statusCode = options.statusCode || 500\n\n    // Capture stack trace\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    }\n  }\n\n  /**\n   * Convert error to JSON for logging and API responses\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      type: this.type,\n      severity: this.severity,\n      correlationId: this.correlationId,\n      code: this.code,\n      details: this.details,\n      timestamp: this.timestamp,\n      retryable: this.retryable,\n      statusCode: this.statusCode,\n      stack: this.stack,\n    }\n  }\n\n  /**\n   * Get sanitized error for client responses (removes sensitive data)\n   */\n  toClientError() {\n    return {\n      message: this.message,\n      type: this.type,\n      code: this.code,\n      correlationId: this.correlationId,\n      retryable: this.retryable,\n      timestamp: this.timestamp,\n    }\n  }\n}\n\n/**\n * Specific error classes for different scenarios\n */\nexport class ValidationError extends MCPError {\n  constructor(message, options = {}) {\n    super(message, ERROR_TYPES.VALIDATION, {\n      ...options,\n      statusCode: 400,\n      severity: ERROR_SEVERITY.LOW,\n    })\n  }\n}\n\nexport class AuthenticationError extends MCPError {\n  constructor(message = 'Authentication required', options = {}) {\n    super(message, ERROR_TYPES.AUTHENTICATION, {\n      ...options,\n      statusCode: 401,\n      severity: ERROR_SEVERITY.MEDIUM,\n    })\n  }\n}\n\nexport class AuthorizationError extends MCPError {\n  constructor(message = 'Insufficient permissions', options = {}) {\n    super(message, ERROR_TYPES.AUTHORIZATION, {\n      ...options,\n      statusCode: 403,\n      severity: ERROR_SEVERITY.MEDIUM,\n    })\n  }\n}\n\nexport class NotFoundError extends MCPError {\n  constructor(resource, options = {}) {\n    super(`${resource} not found`, ERROR_TYPES.NOT_FOUND, {\n      ...options,\n      statusCode: 404,\n      severity: ERROR_SEVERITY.LOW,\n    })\n  }\n}\n\nexport class ConflictError extends MCPError {\n  constructor(message, options = {}) {\n    super(message, ERROR_TYPES.CONFLICT, {\n      ...options,\n      statusCode: 409,\n      severity: ERROR_SEVERITY.MEDIUM,\n    })\n  }\n}\n\nexport class RateLimitError extends MCPError {\n  constructor(message = 'Rate limit exceeded', options = {}) {\n    super(message, ERROR_TYPES.RATE_LIMIT, {\n      ...options,\n      statusCode: 429,\n      severity: ERROR_SEVERITY.MEDIUM,\n      retryable: true,\n    })\n  }\n}\n\nexport class DatabaseError extends MCPError {\n  constructor(message, options = {}) {\n    super(message, ERROR_TYPES.DATABASE, {\n      ...options,\n      statusCode: 500,\n      severity: ERROR_SEVERITY.HIGH,\n      retryable: options.retryable || false,\n    })\n  }\n}\n\nexport class ExternalAPIError extends MCPError {\n  constructor(service, message, options = {}) {\n    super(`${service} API error: ${message}`, ERROR_TYPES.EXTERNAL_API, {\n      ...options,\n      statusCode: options.statusCode || 503,\n      severity: ERROR_SEVERITY.MEDIUM,\n      retryable: true,\n      details: { service, ...options.details },\n    })\n  }\n}\n\nexport class ToolExecutionError extends MCPError {\n  constructor(toolName, message, options = {}) {\n    super(`Tool execution failed: ${toolName} - ${message}`, ERROR_TYPES.TOOL_EXECUTION, {\n      ...options,\n      statusCode: 500,\n      severity: ERROR_SEVERITY.MEDIUM,\n      details: { toolName, ...options.details },\n    })\n  }\n}\n\nexport class TimeoutError extends MCPError {\n  constructor(operation, timeout, options = {}) {\n    super(`Operation timed out: ${operation} (${timeout}ms)`, ERROR_TYPES.TIMEOUT, {\n      ...options,\n      statusCode: 408,\n      severity: ERROR_SEVERITY.MEDIUM,\n      retryable: true,\n      details: { operation, timeout, ...options.details },\n    })\n  }\n}\n\n/**\n * Error Handler Class\n */\nexport class ErrorHandler {\n  constructor(options = {}) {\n    this.logger = createLogger()\n    this.enableStackTrace = options.enableStackTrace !== false\n    this.enableErrorMetrics = options.enableErrorMetrics !== false\n    this.errorMetrics = new Map()\n  }\n\n  /**\n   * Handle and log errors with proper classification\n   */\n  handle(error, context = {}) {\n    const correlationId = context.correlationId || error.correlationId\n    const logger = createLogger(correlationId)\n\n    // Convert to MCPError if it's a regular Error\n    const mcpError = error instanceof MCPError ? error : this.classifyError(error, context)\n\n    // Log the error with appropriate level\n    const logLevel = this.getLogLevel(mcpError.severity)\n    logger[logLevel]('Error handled', {\n      error: mcpError.toJSON(),\n      context,\n    })\n\n    // Update error metrics\n    if (this.enableErrorMetrics) {\n      this.updateErrorMetrics(mcpError)\n    }\n\n    return mcpError\n  }\n\n  /**\n   * Classify generic errors into MCPError types\n   */\n  classifyError(error, context = {}) {\n    const message = error.message || 'Unknown error'\n    const correlationId = context.correlationId\n\n    // Database-related errors\n    if (this.isDatabaseError(error)) {\n      return new DatabaseError(message, { correlationId, details: { originalError: error.name } })\n    }\n\n    // Network/timeout errors\n    if (this.isTimeoutError(error)) {\n      return new TimeoutError(context.operation || 'unknown', context.timeout || 0, {\n        correlationId,\n      })\n    }\n\n    // Validation errors\n    if (this.isValidationError(error)) {\n      return new ValidationError(message, { correlationId })\n    }\n\n    // Authentication errors\n    if (this.isAuthenticationError(error)) {\n      return new AuthenticationError(message, { correlationId })\n    }\n\n    // Default to internal error\n    return new MCPError(message, ERROR_TYPES.INTERNAL, {\n      correlationId,\n      severity: ERROR_SEVERITY.HIGH,\n      details: { originalError: error.name, stack: error.stack },\n    })\n  }\n\n  /**\n   * Error classification helpers\n   */\n  isDatabaseError(error) {\n    const dbErrorCodes = ['ECONNREFUSED', 'ENOTFOUND', 'ETIMEDOUT']\n    const dbErrorNames = ['PostgresError', 'SequelizeError', 'MongoError']\n\n    return (\n      dbErrorCodes.includes(error.code) ||\n      dbErrorNames.some(name => error.name.includes(name)) ||\n      (error.message && error.message.toLowerCase().includes('database'))\n    )\n  }\n\n  isTimeoutError(error) {\n    return (\n      error.code === 'ETIMEDOUT' ||\n      error.name === 'TimeoutError' ||\n      (error.message && error.message.toLowerCase().includes('timeout'))\n    )\n  }\n\n  isValidationError(error) {\n    return (\n      error.name === 'ValidationError' ||\n      error.name === 'CastError' ||\n      (error.message && error.message.toLowerCase().includes('validation'))\n    )\n  }\n\n  isAuthenticationError(error) {\n    return (\n      error.name === 'UnauthorizedError' ||\n      error.name === 'JsonWebTokenError' ||\n      (error.message && error.message.toLowerCase().includes('unauthorized'))\n    )\n  }\n\n  /**\n   * Get appropriate log level based on error severity\n   */\n  getLogLevel(severity) {\n    switch (severity) {\n      case ERROR_SEVERITY.CRITICAL:\n      case ERROR_SEVERITY.HIGH:\n        return 'error'\n      case ERROR_SEVERITY.MEDIUM:\n        return 'warn'\n      case ERROR_SEVERITY.LOW:\n      default:\n        return 'info'\n    }\n  }\n\n  /**\n   * Update error metrics for monitoring\n   */\n  updateErrorMetrics(error) {\n    const key = `${error.type}:${error.severity}`\n    const current = this.errorMetrics.get(key) || { count: 0, lastOccurrence: null }\n\n    this.errorMetrics.set(key, {\n      count: current.count + 1,\n      lastOccurrence: error.timestamp,\n      type: error.type,\n      severity: error.severity,\n    })\n  }\n\n  /**\n   * Get error metrics for monitoring dashboards\n   */\n  getErrorMetrics() {\n    const metrics = {}\n\n    for (const [key, data] of this.errorMetrics) {\n      metrics[key] = data\n    }\n\n    return {\n      errors: metrics,\n      summary: {\n        totalErrors: Array.from(this.errorMetrics.values()).reduce(\n          (sum, data) => sum + data.count,\n          0\n        ),\n        errorTypes: new Set(Array.from(this.errorMetrics.values()).map(data => data.type)).size,\n        criticalErrors: Array.from(this.errorMetrics.values())\n          .filter(data => data.severity === ERROR_SEVERITY.CRITICAL)\n          .reduce((sum, data) => sum + data.count, 0),\n      },\n    }\n  }\n\n  /**\n   * Express middleware for error handling\n   */\n  expressMiddleware() {\n    return (error, req, res, next) => {\n      const mcpError = this.handle(error, {\n        correlationId: req.correlationId,\n        operation: `${req.method} ${req.path}`,\n        userAgent: req.headers['user-agent'],\n        ip: req.ip,\n      })\n\n      // Set appropriate status code\n      res.status(mcpError.statusCode)\n\n      // Send client-safe error response\n      res.json({\n        error: mcpError.toClientError(),\n        success: false,\n      })\n    }\n  }\n\n  /**\n   * Async function wrapper with error handling\n   */\n  wrapAsync(fn) {\n    return async (...args) => {\n      try {\n        return await fn(...args)\n      } catch (error) {\n        throw this.handle(error, { operation: fn.name })\n      }\n    }\n  }\n\n  /**\n   * Promise wrapper with timeout and error handling\n   */\n  wrapPromise(promise, timeout = 30000, operation = 'unknown') {\n    return Promise.race([\n      promise,\n      new Promise((_, reject) => {\n        setTimeout(() => {\n          reject(new TimeoutError(operation, timeout))\n        }, timeout)\n      }),\n    ]).catch(error => {\n      throw this.handle(error, { operation, timeout })\n    })\n  }\n\n  /**\n   * Circuit breaker pattern implementation\n   */\n  createCircuitBreaker(operation, options = {}) {\n    const { failureThreshold = 5, resetTimeout = 60000, monitoringPeriod = 10000 } = options\n\n    let failures = 0\n    let lastFailureTime = null\n    let state = 'CLOSED' // CLOSED, OPEN, HALF_OPEN\n\n    return async (...args) => {\n      // Check if circuit should be reset\n      if (state === 'OPEN' && Date.now() - lastFailureTime > resetTimeout) {\n        state = 'HALF_OPEN'\n      }\n\n      // Reject if circuit is open\n      if (state === 'OPEN') {\n        throw new MCPError('Circuit breaker is OPEN', ERROR_TYPES.INTERNAL, {\n          severity: ERROR_SEVERITY.MEDIUM,\n          retryable: true,\n          details: { circuitState: state, failures },\n        })\n      }\n\n      try {\n        const result = await operation(...args)\n\n        // Reset on success\n        if (state === 'HALF_OPEN') {\n          state = 'CLOSED'\n          failures = 0\n        }\n\n        return result\n      } catch (error) {\n        failures++\n        lastFailureTime = Date.now()\n\n        // Open circuit if threshold reached\n        if (failures >= failureThreshold) {\n          state = 'OPEN'\n        }\n\n        throw this.handle(error, {\n          operation: operation.name,\n          circuitState: state,\n          failures,\n        })\n      }\n    }\n  }\n\n  /**\n   * Retry mechanism with exponential backoff\n   */\n  async withRetry(operation, options = {}) {\n    const {\n      maxRetries = 3,\n      baseDelay = 1000,\n      maxDelay = 10000,\n      backoffFactor = 2,\n      retryCondition = error => error.retryable,\n    } = options\n\n    let lastError\n\n    for (let attempt = 0; attempt <= maxRetries; attempt++) {\n      try {\n        return await operation()\n      } catch (error) {\n        lastError = this.handle(error, { attempt, maxRetries })\n\n        // Don't retry if not retryable or max attempts reached\n        if (!retryCondition(lastError) || attempt === maxRetries) {\n          throw lastError\n        }\n\n        // Calculate delay with exponential backoff\n        const delay = Math.min(baseDelay * Math.pow(backoffFactor, attempt), maxDelay)\n\n        this.logger.warn('Retrying operation', {\n          attempt: attempt + 1,\n          maxRetries,\n          delay,\n          error: lastError.message,\n        })\n\n        // Wait before retry\n        await new Promise(resolve => setTimeout(resolve, delay))\n      }\n    }\n\n    throw lastError\n  }\n}\n\n// Global error handler instance\nexport const globalErrorHandler = new ErrorHandler()\n\n// Convenience functions\nexport const handleError = (error, context) => globalErrorHandler.handle(error, context)\nexport const wrapAsync = fn => globalErrorHandler.wrapAsync(fn)\nexport const withRetry = (operation, options) => globalErrorHandler.withRetry(operation, options)\nexport const createCircuitBreaker = (operation, options) =>\n  globalErrorHandler.createCircuitBreaker(operation, options)\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\utils\\exportUtils.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\utils\\logger.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\utils\\resilience.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\The-social-drink-companysentia-ai-manufacturing-app\\sentia-ai-manufacturing-app\\src\\utils\\structuredLogger.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]

