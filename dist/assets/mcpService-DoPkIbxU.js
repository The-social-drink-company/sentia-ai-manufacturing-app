import{n as e}from"./index-BbU3Lwwu.js";var t={};const a=t.MCP_SERVER_URL||"https://sentia-mcp-server.railway.app",r=t.MCP_HEALTH_URL||"https://sentia-mcp-server.railway.app/health";const i=new class{constructor(){this.baseUrl=a,this.healthUrl=r}async checkHealth(){try{const e=await fetch(this.healthUrl);return await e.json()}catch(t){return e("MCP Server health check failed",t,{service:"mcp",operation:"health_check"}),{status:"error",message:t.message}}}async getProviders(){try{const e=await fetch(`${this.baseUrl}/api/providers`);return await e.json()}catch(t){return e("Failed to fetch MCP providers",t,{service:"mcp",operation:"get_providers"}),{error:t.message}}}async xeroGetContacts(t={}){try{const e=new URLSearchParams(t).toString(),a=await fetch(`${this.baseUrl}/api/xero/contacts?${e}`);return await a.json()}catch(a){return e("Failed to fetch Xero contacts via MCP",a,{service:"mcp",provider:"xero",operation:"get_contacts"}),{error:a.message}}}async xeroGetInvoices(t={}){try{const e=new URLSearchParams(t).toString(),a=await fetch(`${this.baseUrl}/api/xero/invoices?${e}`);return await a.json()}catch(a){return e("Failed to fetch Xero invoices via MCP",a,{service:"mcp",provider:"xero",operation:"get_invoices"}),{error:a.message}}}async xeroGetItems(){try{const e=await fetch(`${this.baseUrl}/api/xero/items`);return await e.json()}catch(t){return e("Failed to fetch Xero items via MCP",t,{service:"mcp",provider:"xero",operation:"get_items"}),{error:t.message}}}async xeroCreateInvoice(t){try{const e=await fetch(`${this.baseUrl}/api/xero/invoices`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return await e.json()}catch(a){return e("Failed to create Xero invoice via MCP",a,{service:"mcp",provider:"xero",operation:"create_invoice"}),{error:a.message}}}async openaiGenerateText(t,a={}){try{const e=await fetch(`${this.baseUrl}/api/openai/generate`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({prompt:t,...a})});return await e.json()}catch(r){return e("Failed to generate OpenAI text via MCP",r,{service:"mcp",provider:"openai",operation:"generate_text"}),{error:r.message}}}async openaiAnalyzeData(t,a){try{const e=await fetch(`${this.baseUrl}/api/openai/analyze`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({data:t,analysisType:a})});return await e.json()}catch(r){return e("Failed to analyze data with OpenAI via MCP",r,{service:"mcp",provider:"openai",operation:"analyze_data"}),{error:r.message}}}async openaiCreateEmbedding(t){try{const e=await fetch(`${this.baseUrl}/api/openai/embedding`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({text:t})});return await e.json()}catch(a){return e("Failed to create OpenAI embedding via MCP",a,{service:"mcp",provider:"openai",operation:"create_embedding"}),{error:a.message}}}async anthropicAnalyzeManufacturing(t,a){try{const e=await fetch(`${this.baseUrl}/api/anthropic/manufacturing/analyze`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({data:t,analysisType:a})});return await e.json()}catch(r){return e("Failed to analyze manufacturing with Anthropic via MCP",r,{service:"mcp",provider:"anthropic",operation:"analyze_manufacturing"}),{error:r.message}}}async anthropicOptimizeProcess(t){try{const e=await fetch(`${this.baseUrl}/api/anthropic/process/optimize`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(t)});return await e.json()}catch(a){return e("Failed to optimize process with Anthropic via MCP",a,{service:"mcp",provider:"anthropic",operation:"optimize_process"}),{error:a.message}}}async anthropicGenerateInsights(t){try{const e=await fetch(`${this.baseUrl}/api/anthropic/insights`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({context:t})});return await e.json()}catch(a){return e("Failed to generate insights with Anthropic via MCP",a,{service:"mcp",provider:"anthropic",operation:"generate_insights"}),{error:a.message}}}};export{i as m};
