generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "extendedIndexes"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")

  extensions = [
    pgvector(name: "vector", schema: "public")
  ]
}

enum Role {
  ADMIN
  MANAGER
  OPERATOR
  VIEWER
}

enum ProductionStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

model User {
  id          String   @id @default(uuid()) @db.Uuid
  clerkId     String   @unique
  email       String   @unique
  role        Role
  permissions Json?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)

  auditLogs   AuditLog[]

  @@map("users")
  @@index([role], map: "idx_users_role")
}

model WorkingCapital {
  id                  String   @id @default(uuid()) @db.Uuid
  date                DateTime @db.Date
  receivables         Decimal  @db.Decimal(15, 2)
  inventory           Decimal  @db.Decimal(15, 2)
  payables            Decimal  @db.Decimal(15, 2)
  workingCapital      Decimal  @db.Decimal(15, 2)
  cashConversionCycle Int
  createdAt           DateTime @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime @updatedAt @db.Timestamptz(6)

  @@map("working_capital")
  @@index([date], map: "idx_working_capital_date")
}

model Inventory {
  id           String   @id @default(uuid()) @db.Uuid
  sku          String   @unique
  name         String
  quantity     Int      @default(0)
  location     String?
  unitCost     Decimal  @db.Decimal(10, 2)
  reorderPoint Int      @default(0)
  createdAt    DateTime @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @db.Timestamptz(6)

  @@map("inventory")
  @@index([location], map: "idx_inventory_location")
}

model Product {
  id             String          @id @default(uuid()) @db.Uuid
  name           String
  description    String?
  sku            String          @unique
  createdAt      DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime        @updatedAt @db.Timestamptz(6)

  productionRuns ProductionRun[]

  @@map("products")
  @@index([name], map: "idx_products_name")
}

model ProductionRun {
  id               String            @id @default(uuid()) @db.Uuid
  productId        String            @db.Uuid
  quantityProduced Int
  qualityScore     Decimal           @db.Decimal(5, 2)
  startedAt        DateTime          @db.Timestamptz(6)
  completedAt      DateTime?         @db.Timestamptz(6)
  status           ProductionStatus
  createdAt        DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @db.Timestamptz(6)

  product          Product           @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("production_runs")
  @@index([productId, startedAt], map: "idx_production_runs_product_started_at")
  @@index([status], map: "idx_production_runs_status")
}

model AIInsight {
  id         String   @id @default(uuid()) @db.Uuid
  type       String
  category   String
  insight    String   @db.Text
  confidence Decimal  @db.Decimal(3, 2)
  metadata   Json?
  createdAt  DateTime @default(now()) @db.Timestamptz(6)

  @@map("ai_insights")
  @@index([type, category], map: "idx_ai_insights_type_category")
}

model Embedding {
  id        String   @id @default(uuid()) @db.Uuid
  content   String   @db.Text
  embedding Float[]  @db.Vector(1536)
  metadata  Json?
  createdAt DateTime @default(now()) @db.Timestamptz(6)

  @@map("embeddings")
  @@index([createdAt], map: "idx_embeddings_created_at")
  @@index([embedding], type: "vector_cosine_ops", using: Ivfflat, map: "idx_embeddings_embedding_ivfflat_cosine")
}

model AuditLog {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  action    String
  entity    String
  entityId  String
  changes   Json?
  ipAddress String?
  userAgent String?
  timestamp DateTime @default(now()) @db.Timestamptz(6)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
  @@index([userId, timestamp], map: "idx_audit_logs_user_timestamp")
  @@index([entity, entityId], map: "idx_audit_logs_entity")
}