class B{constructor(){this.currentDate=new Date,this.businessCalendar=new f,this.seasonalPatterns=new O}getCurrentContext(){const t=new Date;return{currentDate:t.toISOString().split("T")[0],currentMonth:t.getMonth()+1,currentQuarter:Math.floor(t.getMonth()/3)+1,currentYear:t.getFullYear(),dayOfWeek:t.getDay(),dayOfMonth:t.getDate(),weekOfYear:this.getWeekOfYear(t),isBusinessDay:this.businessCalendar.isBusinessDay(t),nextBusinessDay:this.businessCalendar.getNextBusinessDay(t)}}generateDateRange(t,e,s=!1){const n=new Date(t),i=[];let a=new Date(n);for(let l=0;l<e;l++)(!s||this.businessCalendar.isBusinessDay(a))&&i.push({date:new Date(a),dateString:a.toISOString().split("T")[0],dayOfWeek:a.getDay(),weekOfMonth:Math.ceil(a.getDate()/7),month:a.getMonth()+1,quarter:Math.floor(a.getMonth()/3)+1,isBusinessDay:this.businessCalendar.isBusinessDay(a),isMonthEnd:this.isLastBusinessDayOfMonth(a),isQuarterEnd:this.isLastBusinessDayOfQuarter(a)}),a.setDate(a.getDate()+1);return i}calculateWorkingCapitalByPeriod(t,e,s={}){const{dsoTarget:n=45,dpoTarget:i=60,inventoryDays:a=30,currentRevenue:l=4e7}=s,r=this.generateDateRange(new Date,e,!0),u=[];return r.forEach((o,S)=>{const g=this.seasonalPatterns.getBusinessSeasonality(o.month,o.quarter),h=l/365*g,D=h*n,y=h*.6*a,d=h*.4*i,w=D+y-d,M=this.calculateCashInflows(o,h,n),C=this.calculateCashOutflows(o,h,i);u.push({date:o.dateString,dateInfo:o,projectedRevenue:Math.round(h),receivables:Math.round(D),inventory:Math.round(y),payables:Math.round(d),workingCapital:Math.round(w),cashIn:Math.round(M),cashOut:Math.round(C),netCashFlow:Math.round(M-C),seasonalMultiplier:g.toFixed(3),businessDaysInMonth:this.businessCalendar.getBusinessDaysInMonth(o.date.getFullYear(),o.date.getMonth())})}),{projections:u,summary:this.calculatePeriodSummary(u),metadata:{periodDays:e,startDate:r[0]?.dateString,endDate:r[r.length-1]?.dateString,businessDaysCount:r.filter(o=>o.isBusinessDay).length,generatedAt:new Date().toISOString()}}}calculateCashInflows(t,e,s){const n={currentMonth:.3},i=e,a=Math.max(.7,Math.min(1.3,s/45));return i*n.currentMonth*a}calculateCashOutflows(t,e,s){const n=e*.65,i=Math.max(.8,Math.min(1.2,s/60));let a=0;return t.dayOfWeek===5&&(a+=e*.15),t.isMonthEnd&&(a+=e*.05),n*i+a}calculatePeriodSummary(t){const e=t.reduce((r,u)=>r+u.cashIn,0),s=t.reduce((r,u)=>r+u.cashOut,0),n=t.reduce((r,u)=>r+u.workingCapital,0)/t.length,i=Math.min(...t.map(r=>r.netCashFlow)),a=Math.max(...t.map(r=>r.netCashFlow)),l=t.filter(r=>r.netCashFlow<0);return{totalCashIn:Math.round(e),totalCashOut:Math.round(s),netCashFlow:Math.round(e-s),averageWorkingCapital:Math.round(n),minDailyCashFlow:Math.round(i),maxDailyCashFlow:Math.round(a),negativeCashDays:l.length,riskDays:l.map(r=>r.date)}}getWeekOfYear(t){const e=new Date(t.getFullYear(),0,1),s=(t-e)/864e5;return Math.ceil((s+e.getDay()+1)/7)}isLastBusinessDayOfMonth(t){const e=new Date(t.getFullYear(),t.getMonth()+1,0);for(;!this.businessCalendar.isBusinessDay(e)&&e.getDate()>1;)e.setDate(e.getDate()-1);return t.toDateString()===e.toDateString()}isLastBusinessDayOfQuarter(t){const s=(Math.floor(t.getMonth()/3)+1)*3-1,n=new Date(t.getFullYear(),s+1,0);for(;!this.businessCalendar.isBusinessDay(n)&&n.getDate()>1;)n.setDate(n.getDate()-1);return t.toDateString()===n.toDateString()}}class f{constructor(){this.holidays={UK:this.getUKHolidays(),EU:this.getEUHolidays(),US:this.getUSHolidays()}}isBusinessDay(t,e="UK"){const s=t.getDay();if(s===0||s===6)return!1;const n=t.toISOString().split("T")[0];return!this.holidays[e].includes(n)}getNextBusinessDay(t,e="UK"){let s=new Date(t);for(s.setDate(s.getDate()+1);!this.isBusinessDay(s,e);)s.setDate(s.getDate()+1);return s}getBusinessDaysInMonth(t,e,s="UK"){let n=0;const i=new Date(t,e+1,0).getDate();for(let a=1;a<=i;a++){const l=new Date(t,e,a);this.isBusinessDay(l,s)&&n++}return n}getUKHolidays(){const t=new Date().getFullYear();return[`${t}-01-01`,`${t}-03-29`,`${t}-04-01`,`${t}-05-06`,`${t}-05-27`,`${t}-08-26`,`${t}-12-25`,`${t}-12-26`]}getEUHolidays(){const t=new Date().getFullYear();return[`${t}-01-01`,`${t}-03-29`,`${t}-04-01`,`${t}-05-01`,`${t}-12-25`,`${t}-12-26`]}getUSHolidays(){const t=new Date().getFullYear();return[`${t}-01-01`,`${t}-01-15`,`${t}-02-19`,`${t}-05-27`,`${t}-07-04`,`${t}-09-02`,`${t}-10-14`,`${t}-11-11`,`${t}-11-28`,`${t}-12-25`]}}class O{constructor(){this.monthlyMultipliers={1:.85,2:.88,3:.95,4:.92,5:.96,6:1,7:.89,8:.87,9:1.05,10:1.08,11:1.12,12:1.15},this.quarterlyTrends={1:.92,2:.96,3:.94,4:1.08}}getBusinessSeasonality(t,e){const s=this.monthlyMultipliers[t]||1,n=this.quarterlyTrends[e]||1;return s*.7+n*.3}getSeasonalCashflowPattern(t){const e=t>1?t-1:12;return this.monthlyMultipliers[e]||1}}export{B as D};
