name: Deploy to Production

on:
  push:
    branches: [ production ]
    
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - test

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      run: |
        echo "Security scan would run here"
        # npm audit --audit-level=moderate || true
        
    - name: Dependency vulnerability scan
      run: |
        python -m pip install safety
        safety check --json || true

  test:
    runs-on: ubuntu-latest
    needs: security-scan
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: sentia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Set up environment variables
      run: |
        echo "FLASK_CONFIG=test" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/sentia_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/0" >> $GITHUB_ENV
    
    - name: Initialize database
      run: |
        python -m flask db upgrade
    
    - name: Run comprehensive tests
      run: |
        pytest --cov=app tests/ --cov-report=xml --cov-report=term-missing --cov-fail-under=80
    
    - name: Performance tests
      run: |
        echo "Performance tests would run here"
        # locust -f tests/performance/locustfile.py --headless --users 50 --spawn-rate 10 -t 60s

  deploy-approval:
    runs-on: ubuntu-latest
    needs: test
    environment: production
    steps:
    - name: Request approval
      run: echo "Deployment approved"

  deploy:
    needs: [test, deploy-approval]
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create backup before deployment
      run: |
        echo "Creating pre-deployment backup"
        # Railway CLI or API call to create backup
    
    - name: Deploy to Railway (Production)
      run: |
        echo "Deployment to Railway production environment"
        echo "Railway automatically deploys on push to production branch"
    
    - name: Database migrations
      run: |
        echo "Running database migrations in production"
        # Railway CLI command for migrations
    
    - name: Health Check
      run: |
        sleep 120  # Wait for deployment to stabilize
        
        # Check health endpoint
        curl -f https://sentia-manufacturing.railway.app/api/health || exit 1
        
        # Check response time
        response_time=$(curl -o /dev/null -s -w '%{time_total}' https://sentia-manufacturing.railway.app/api/health)
        echo "Response time: $response_time seconds"
        
        if (( $(echo "$response_time > 2.0" | bc -l) )); then
          echo "High response time detected!"
          exit 1
        fi
    
    - name: Smoke tests
      run: |
        echo "Running post-deployment smoke tests"
        python scripts/monitoring.py
    
    - name: Rollback on failure
      if: failure()
      run: |
        echo "Deployment failed, initiating rollback"
        # Railway CLI rollback command
    
    - name: Success notification
      if: success()
      run: |
        echo "Production deployment successful!"
        # Slack notification would be sent here if webhook configured
    
    - name: Failure notification
      if: failure()
      run: |
        echo "Production deployment failed!"
        # Slack notification would be sent here if webhook configured