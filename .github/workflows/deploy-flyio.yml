name: Deploy to Fly.io

on:
  push:
    branches: [production]
  pull_request:
    branches: [production]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test and Build
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npm run typecheck
        
      - name: Generate Prisma client
        run: npx prisma generate
        env:
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"
        
      - name: Build application
        run: npm run build
        env:
          VITE_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
          VITE_API_BASE_URL: "https://sentia-manufacturing-dashboard.fly.dev/api"
          VITE_APP_TITLE: 'Sentia Manufacturing Dashboard'
          VITE_APP_VERSION: ${{ github.sha }}
        
      - name: Run tests
        run: npm run test:run
        env:
          CI: true
          DATABASE_URL: "postgresql://test:test@localhost:5432/testdb"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  deploy-staging:
    name: Deploy PR to Staging
    needs: [test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
        
      - name: Deploy PR to staging
        run: |
          # Create a unique app name for this PR
          PR_APP_NAME="sentia-manufacturing-dashboard-pr-${{ github.event.number }}"
          
          # Clone the fly.toml and update app name
          cp fly.toml fly-pr.toml
          sed -i "s/app = \"sentia-manufacturing-dashboard\"/app = \"$PR_APP_NAME\"/" fly-pr.toml
          sed -i "s/min_machines_running = 1/min_machines_running = 0/" fly-pr.toml
          sed -i "s/memory_mb = 2048/memory_mb = 1024/" fly-pr.toml
          
          # Deploy to staging
          flyctl deploy -c fly-pr.toml --remote-only --wait-timeout 600
          
          # Get the app URL
          APP_URL="https://$PR_APP_NAME.fly.dev"
          echo "::notice::Preview URL: $APP_URL"
          echo "Preview URL: $APP_URL" >> $GITHUB_STEP_SUMMARY
          
          # Comment on PR with preview URL
          echo "PR_APP_NAME=$PR_APP_NAME" >> $GITHUB_ENV
          echo "APP_URL=$APP_URL" >> $GITHUB_ENV
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš€ **Preview deployment ready!**\n\nðŸ“± **Preview URL:** ${{ env.APP_URL }}\n\nâš¡ This preview will auto-sleep after inactivity and wake up on first request.\n\n---\n*Deployed from commit ${{ github.sha }}*`
            })

  deploy-production:
    name: Deploy to Production
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    environment:
      name: production
      url: https://sentia-manufacturing-dashboard.fly.dev
    timeout-minutes: 30
    concurrency:
      group: production-deployment
      cancel-in-progress: false
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: actions/github-script@v7
        id: deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Production deployment to Fly.io',
              required_contexts: [],
              auto_merge: false
            });
            return deployment.data.id;
        
      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy to Fly.io Production
        run: |
          echo "Deploying to production..."
          flyctl deploy --remote-only --wait-timeout 600
          
          echo "Deployment completed successfully!"
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Production health verification
        id: health
        run: |
          echo "Waiting for production readiness..."
          READY=false
          
          for i in {1..20}; do
            echo "Health check attempt $i/20..."
            
            # Check health endpoint
            if curl -f -s https://sentia-manufacturing-dashboard.fly.dev/api/health; then
              echo "Health check passed"
              
              # Check if app is serving content
              if curl -f -s https://sentia-manufacturing-dashboard.fly.dev/ | grep -q "Sentia"; then
                echo "App is serving content correctly"
                READY=true
                break
              fi
            fi
            
            echo "Application not ready yet, waiting..."
            sleep 15
          done
          
          if [ "$READY" != "true" ]; then
            echo "Production deployment failed health checks!"
            echo "health_status=failed" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "health_status=passed" >> $GITHUB_OUTPUT
          echo "Production health checks passed!"

      - name: Run production smoke tests
        run: |
          BASE_URL="https://sentia-manufacturing-dashboard.fly.dev"
          
          # Test critical endpoints
          echo "Testing API health..."
          curl -f "$BASE_URL/api/health" || exit 1
          
          echo "Testing main application..."
          curl -f "$BASE_URL/" || exit 1
          
          echo "Testing API status..."
          curl -f "$BASE_URL/api/status" || exit 1
          
          echo "All production smoke tests passed!"

      - name: Update deployment status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.deployment.outputs.result }},
              state: '${{ job.status }}' === 'success' ? 'success' : 'failure',
              environment_url: 'https://sentia-manufacturing-dashboard.fly.dev',
              description: `Production deployment ${{ job.status }}`
            });

      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸŽ‰ Production deployment successful!"
          echo "ðŸ“± Application URL: https://sentia-manufacturing-dashboard.fly.dev"
          echo "âœ… All health checks passed"

  cleanup-staging:
    name: Cleanup Staging Apps
    runs-on: ubuntu-latest
    if: github.event.action == 'closed' && github.event_name == 'pull_request'
    
    steps:
      - name: Setup Fly.io CLI
        uses: superfly/flyctl-actions/setup-flyctl@master
        
      - name: Destroy staging app
        run: |
          PR_APP_NAME="sentia-manufacturing-dashboard-pr-${{ github.event.number }}"
          echo "Cleaning up staging app: $PR_APP_NAME"
          
          # Check if app exists and destroy it
          if flyctl apps list | grep -q "$PR_APP_NAME"; then
            flyctl apps destroy "$PR_APP_NAME" --yes
            echo "Staging app $PR_APP_NAME destroyed successfully"
          else
            echo "Staging app $PR_APP_NAME not found, nothing to cleanup"
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        continue-on-error: true