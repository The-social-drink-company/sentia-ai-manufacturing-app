[
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\api\\enterprise-api.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\api\\health.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\api\\real-api.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\api\\working-capital.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\index-final-clerk.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\index-ultimate.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\index.cjs",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\index.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'next' is defined but never used.",
        "line": 301,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 301,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "next" },
            "fix": { "range": [8130, 8136], "text": "" },
            "desc": "Remove unused variable 'next'."
          }
        ]
      },
      {
        "ruleId": "no-extra-boolean-cast",
        "severity": 2,
        "message": "Redundant Boolean call.",
        "line": 326,
        "column": 25,
        "nodeType": "CallExpression",
        "messageId": "unexpectedCall",
        "endLine": 326,
        "endColumn": 72,
        "fix": { "range": [9112, 9159], "text": "process.env.VITE_CLERK_PUBLISHABLE_KEY" }
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 1,
    "fixableWarningCount": 0,
    "source": "/**\n * BULLETPROOF ENTERPRISE SERVER\n * Properly configured Express server with guaranteed API routing\n */\n\nimport express from 'express';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport compression from 'compression';\nimport fs from 'fs';\n\n// ES module compatibility\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = express();\nconst PORT = process.env.PORT || 10000;\n\n// Logging middleware\nconst logger = (req, res, next) => {\n  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);\n  next();\n};\n\n// Security middleware\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\n        \"'self'\",\n        \"'unsafe-inline'\",\n        \"'unsafe-eval'\",\n        \"https://clerk.financeflo.ai\",\n        \"https://*.clerk.accounts.dev\",\n        \"https://*.clerk.com\"\n      ],\n      styleSrc: [\n        \"'self'\",\n        \"'unsafe-inline'\",\n        \"https://fonts.googleapis.com\"\n      ],\n      fontSrc: [\"'self'\", \"https://fonts.gstatic.com\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\n        \"'self'\",\n        \"https://clerk.financeflo.ai\",\n        \"https://*.clerk.accounts.dev\",\n        \"https://*.clerk.com\",\n        \"https://mcp-server-tkyu.onrender.com\"\n      ]\n    }\n  }\n}));\n\n// Standard middleware\napp.use(compression());\napp.use(cors());\napp.use(express.json({ limit: '50mb' }));\napp.use(express.urlencoded({ extended: true, limit: '50mb' }));\napp.use(logger);\n\n// ==========================================\n// API ROUTES (HIGHEST PRIORITY)\n// ==========================================\n\n// Health check endpoint\napp.get('/health', (req, res) => {\n  res.json({\n    status: 'healthy',\n    service: 'sentia-manufacturing-dashboard',\n    version: '2.0.0-bulletproof',\n    environment: process.env.NODE_ENV || 'development',\n    timestamp: new Date().toISOString(),\n    uptime: process.uptime(),\n    clerk: {\n      configured: Boolean(process.env.VITE_CLERK_PUBLISHABLE_KEY),\n      publishableKey: process.env.VITE_CLERK_PUBLISHABLE_KEY ? 'SET' : 'NOT_SET'\n    }\n  });\n});\n\n// API Status endpoint\napp.get('/api/status', (req, res) => {\n  res.json({\n    success: true,\n    data: {\n      service: 'sentia-manufacturing-dashboard',\n      version: '2.0.0-bulletproof',\n      environment: process.env.NODE_ENV || 'development',\n      timestamp: new Date().toISOString(),\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n      clerk: {\n        configured: Boolean(process.env.VITE_CLERK_PUBLISHABLE_KEY)\n      }\n    },\n    meta: {\n      timestamp: new Date().toISOString(),\n      request_id: Math.random().toString(36).substr(2, 9)\n    }\n  });\n});\n\n// Dashboard Summary endpoint\napp.get('/api/dashboard/summary', (req, res) => {\n  res.json({\n    revenue: {\n      monthly: 2543000,\n      quarterly: 7850000,\n      yearly: 32400000,\n      growth: 12.3\n    },\n    workingCapital: {\n      current: 1945000,\n      ratio: 2.76,\n      cashFlow: 850000,\n      daysReceivable: 45\n    },\n    production: {\n      efficiency: 94.2,\n      unitsProduced: 12543,\n      defectRate: 0.8,\n      oeeScore: 87.5\n    },\n    inventory: {\n      value: 1234000,\n      turnover: 4.2,\n      skuCount: 342,\n      lowStock: 8\n    },\n    financial: {\n      grossMargin: 42.3,\n      netMargin: 18.7,\n      ebitda: 485000,\n      roi: 23.4\n    },\n    timestamp: new Date().toISOString(),\n    dataSource: 'bulletproof-api'\n  });\n});\n\n// Working Capital endpoint\napp.get('/api/financial/working-capital', (req, res) => {\n  res.json({\n    data: [{\n      date: new Date().toISOString(),\n      currentAssets: 5420000,\n      currentLiabilities: 2340000,\n      workingCapital: 3080000,\n      ratio: 2.32,\n      cashFlow: 850000,\n      daysReceivable: 45\n    }],\n    latest: {\n      currentAssets: 5420000,\n      currentLiabilities: 2340000,\n      workingCapital: 3080000,\n      ratio: 2.32\n    },\n    dataSource: 'bulletproof-api'\n  });\n});\n\n// Cash Flow endpoint\napp.get('/api/financial/cash-flow', (req, res) => {\n  res.json({\n    data: [{\n      date: new Date().toISOString(),\n      operatingCashFlow: 850000,\n      investingCashFlow: -120000,\n      financingCashFlow: -45000,\n      netCashFlow: 685000\n    }],\n    latest: {\n      operatingCashFlow: 850000,\n      netCashFlow: 685000\n    },\n    dataSource: 'bulletproof-api'\n  });\n});\n\n// MCP Status endpoint\napp.get('/api/mcp/status', async (req, res) => {\n  try {\n    const response = await fetch('https://mcp-server-tkyu.onrender.com/health', {\n      signal: AbortSignal.timeout(5000)\n    });\n\n    if (response.ok) {\n      const data = await response.json();\n      res.json({\n        connected: true,\n        ...data\n      });\n    } else {\n      res.json({\n        connected: false,\n        error: `MCP Server returned ${response.status}`,\n        url: 'https://mcp-server-tkyu.onrender.com'\n      });\n    }\n  } catch (error) {\n    res.json({\n      connected: false,\n      error: error.message,\n      url: 'https://mcp-server-tkyu.onrender.com'\n    });\n  }\n});\n\n// Catch-all API handler to prevent static file serving for API routes\napp.use('/api/*', (req, res) => {\n  res.status(404).json({\n    error: 'API endpoint not found',\n    path: req.path,\n    method: req.method,\n    timestamp: new Date().toISOString()\n  });\n});\n\n// ==========================================\n// STATIC FILE SERVING (LOWER PRIORITY)\n// ==========================================\n\n// Custom static file middleware that excludes /api routes\nconst customStaticMiddleware = (req, res, next) => {\n  // Skip static file serving for API routes\n  if (req.path.startsWith('/api/') || req.path.startsWith('/health')) {\n    return next();\n  }\n\n  const distPath = path.join(__dirname, '../dist');\n  const filePath = path.join(distPath, req.path);\n\n  // Check if file exists\n  if (fs.existsSync(filePath) && fs.statSync(filePath).isFile()) {\n    res.sendFile(filePath);\n  } else {\n    next();\n  }\n};\n\napp.use(customStaticMiddleware);\n\n// SPA fallback route (must be last)\napp.get('*', (req, res) => {\n  const distPath = path.join(__dirname, '../dist');\n  const indexPath = path.join(distPath, 'index.html');\n\n  if (fs.existsSync(indexPath)) {\n    res.sendFile(indexPath);\n  } else {\n    res.status(404).send(`\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <title>Sentia Manufacturing Dashboard</title>\n        <style>\n          body {\n            font-family: system-ui;\n            text-align: center;\n            padding: 2rem;\n            max-width: 800px;\n            margin: 0 auto;\n          }\n          .status { color: #059669; font-weight: bold; }\n          .error { color: #dc2626; }\n          .info { background: #f0f9ff; padding: 1rem; border-radius: 8px; margin: 1rem 0; }\n          .api-list { text-align: left; background: #f9fafb; padding: 1rem; border-radius: 8px; }\n        </style>\n      </head>\n      <body>\n        <h1>🚀 Sentia Manufacturing Dashboard</h1>\n        <p class=\"status\">Server is running successfully</p>\n        <p class=\"error\">Frontend build not found - please run build process</p>\n\n        <div class=\"info\">\n          <h3>Available API Endpoints:</h3>\n          <div class=\"api-list\">\n            <p><strong>Health:</strong> <a href=\"/health\">/health</a></p>\n            <p><strong>API Status:</strong> <a href=\"/api/status\">/api/status</a></p>\n            <p><strong>Dashboard:</strong> <a href=\"/api/dashboard/summary\">/api/dashboard/summary</a></p>\n            <p><strong>Working Capital:</strong> <a href=\"/api/financial/working-capital\">/api/financial/working-capital</a></p>\n            <p><strong>Cash Flow:</strong> <a href=\"/api/financial/cash-flow\">/api/financial/cash-flow</a></p>\n            <p><strong>MCP Status:</strong> <a href=\"/api/mcp/status\">/api/mcp/status</a></p>\n          </div>\n        </div>\n\n        <p><strong>Environment:</strong> ${process.env.NODE_ENV || 'development'}</p>\n        <p><strong>Version:</strong> 2.0.0-bulletproof</p>\n      </body>\n      </html>\n    `);\n  }\n});\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('Server error:', err);\n\n  if (req.path.startsWith('/api/')) {\n    res.status(500).json({\n      error: 'Internal server error',\n      message: process.env.NODE_ENV === 'development' ? err.message : 'Something went wrong',\n      timestamp: new Date().toISOString()\n    });\n  } else {\n    res.status(500).send('Internal Server Error');\n  }\n});\n\n// Start server\napp.listen(PORT, '0.0.0.0', () => {\n  console.log('\\n========================================');\n  console.log('🚀 SENTIA MANUFACTURING DASHBOARD');\n  console.log('   BULLETPROOF CONFIGURATION');\n  console.log('========================================');\n  console.log(`Server: http://localhost:${PORT}`);\n  console.log(`Health: http://localhost:${PORT}/health`);\n  console.log(`API: http://localhost:${PORT}/api/status`);\n  console.log(`Dashboard: http://localhost:${PORT}/api/dashboard/summary`);\n  console.log(`Environment: ${process.env.NODE_ENV || 'development'}`);\n  console.log(`Clerk: ${Boolean(process.env.VITE_CLERK_PUBLISHABLE_KEY) ? 'Configured' : 'Not configured'}`);\n  console.log('========================================\\n');\n});\n\n// Graceful shutdown\nprocess.on('SIGTERM', () => {\n  console.log('SIGTERM received, shutting down gracefully');\n  process.exit(0);\n});\n\nprocess.on('SIGINT', () => {\n  console.log('SIGINT received, shutting down gracefully');\n  process.exit(0);\n});\n\nexport default app;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\middleware\\auth.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\middleware\\upload.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\routes\\api.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'ensureDatabaseConnection' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 10,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "ensureDatabaseConnection" },
            "fix": { "range": [422, 487], "text": "" },
            "desc": "Remove unused variable 'ensureDatabaseConnection'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'loadWorkingCapital' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 41,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 41,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "loadWorkingCapital" },
            "fix": { "range": [1342, 1856], "text": "" },
            "desc": "Remove unused variable 'loadWorkingCapital'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'buildWorkingCapitalPayload' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 65,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "buildWorkingCapitalPayload" },
            "fix": { "range": [2031, 4618], "text": "" },
            "desc": "Remove unused variable 'buildWorkingCapitalPayload'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'safeFindMany' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 118,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 118,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "safeFindMany" },
            "fix": { "range": [4620, 5002], "text": "" },
            "desc": "Remove unused variable 'safeFindMany'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'buildDashboardMetrics' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 168,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 168,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "buildDashboardMetrics" },
            "fix": { "range": [5966, 8002], "text": "" },
            "desc": "Remove unused variable 'buildDashboardMetrics'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'liabilitySummary' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 176,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 176,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "liabilitySummary" },
            "fix": { "range": [6548, 6606], "text": "" },
            "desc": "Remove unused variable 'liabilitySummary'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'buildDemandForecast' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 220,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 220,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "buildDemandForecast" },
            "fix": { "range": [8004, 9623], "text": "" },
            "desc": "Remove unused variable 'buildDemandForecast'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'computeProductionSummary' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 266,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 266,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "computeProductionSummary" },
            "fix": { "range": [9625, 10547], "text": "" },
            "desc": "Remove unused variable 'computeProductionSummary'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_file' is defined but never used.",
        "line": 554,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 554,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_file" },
            "fix": { "range": [18282, 18287], "text": "" },
            "desc": "Remove unused variable '_file'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 9,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import express from 'express';\n\nimport aiAnalyticsService from '../../services/aiAnalyticsService.js';\nimport { logInfo, logError, logWarn } from '../../services/observability/structuredLogger.js';\nimport xeroService from '../../services/xeroService.js';\nimport { authMiddleware } from '../middleware/auth.js';\nimport { upload, handleUploadError } from '../middleware/upload.js';\n\nimport { sendSSEEvent } from './sse.js';\nimport { ensureDatabaseConnection } from '../database/client.js';\nimport { buildTimeSeries, summarizeSeries, toCurrency, determineTrend } from '../utils/dataTransforms.js';\n\n\nconst router = express.Router();\n\n// In-memory data storage (replace with database in production)\nconst manufacturingData = {\n  production: [],\n  quality: [],\n  inventory: [],\n  maintenance: [],\n  financials: [],\n  lastUpdated: null\n};\n\nconst MAX_WORKING_CAPITAL_ROWS = 24;\nconst FORECAST_PERIODS = 6;\nconst monthFormatter = new Intl.DateTimeFormat('en-GB', { month: 'short', year: 'numeric' });\n\nconst formatNumber = (value, digits = 2) => {\n  const numericValue = Number(value ?? 0);\n  if (!Number.isFinite(numericValue)) {\n    return 0;\n  }\n  const factor = Math.pow(10, digits);\n  return Math.round(numericValue * factor) / factor;\n};\n\nconst formatMonthLabel = (date) => monthFormatter.format(date instanceof Date ? date : new Date(date));\n\nasync function loadWorkingCapital(prisma) {\n  try {\n    const rows = await prisma.workingCapital.findMany({\n      orderBy: { date: 'desc' },\n      take: MAX_WORKING_CAPITAL_ROWS\n    });\n\n    const orderedHistory = rows.slice().reverse();\n    const latest = orderedHistory.length ? orderedHistory[orderedHistory.length - 1] : null;\n\n    return { orderedHistory, latest };\n  } catch (error) {\n    logError('Failed to load working capital from database', error);\n    return { orderedHistory: [], latest: null };\n  }\n}\n\nfunction serializeHistory(entries) {\n  return entries.map((entry) => ({\n    ...entry,\n    date: entry.date instanceof Date ? entry.date.toISOString() : entry.date\n  }));\n}\n\nfunction buildWorkingCapitalPayload(orderedHistory, latest) {\n  if (!latest) {\n    return null;\n  }\n\n  const netSeries = buildTimeSeries(orderedHistory, (entry) => (entry.currentAssets ?? 0) - (entry.currentLiabilities ?? 0));\n  const inventorySeries = buildTimeSeries(orderedHistory, (entry) => entry.inventory ?? 0);\n  const receivableSeries = buildTimeSeries(orderedHistory, (entry) => entry.accountsReceivable ?? 0);\n  const payableSeries = buildTimeSeries(orderedHistory, (entry) => entry.accountsPayable ?? 0);\n  const cashSeries = buildTimeSeries(orderedHistory, (entry) => entry.cash ?? 0);\n\n  const netSummary = summarizeSeries(netSeries);\n  const quickRatio = latest.quickRatio ?? 0;\n  const currentRatio = latest.workingCapitalRatio ?? ((latest.currentAssets ?? 0) / Math.max(latest.currentLiabilities ?? 1, 1));\n  const cashRatio = (latest.cash ?? 0) / Math.max(latest.currentLiabilities ?? 1, 1);\n\n  return {\n    source: 'database',\n    current: {\n      totalWorkingCapital: toCurrency((latest.currentAssets ?? 0) - (latest.currentLiabilities ?? 0)),\n      currentAssets: toCurrency(latest.currentAssets ?? 0),\n      currentLiabilities: toCurrency(latest.currentLiabilities ?? 0),\n      cashFlow: toCurrency(latest.cash ?? 0)\n    },\n    breakdown: {\n      inventory: toCurrency(latest.inventory ?? 0),\n      accountsReceivable: toCurrency(latest.accountsReceivable ?? 0),\n      cash: toCurrency(latest.cash ?? 0),\n      accountsPayable: toCurrency(latest.accountsPayable ?? 0),\n      shortTermDebt: toCurrency(Math.max((latest.currentLiabilities ?? 0) - (latest.accountsPayable ?? 0), 0))\n    },\n    trends: netSeries.map((point) => ({\n      month: formatMonthLabel(point.date),\n      workingCapital: toCurrency(point.value)\n    })),\n    ratios: {\n      currentRatio: formatNumber(currentRatio),\n      quickRatio: formatNumber(quickRatio),\n      cashRatio: formatNumber(cashRatio),\n      change: formatNumber(netSummary.change),\n      trend: netSummary.trend\n    },\n    breakdownSeries: {\n      inventory: inventorySeries.map((point) => ({ month: formatMonthLabel(point.date), value: toCurrency(point.value) })),\n      receivables: receivableSeries.map((point) => ({ month: formatMonthLabel(point.date), value: toCurrency(point.value) })),\n      payables: payableSeries.map((point) => ({ month: formatMonthLabel(point.date), value: toCurrency(point.value) })),\n      cash: cashSeries.map((point) => ({ month: formatMonthLabel(point.date), value: toCurrency(point.value) }))\n    },\n    history: serializeHistory(orderedHistory),\n    timestamp: new Date().toISOString()\n  };\n}\n\nasync function safeFindMany(model, args, label) {\n  try {\n    if (model && typeof model.findMany === 'function') {\n      return await model.findMany(args);\n    }\n  } catch (error) {\n    if (error && error.code === 'P2021') {\n      logWarn('Table not available for ' + label, error);\n    } else {\n      logWarn('Failed to load ' + label + ' records', error);\n    }\n  }\n  return [];\n}\n\nfunction buildDashboardAlerts(latest) {\n  const alerts = [];\n  const currentRatio = latest.workingCapitalRatio ?? ((latest.currentAssets ?? 0) / Math.max(latest.currentLiabilities ?? 1, 1));\n  const cashConversionCycle = latest.cashConversionCycle ?? 0;\n\n  if (currentRatio < 1.2) {\n    alerts.push({\n      type: 'warning',\n      message: 'Current ratio below recommended threshold',\n      metric: 'current_ratio',\n      value: formatNumber(currentRatio)\n    });\n  }\n\n  if ((latest.cash ?? 0) < (latest.currentLiabilities ?? 0) * 0.3) {\n    alerts.push({\n      type: 'info',\n      message: 'Cash reserves trending low relative to liabilities',\n      metric: 'cash',\n      value: toCurrency(latest.cash ?? 0)\n    });\n  }\n\n  if (cashConversionCycle > 80) {\n    alerts.push({\n      type: 'info',\n      message: 'Cash conversion cycle increasing month over month',\n      metric: 'ccc',\n      value: formatNumber(cashConversionCycle)\n    });\n  }\n\n  return alerts;\n}\n\nfunction buildDashboardMetrics(orderedHistory, latest, productionSummary) {\n  const netSeries = buildTimeSeries(orderedHistory, (entry) => (entry.currentAssets ?? 0) - (entry.currentLiabilities ?? 0));\n  const assetSeries = buildTimeSeries(orderedHistory, (entry) => entry.currentAssets ?? 0);\n  const liabilitySeries = buildTimeSeries(orderedHistory, (entry) => entry.currentLiabilities ?? 0);\n  const cashSeries = buildTimeSeries(orderedHistory, (entry) => entry.cash ?? 0);\n\n  const netSummary = summarizeSeries(netSeries);\n  const assetSummary = summarizeSeries(assetSeries);\n  const liabilitySummary = summarizeSeries(liabilitySeries);\n  const cashSummary = summarizeSeries(cashSeries);\n\n  const openOrders = productionSummary && productionSummary.open ? productionSummary.open : 0;\n  const productionChange = productionSummary && productionSummary.change ? productionSummary.change : 0;\n\n  return {\n    kpis: {\n      revenue: {\n        value: toCurrency(assetSummary.current),\n        change: formatNumber(assetSummary.change),\n        trend: assetSummary.trend\n      },\n      orders: {\n        value: formatNumber(openOrders, 0),\n        change: formatNumber(productionChange),\n        trend: determineTrend(productionChange)\n      },\n      efficiency: {\n        value: formatNumber(Math.max(0, Math.min(100, 100 - (latest.cashConversionCycle ?? 0)))),\n        change: formatNumber(netSummary.change),\n        trend: netSummary.trend\n      },\n      quality: {\n        value: formatNumber(Math.min(100, (latest.quickRatio ?? 0) * 50)),\n        change: formatNumber(cashSummary.change),\n        trend: cashSummary.trend\n      }\n    },\n    charts: {\n      salesTrend: assetSeries.map((point) => ({\n        month: formatMonthLabel(point.date),\n        sales: toCurrency(point.value)\n      })),\n      workingCapital: netSeries.map((point) => ({\n        month: formatMonthLabel(point.date),\n        value: toCurrency(point.value)\n      }))\n    },\n    alerts: buildDashboardAlerts(latest),\n    timestamp: new Date().toISOString()\n  };\n}\n\nfunction buildDemandForecast(orderedHistory) {\n  const baseSeries = buildTimeSeries(orderedHistory, (entry) => entry.accountsReceivable ?? entry.currentAssets ?? 0);\n  if (!baseSeries.length) {\n    return { historical: [], forecast: [], accuracy: 0 };\n  }\n\n  const historical = baseSeries.map((point) => ({\n    month: formatMonthLabel(point.date),\n    actual: toCurrency(point.value)\n  }));\n\n  let growthSum = 0;\n  let growthCount = 0;\n  for (let index = 1; index < baseSeries.length; index += 1) {\n    const previous = baseSeries[index - 1].value ?? 0;\n    const current = baseSeries[index].value ?? 0;\n    if (previous !== 0) {\n      growthSum += (current - previous) / Math.abs(previous);\n      growthCount += 1;\n    }\n  }\n\n  const averageGrowth = growthCount ? growthSum / growthCount : 0;\n  const forecast = [];\n  let currentDate = baseSeries[baseSeries.length - 1].date instanceof Date\n    ? new Date(baseSeries[baseSeries.length - 1].date)\n    : new Date(baseSeries[baseSeries.length - 1].date);\n  let currentValue = baseSeries[baseSeries.length - 1].value ?? 0;\n\n  for (let step = 0; step < FORECAST_PERIODS; step += 1) {\n    currentDate = new Date(currentDate.getTime());\n    currentDate.setMonth(currentDate.getMonth() + 1);\n    currentValue = currentValue * (1 + averageGrowth);\n\n    forecast.push({\n      month: formatMonthLabel(currentDate),\n      demand: toCurrency(currentValue),\n      confidence: formatNumber(85 - Math.min(25, Math.abs(averageGrowth * 100)))\n    });\n  }\n\n  const accuracy = formatNumber(90 - Math.min(30, Math.abs(averageGrowth * 100)));\n\n  return { historical, forecast, accuracy };\n}\n\nasync function computeProductionSummary(prisma) {\n  try {\n    const results = await prisma.production.groupBy({\n      by: ['status'],\n      _count: { _all: true }\n    });\n\n    const summary = { open: 0, completed: 0, delayed: 0, change: 0 };\n    results.forEach((row) => {\n      const key = (row.status || '').toLowerCase();\n      if (key === 'pending' || key === 'in_progress') {\n        summary.open += row._count._all;\n      }\n      if (key === 'completed') {\n        summary.completed += row._count._all;\n      }\n      if (key === 'delayed' || key === 'cancelled') {\n        summary.delayed += row._count._all;\n      }\n    });\n\n    return summary;\n  } catch (error) {\n    if (error && error.code === 'P2021') {\n      logWarn('Production table not available yet', error);\n    } else {\n      logWarn('Unable to compute production summary', error);\n    }\n    return { open: 0, completed: 0, delayed: 0, change: 0 };\n  }\n}\n\n// Get manufacturing data\nrouter.get('/manufacturing-data', (req, res) => {\n  try {\n    logInfo('Manufacturing data requested');\n    res.json({\n      ...manufacturingData,\n      timestamp: new Date().toISOString()\n    });\n  } catch (error) {\n    logError('Error retrieving manufacturing data', error);\n    res.status(500).json({ error: 'Failed to retrieve data' });\n  }\n});\n\n// Get dashboard data\nrouter.get('/dashboard-data', (req, res) => {\n  try {\n    logInfo('Dashboard data requested');\n    \n    const dashboardData = {\n      kpis: {\n        revenue: { value: 2847500, change: 12.5, trend: 'up' },\n        orders: { value: 1543, change: -3.2, trend: 'down' },\n        efficiency: { value: 94.2, change: 2.1, trend: 'up' },\n        quality: { value: 98.7, change: 0.5, trend: 'up' }\n      },\n      charts: {\n        salesTrend: [\n          { month: 'Jan', sales: 2400000 },\n          { month: 'Feb', sales: 2100000 },\n          { month: 'Mar', sales: 2800000 },\n          { month: 'Apr', sales: 2600000 },\n          { month: 'May', sales: 3200000 },\n          { month: 'Jun', sales: 2847500 }\n        ],\n        productionMetrics: {\n          efficiency: 94.2,\n          quality: 98.7,\n          capacity: 87.3,\n          downtime: 2.1\n        }\n      },\n      alerts: [\n        { type: 'warning', message: 'Production line 2 efficiency below target' },\n        { type: 'info', message: 'Scheduled maintenance tomorrow at 6 AM' }\n      ],\n      timestamp: new Date().toISOString()\n    };\n    \n    res.json(dashboardData);\n  } catch (error) {\n    logError('Error retrieving dashboard data', error);\n    res.status(500).json({ error: 'Failed to retrieve dashboard data' });\n  }\n});\n\n// Get demand forecasting data\nrouter.get('/demand-forecasting', (req, res) => {\n  try {\n    logInfo('Demand forecasting data requested');\n    \n    const forecastData = {\n      forecast: [\n        { month: 'Jul 2025', demand: 3100000, confidence: 85 },\n        { month: 'Aug 2025', demand: 3400000, confidence: 82 },\n        { month: 'Sep 2025', demand: 3200000, confidence: 78 },\n        { month: 'Oct 2025', demand: 2900000, confidence: 75 },\n        { month: 'Nov 2025', demand: 3600000, confidence: 72 },\n        { month: 'Dec 2025', demand: 4200000, confidence: 68 }\n      ],\n      historical: [\n        { month: 'Jan 2025', actual: 2400000 },\n        { month: 'Feb 2025', actual: 2100000 },\n        { month: 'Mar 2025', actual: 2800000 },\n        { month: 'Apr 2025', actual: 2600000 },\n        { month: 'May 2025', actual: 3200000 },\n        { month: 'Jun 2025', actual: 2847500 }\n      ],\n      accuracy: {\n        lastMonth: 94.2,\n        last3Months: 91.5,\n        last6Months: 88.7\n      },\n      timestamp: new Date().toISOString()\n    };\n    \n    res.json(forecastData);\n  } catch (error) {\n    logError('Error retrieving demand forecasting data', error);\n    res.status(500).json({ error: 'Failed to retrieve forecasting data' });\n  }\n});\n\n// Get working capital data\nrouter.get('/working-capital', (req, res) => {\n  try {\n    logInfo('Working capital data requested');\n    \n    const workingCapitalData = {\n      current: {\n        totalWorkingCapital: 15420000,\n        currentAssets: 28650000,\n        currentLiabilities: 13230000,\n        cashFlow: 2890000\n      },\n      breakdown: {\n        inventory: 12500000,\n        accountsReceivable: 8950000,\n        cash: 7200000,\n        accountsPayable: 9800000,\n        shortTermDebt: 3430000\n      },\n      trends: [\n        { month: 'Jan', workingCapital: 14200000 },\n        { month: 'Feb', workingCapital: 13800000 },\n        { month: 'Mar', workingCapital: 15100000 },\n        { month: 'Apr', workingCapital: 14900000 },\n        { month: 'May', workingCapital: 15800000 },\n        { month: 'Jun', workingCapital: 15420000 }\n      ],\n      ratios: {\n        currentRatio: 2.17,\n        quickRatio: 1.23,\n        cashRatio: 0.54\n      },\n      timestamp: new Date().toISOString()\n    };\n    \n    res.json(workingCapitalData);\n  } catch (error) {\n    logError('Error retrieving working capital data', error);\n    res.status(500).json({ error: 'Failed to retrieve working capital data' });\n  }\n});\n\n// Upload and process data files\nrouter.post('/upload', \n  upload.array('files', 5), \n  handleUploadError,\n  async (req, res) => {\n    try {\n      const files = req.files;\n      if (!files || files.length === 0) {\n        return res.status(400).json({ error: 'No files uploaded' });\n      }\n\n      const results = [];\n      \n      for (const file of files) {\n        logInfo('Processing uploaded file', { filename: file.filename, size: file.size });\n        \n        // Process the file based on type\n        const processedData = await processUploadedFile(file);\n        results.push({\n          filename: file.originalname,\n          records: processedData.length,\n          type: determineDataType(file.originalname)\n        });\n        \n        // Update manufacturing data\n        updateManufacturingData(processedData, file.originalname);\n      }\n      \n      // Send SSE update\n      sendSSEEvent('data-upload', { files: results });\n      \n      res.json({\n        success: true,\n        message: 'Files processed successfully',\n        files: results\n      });\n      \n    } catch (error) {\n      logError('File upload processing error', error);\n      res.status(500).json({ error: 'Failed to process uploaded files' });\n    }\n  }\n);\n\n// Export data\nrouter.get('/export', (req, res) => {\n  try {\n    const { format = 'json', type = 'all' } = req.query;\n    \n    logInfo('Data export requested', { format, type });\n    \n    const data = type === 'all' ? manufacturingData : manufacturingData[type] || {};\n    \n    if (format === 'csv') {\n      // Convert to CSV format\n      const csv = convertToCSV(data);\n      res.setHeader('Content-Type', 'text/csv');\n      res.setHeader('Content-Disposition', `attachment; filename=\"sentia-data-${Date.now()}.csv\"`);\n      res.send(csv);\n    } else {\n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"sentia-data-${Date.now()}.json\"`);\n      res.json(data);\n    }\n    \n  } catch (error) {\n    logError('Data export error', error);\n    res.status(500).json({ error: 'Failed to export data' });\n  }\n});\n\n// Xero integration endpoints\nrouter.get('/xero/health', async (req, res) => {\n  try {\n    const health = await xeroService.healthCheck();\n    res.json(health);\n  } catch (error) {\n    logError('Xero health check error', error);\n    res.status(500).json({ error: 'Xero service unavailable' });\n  }\n});\n\nrouter.get('/xero/data', authMiddleware, async (req, res) => {\n  try {\n    const data = await xeroService.getFinancialData();\n    res.json(data);\n  } catch (error) {\n    logError('Xero data retrieval error', error);\n    res.status(500).json({ error: 'Failed to retrieve Xero data' });\n  }\n});\n\n// AI Analytics endpoints\nrouter.get('/ai/health', async (req, res) => {\n  try {\n    const health = await aiAnalyticsService.healthCheck();\n    res.json(health);\n  } catch (error) {\n    logError('AI Analytics health check error', error);\n    res.status(500).json({ error: 'AI Analytics service unavailable' });\n  }\n});\n\nrouter.post('/ai/analyze', authMiddleware, express.json(), async (req, res) => {\n  try {\n    const { data, analysisType = 'general' } = req.body;\n    \n    if (!data) {\n      return res.status(400).json({ error: 'Data is required for analysis' });\n    }\n    \n    const analysis = await aiAnalyticsService.analyze(data, analysisType);\n    res.json(analysis);\n    \n  } catch (error) {\n    logError('AI analysis error', error);\n    res.status(500).json({ error: 'AI analysis failed' });\n  }\n});\n\n// Helper functions\nasync function processUploadedFile(_file) {\n  // Implementation would process CSV/Excel files\n  // For now, return mock data\n  return [\n    { id: 1, type: 'production', value: Math.random() * 1000 },\n    { id: 2, type: 'quality', value: Math.random() * 100 }\n  ];\n}\n\nfunction determineDataType(filename) {\n  const name = filename.toLowerCase();\n  if (name.includes('production')) return 'production';\n  if (name.includes('quality')) return 'quality';\n  if (name.includes('inventory')) return 'inventory';\n  if (name.includes('financial')) return 'financials';\n  return 'general';\n}\n\nfunction updateManufacturingData(processedData, filename) {\n  const dataType = determineDataType(filename);\n  if (manufacturingData[dataType]) {\n    manufacturingData[dataType] = [...manufacturingData[dataType], ...processedData];\n  } else {\n    manufacturingData[dataType] = processedData;\n  }\n  manufacturingData.lastUpdated = new Date().toISOString();\n}\n\nfunction convertToCSV(data) {\n  // Simple CSV conversion - would need proper implementation for complex data\n  if (Array.isArray(data)) {\n    if (data.length === 0) return '';\n    const headers = Object.keys(data[0]).join(',');\n    const rows = data.map(item => Object.values(item).join(',')).join('\\n');\n    return `${headers  }\\n${  rows}`;\n  }\n  return JSON.stringify(data);\n}\n\nexport default router;\n\n\n\n\n\n\n\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\routes\\auth.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\routes\\data.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\routes\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\routes\\sse.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\services\\data-validator.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\services\\external-api-service.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\server\\services\\initialization.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\App-comprehensive.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\App-enterprise.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\App-multistage.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\LandingPage.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\auth\\BulletproofAuthProvider.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logDebug' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 7,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logDebug" },
            "fix": { "range": [300, 309], "text": "" },
            "desc": "Remove unused variable 'logDebug'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logInfo' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 7,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logInfo" },
            "fix": { "range": [308, 317], "text": "" },
            "desc": "Remove unused variable 'logInfo'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logWarn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 7,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logWarn" },
            "fix": { "range": [317, 326], "text": "" },
            "desc": "Remove unused variable 'logWarn'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'retryCount' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 94,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 94,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "retryCount" },
            "fix": { "range": [3716, 3726], "text": "" },
            "desc": "Remove unused variable 'retryCount'."
          }
        ]
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 176,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 176,
        "endColumn": 35
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 188,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 188,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * BulletproofAuthProvider - consolidated Clerk authentication with graceful fallbacks.\n */\n\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\nimport { ClerkProvider, useAuth as useClerkAuth, useUser as useClerkUser } from '@clerk/clerk-react';\nimport { logDebug, logInfo, logWarn, logError } from '../utils/logger';\n\n\n// Authentication context that always has a value\nconst AuthContext = createContext(null);\n\n// No fallback - Clerk authentication required\nconst NO_AUTH_STATE = {\n  isLoaded: true,\n  isSignedIn: false,\n  userId: null,\n  sessionId: null,\n  user: null,\n  signOut: () => Promise.resolve(),\n  getToken: () => Promise.resolve(null),\n  mode: 'clerk-required'\n};\n\nconst LoadingScreen = () => (\n  <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900\">\n    <div className=\"text-center\">\n      <div className=\"w-12 h-12 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\" />\n      <p className=\"text-gray-600 dark:text-gray-400\">Initializing authentication...</p>\n    </div>\n  </div>\n);\n\nconst AuthError = ({ error, onRetry }) => (\n  <div className=\"min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 p-4\">\n    <div className=\"max-w-md w-full p-8 bg-white dark:bg-gray-800 rounded-lg shadow-xl border border-gray-200 dark:border-gray-700\">\n      <div className=\"text-center mb-6\">\n        <div className=\"w-16 h-16 mx-auto mb-4 bg-red-100 dark:bg-red-900/20 rounded-full flex items-center justify-center\">\n          <svg className=\"w-8 h-8 text-red-600\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\" />\n          </svg>\n        </div>\n        <h2 className=\"text-xl font-bold text-gray-900 dark:text-white mb-2\">Authentication Issue</h2>\n        <p className=\"text-gray-600 dark:text-gray-400 text-sm mb-4\">\n          We were unable to connect to Clerk. Please check your configuration and try again.\n        </p>\n      </div>\n      <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-6\">\n        <p className=\"text-xs text-gray-600 dark:text-gray-400 font-mono break-words\">\n          {error}\n        </p>\n      </div>\n      <div className=\"space-y-3\">\n        <button\n          onClick={onRetry}\n          className=\"w-full px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium\"\n          type=\"button\"\n        >\n          Try Again\n        </button>\n        <button\n          onClick={() => window.location.reload()}\n          className=\"w-full px-4 py-3 bg-gray-200 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded-lg hover:bg-gray-300 dark:hover:bg-gray-600 transition-colors font-medium\"\n          type=\"button\"\n        >\n          Reload Page\n        </button>\n      </div>\n      <div className=\"mt-6 text-center\">\n        <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n          Need assistance? Confirm environment variables and Render configuration before retrying.\n        </p>\n      </div>\n    </div>\n  </div>\n);\n\nfunction InternalAuthProvider({ children }) {\n  const clerkAuth = useClerkAuth();\n  const { user } = useClerkUser();\n\n  const combinedAuth = {\n    ...clerkAuth,\n    user,\n    mode: 'clerk'\n  };\n\n  return <AuthContext.Provider value={combinedAuth}>{children}</AuthContext.Provider>;\n}\n\n// Main bulletproof auth provider\nexport function BulletproofAuthProvider({ children }) {\n  const [authMode, setAuthMode] = useState('initializing');\n  const [retryCount, setRetryCount] = useState(0);\n  const [error, setError] = useState(null);\n\n  const clerkKey = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY;\n\n  // Accept both production (pk_live_) and test (pk_test_) keys\n  const isValidKey = Boolean(\n    clerkKey &&\n    clerkKey.length > 10 &&\n    (clerkKey.startsWith('pk_live_') || clerkKey.startsWith('pk_test_')) &&\n    !clerkKey.includes('your_key_here')\n  );\n\n  const handleRetry = useCallback(() => {\n    setRetryCount(prev => prev + 1);\n    setAuthMode('initializing');\n  }, []);\n\n  const initialize = useCallback(() => {\n    setError(null);\n\n    // Set a timeout to prevent infinite loading\n    const timeoutId = setTimeout(() => {\n      if (authMode === 'initializing') {\n        setAuthMode('clerk');\n      }\n    }, 2000);\n\n    if (!isValidKey) {\n      setError('Clerk configuration is invalid. Please check VITE_CLERK_PUBLISHABLE_KEY.');\n      setAuthMode('error');\n    } else {\n      setAuthMode('clerk');\n    }\n\n    return () => clearTimeout(timeoutId);\n  }, [isValidKey, authMode]);\n\n  useEffect(() => {\n    const cleanup = initialize();\n    return cleanup;\n  }, [initialize]);\n\n  // Show error screen if we have an error\n  if (error || authMode === 'error') {\n    return <AuthError error={error} onRetry={handleRetry} />;\n  }\n\n  // Show loading only briefly during initialization\n  if (authMode === 'initializing') {\n    return <LoadingScreen />;\n  }\n\n  // Use Clerk if available and valid\n  if (authMode === 'clerk' && isValidKey) {\n    try {\n      return (\n        <ClerkProvider\n          publishableKey={clerkKey}\n          navigate={(to) => {\n            if (typeof window !== 'undefined' && window.history) {\n              window.history.pushState({}, '', to);\n              // Trigger a popstate event to notify React Router\n              window.dispatchEvent(new PopStateEvent('popstate', { state: {} }));\n            }\n          }}\n        >\n          <InternalAuthProvider>{children}</InternalAuthProvider>\n        </ClerkProvider>\n      );\n    } catch (err) {\n      logError('ClerkProvider failed to initialize:', err);\n      setError(err.message);\n      setAuthMode('error');\n      return <AuthError error={err.message} onRetry={handleRetry} />;\n    }\n  }\n\n  // No auth available - return null\n  return null;\n}\n\nexport function useBulletproofAuth() {\n  // Try to get auth from context first\n  const contextAuth = useContext(AuthContext);\n\n  if (contextAuth) {\n    return contextAuth;\n  }\n\n  // Return NO_AUTH_STATE as fallback\n  return NO_AUTH_STATE;\n}\n\nexport function useAuthRole() {\n  const auth = useBulletproofAuth();\n\n  if (!auth) {\n    return {\n      role: null,\n      permissions: [],\n      hasPermission: () => false,\n      isAdmin: false,\n      isManager: false,\n      isOperator: false,\n      isViewer: false,\n      isLoading: true,\n      user: null\n    };\n  }\n\n  const role = auth.user?.publicMetadata?.role || 'viewer';\n  const permissions = getPermissionsForRole(role);\n\n  return {\n    role: role,\n    permissions,\n    hasPermission: (permission) => permissions.includes(permission),\n    isAdmin: role === 'admin',\n    isManager: role === 'manager' || role === 'admin',\n    isOperator: role === 'operator' || role === 'manager' || role === 'admin',\n    isViewer: true, // Everyone has viewer permissions\n    isLoading: !auth.isLoaded,\n    user: auth.user\n  };\n}\n\nfunction getPermissionsForRole(role) {\n  const rolePermissions = {\n    admin: ['view', 'edit', 'delete', 'manage_users', 'manage_system', 'financial_management', 'production_control', 'quality_control', 'inventory_management'],\n    manager: ['view', 'edit', 'financial_management', 'production_control', 'quality_control', 'inventory_management'],\n    operator: ['view', 'edit', 'production_control', 'quality_control'],\n    viewer: ['view']\n  };\n\n  return rolePermissions[role] || rolePermissions.viewer;\n}\n\nexport { AuthContext };",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\AIChatbot-simple.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\AIInsights.jsx",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'mockInsights'. Either include it or remove the dependency array.",
        "line": 103,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 103,
        "endColumn": 8,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [mockInsights]",
            "fix": { "range": [3287, 3289], "text": "[mockInsights]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport './AIInsights.css';\n\nconst AIInsights = () => {\n  const [insights, setInsights] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedCategory, setSelectedCategory] = useState('all');\n\n  const mockInsights = [\n    {\n      id: 1,\n      category: 'cash-flow',\n      title: 'Cash Flow Optimization Opportunity',\n      description: 'Your accounts receivable turnover could be improved by 15% with automated invoicing.',\n      impact: 'High',\n      savings: 45000,\n      timeframe: '90 days',\n      confidence: 92,\n      actionItems: [\n        'Implement automated invoicing system',\n        'Set up payment reminders at 15, 30, and 45 days',\n        'Offer early payment discounts (2/10 net 30)'\n      ]\n    },\n    {\n      id: 2,\n      category: 'inventory',\n      title: 'Inventory Level Optimization',\n      description: 'Reduce inventory holding costs by optimizing stock levels based on demand patterns.',\n      impact: 'Medium',\n      savings: 28000,\n      timeframe: '120 days',\n      confidence: 87,\n      actionItems: [\n        'Implement just-in-time inventory management',\n        'Analyze seasonal demand patterns',\n        'Negotiate better supplier payment terms'\n      ]\n    },\n    {\n      id: 3,\n      category: 'procurement',\n      title: 'Supplier Payment Terms Enhancement',\n      description: 'Negotiate extended payment terms with top 5 suppliers to improve cash flow.',\n      impact: 'High',\n      savings: 62000,\n      timeframe: '60 days',\n      confidence: 78,\n      actionItems: [\n        'Review current supplier contracts',\n        'Negotiate 60-day payment terms with key suppliers',\n        'Establish volume-based payment incentives'\n      ]\n    },\n    {\n      id: 4,\n      category: 'forecasting',\n      title: 'Demand Forecasting Improvement',\n      description: 'AI-powered demand forecasting can reduce overstock by 25% and stockouts by 40%.',\n      impact: 'High',\n      savings: 85000,\n      timeframe: '180 days',\n      confidence: 94,\n      actionItems: [\n        'Implement machine learning forecasting models',\n        'Integrate historical sales data with market trends',\n        'Set up automated reorder points'\n      ]\n    },\n    {\n      id: 5,\n      category: 'efficiency',\n      title: 'Production Efficiency Enhancement',\n      description: 'Optimize production scheduling to reduce waste and improve throughput by 12%.',\n      impact: 'Medium',\n      savings: 34000,\n      timeframe: '150 days',\n      confidence: 89,\n      actionItems: [\n        'Analyze current production bottlenecks',\n        'Implement lean manufacturing principles',\n        'Optimize shift scheduling and resource allocation'\n      ]\n    }\n  ];\n\n  const categories = [\n    { id: 'all', name: 'All Insights', icon: '🔍' },\n    { id: 'cash-flow', name: 'Cash Flow', icon: '💰' },\n    { id: 'inventory', name: 'Inventory', icon: '📦' },\n    { id: 'procurement', name: 'Procurement', icon: '🤝' },\n    { id: 'forecasting', name: 'Forecasting', icon: '📈' },\n    { id: 'efficiency', name: 'Efficiency', icon: '⚡' }\n  ];\n\n  useEffect(() => {\n    // Simulate API call\n    setLoading(true);\n    setTimeout(() => {\n      setInsights(mockInsights);\n      setLoading(false);\n    }, 1500);\n  }, []);\n\n  const filteredInsights = selectedCategory === 'all' \n    ? insights \n    : insights.filter(insight => insight.category === selectedCategory);\n\n  const totalSavings = insights.reduce((sum, insight) => sum + insight.savings, 0);\n\n  const getImpactColor = (impact) => {\n    switch (impact) {\n      case 'High': return '#ef4444';\n      case 'Medium': return '#f59e0b';\n      case 'Low': return '#10b981';\n      default: return '#6b7280';\n    }\n  };\n\n  const getConfidenceColor = (confidence) => {\n    if (confidence >= 90) return '#10b981';\n    if (confidence >= 75) return '#f59e0b';\n    return '#ef4444';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"ai-insights\">\n        <div className=\"insights-header\">\n          <h2>🤖 AI-Powered Manufacturing Insights</h2>\n          <p>Analyzing your data to identify optimization opportunities...</p>\n        </div>\n        <div className=\"loading-container\">\n          <div className=\"loading-spinner\"></div>\n          <p>Generating insights...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"ai-insights\">\n      <div className=\"insights-header\">\n        <h2>🤖 AI-Powered Manufacturing Insights</h2>\n        <p>Intelligent recommendations to optimize your manufacturing operations</p>\n      </div>\n\n      <div className=\"insights-summary\">\n        <div className=\"summary-card\">\n          <h3>Total Potential Savings</h3>\n          <div className=\"summary-value\">${totalSavings.toLocaleString()}</div>\n          <p>Annual optimization potential</p>\n        </div>\n        <div className=\"summary-card\">\n          <h3>Active Insights</h3>\n          <div className=\"summary-value\">{insights.length}</div>\n          <p>Actionable recommendations</p>\n        </div>\n        <div className=\"summary-card\">\n          <h3>Average Confidence</h3>\n          <div className=\"summary-value\">\n            {Math.round(insights.reduce((sum, i) => sum + i.confidence, 0) / insights.length)}%\n          </div>\n          <p>AI prediction accuracy</p>\n        </div>\n      </div>\n\n      <div className=\"insights-content\">\n        <div className=\"category-filters\">\n          {categories.map(category => (\n            <button\n              key={category.id}\n              className={`category-filter ${selectedCategory === category.id ? 'active' : ''}`}\n              onClick={() => setSelectedCategory(category.id)}\n            >\n              <span className=\"category-icon\">{category.icon}</span>\n              {category.name}\n            </button>\n          ))}\n        </div>\n\n        <div className=\"insights-grid\">\n          {filteredInsights.map(insight => (\n            <div key={insight.id} className=\"insight-card\">\n              <div className=\"insight-header\">\n                <h3>{insight.title}</h3>\n                <div className=\"insight-badges\">\n                  <span \n                    className=\"impact-badge\"\n                    style={{ backgroundColor: getImpactColor(insight.impact) }}\n                  >\n                    {insight.impact} Impact\n                  </span>\n                  <span \n                    className=\"confidence-badge\"\n                    style={{ backgroundColor: getConfidenceColor(insight.confidence) }}\n                  >\n                    {insight.confidence}% Confidence\n                  </span>\n                </div>\n              </div>\n\n              <p className=\"insight-description\">{insight.description}</p>\n\n              <div className=\"insight-metrics\">\n                <div className=\"metric\">\n                  <span className=\"metric-label\">Potential Savings</span>\n                  <span className=\"metric-value\">${insight.savings.toLocaleString()}</span>\n                </div>\n                <div className=\"metric\">\n                  <span className=\"metric-label\">Implementation Time</span>\n                  <span className=\"metric-value\">{insight.timeframe}</span>\n                </div>\n              </div>\n\n              <div className=\"action-items\">\n                <h4>Recommended Actions:</h4>\n                <ul>\n                  {insight.actionItems.map((action, index) => (\n                    <li key={index}>{action}</li>\n                  ))}\n                </ul>\n              </div>\n\n              <div className=\"insight-actions\">\n                <button className=\"action-button primary\">Implement</button>\n                <button className=\"action-button secondary\">Learn More</button>\n                <button className=\"action-button tertiary\">Dismiss</button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AIInsights;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\AI\\AIAnalytics.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\AI\\AIAnalyticsDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'setAnomalies' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 19,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "setAnomalies" },
            "fix": { "range": [778, 792], "text": "" },
            "desc": "Remove unused variable 'setAnomalies'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'setAutomatedActions' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 25,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 25,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "setAutomatedActions" },
            "fix": { "range": [1324, 1345], "text": "" },
            "desc": "Remove unused variable 'setAutomatedActions'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 53,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\n\nconst AIAnalyticsDashboard = () => {\n  const [aiStatus, setAiStatus] = useState({\n    connected: true,\n    models: ['GPT-4', 'Claude 3.5', 'Custom ML Models'],\n    activeProcesses: 3,\n    lastUpdate: new Date().toLocaleTimeString()\n  });\n\n  const [predictions, setPredictions] = useState([\n    { category: 'Sales Forecast', value: '+23%', confidence: 92, trend: 'up' },\n    { category: 'Inventory Optimization', value: '-15%', confidence: 88, trend: 'down' },\n    { category: 'Production Efficiency', value: '+8%', confidence: 95, trend: 'up' },\n    { category: 'Quality Score', value: '98.5%', confidence: 97, trend: 'stable' }\n  ]);\n\n  const [anomalies, setAnomalies] = useState([\n    { id: 1, type: 'warning', title: 'Unusual Order Pattern', description: 'Detected 43% increase in orders from Region B', timestamp: '2 hours ago', severity: 'medium' },\n    { id: 2, type: 'critical', title: 'Quality Deviation', description: 'Product line C showing 2.3 sigma deviation', timestamp: '4 hours ago', severity: 'high' },\n    { id: 3, type: 'info', title: 'Demand Spike', description: 'Expected 30% demand increase next week', timestamp: '6 hours ago', severity: 'low' }\n  ]);\n\n  const [automatedActions, setAutomatedActions] = useState([\n    { id: 1, action: 'Inventory Reorder', status: 'completed', impact: 'Saved $12,000', time: '10:30 AM' },\n    { id: 2, action: 'Production Schedule Optimization', status: 'in-progress', impact: 'Est. 15% efficiency gain', time: '11:15 AM' },\n    { id: 3, action: 'Price Adjustment', status: 'pending', impact: 'Projected +$8,000 revenue', time: '11:45 AM' }\n  ]);\n\n  const [mcpConnection, setMcpConnection] = useState({\n    status: 'connecting',\n    latency: 0,\n    requests: 0,\n    errors: 0\n  });\n\n  // Simulate MCP server connection check\n  useEffect(() => {\n    const checkMCPConnection = async () => {\n      try {\n        const response = await fetch('/api/mcp/health');\n        if (response.ok) {\n          setMcpConnection({\n            status: 'connected',\n            latency: Math.floor(Math.random() * 50) + 10,\n            requests: Math.floor(Math.random() * 1000) + 500,\n            errors: Math.floor(Math.random() * 5)\n          });\n        } else {\n          setMcpConnection(prev => ({ ...prev, status: 'error' }));\n        }\n      } catch (error) {\n        setMcpConnection(prev => ({ ...prev, status: 'disconnected' }));\n      }\n    };\n\n    checkMCPConnection();\n    const interval = setInterval(checkMCPConnection, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const runAIAnalysis = () => {\n    // Simulate running AI analysis\n    setAiStatus(prev => ({ ...prev, activeProcesses: prev.activeProcesses + 1 }));\n    setTimeout(() => {\n      setAiStatus(prev => ({\n        ...prev,\n        activeProcesses: prev.activeProcesses - 1,\n        lastUpdate: new Date().toLocaleTimeString()\n      }));\n      // Update predictions with new values\n      setPredictions(prev => prev.map(p => ({\n        ...p,\n        value: p.trend === 'up' ? `+${Math.floor(Math.random() * 30 + 10)}%` :\n                p.trend === 'down' ? `-${Math.floor(Math.random() * 20 + 5)}%` :\n                `${Math.floor(Math.random() * 5 + 95)}%`,\n        confidence: Math.floor(Math.random() * 15 + 85)\n      })));\n    }, 3000);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">AI Analytics Central</h1>\n          <p className=\"text-gray-600 mt-1\">Powered by MCP Server & Multiple AI Models</p>\n        </div>\n        <button\n          onClick={runAIAnalysis}\n          className=\"px-6 py-3 bg-gradient-to-r from-purple-600 to-pink-600 text-white font-medium rounded-lg hover:from-purple-700 hover:to-pink-700 transition-all\"\n        >\n          Run AI Analysis\n        </button>\n      </div>\n\n      {/* MCP Server Status */}\n      <Card className=\"border-2 border-purple-200 bg-gradient-to-r from-purple-50 to-pink-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>MCP Server Connection</span>\n            <span className={`text-sm px-3 py-1 rounded-full ${\n              mcpConnection.status === 'connected' ? 'bg-green-100 text-green-800' :\n              mcpConnection.status === 'connecting' ? 'bg-yellow-100 text-yellow-800' :\n              'bg-red-100 text-red-800'\n            }`}>\n              {mcpConnection.status === 'connected' ? '● Connected' :\n               mcpConnection.status === 'connecting' ? '◐ Connecting...' :\n               '○ Disconnected'}\n            </span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div>\n              <p className=\"text-xs text-gray-600\">Latency</p>\n              <p className=\"text-xl font-bold text-purple-700\">{mcpConnection.latency}ms</p>\n            </div>\n            <div>\n              <p className=\"text-xs text-gray-600\">API Requests</p>\n              <p className=\"text-xl font-bold text-purple-700\">{mcpConnection.requests}</p>\n            </div>\n            <div>\n              <p className=\"text-xs text-gray-600\">Errors</p>\n              <p className=\"text-xl font-bold text-red-600\">{mcpConnection.errors}</p>\n            </div>\n            <div>\n              <p className=\"text-xs text-gray-600\">Active Models</p>\n              <p className=\"text-xl font-bold text-purple-700\">{aiStatus.models.length}</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI Models Status */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {aiStatus.models.map((model, index) => (\n          <Card key={index} className=\"bg-gradient-to-br from-gray-50 to-gray-100\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"text-2xl\">🤖</div>\n                <span className=\"text-xs px-2 py-1 bg-green-100 text-green-800 rounded\">Active</span>\n              </div>\n              <h3 className=\"font-medium text-gray-900\">{model}</h3>\n              <div className=\"mt-2 space-y-1\">\n                <div className=\"flex justify-between text-xs\">\n                  <span className=\"text-gray-600\">Processing</span>\n                  <span className=\"text-gray-900 font-medium\">\n                    {index === 0 ? '423 req/min' : index === 1 ? '312 req/min' : '156 req/min'}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-xs\">\n                  <span className=\"text-gray-600\">Accuracy</span>\n                  <span className=\"text-gray-900 font-medium\">\n                    {index === 0 ? '96.2%' : index === 1 ? '94.8%' : '92.3%'}\n                  </span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n\n      {/* AI Predictions */}\n      <Card>\n        <CardHeader>\n          <CardTitle>AI Predictions & Insights</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n            {predictions.map((prediction, index) => (\n              <div key={index} className=\"p-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg\">\n                <div className=\"flex justify-between items-start mb-2\">\n                  <h4 className=\"text-sm font-medium text-gray-700\">{prediction.category}</h4>\n                  <span className={`text-xl ${\n                    prediction.trend === 'up' ? 'text-green-600' :\n                    prediction.trend === 'down' ? 'text-red-600' :\n                    'text-blue-600'\n                  }`}>\n                    {prediction.trend === 'up' ? '↑' :\n                     prediction.trend === 'down' ? '↓' : '→'}\n                  </span>\n                </div>\n                <p className=\"text-2xl font-bold text-gray-900\">{prediction.value}</p>\n                <div className=\"mt-2\">\n                  <div className=\"flex justify-between text-xs text-gray-600 mb-1\">\n                    <span>Confidence</span>\n                    <span>{prediction.confidence}%</span>\n                  </div>\n                  <div className=\"w-full bg-gray-200 rounded-full h-1.5\">\n                    <div\n                      className=\"bg-gradient-to-r from-blue-500 to-indigo-500 h-1.5 rounded-full\"\n                      style={{ width: `${prediction.confidence}%` }}\n                    ></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Anomaly Detection */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Anomaly Detection</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {anomalies.map((anomaly) => (\n                <div\n                  key={anomaly.id}\n                  className={`p-4 rounded-lg border ${\n                    anomaly.severity === 'high' ? 'bg-red-50 border-red-200' :\n                    anomaly.severity === 'medium' ? 'bg-yellow-50 border-yellow-200' :\n                    'bg-blue-50 border-blue-200'\n                  }`}\n                >\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-gray-900\">{anomaly.title}</h4>\n                      <p className=\"text-sm text-gray-600 mt-1\">{anomaly.description}</p>\n                      <p className=\"text-xs text-gray-500 mt-2\">{anomaly.timestamp}</p>\n                    </div>\n                    <span className={`text-2xl ${\n                      anomaly.severity === 'high' ? 'text-red-500' :\n                      anomaly.severity === 'medium' ? 'text-yellow-500' :\n                      'text-blue-500'\n                    }`}>\n                      {anomaly.severity === 'high' ? '⚠️' :\n                       anomaly.severity === 'medium' ? '⚡' : 'ℹ️'}\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Automated Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>AI-Driven Automated Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-3\">\n              {automatedActions.map((action) => (\n                <div key={action.id} className=\"p-4 bg-gray-50 rounded-lg\">\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"font-medium text-gray-900\">{action.action}</h4>\n                    <span className={`text-xs px-2 py-1 rounded-full ${\n                      action.status === 'completed' ? 'bg-green-100 text-green-800' :\n                      action.status === 'in-progress' ? 'bg-yellow-100 text-yellow-800' :\n                      'bg-gray-100 text-gray-800'\n                    }`}>\n                      {action.status}\n                    </span>\n                  </div>\n                  <p className=\"text-sm text-gray-600\">{action.impact}</p>\n                  <p className=\"text-xs text-gray-500 mt-2\">Executed at {action.time}</p>\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-4\">\n              <button className=\"w-full py-2 bg-gray-200 text-gray-700 rounded-lg hover:bg-gray-300 transition-colors text-sm font-medium\">\n                View All Automated Actions →\n              </button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* AI Performance Metrics */}\n      <Card>\n        <CardHeader>\n          <CardTitle>AI System Performance</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Total Predictions</p>\n              <p className=\"text-2xl font-bold text-gray-900\">12,543</p>\n              <p className=\"text-xs text-green-600 mt-1\">+23% this week</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Accuracy Rate</p>\n              <p className=\"text-2xl font-bold text-gray-900\">94.7%</p>\n              <p className=\"text-xs text-green-600 mt-1\">+2.3% improvement</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Processing Time</p>\n              <p className=\"text-2xl font-bold text-gray-900\">1.2s</p>\n              <p className=\"text-xs text-blue-600 mt-1\">Avg response time</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Cost Savings</p>\n              <p className=\"text-2xl font-bold text-gray-900\">$45.2K</p>\n              <p className=\"text-xs text-green-600 mt-1\">This month</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default AIAnalyticsDashboard;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\AdminPanel.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ChatBot.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\DashboardLayout.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\DataImport.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\DemandForecasting.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ExecutiveDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "motion" },
            "fix": { "range": [36, 74], "text": "" },
            "desc": "Remove unused variable 'motion'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'index' is defined but never used.",
        "line": 173,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 173,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [6554, 6561], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'index' is defined but never used.",
        "line": 200,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 200,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [7618, 7625], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState,  } from 'react';\nimport { motion } from 'framer-motion'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { Button } from '@/components/ui/button'\nimport { Progress } from '@/components/ui/progress'\nimport { \n  TrendingUp, \n  TrendingDown, \n  DollarSign, \n  Users, \n  Package, \n  Activity,\n  ArrowUpRight,\n  ArrowDownRight,\n  BarChart3,\n  PieChart,\n  Target\n} from 'lucide-react'\n\nconst ExecutiveDashboard = () => {\n  const [metrics] = useState({\n    totalRevenue: { value: '£2.5M', change: '+15.2%', trend: 'up' },\n    activeOrders: { value: '1,250', change: '+8.5%', trend: 'up' },\n    inventoryValue: { value: '£0.8M', change: '-2.1%', trend: 'down' },\n    activeCustomers: { value: '850', change: '+12.3%', trend: 'up' }\n  })\n\n  const [workingCapital] = useState({\n    current: '£1.9M',\n    projection: '£2.1M',\n    change: '+19.5%'\n  })\n\n  const [kpis] = useState([\n    { label: 'Revenue Growth', value: '+15.2%', target: 85 },\n    { label: 'Order Fulfillment', value: '94.8%', target: 95 },\n    { label: 'Customer Satisfaction', value: '4.7/5', target: 90 },\n    { label: 'Inventory Turnover', value: '8.2x', target: 75 }\n  ])\n\n  const quickActions = [\n    {\n      title: 'Run Forecast',\n      description: 'Generate demand forecast',\n      icon: BarChart3,\n      color: 'bg-blue-500'\n    },\n    {\n      title: 'Working Capital',\n      description: 'Analyze cash flow',\n      icon: DollarSign,\n      color: 'bg-green-500'\n    },\n    {\n      title: 'What-If Analysis',\n      description: 'Scenario modeling',\n      icon: Target,\n      color: 'bg-purple-500'\n    }\n  ]\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900 dark:text-white\">Executive Dashboard</h1>\n          <p className=\"text-slate-600 dark:text-slate-400\">Real-time manufacturing operations overview</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n            <Activity className=\"h-3 w-3 mr-1\" />\n            All Systems Operational\n          </Badge>\n          <span className=\"text-sm text-slate-500\">18:24:24</span>\n        </div>\n      </div>\n\n      {/* Key Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        {Object.entries(metrics).map(([key, metric], index) => (\n          <motion.div\n            key={key}\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ delay: index * 0.1 }}\n          >\n            <Card className=\"hover:shadow-lg transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <p className=\"text-sm font-medium text-slate-600 dark:text-slate-400 capitalize\">\n                      {key.replace(/([A-Z])/g, ' $1').trim()}\n                    </p>\n                    <p className=\"text-2xl font-bold text-slate-900 dark:text-white\">\n                      {metric.value}\n                    </p>\n                  </div>\n                  <div className={`p-2 rounded-lg ${\n                    metric.trend === 'up' ? 'bg-green-100 dark:bg-green-900/20' : 'bg-red-100 dark:bg-red-900/20'\n                  }`}>\n                    {metric.trend === 'up' ? (\n                      <TrendingUp className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n                    ) : (\n                      <TrendingDown className=\"h-5 w-5 text-red-600 dark:text-red-400\" />\n                    )}\n                  </div>\n                </div>\n                <div className=\"flex items-center mt-4\">\n                  {metric.trend === 'up' ? (\n                    <ArrowUpRight className=\"h-4 w-4 text-green-600 dark:text-green-400 mr-1\" />\n                  ) : (\n                    <ArrowDownRight className=\"h-4 w-4 text-red-600 dark:text-red-400 mr-1\" />\n                  )}\n                  <span className={`text-sm font-medium ${\n                    metric.trend === 'up' ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'\n                  }`}>\n                    {metric.change}\n                  </span>\n                  <span className=\"text-sm text-slate-500 ml-2\">vs last month</span>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Working Capital Section */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <motion.div\n          initial={{ opacity: 0, x: -20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.4 }}\n        >\n          <Card className=\"lg:col-span-2\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <DollarSign className=\"h-5 w-5 text-green-600\" />\n                <span>Working Capital</span>\n              </CardTitle>\n              <CardDescription>Current position and 90-day projection</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-2 gap-6\">\n                <div>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">Current</p>\n                  <p className=\"text-3xl font-bold text-slate-900 dark:text-white\">{workingCapital.current}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-slate-600 dark:text-slate-400\">90-Day Projection</p>\n                  <p className=\"text-3xl font-bold text-green-600\">{workingCapital.projection}</p>\n                  <div className=\"flex items-center mt-2\">\n                    <ArrowUpRight className=\"h-4 w-4 text-green-600 mr-1\" />\n                    <span className=\"text-sm font-medium text-green-600\">{workingCapital.change}</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </motion.div>\n\n        <motion.div\n          initial={{ opacity: 0, x: 20 }}\n          animate={{ opacity: 1, x: 0 }}\n          transition={{ delay: 0.5 }}\n        >\n          <Card>\n            <CardHeader>\n              <CardTitle>Key Performance Metrics</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {kpis.map((kpi, index) => (\n                <div key={kpi.label} className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm font-medium text-slate-700 dark:text-slate-300\">{kpi.label}</span>\n                    <span className=\"text-sm font-bold text-slate-900 dark:text-white\">{kpi.value}</span>\n                  </div>\n                  <Progress value={kpi.target} className=\"h-2\" />\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </motion.div>\n      </div>\n\n      {/* Quick Actions */}\n      <motion.div\n        initial={{ opacity: 0, y: 20 }}\n        animate={{ opacity: 1, y: 0 }}\n        transition={{ delay: 0.6 }}\n      >\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n            <CardDescription>Frequently used analysis tools</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              {quickActions.map((action, index) => (\n                <Button\n                  key={action.title}\n                  variant=\"outline\"\n                  className=\"h-auto p-4 flex flex-col items-start space-y-2 hover:bg-slate-50 dark:hover:bg-slate-800\"\n                >\n                  <div className={`p-2 rounded-lg ${action.color} text-white`}>\n                    <action.icon className=\"h-5 w-5\" />\n                  </div>\n                  <div className=\"text-left\">\n                    <p className=\"font-medium text-slate-900 dark:text-white\">{action.title}</p>\n                    <p className=\"text-sm text-slate-600 dark:text-slate-400\">{action.description}</p>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      </motion.div>\n    </div>\n  )\n}\n\nexport default ExecutiveDashboard\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ExecutiveDashboardAdvanced.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\Executive\\ExecutiveDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\FinancialReports.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\InventoryManagement.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\LandingPage.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 4,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "motion" },
            "fix": { "range": [144, 182], "text": "" },
            "desc": "Remove unused variable 'motion'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'navigate' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 26,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "navigate" },
            "fix": { "range": [607, 637], "text": "" },
            "desc": "Remove unused variable 'navigate'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'hoveredFeature' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 27,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 27,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "hoveredFeature" },
            "fix": { "range": [647, 661], "text": "" },
            "desc": "Remove unused variable 'hoveredFeature'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { SignInButton, SignUpButton } from '@clerk/clerk-react'\nimport { motion } from 'framer-motion'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Badge } from '@/components/ui/badge'\nimport { \n  TrendingUp, \n  Calculator, \n  BarChart3, \n  PieChart, \n  Target, \n  Zap,\n  Shield,\n  Users,\n  Globe,\n  ArrowRight,\n  CheckCircle,\n  DollarSign,\n  Clock,\n  TrendingDown\n} from 'lucide-react'\n\nconst LandingPage = () => {\n  const navigate = useNavigate()\n  const [hoveredFeature, setHoveredFeature] = useState(null)\n\n  const features = [\n    {\n      icon: Calculator,\n      title: \"Working Capital Calculator\",\n      description: \"Advanced cash flow analysis with 30-180 day projections\",\n      color: \"text-blue-500\",\n      bgColor: \"bg-blue-500/10\"\n    },\n    {\n      icon: TrendingUp,\n      title: \"Growth Scenario Modeling\",\n      description: \"Model different growth rates and funding requirements\",\n      color: \"text-green-500\",\n      bgColor: \"bg-green-500/10\"\n    },\n    {\n      icon: BarChart3,\n      title: \"Industry Benchmarking\",\n      description: \"Compare performance against industry standards\",\n      color: \"text-purple-500\",\n      bgColor: \"bg-purple-500/10\"\n    },\n    {\n      icon: PieChart,\n      title: \"AI-Powered Insights\",\n      description: \"Machine learning analytics for predictive forecasting\",\n      color: \"text-orange-500\",\n      bgColor: \"bg-orange-500/10\"\n    },\n    {\n      icon: Target,\n      title: \"Cash Flow Optimization\",\n      description: \"Identify opportunities to unlock working capital\",\n      color: \"text-red-500\",\n      bgColor: \"bg-red-500/10\"\n    },\n    {\n      icon: Zap,\n      title: \"Real-Time Processing\",\n      description: \"Live data integration with instant calculations\",\n      color: \"text-yellow-500\",\n      bgColor: \"bg-yellow-500/10\"\n    }\n  ]\n\n  const stats = [\n    { label: \"Average Cash Unlock\", value: \"£83K\", subtext: \"in 90 days\", icon: DollarSign },\n    { label: \"Improvement Potential\", value: \"£334K\", subtext: \"12-month projection\", icon: TrendingUp },\n    { label: \"Processing Time\", value: \"<2s\", subtext: \"real-time analysis\", icon: Clock },\n    { label: \"Efficiency Gain\", value: \"46\", subtext: \"days reduction\", icon: TrendingDown }\n  ]\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900\">\n      {/* Navigation Header */}\n      <nav className=\"relative z-50 px-6 py-4\">\n        <div className=\"max-w-7xl mx-auto flex items-center justify-between\">\n          <motion.div \n            initial={{ opacity: 0, x: -20 }}\n            animate={{ opacity: 1, x: 0 }}\n            className=\"flex items-center space-x-3\"\n          >\n            <div className=\"w-10 h-10 bg-blue-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-xl\">S</span>\n            </div>\n            <div>\n              <h1 className=\"text-white font-bold text-xl\">Sentia Manufacturing</h1>\n              <p className=\"text-blue-200 text-sm\">Enterprise Dashboard</p>\n            </div>\n          </motion.div>\n          \n          <motion.div \n            initial={{ opacity: 0, x: 20 }}\n            animate={{ opacity: 1, x: 0 }}\n            className=\"flex items-center space-x-4\"\n          >\n            <SignInButton mode=\"modal\">\n              <Button variant=\"ghost\" className=\"text-white hover:bg-white/10\">\n                Sign In\n              </Button>\n            </SignInButton>\n            <SignUpButton mode=\"modal\">\n              <Button className=\"bg-blue-600 hover:bg-blue-700 text-white\">\n                Get Started\n              </Button>\n            </SignUpButton>\n          </motion.div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"relative px-6 py-20\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 30 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.8 }}\n          >\n            <Badge className=\"mb-6 bg-blue-600/20 text-blue-200 border-blue-600/30\">\n              Working Capital & Cash Flow Experts\n            </Badge>\n            \n            <h1 className=\"text-5xl md:text-7xl font-bold text-white mb-6 leading-tight\">\n              Unlock Your\n              <span className=\"bg-gradient-to-r from-blue-400 to-purple-400 bg-clip-text text-transparent\">\n                {\" \"}Working Capital\n              </span>\n            </h1>\n            \n            <p className=\"text-xl text-blue-100 mb-8 max-w-3xl mx-auto leading-relaxed\">\n              Enterprise-grade financial intelligence platform that answers three critical questions: \n              How much cash do you need? When do you need funding? How much to fund growth?\n            </p>\n            \n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center items-center\">\n              <SignUpButton mode=\"modal\">\n                <Button size=\"lg\" className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4 text-lg\">\n                  Start Free Analysis\n                  <ArrowRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </SignUpButton>\n              \n              <Button \n                size=\"lg\" \n                variant=\"outline\" \n                className=\"border-blue-400 text-blue-200 hover:bg-blue-600/10 px-8 py-4 text-lg\"\n                onClick={() => document.getElementById('demo').scrollIntoView({ behavior: 'smooth' })}\n              >\n                Watch Demo\n              </Button>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"px-6 py-16\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            {stats.map((stat, index) => (\n              <motion.div\n                key={stat.label}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n              >\n                <Card className=\"bg-white/5 border-white/10 backdrop-blur-sm\">\n                  <CardContent className=\"p-6 text-center\">\n                    <stat.icon className=\"h-8 w-8 text-blue-400 mx-auto mb-3\" />\n                    <div className=\"text-3xl font-bold text-white mb-1\">{stat.value}</div>\n                    <div className=\"text-blue-200 text-sm\">{stat.subtext}</div>\n                    <div className=\"text-blue-300 text-xs mt-1\">{stat.label}</div>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"px-6 py-20\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            className=\"text-center mb-16\"\n          >\n            <h2 className=\"text-4xl font-bold text-white mb-4\">\n              Enterprise-Grade Financial Intelligence\n            </h2>\n            <p className=\"text-xl text-blue-200 max-w-3xl mx-auto\">\n              Comprehensive suite of tools designed for CFOs, Finance Directors, and Business Analysts \n              who demand accurate, actionable insights for strategic decision making.\n            </p>\n          </motion.div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <motion.div\n                key={feature.title}\n                initial={{ opacity: 0, y: 30 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ delay: index * 0.1 }}\n                onHoverStart={() => setHoveredFeature(index)}\n                onHoverEnd={() => setHoveredFeature(null)}\n              >\n                <Card className=\"bg-white/5 border-white/10 backdrop-blur-sm hover:bg-white/10 transition-all duration-300 h-full\">\n                  <CardHeader>\n                    <div className={`w-12 h-12 rounded-lg ${feature.bgColor} flex items-center justify-center mb-4`}>\n                      <feature.icon className={`h-6 w-6 ${feature.color}`} />\n                    </div>\n                    <CardTitle className=\"text-white text-xl\">{feature.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <CardDescription className=\"text-blue-200 text-base leading-relaxed\">\n                      {feature.description}\n                    </CardDescription>\n                  </CardContent>\n                </Card>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"px-6 py-20\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n          >\n            <Card className=\"bg-gradient-to-r from-blue-600/20 to-purple-600/20 border-blue-500/30 backdrop-blur-sm\">\n              <CardContent className=\"p-12\">\n                <h2 className=\"text-3xl font-bold text-white mb-4\">\n                  Ready to Optimize Your Working Capital?\n                </h2>\n                <p className=\"text-blue-200 text-lg mb-8 max-w-2xl mx-auto\">\n                  Join enterprise leaders who trust Sentia Manufacturing Dashboard \n                  for critical financial decision making and cash flow optimization.\n                </p>\n                \n                <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                  <SignUpButton mode=\"modal\">\n                    <Button size=\"lg\" className=\"bg-blue-600 hover:bg-blue-700 text-white px-8 py-4\">\n                      Access Enterprise Dashboard\n                      <ArrowRight className=\"ml-2 h-5 w-5\" />\n                    </Button>\n                  </SignUpButton>\n                </div>\n                \n                <div className=\"flex items-center justify-center mt-6 space-x-6 text-sm text-blue-300\">\n                  <div className=\"flex items-center\">\n                    <CheckCircle className=\"h-4 w-4 mr-2\" />\n                    Enterprise Security\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Shield className=\"h-4 w-4 mr-2\" />\n                    SOC 2 Compliant\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Users className=\"h-4 w-4 mr-2\" />\n                    24/7 Support\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"px-6 py-8 border-t border-white/10\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <p className=\"text-blue-300\">\n            © 2025 Sentia Manufacturing Dashboard. Enterprise Working Capital Intelligence Platform.\n          </p>\n        </div>\n      </footer>\n    </div>\n  )\n}\n\nexport default LandingPage\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\MultiStageLoader.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useCallback' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 49,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useCallback" },
            "fix": { "range": [35, 48], "text": "" },
            "desc": "Remove unused variable 'useCallback'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "motion" },
            "fix": { "range": [74, 81], "text": "" },
            "desc": "Remove unused variable 'motion'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect, useCallback } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\n\nconst LOADING_STAGES = [\n  { id: 1, name: 'Core Systems', description: 'Initializing enterprise core...', duration: 800 },\n  { id: 2, name: 'Authentication', description: 'Securing access controls...', duration: 1200 },\n  { id: 3, name: 'Database Connection', description: 'Connecting to PostgreSQL...', duration: 1000 },\n  { id: 4, name: 'API Gateway', description: 'Establishing API connections...', duration: 900 },\n  { id: 5, name: 'AI Engine', description: 'Loading MCP AI orchestration...', duration: 1500 },\n  { id: 6, name: 'Dashboard Components', description: 'Building enterprise UI...', duration: 1100 },\n  { id: 7, name: 'Real-time Systems', description: 'Activating WebSocket streams...', duration: 800 },\n  { id: 8, name: 'Data Synchronization', description: 'Syncing with external systems...', duration: 1300 },\n  { id: 9, name: 'Analytics Engine', description: 'Preparing intelligence layer...', duration: 1000 },\n  { id: 10, name: 'Final Optimization', description: 'Optimizing performance...', duration: 600 }\n];\n\nconst MultiStageLoader = ({ onComplete, progress: externalProgress }) => {\n  const [currentStage, setCurrentStage] = useState(0);\n  const [progress, setProgress] = useState(0);\n  const [stageProgress, setStageProgress] = useState(0);\n\n  // Use external progress if provided, otherwise use internal progress\n  const displayProgress = externalProgress !== undefined ? externalProgress : progress;\n\n  useEffect(() => {\n    if (currentStage >= LOADING_STAGES.length) {\n      setTimeout(() => {\n        onComplete();\n      }, 500);\n      return;\n    }\n\n    const stage = LOADING_STAGES[currentStage];\n    const interval = setInterval(() => {\n      setStageProgress(prev => {\n        if (prev >= 100) {\n          clearInterval(interval);\n          setCurrentStage(currentStage + 1);\n          setProgress(((currentStage + 1) / LOADING_STAGES.length) * 100);\n          return 0;\n        }\n        return prev + (100 / (stage.duration / 50));\n      });\n    }, 50);\n\n    return () => clearInterval(interval);\n  }, [currentStage, onComplete]);\n\n  const currentStageData = LOADING_STAGES[currentStage] || LOADING_STAGES[LOADING_STAGES.length - 1];\n\n  return (\n    <div className=\"fixed inset-0 bg-gradient-to-br from-gray-900 via-blue-900 to-gray-900 flex items-center justify-center z-50\">\n      <div className=\"max-w-2xl w-full px-8\">\n        {/* Logo and Title */}\n        <div className=\"text-center mb-12\">\n          <div className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-blue-500 to-blue-700 rounded-2xl mb-4 shadow-2xl\">\n            <span className=\"text-white font-bold text-3xl\">S</span>\n          </div>\n          <h1 className=\"text-4xl font-bold text-white mb-2\">\n            Sentia Manufacturing\n          </h1>\n          <p className=\"text-blue-200 text-lg\">Enterprise Intelligence Platform</p>\n        </div>\n\n        {/* Loading Stages */}\n        <div className=\"bg-gray-800/50 backdrop-blur rounded-2xl p-8 shadow-2xl\">\n          {/* Stage Info */}\n          <div className=\"mb-6\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <h2 className=\"text-xl font-semibold text-white\">\n                Stage {Math.min(currentStage + 1, LOADING_STAGES.length)} of {LOADING_STAGES.length}\n              </h2>\n              <span className=\"text-blue-400 font-mono text-sm\">\n                {Math.round(progress)}%\n              </span>\n            </div>\n            <AnimatePresence mode=\"wait\">\n              <motion.div\n                key={currentStage}\n                initial={{ opacity: 0, y: 10 }}\n                animate={{ opacity: 1, y: 0 }}\n                exit={{ opacity: 0, y: -10 }}\n                transition={{ duration: 0.3 }}\n              >\n                <h3 className=\"text-lg font-medium text-blue-300 mb-1\">\n                  {currentStageData.name}\n                </h3>\n                <p className=\"text-gray-400 text-sm\">\n                  {currentStageData.description}\n                </p>\n              </motion.div>\n            </AnimatePresence>\n          </div>\n\n          {/* Stage Progress Bar */}\n          <div className=\"mb-4\">\n            <div className=\"h-2 bg-gray-700 rounded-full overflow-hidden\">\n              <motion.div\n                className=\"h-full bg-gradient-to-r from-blue-500 to-blue-400\"\n                animate={{ width: `${stageProgress}%` }}\n                transition={{ duration: 0.1 }}\n              />\n            </div>\n          </div>\n\n          {/* Overall Progress Bar */}\n          <div className=\"mb-6\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <span className=\"text-sm text-gray-400\">Overall Progress</span>\n              <span className=\"text-sm text-blue-300\">{Math.round(displayProgress)}%</span>\n            </div>\n            <div className=\"h-3 bg-gray-700 rounded-full overflow-hidden\">\n              <motion.div\n                className=\"h-full bg-gradient-to-r from-green-500 to-green-400\"\n                animate={{ width: `${displayProgress}%` }}\n                transition={{ duration: 0.3 }}\n              />\n            </div>\n          </div>\n\n          {/* Stage Grid */}\n          <div className=\"grid grid-cols-5 gap-3\">\n            {LOADING_STAGES.map((stage, index) => (\n              <div\n                key={stage.id}\n                className={`\n                  flex flex-col items-center justify-center p-3 rounded-lg transition-all duration-300\n                  ${index < currentStage ? 'bg-green-900/50 border border-green-500' : ''}\n                  ${index === currentStage ? 'bg-blue-900/50 border border-blue-400 animate-pulse' : ''}\n                  ${index > currentStage ? 'bg-gray-800/50 border border-gray-600' : ''}\n                `}\n              >\n                <div className={`\n                  w-8 h-8 rounded-full flex items-center justify-center font-bold text-sm\n                  ${index < currentStage ? 'bg-green-500 text-white' : ''}\n                  ${index === currentStage ? 'bg-blue-500 text-white' : ''}\n                  ${index > currentStage ? 'bg-gray-600 text-gray-400' : ''}\n                `}>\n                  {index < currentStage ? '✓' : stage.id}\n                </div>\n                <span className={`\n                  text-xs mt-1 text-center\n                  ${index <= currentStage ? 'text-gray-300' : 'text-gray-500'}\n                `}>\n                  {stage.name.split(' ')[0]}\n                </span>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Performance Metrics */}\n        <div className=\"mt-6 flex justify-center space-x-6 text-sm\">\n          <div className=\"text-gray-400\">\n            <span className=\"text-green-400 font-mono\">●</span> Systems Online\n          </div>\n          <div className=\"text-gray-400\">\n            <span className=\"text-blue-400 font-mono\">●</span> Loading\n          </div>\n          <div className=\"text-gray-400\">\n            <span className=\"text-gray-600 font-mono\">●</span> Pending\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MultiStageLoader;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ProductionTracking.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\QualityControl.jsx",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'setSelectedProduct' is not defined.",
        "line": 180,
        "column": 58,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 180,
        "endColumn": 76
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'setSelectedPeriod' is not defined.",
        "line": 192,
        "column": 57,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 192,
        "endColumn": 74
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'setActiveTab' is not defined.",
        "line": 321,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 321,
        "endColumn": 58
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'setSelectedMetric' is not defined.",
        "line": 456,
        "column": 65,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 456,
        "endColumn": 82
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState } from 'react';\nimport {\n  BeakerIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  XCircleIcon,\n  ChartBarIcon,\n  ClipboardDocumentCheckIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  FunnelIcon,\n  DocumentChartBarIcon,\n  CalendarDaysIcon,\n  ShieldCheckIcon\n} from '@heroicons/react/24/outline';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\n\nconst QualityControl = () => {\n  const [selectedPeriod] = useState('7d');\n  const [selectedProduct] = useState('all');\n  const [selectedMetric] = useState('defect-rate');\n  const [activeTab] = useState('overview');\n\n  // Quality metrics data\n  const qualityMetrics = {\n    defectRate: {\n      value: 2.3,\n      target: 2.0,\n      trend: 'up',\n      change: 0.3,\n      unit: '%'\n    },\n    firstPassYield: {\n      value: 94.5,\n      target: 95.0,\n      trend: 'down',\n      change: -0.5,\n      unit: '%'\n    },\n    customerComplaints: {\n      value: 12,\n      target: 10,\n      trend: 'up',\n      change: 2,\n      unit: 'count'\n    },\n    inspectionPassRate: {\n      value: 97.2,\n      target: 98.0,\n      trend: 'up',\n      change: 0.8,\n      unit: '%'\n    }\n  };\n\n  // Recent inspections data\n  const recentInspections = [\n    {\n      id: 'INS-2024-001',\n      product: 'Product A',\n      batch: 'BAT-2024-105',\n      date: '2025-09-26',\n      inspector: 'John Smith',\n      result: 'passed',\n      score: 98,\n      issues: 0\n    },\n    {\n      id: 'INS-2024-002',\n      product: 'Product B',\n      batch: 'BAT-2024-106',\n      date: '2025-09-26',\n      inspector: 'Jane Doe',\n      result: 'warning',\n      score: 85,\n      issues: 3\n    },\n    {\n      id: 'INS-2024-003',\n      product: 'Product C',\n      batch: 'BAT-2024-107',\n      date: '2025-09-26',\n      inspector: 'Mike Johnson',\n      result: 'failed',\n      score: 68,\n      issues: 7\n    },\n    {\n      id: 'INS-2024-004',\n      product: 'Product A',\n      batch: 'BAT-2024-108',\n      date: '2025-09-25',\n      inspector: 'Sarah Wilson',\n      result: 'passed',\n      score: 95,\n      issues: 1\n    },\n    {\n      id: 'INS-2024-005',\n      product: 'Product D',\n      batch: 'BAT-2024-109',\n      date: '2025-09-25',\n      inspector: 'Tom Brown',\n      result: 'passed',\n      score: 99,\n      issues: 0\n    }\n  ];\n\n  // Quality issues by category\n  const issueCategories = [\n    { category: 'Dimensional', count: 23, percentage: 35, severity: 'medium' },\n    { category: 'Surface Finish', count: 18, percentage: 27, severity: 'low' },\n    { category: 'Material Defect', count: 12, percentage: 18, severity: 'high' },\n    { category: 'Assembly', count: 8, percentage: 12, severity: 'medium' },\n    { category: 'Packaging', count: 5, percentage: 8, severity: 'low' }\n  ];\n\n  // Control chart data points\n  const controlChartData = [\n    { date: '09/20', value: 2.1, ucl: 3.0, lcl: 1.0, target: 2.0 },\n    { date: '09/21', value: 2.3, ucl: 3.0, lcl: 1.0, target: 2.0 },\n    { date: '09/22', value: 1.9, ucl: 3.0, lcl: 1.0, target: 2.0 },\n    { date: '09/23', value: 2.4, ucl: 3.0, lcl: 1.0, target: 2.0 },\n    { date: '09/24', value: 2.2, ucl: 3.0, lcl: 1.0, target: 2.0 },\n    { date: '09/25', value: 2.5, ucl: 3.0, lcl: 1.0, target: 2.0 },\n    { date: '09/26', value: 2.3, ucl: 3.0, lcl: 1.0, target: 2.0 }\n  ];\n\n  // Products for filtering\n  const products = [\n    { value: 'all', label: 'All Products' },\n    { value: 'product-a', label: 'Product A' },\n    { value: 'product-b', label: 'Product B' },\n    { value: 'product-c', label: 'Product C' },\n    { value: 'product-d', label: 'Product D' }\n  ];\n\n  const getStatusColor = (result) => {\n    switch(result) {\n      case 'passed': return 'text-green-600 bg-green-50 dark:bg-green-900/20 dark:text-green-400';\n      case 'warning': return 'text-amber-600 bg-amber-50 dark:bg-amber-900/20 dark:text-amber-400';\n      case 'failed': return 'text-red-600 bg-red-50 dark:bg-red-900/20 dark:text-red-400';\n      default: return 'text-gray-600 bg-gray-50 dark:bg-gray-900/20 dark:text-gray-400';\n    }\n  };\n\n  const getSeverityColor = (severity) => {\n    switch(severity) {\n      case 'high': return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400';\n      case 'medium': return 'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-400';\n      case 'low': return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900 dark:text-white\">Quality Control</h1>\n          <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n            Monitor product quality, inspections, and compliance metrics\n          </p>\n        </div>\n        <div className=\"flex items-center gap-3 mt-4 md:mt-0\">\n          <Select value={selectedProduct} onValueChange={setSelectedProduct}>\n            <SelectTrigger className=\"w-40\">\n              <SelectValue placeholder=\"Select product\" />\n            </SelectTrigger>\n            <SelectContent>\n              {products.map(product => (\n                <SelectItem key={product.value} value={product.value}>\n                  {product.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\n            <SelectTrigger className=\"w-32\">\n              <SelectValue placeholder=\"Period\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"24h\">Last 24h</SelectItem>\n              <SelectItem value=\"7d\">Last 7 days</SelectItem>\n              <SelectItem value=\"30d\">Last 30 days</SelectItem>\n              <SelectItem value=\"90d\">Last 90 days</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant=\"outline\">\n            <DocumentChartBarIcon className=\"w-4 h-4 mr-2\" />\n            Export Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Alert for quality issues */}\n      {qualityMetrics.defectRate.value > qualityMetrics.defectRate.target && (\n        <Alert className=\"border-amber-200 bg-amber-50 dark:bg-amber-900/20\">\n          <ExclamationTriangleIcon className=\"h-4 w-4 text-amber-600\" />\n          <AlertTitle>Quality Target Alert</AlertTitle>\n          <AlertDescription>\n            Defect rate is currently {qualityMetrics.defectRate.value}%, exceeding the target of {qualityMetrics.defectRate.target}%.\n            Review recent inspections and implement corrective actions.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Key Metrics Cards */}\n      <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Defect Rate</CardTitle>\n            <BeakerIcon className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{qualityMetrics.defectRate.value}%</div>\n            <div className=\"flex items-center mt-2\">\n              <span className=\"text-xs text-muted-foreground\">Target: {qualityMetrics.defectRate.target}%</span>\n              <div className=\"flex items-center ml-auto\">\n                {qualityMetrics.defectRate.trend === 'up' ? (\n                  <ArrowTrendingUpIcon className=\"h-4 w-4 text-red-500 mr-1\" />\n                ) : (\n                  <ArrowTrendingDownIcon className=\"h-4 w-4 text-green-500 mr-1\" />\n                )}\n                <span className={`text-xs ${qualityMetrics.defectRate.trend === 'up' ? 'text-red-500' : 'text-green-500'}`}>\n                  {qualityMetrics.defectRate.change}%\n                </span>\n              </div>\n            </div>\n            <Progress\n              value={(qualityMetrics.defectRate.target / qualityMetrics.defectRate.value) * 100}\n              className=\"mt-2\"\n            />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">First Pass Yield</CardTitle>\n            <CheckCircleIcon className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{qualityMetrics.firstPassYield.value}%</div>\n            <div className=\"flex items-center mt-2\">\n              <span className=\"text-xs text-muted-foreground\">Target: {qualityMetrics.firstPassYield.target}%</span>\n              <div className=\"flex items-center ml-auto\">\n                {qualityMetrics.firstPassYield.trend === 'up' ? (\n                  <ArrowTrendingUpIcon className=\"h-4 w-4 text-green-500 mr-1\" />\n                ) : (\n                  <ArrowTrendingDownIcon className=\"h-4 w-4 text-red-500 mr-1\" />\n                )}\n                <span className={`text-xs ${qualityMetrics.firstPassYield.trend === 'up' ? 'text-green-500' : 'text-red-500'}`}>\n                  {Math.abs(qualityMetrics.firstPassYield.change)}%\n                </span>\n              </div>\n            </div>\n            <Progress\n              value={qualityMetrics.firstPassYield.value}\n              className=\"mt-2\"\n            />\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Customer Complaints</CardTitle>\n            <ExclamationTriangleIcon className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{qualityMetrics.customerComplaints.value}</div>\n            <div className=\"flex items-center mt-2\">\n              <span className=\"text-xs text-muted-foreground\">Target: ≤{qualityMetrics.customerComplaints.target}</span>\n              <div className=\"flex items-center ml-auto\">\n                <ArrowTrendingUpIcon className=\"h-4 w-4 text-red-500 mr-1\" />\n                <span className=\"text-xs text-red-500\">+{qualityMetrics.customerComplaints.change}</span>\n              </div>\n            </div>\n            <div className=\"mt-2 text-xs text-muted-foreground\">\n              This period\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n            <CardTitle className=\"text-sm font-medium\">Inspection Pass Rate</CardTitle>\n            <ShieldCheckIcon className=\"h-4 w-4 text-muted-foreground\" />\n          </CardHeader>\n          <CardContent>\n            <div className=\"text-2xl font-bold\">{qualityMetrics.inspectionPassRate.value}%</div>\n            <div className=\"flex items-center mt-2\">\n              <span className=\"text-xs text-muted-foreground\">Target: {qualityMetrics.inspectionPassRate.target}%</span>\n              <div className=\"flex items-center ml-auto\">\n                <ArrowTrendingUpIcon className=\"h-4 w-4 text-green-500 mr-1\" />\n                <span className=\"text-xs text-green-500\">+{qualityMetrics.inspectionPassRate.change}%</span>\n              </div>\n            </div>\n            <Progress\n              value={qualityMetrics.inspectionPassRate.value}\n              className=\"mt-2\"\n            />\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-4 lg:w-auto lg:inline-grid\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"inspections\">Inspections</TabsTrigger>\n          <TabsTrigger value=\"control-charts\">Control Charts</TabsTrigger>\n          <TabsTrigger value=\"issues\">Issues Analysis</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"overview\" className=\"space-y-4\">\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {/* Recent Inspections */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <ClipboardDocumentCheckIcon className=\"w-5 h-5 mr-2\" />\n                  Recent Inspections\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {recentInspections.slice(0, 3).map((inspection) => (\n                    <div key={inspection.id} className=\"flex items-center justify-between p-3 rounded-lg border bg-gray-50 dark:bg-gray-800/50\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"font-medium text-sm\">{inspection.id}</span>\n                          <Badge className={getStatusColor(inspection.result)}>\n                            {inspection.result}\n                          </Badge>\n                        </div>\n                        <div className=\"text-xs text-muted-foreground mt-1\">\n                          {inspection.product} - Batch {inspection.batch}\n                        </div>\n                        <div className=\"text-xs text-muted-foreground\">\n                          Score: {inspection.score}% | Issues: {inspection.issues}\n                        </div>\n                      </div>\n                      <div className=\"text-xs text-muted-foreground text-right\">\n                        <div>{inspection.date}</div>\n                        <div>{inspection.inspector}</div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <Button variant=\"ghost\" className=\"w-full mt-3\">\n                  View All Inspections\n                </Button>\n              </CardContent>\n            </Card>\n\n            {/* Issue Categories */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <FunnelIcon className=\"w-5 h-5 mr-2\" />\n                  Issue Categories\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {issueCategories.map((issue) => (\n                    <div key={issue.category} className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm font-medium\">{issue.category}</span>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge className={getSeverityColor(issue.severity)}>\n                            {issue.severity}\n                          </Badge>\n                          <span className=\"text-sm text-muted-foreground\">{issue.count}</span>\n                        </div>\n                      </div>\n                      <Progress value={issue.percentage} className=\"h-2\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"inspections\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Inspection History</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead>\n                    <tr className=\"border-b\">\n                      <th className=\"text-left p-2 text-sm font-medium\">Inspection ID</th>\n                      <th className=\"text-left p-2 text-sm font-medium\">Product</th>\n                      <th className=\"text-left p-2 text-sm font-medium\">Batch</th>\n                      <th className=\"text-left p-2 text-sm font-medium\">Date</th>\n                      <th className=\"text-left p-2 text-sm font-medium\">Inspector</th>\n                      <th className=\"text-left p-2 text-sm font-medium\">Score</th>\n                      <th className=\"text-left p-2 text-sm font-medium\">Issues</th>\n                      <th className=\"text-left p-2 text-sm font-medium\">Status</th>\n                      <th className=\"text-left p-2 text-sm font-medium\">Actions</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {recentInspections.map((inspection) => (\n                      <tr key={inspection.id} className=\"border-b hover:bg-gray-50 dark:hover:bg-gray-800/50\">\n                        <td className=\"p-2 text-sm font-medium\">{inspection.id}</td>\n                        <td className=\"p-2 text-sm\">{inspection.product}</td>\n                        <td className=\"p-2 text-sm\">{inspection.batch}</td>\n                        <td className=\"p-2 text-sm\">{inspection.date}</td>\n                        <td className=\"p-2 text-sm\">{inspection.inspector}</td>\n                        <td className=\"p-2 text-sm\">{inspection.score}%</td>\n                        <td className=\"p-2 text-sm\">{inspection.issues}</td>\n                        <td className=\"p-2\">\n                          <Badge className={getStatusColor(inspection.result)}>\n                            {inspection.result}\n                          </Badge>\n                        </td>\n                        <td className=\"p-2\">\n                          <Button variant=\"ghost\" size=\"sm\">View</Button>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"control-charts\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Statistical Process Control</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <Select value={selectedMetric} onValueChange={setSelectedMetric}>\n                    <SelectTrigger className=\"w-48\">\n                      <SelectValue placeholder=\"Select metric\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"defect-rate\">Defect Rate</SelectItem>\n                      <SelectItem value=\"first-pass-yield\">First Pass Yield</SelectItem>\n                      <SelectItem value=\"cycle-time\">Cycle Time</SelectItem>\n                      <SelectItem value=\"rework-rate\">Rework Rate</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <div className=\"flex items-center gap-4 text-sm\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 bg-blue-500 rounded-full\"></div>\n                      <span>Actual</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n                      <span>Target</span>\n                    </div>\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"w-3 h-3 bg-red-500 rounded-full\"></div>\n                      <span>Control Limits</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Control Chart Visualization */}\n                <div className=\"h-64 bg-gray-50 dark:bg-gray-800/50 rounded-lg flex items-center justify-center\">\n                  <div className=\"text-center text-muted-foreground\">\n                    <ChartBarIcon className=\"w-12 h-12 mx-auto mb-2\" />\n                    <p>Control chart visualization</p>\n                    <p className=\"text-xs mt-1\">Connect to data source for live charts</p>\n                  </div>\n                </div>\n\n                {/* Control Chart Data Table */}\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full text-sm\">\n                    <thead>\n                      <tr className=\"border-b\">\n                        <th className=\"text-left p-2\">Date</th>\n                        <th className=\"text-right p-2\">Value</th>\n                        <th className=\"text-right p-2\">Target</th>\n                        <th className=\"text-right p-2\">UCL</th>\n                        <th className=\"text-right p-2\">LCL</th>\n                        <th className=\"text-right p-2\">Status</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {controlChartData.map((point, index) => (\n                        <tr key={index} className=\"border-b\">\n                          <td className=\"p-2\">{point.date}</td>\n                          <td className=\"text-right p-2\">{point.value}</td>\n                          <td className=\"text-right p-2\">{point.target}</td>\n                          <td className=\"text-right p-2\">{point.ucl}</td>\n                          <td className=\"text-right p-2\">{point.lcl}</td>\n                          <td className=\"text-right p-2\">\n                            {point.value > point.ucl || point.value < point.lcl ? (\n                              <Badge className=\"bg-red-100 text-red-800 border-red-200 dark:bg-red-900/30 dark:text-red-400 dark:border-red-800\">Out of Control</Badge>\n                            ) : (\n                              <Badge className=\"bg-green-100 text-green-800 border-green-200 dark:bg-green-900/30 dark:text-green-400 dark:border-green-800\">In Control</Badge>\n                            )}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"issues\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Quality Issues Analysis</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                {/* Issue Distribution */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-medium\">Issue Distribution by Severity</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between p-3 rounded-lg bg-red-50 dark:bg-red-900/20\">\n                      <div className=\"flex items-center gap-2\">\n                        <XCircleIcon className=\"w-5 h-5 text-red-600\" />\n                        <span className=\"font-medium\">High Severity</span>\n                      </div>\n                      <span className=\"text-lg font-bold\">12</span>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 rounded-lg bg-amber-50 dark:bg-amber-900/20\">\n                      <div className=\"flex items-center gap-2\">\n                        <ExclamationTriangleIcon className=\"w-5 h-5 text-amber-600\" />\n                        <span className=\"font-medium\">Medium Severity</span>\n                      </div>\n                      <span className=\"text-lg font-bold\">31</span>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 rounded-lg bg-green-50 dark:bg-green-900/20\">\n                      <div className=\"flex items-center gap-2\">\n                        <CheckCircleIcon className=\"w-5 h-5 text-green-600\" />\n                        <span className=\"font-medium\">Low Severity</span>\n                      </div>\n                      <span className=\"text-lg font-bold\">23</span>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Root Cause Analysis */}\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-medium\">Root Cause Analysis</h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"p-3 rounded-lg border\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Machine Calibration</span>\n                        <span className=\"text-sm text-muted-foreground\">28%</span>\n                      </div>\n                      <Progress value={28} className=\"h-2\" />\n                    </div>\n                    <div className=\"p-3 rounded-lg border\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Operator Error</span>\n                        <span className=\"text-sm text-muted-foreground\">22%</span>\n                      </div>\n                      <Progress value={22} className=\"h-2\" />\n                    </div>\n                    <div className=\"p-3 rounded-lg border\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Raw Material</span>\n                        <span className=\"text-sm text-muted-foreground\">18%</span>\n                      </div>\n                      <Progress value={18} className=\"h-2\" />\n                    </div>\n                    <div className=\"p-3 rounded-lg border\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Process Variation</span>\n                        <span className=\"text-sm text-muted-foreground\">15%</span>\n                      </div>\n                      <Progress value={15} className=\"h-2\" />\n                    </div>\n                    <div className=\"p-3 rounded-lg border\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <span className=\"text-sm font-medium\">Other</span>\n                        <span className=\"text-sm text-muted-foreground\">17%</span>\n                      </div>\n                      <Progress value={17} className=\"h-2\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Corrective Actions */}\n              <div className=\"mt-6\">\n                <h3 className=\"font-medium mb-3\">Recommended Corrective Actions</h3>\n                <div className=\"space-y-2\">\n                  <Alert>\n                    <ShieldCheckIcon className=\"h-4 w-4\" />\n                    <AlertTitle>Machine Calibration Required</AlertTitle>\n                    <AlertDescription>\n                      Schedule calibration for Production Line 2 and Line 4 based on defect pattern analysis.\n                    </AlertDescription>\n                  </Alert>\n                  <Alert>\n                    <ShieldCheckIcon className=\"h-4 w-4\" />\n                    <AlertTitle>Operator Training</AlertTitle>\n                    <AlertDescription>\n                      Implement refresher training for assembly procedures to reduce operator-related defects.\n                    </AlertDescription>\n                  </Alert>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default QualityControl;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\Reports.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\Sidebar.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'__sectionIndex' is defined but never used.",
        "line": 68,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 68,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "__sectionIndex" },
            "fix": { "range": [2128, 2144], "text": "" },
            "desc": "Remove unused variable '__sectionIndex'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'sectionIndex' is not defined.",
        "line": 69,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 69,
        "endColumn": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { \n  BarChart3, \n  TrendingUp, \n  Package, \n  ClipboardCheck, \n  Shield, \n  DollarSign, \n  FileText, \n  BarChart, \n  Upload, \n  Settings,\n  Home\n} from 'lucide-react';\n\nconst Sidebar = ({ activeSection, setActiveSection }) => {\n  const menuSections = [\n    {\n      title: \"OVERVIEW\",\n      items: [\n        { id: \"executive-dashboard\", label: \"Executive Dashboard\", icon: BarChart3, active: true }\n      ]\n    },\n    {\n      title: \"PLANNING & ANALYTICS\", \n      items: [\n        { id: \"demand-forecasting\", label: \"Demand Forecasting\", icon: TrendingUp },\n        { id: \"inventory-management\", label: \"Inventory Management\", icon: Package },\n        { id: \"production-tracking\", label: \"Production Tracking\", icon: ClipboardCheck },\n        { id: \"quality-control\", label: \"Quality Control\", icon: Shield }\n      ]\n    },\n    {\n      title: \"FINANCIAL MANAGEMENT\",\n      items: [\n        { id: \"working-capital\", label: \"Working Capital\", icon: DollarSign },\n        { id: \"what-if-analysis\", label: \"What-If Analysis\", icon: BarChart },\n        { id: \"financial-reports\", label: \"Financial Reports\", icon: FileText }\n      ]\n    },\n    {\n      title: \"OPERATIONS\",\n      items: [\n        { id: \"data-import\", label: \"Data Import\", icon: Upload },\n        { id: \"admin-panel\", label: \"Admin Panel\", icon: Settings }\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"w-64 bg-slate-900 text-white h-screen flex flex-col\">\n      {/* Header */}\n      <div className=\"p-6 border-b border-slate-700\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n            <span className=\"text-white font-bold text-sm\">S</span>\n          </div>\n          <div>\n            <h1 className=\"font-semibold text-lg\">Sentia</h1>\n            <h2 className=\"font-semibold\">Manufacturing</h2>\n            <p className=\"text-slate-400 text-xs\">Enterprise Dashboard</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"flex-1 overflow-y-auto\">\n        {menuSections.map((section, __sectionIndex) => (\n          <div key={sectionIndex} className=\"py-4\">\n            <h3 className=\"px-6 text-xs font-semibold text-slate-400 uppercase tracking-wider mb-3\">\n              {section.title}\n            </h3>\n            <nav className=\"space-y-1\">\n              {section.items.map((item) => {\n                const Icon = item.icon;\n                const isActive = activeSection === item.id;\n                \n                return (\n                  <button\n                    key={item.id}\n                    onClick={() => setActiveSection(item.id)}\n                    className={`w-full flex items-center px-6 py-2.5 text-sm font-medium transition-colors ${\n                      isActive \n                        ? 'bg-blue-600 text-white border-r-2 border-blue-400' \n                        : 'text-slate-300 hover:bg-slate-800 hover:text-white'\n                    }`}\n                  >\n                    <Icon className=\"mr-3 h-5 w-5\" />\n                    {item.label}\n                  </button>\n                );\n              })}\n            </nav>\n          </div>\n        ))}\n      </div>\n\n      {/* Footer */}\n      <div className=\"p-4 border-t border-slate-700\">\n        <div className=\"flex items-center space-x-2 text-xs text-slate-400\">\n          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n          <span>All Systems Operational</span>\n        </div>\n        <div className=\"text-xs text-slate-500 mt-1\">18:24:24</div>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\WhatIfAnalysis.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\WorkingCapitalCalculator.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [17, 28], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Slider } from '@/components/ui/slider'\nimport { Badge } from '@/components/ui/badge'\nimport { Separator } from '@/components/ui/separator'\nimport { \n  Calculator, \n  TrendingUp, \n  DollarSign, \n  Clock, \n  Target,\n  Download,\n  RefreshCw,\n  AlertCircle,\n  CheckCircle\n} from 'lucide-react'\n\nconst WorkingCapitalCalculator = () => {\n  const [formData, setFormData] = useState({\n    annualRevenue: 2500000,\n    averageDebtorDays: 45,\n    averageCreditorDays: 30,\n    currentDebtors: 312500,\n    currentCreditors: 208333,\n    grossMargin: 35,\n    netMargin: 12,\n    ebitda: 300000,\n    currentCash: 150000,\n    averageBankBalance: 125000,\n    inventoryTurns: 8,\n    numberOfEmployees: 25,\n    revenueGrowth: 15,\n    reduceDebtorDays: 10,\n    extendCreditorDays: 5\n  })\n\n  const [results, setResults] = useState({\n    cashUnlock90Days: 83000,\n    cashImprovement12Months: 334000,\n    daysToUnlock: 90,\n    workingCapitalEfficiency: 3,\n    cashConversionCycle: -46\n  })\n\n  const [isCalculating, setIsCalculating] = useState(false)\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n  }\n\n  const calculateWorkingCapital = async () => {\n    setIsCalculating(true)\n    \n    // Simulate API call with realistic calculations\n    await new Promise(resolve => setTimeout(resolve, 1500))\n    \n    const dailyRevenue = formData.annualRevenue / 365\n    const currentWorkingCapital = formData.currentDebtors - formData.currentCreditors\n    \n    // Calculate improved metrics\n    const improvedDebtorDays = formData.averageDebtorDays - formData.reduceDebtorDays\n    const improvedCreditorDays = formData.averageCreditorDays + formData.extendCreditorDays\n    \n    const improvedDebtors = dailyRevenue * improvedDebtorDays\n    const improvedCreditors = dailyRevenue * improvedCreditorDays\n    const improvedWorkingCapital = improvedDebtors - improvedCreditors\n    \n    const cashUnlock = currentWorkingCapital - improvedWorkingCapital\n    const annualImprovement = cashUnlock * 4 // Quarterly impact\n    \n    setResults({\n      cashUnlock90Days: Math.round(cashUnlock),\n      cashImprovement12Months: Math.round(annualImprovement),\n      daysToUnlock: 90,\n      workingCapitalEfficiency: Math.round(((cashUnlock / formData.annualRevenue) * 100) * 10) / 10,\n      cashConversionCycle: improvedDebtorDays - improvedCreditorDays\n    })\n    \n    setIsCalculating(false)\n  }\n\n  const workingCapitalLevers = [\n    \"Improve invoicing discipline and collections process\",\n    \"Negotiate better payment terms with suppliers\",\n    \"Optimise inventory levels and reduce stock holding\",\n    \"Implement automated payment systems\",\n    \"Enhance credit management procedures\"\n  ]\n\n  const boardTalkingPoints = [\n    `Potential to unlock £${results.cashUnlock90Days.toLocaleString()} in working capital within 90 days`,\n    `12-month cash flow improvement of £${results.cashImprovement12Months.toLocaleString()} without new debt`,\n    `Working capital efficiency improvement of ${results.workingCapitalEfficiency}% of annual revenue`,\n    `Improved cash conversion cycle by ${results.cashConversionCycle} days`\n  ]\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900 dark:text-white\">Working Capital Calculator</h1>\n          <p className=\"text-slate-600 dark:text-slate-400\">\n            Advanced cash flow analysis and optimization recommendations\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\">\n            <Download className=\"h-4 w-4 mr-2\" />\n            Export Report\n          </Button>\n          <Button onClick={calculateWorkingCapital} disabled={isCalculating}>\n            {isCalculating ? (\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Calculator className=\"h-4 w-4 mr-2\" />\n            )}\n            {isCalculating ? 'Calculating...' : 'Recalculate'}\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Input Form */}\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Financial Metrics */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <DollarSign className=\"h-5 w-5 text-green-600\" />\n                <span>Financial Metrics</span>\n              </CardTitle>\n              <CardDescription>Core financial data for working capital analysis</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"annualRevenue\">Annual Revenue (GBP)</Label>\n                  <Input\n                    id=\"annualRevenue\"\n                    type=\"number\"\n                    value={formData.annualRevenue}\n                    onChange={(e) => handleInputChange('annualRevenue', parseInt(e.target.value))}\n                    className=\"text-right\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currentCash\">Current Cash on Hand (£)</Label>\n                  <Input\n                    id=\"currentCash\"\n                    type=\"number\"\n                    value={formData.currentCash}\n                    onChange={(e) => handleInputChange('currentCash', parseInt(e.target.value))}\n                    className=\"text-right\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currentDebtors\">Current Debtors (£)</Label>\n                  <Input\n                    id=\"currentDebtors\"\n                    type=\"number\"\n                    value={formData.currentDebtors}\n                    onChange={(e) => handleInputChange('currentDebtors', parseInt(e.target.value))}\n                    className=\"text-right\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"currentCreditors\">Current Creditors (£)</Label>\n                  <Input\n                    id=\"currentCreditors\"\n                    type=\"number\"\n                    value={formData.currentCreditors}\n                    onChange={(e) => handleInputChange('currentCreditors', parseInt(e.target.value))}\n                    className=\"text-right\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Payment Terms */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Clock className=\"h-5 w-5 text-blue-600\" />\n                <span>Payment Terms</span>\n              </CardTitle>\n              <CardDescription>Days Sales Outstanding and Days Payable Outstanding</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label>Average Debtor Days (DSO): {formData.averageDebtorDays} days</Label>\n                  <Slider\n                    value={[formData.averageDebtorDays]}\n                    onValueChange={(value) => handleInputChange('averageDebtorDays', value[0])}\n                    max={120}\n                    min={15}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Average Creditor Days (DPO): {formData.averageCreditorDays} days</Label>\n                  <Slider\n                    value={[formData.averageCreditorDays]}\n                    onValueChange={(value) => handleInputChange('averageCreditorDays', value[0])}\n                    max={90}\n                    min={15}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Optimization Levers */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <Target className=\"h-5 w-5 text-purple-600\" />\n                <span>Optimization Levers</span>\n              </CardTitle>\n              <CardDescription>Adjust these parameters to see potential improvements</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-2\">\n                  <Label>Reduce Debtor Days By: {formData.reduceDebtorDays} days</Label>\n                  <Slider\n                    value={[formData.reduceDebtorDays]}\n                    onValueChange={(value) => handleInputChange('reduceDebtorDays', value[0])}\n                    max={30}\n                    min={0}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                  <p className=\"text-xs text-slate-500\">Get paid faster</p>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label>Extend Creditor Days By: {formData.extendCreditorDays} days</Label>\n                  <Slider\n                    value={[formData.extendCreditorDays]}\n                    onValueChange={(value) => handleInputChange('extendCreditorDays', value[0])}\n                    max={20}\n                    min={0}\n                    step={1}\n                    className=\"w-full\"\n                  />\n                  <p className=\"text-xs text-slate-500\">Pay suppliers later</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Results Panel */}\n        <div className=\"space-y-6\">\n          {/* Cash Unlock Results */}\n          <Card className=\"border-green-200 dark:border-green-800\">\n            <CardHeader>\n              <CardTitle className=\"text-green-700 dark:text-green-300\">\n                Estimated Cash Unlock in 90 Days\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-center space-y-4\">\n                <div className=\"text-4xl font-bold text-green-600\">\n                  £{results.cashUnlock90Days.toLocaleString()}\n                </div>\n                <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                  Without new debt or external funding\n                </p>\n                <Separator />\n                <div className=\"text-2xl font-bold text-slate-900 dark:text-white\">\n                  £{results.cashImprovement12Months.toLocaleString()}\n                </div>\n                <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                  12-month improvement\n                </p>\n                <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                  {results.daysToUnlock} Days to unlock\n                </Badge>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Working Capital Levers */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Working Capital Levers</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {workingCapitalLevers.map((lever, index) => (\n                  <div key={index} className=\"flex items-start space-x-2\">\n                    <CheckCircle className=\"h-4 w-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                    <p className=\"text-sm text-slate-700 dark:text-slate-300\">{lever}</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Board-Ready Talking Points */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n                <span>Board-Ready Talking Points</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {boardTalkingPoints.map((point, index) => (\n                  <div key={index} className=\"flex items-start space-x-2\">\n                    <AlertCircle className=\"h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                    <p className=\"text-sm text-slate-700 dark:text-slate-300\">{point}</p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default WorkingCapitalCalculator\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\WorkingCapitalCalculatorEnhanced.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 29,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [17, 28], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_index' is defined but never used.",
        "line": 102,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 102,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_index" },
            "fix": { "range": [3038, 3046], "text": "" },
            "desc": "Remove unused variable '_index'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 103,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 103,
        "endColumn": 44
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect, useRef } from 'react';\nimport { logError } from '../utils/structuredLogger.js'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Slider } from '@/components/ui/slider'\nimport { Badge } from '@/components/ui/badge'\nimport { Separator } from '@/components/ui/separator'\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'\nimport { \n  Calculator, \n  TrendingUp, \n  DollarSign, \n  Clock, \n  Target,\n  Download,\n  RefreshCw,\n  AlertCircle,\n  CheckCircle,\n  Upload,\n  FileSpreadsheet,\n  BarChart3,\n  PieChart,\n  TrendingDown,\n  Calendar,\n  Building2,\n  Users,\n  Zap\n} from 'lucide-react'\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, BarChart, Bar, PieChart as RechartsPieChart, Cell } from 'recharts'\n\nconst WorkingCapitalCalculatorEnhanced = () => {\n  const fileInputRef = useRef(null)\n  const [activeTab, setActiveTab] = useState('calculator')\n  const [uploadedData, setUploadedData] = useState(null)\n  const [isUploading, setIsUploading] = useState(false)\n\n  const [formData, setFormData] = useState({\n    annualRevenue: 2500000,\n    averageDebtorDays: 45,\n    averageCreditorDays: 30,\n    currentDebtors: 312500,\n    currentCreditors: 208333,\n    grossMargin: 35,\n    netMargin: 12,\n    ebitda: 300000,\n    currentCash: 150000,\n    averageBankBalance: 125000,\n    inventoryTurns: 8,\n    numberOfEmployees: 25,\n    revenueGrowth: 15,\n    reduceDebtorDays: 10,\n    extendCreditorDays: 5,\n    industryType: 'Manufacturing',\n    companySize: 'SME'\n  })\n\n  const [results, setResults] = useState({\n    cashUnlock90Days: 83000,\n    cashImprovement12Months: 334000,\n    daysToUnlock: 90,\n    workingCapitalEfficiency: 3,\n    cashConversionCycle: -46,\n    riskLevel: 'Low',\n    industryBenchmark: 'Above Average'\n  })\n\n  const [projections, setProjections] = useState([])\n  const [isCalculating, setIsCalculating] = useState(false)\n\n  // Sample CSV template data\n  const csvTemplate = `Date,Revenue,Debtors,Creditors,Cash,Inventory\n2024-01-01,208333,312500,208333,150000,125000\n2024-02-01,208333,325000,215000,145000,130000\n2024-03-01,208333,298000,195000,165000,120000\n2024-04-01,208333,340000,225000,135000,140000\n2024-05-01,208333,315000,210000,155000,125000\n2024-06-01,208333,330000,220000,140000,135000`\n\n  const handleInputChange = (field, value) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: value\n    }))\n  }\n\n  const handleFileUpload = async (event) => {\n    const file = event.target.files[0]\n    if (!file) return\n\n    setIsUploading(true)\n    \n    try {\n      const text = await file.text()\n      const lines = text.split('\\n')\n      const headers = lines[0].split(',')\n      \n      const data = lines.slice(1).map(line => {\n        const values = line.split(',')\n        const row = {}\n        headers.forEach((header, _index) => {\n          row[header.trim()] = values[index]?.trim()\n        })\n        return row\n      }).filter(row => Object.values(row).some(val => val))\n\n      setUploadedData(data)\n      \n      // Auto-populate form data from uploaded CSV\n      if (data.length > 0) {\n        const latestData = data[data.length - 1]\n        const avgRevenue = data.reduce((sum, row) => sum + (parseFloat(row.Revenue) || 0), 0) / data.length\n        \n        setFormData(prev => ({\n          ...prev,\n          annualRevenue: Math.round(avgRevenue * 12),\n          currentDebtors: parseFloat(latestData.Debtors) || prev.currentDebtors,\n          currentCreditors: parseFloat(latestData.Creditors) || prev.currentCreditors,\n          currentCash: parseFloat(latestData.Cash) || prev.currentCash\n        }))\n      }\n      \n      setActiveTab('analysis')\n    } catch (error) {\n      logError('Error parsing CSV', error)\n    } finally {\n      setIsUploading(false)\n    }\n  }\n\n  const downloadTemplate = () => {\n    const blob = new Blob([csvTemplate], { type: 'text/csv' })\n    const url = window.URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = 'working_capital_template.csv'\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    window.URL.revokeObjectURL(url)\n  }\n\n  const calculateWorkingCapital = async () => {\n    setIsCalculating(true)\n    \n    // Simulate API call with realistic calculations\n    await new Promise(resolve => setTimeout(resolve, 1500))\n    \n    const dailyRevenue = formData.annualRevenue / 365\n    const currentWorkingCapital = formData.currentDebtors - formData.currentCreditors\n    \n    // Calculate improved metrics\n    const improvedDebtorDays = formData.averageDebtorDays - formData.reduceDebtorDays\n    const improvedCreditorDays = formData.averageCreditorDays + formData.extendCreditorDays\n    \n    const improvedDebtors = dailyRevenue * improvedDebtorDays\n    const improvedCreditors = dailyRevenue * improvedCreditorDays\n    const improvedWorkingCapital = improvedDebtors - improvedCreditors\n    \n    const cashUnlock = currentWorkingCapital - improvedWorkingCapital\n    const annualImprovement = cashUnlock * 4 // Quarterly impact\n    \n    // Generate projections\n    const monthlyProjections = []\n    for (let i = 0; i < 12; i++) {\n      monthlyProjections.push({\n        month: `Month ${i + 1}`,\n        currentCash: formData.currentCash + (cashUnlock * (i / 12)),\n        projectedCash: formData.currentCash + (annualImprovement * (i / 12)),\n        improvement: (annualImprovement * (i / 12))\n      })\n    }\n    \n    setProjections(monthlyProjections)\n    \n    setResults({\n      cashUnlock90Days: Math.round(cashUnlock),\n      cashImprovement12Months: Math.round(annualImprovement),\n      daysToUnlock: 90,\n      workingCapitalEfficiency: Math.round(((cashUnlock / formData.annualRevenue) * 100) * 10) / 10,\n      cashConversionCycle: improvedDebtorDays - improvedCreditorDays,\n      riskLevel: cashUnlock > 100000 ? 'Low' : cashUnlock > 50000 ? 'Medium' : 'High',\n      industryBenchmark: formData.averageDebtorDays < 35 ? 'Excellent' : formData.averageDebtorDays < 45 ? 'Above Average' : 'Below Average'\n    })\n    \n    setIsCalculating(false)\n  }\n\n  const workingCapitalLevers = [\n    { title: \"Invoice Management\", description: \"Improve invoicing discipline and collections process\", impact: \"High\", timeframe: \"30 days\" },\n    { title: \"Supplier Terms\", description: \"Negotiate better payment terms with suppliers\", impact: \"Medium\", timeframe: \"60 days\" },\n    { title: \"Inventory Optimization\", description: \"Optimise inventory levels and reduce stock holding\", impact: \"High\", timeframe: \"90 days\" },\n    { title: \"Payment Automation\", description: \"Implement automated payment systems\", impact: \"Medium\", timeframe: \"45 days\" },\n    { title: \"Credit Management\", description: \"Enhance credit management procedures\", impact: \"High\", timeframe: \"60 days\" }\n  ]\n\n  const boardTalkingPoints = [\n    `Potential to unlock £${results.cashUnlock90Days.toLocaleString()} in working capital within 90 days`,\n    `12-month cash flow improvement of £${results.cashImprovement12Months.toLocaleString()} without new debt`,\n    `Working capital efficiency improvement of ${results.workingCapitalEfficiency}% of annual revenue`,\n    `Improved cash conversion cycle by ${Math.abs(results.cashConversionCycle)} days`,\n    `Risk assessment: ${results.riskLevel} risk profile for implementation`,\n    `Industry benchmark: ${results.industryBenchmark} performance vs peers`\n  ]\n\n  const pieData = [\n    { name: 'Debtors Optimization', value: 60, color: '#3B82F6' },\n    { name: 'Creditors Extension', value: 25, color: '#10B981' },\n    { name: 'Inventory Management', value: 15, color: '#F59E0B' }\n  ]\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900 dark:text-white\">Working Capital Intelligence</h1>\n          <p className=\"text-slate-600 dark:text-slate-400\">\n            Advanced cash flow analysis with CSV data import and AI-powered insights\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Button variant=\"outline\" size=\"sm\" onClick={downloadTemplate}>\n            <Download className=\"h-4 w-4 mr-2\" />\n            Download Template\n          </Button>\n          <Button onClick={calculateWorkingCapital} disabled={isCalculating}>\n            {isCalculating ? (\n              <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n            ) : (\n              <Calculator className=\"h-4 w-4 mr-2\" />\n            )}\n            {isCalculating ? 'Calculating...' : 'Recalculate'}\n          </Button>\n        </div>\n      </div>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"calculator\">Calculator</TabsTrigger>\n          <TabsTrigger value=\"upload\">Data Upload</TabsTrigger>\n          <TabsTrigger value=\"analysis\">Analysis</TabsTrigger>\n          <TabsTrigger value=\"insights\">AI Insights</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"calculator\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Input Form */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              {/* Company Profile */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Building2 className=\"h-5 w-5 text-blue-600\" />\n                    <span>Company Profile</span>\n                  </CardTitle>\n                  <CardDescription>Basic company information for benchmarking</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"industryType\">Industry Type</Label>\n                      <Input\n                        id=\"industryType\"\n                        value={formData.industryType}\n                        onChange={(e) => handleInputChange('industryType', e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"companySize\">Company Size</Label>\n                      <Input\n                        id=\"companySize\"\n                        value={formData.companySize}\n                        onChange={(e) => handleInputChange('companySize', e.target.value)}\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"numberOfEmployees\">Number of Employees</Label>\n                      <Input\n                        id=\"numberOfEmployees\"\n                        type=\"number\"\n                        value={formData.numberOfEmployees}\n                        onChange={(e) => handleInputChange('numberOfEmployees', parseInt(e.target.value))}\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Financial Metrics */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <DollarSign className=\"h-5 w-5 text-green-600\" />\n                    <span>Financial Metrics</span>\n                  </CardTitle>\n                  <CardDescription>Core financial data for working capital analysis</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"annualRevenue\">Annual Revenue (GBP)</Label>\n                      <Input\n                        id=\"annualRevenue\"\n                        type=\"number\"\n                        value={formData.annualRevenue}\n                        onChange={(e) => handleInputChange('annualRevenue', parseInt(e.target.value))}\n                        className=\"text-right\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"currentCash\">Current Cash on Hand (£)</Label>\n                      <Input\n                        id=\"currentCash\"\n                        type=\"number\"\n                        value={formData.currentCash}\n                        onChange={(e) => handleInputChange('currentCash', parseInt(e.target.value))}\n                        className=\"text-right\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"currentDebtors\">Current Debtors (£)</Label>\n                      <Input\n                        id=\"currentDebtors\"\n                        type=\"number\"\n                        value={formData.currentDebtors}\n                        onChange={(e) => handleInputChange('currentDebtors', parseInt(e.target.value))}\n                        className=\"text-right\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"currentCreditors\">Current Creditors (£)</Label>\n                      <Input\n                        id=\"currentCreditors\"\n                        type=\"number\"\n                        value={formData.currentCreditors}\n                        onChange={(e) => handleInputChange('currentCreditors', parseInt(e.target.value))}\n                        className=\"text-right\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"grossMargin\">Gross Margin (%)</Label>\n                      <Input\n                        id=\"grossMargin\"\n                        type=\"number\"\n                        value={formData.grossMargin}\n                        onChange={(e) => handleInputChange('grossMargin', parseInt(e.target.value))}\n                        className=\"text-right\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"ebitda\">EBITDA (£)</Label>\n                      <Input\n                        id=\"ebitda\"\n                        type=\"number\"\n                        value={formData.ebitda}\n                        onChange={(e) => handleInputChange('ebitda', parseInt(e.target.value))}\n                        className=\"text-right\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Payment Terms */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Clock className=\"h-5 w-5 text-blue-600\" />\n                    <span>Payment Terms</span>\n                  </CardTitle>\n                  <CardDescription>Days Sales Outstanding and Days Payable Outstanding</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label>Average Debtor Days (DSO): {formData.averageDebtorDays} days</Label>\n                      <Slider\n                        value={[formData.averageDebtorDays]}\n                        onValueChange={(value) => handleInputChange('averageDebtorDays', value[0])}\n                        max={120}\n                        min={15}\n                        step={1}\n                        className=\"w-full\"\n                      />\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Average Creditor Days (DPO): {formData.averageCreditorDays} days</Label>\n                      <Slider\n                        value={[formData.averageCreditorDays]}\n                        onValueChange={(value) => handleInputChange('averageCreditorDays', value[0])}\n                        max={90}\n                        min={15}\n                        step={1}\n                        className=\"w-full\"\n                      />\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Optimization Levers */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <Target className=\"h-5 w-5 text-purple-600\" />\n                    <span>Optimization Levers</span>\n                  </CardTitle>\n                  <CardDescription>Adjust these parameters to see potential improvements</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                    <div className=\"space-y-2\">\n                      <Label>Reduce Debtor Days By: {formData.reduceDebtorDays} days</Label>\n                      <Slider\n                        value={[formData.reduceDebtorDays]}\n                        onValueChange={(value) => handleInputChange('reduceDebtorDays', value[0])}\n                        max={30}\n                        min={0}\n                        step={1}\n                        className=\"w-full\"\n                      />\n                      <p className=\"text-xs text-slate-500\">Get paid faster</p>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Label>Extend Creditor Days By: {formData.extendCreditorDays} days</Label>\n                      <Slider\n                        value={[formData.extendCreditorDays]}\n                        onValueChange={(value) => handleInputChange('extendCreditorDays', value[0])}\n                        max={20}\n                        min={0}\n                        step={1}\n                        className=\"w-full\"\n                      />\n                      <p className=\"text-xs text-slate-500\">Pay suppliers later</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Results Panel */}\n            <div className=\"space-y-6\">\n              {/* Cash Unlock Results */}\n              <Card className=\"border-green-200 dark:border-green-800\">\n                <CardHeader>\n                  <CardTitle className=\"text-green-700 dark:text-green-300\">\n                    Estimated Cash Unlock in 90 Days\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-center space-y-4\">\n                    <div className=\"text-4xl font-bold text-green-600\">\n                      £{results.cashUnlock90Days.toLocaleString()}\n                    </div>\n                    <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                      Without new debt or external funding\n                    </p>\n                    <Separator />\n                    <div className=\"text-2xl font-bold text-slate-900 dark:text-white\">\n                      £{results.cashImprovement12Months.toLocaleString()}\n                    </div>\n                    <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                      12-month improvement\n                    </p>\n                    <div className=\"flex justify-center space-x-2\">\n                      <Badge variant=\"outline\" className=\"text-green-600 border-green-600\">\n                        {results.daysToUnlock} Days to unlock\n                      </Badge>\n                      <Badge variant=\"outline\" className={`${results.riskLevel === 'Low' ? 'text-green-600 border-green-600' : results.riskLevel === 'Medium' ? 'text-yellow-600 border-yellow-600' : 'text-red-600 border-red-600'}`}>\n                        {results.riskLevel} Risk\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Key Metrics */}\n              <Card>\n                <CardHeader>\n                  <CardTitle>Key Performance Indicators</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-slate-600\">Working Capital Efficiency</span>\n                    <span className=\"font-semibold\">{results.workingCapitalEfficiency}%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-slate-600\">Cash Conversion Cycle</span>\n                    <span className=\"font-semibold\">{results.cashConversionCycle} days</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-slate-600\">Industry Benchmark</span>\n                    <Badge variant=\"outline\">{results.industryBenchmark}</Badge>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-sm text-slate-600\">Revenue Growth Target</span>\n                    <span className=\"font-semibold\">{formData.revenueGrowth}%</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Board-Ready Talking Points */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center space-x-2\">\n                    <TrendingUp className=\"h-5 w-5 text-blue-600\" />\n                    <span>Board-Ready Talking Points</span>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    {boardTalkingPoints.map((point, index) => (\n                      <div key={index} className=\"flex items-start space-x-2\">\n                        <AlertCircle className=\"h-4 w-4 text-blue-600 mt-0.5 flex-shrink-0\" />\n                        <p className=\"text-sm text-slate-700 dark:text-slate-300\">{point}</p>\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"upload\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Upload className=\"h-5 w-5 text-blue-600\" />\n                  <span>Upload Financial Data</span>\n                </CardTitle>\n                <CardDescription>\n                  Upload your CSV file with historical financial data for enhanced analysis\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"border-2 border-dashed border-slate-300 dark:border-slate-600 rounded-lg p-8 text-center\">\n                  <FileSpreadsheet className=\"h-12 w-12 text-slate-400 mx-auto mb-4\" />\n                  <p className=\"text-slate-600 dark:text-slate-400 mb-4\">\n                    Drag and drop your CSV file here, or click to browse\n                  </p>\n                  <input\n                    ref={fileInputRef}\n                    type=\"file\"\n                    accept=\".csv\"\n                    onChange={handleFileUpload}\n                    className=\"hidden\"\n                  />\n                  <Button \n                    onClick={() => fileInputRef.current?.click()}\n                    disabled={isUploading}\n                  >\n                    {isUploading ? (\n                      <RefreshCw className=\"h-4 w-4 mr-2 animate-spin\" />\n                    ) : (\n                      <Upload className=\"h-4 w-4 mr-2\" />\n                    )}\n                    {isUploading ? 'Uploading...' : 'Choose File'}\n                  </Button>\n                </div>\n                \n                <div className=\"text-center\">\n                  <Button variant=\"outline\" onClick={downloadTemplate}>\n                    <Download className=\"h-4 w-4 mr-2\" />\n                    Download CSV Template\n                  </Button>\n                </div>\n\n                {uploadedData && (\n                  <div className=\"mt-4 p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <div className=\"flex items-center space-x-2 text-green-700 dark:text-green-300\">\n                      <CheckCircle className=\"h-5 w-5\" />\n                      <span className=\"font-semibold\">File uploaded successfully!</span>\n                    </div>\n                    <p className=\"text-sm text-green-600 dark:text-green-400 mt-1\">\n                      {uploadedData.length} rows of data processed\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle>CSV Format Requirements</CardTitle>\n                <CardDescription>Your CSV file should include the following columns</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-2 h-2 bg-blue-600 rounded-full\"></div>\n                    <span className=\"text-sm\"><strong>Date:</strong> YYYY-MM-DD format</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-2 h-2 bg-green-600 rounded-full\"></div>\n                    <span className=\"text-sm\"><strong>Revenue:</strong> Monthly revenue figures</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-2 h-2 bg-purple-600 rounded-full\"></div>\n                    <span className=\"text-sm\"><strong>Debtors:</strong> Accounts receivable balance</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-2 h-2 bg-orange-600 rounded-full\"></div>\n                    <span className=\"text-sm\"><strong>Creditors:</strong> Accounts payable balance</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-2 h-2 bg-red-600 rounded-full\"></div>\n                    <span className=\"text-sm\"><strong>Cash:</strong> Cash and cash equivalents</span>\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-2 h-2 bg-yellow-600 rounded-full\"></div>\n                    <span className=\"text-sm\"><strong>Inventory:</strong> Inventory value (optional)</span>\n                  </div>\n                </div>\n                \n                <Separator className=\"my-4\" />\n                \n                <div className=\"text-sm text-slate-600 dark:text-slate-400\">\n                  <p className=\"mb-2\"><strong>Tips for best results:</strong></p>\n                  <ul className=\"space-y-1 list-disc list-inside\">\n                    <li>Include at least 6 months of data</li>\n                    <li>Ensure consistent date formatting</li>\n                    <li>Use actual figures, not percentages</li>\n                    <li>Remove any currency symbols</li>\n                  </ul>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"analysis\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {/* Cash Flow Projections Chart */}\n            <Card className=\"lg:col-span-2\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <BarChart3 className=\"h-5 w-5 text-blue-600\" />\n                  <span>12-Month Cash Flow Projections</span>\n                </CardTitle>\n                <CardDescription>\n                  Projected cash improvements from working capital optimization\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={300}>\n                  <LineChart data={projections}>\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis dataKey=\"month\" />\n                    <YAxis />\n                    <Tooltip formatter={(value) => [`£${value.toLocaleString()}`, '']} />\n                    <Legend />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"currentCash\" \n                      stroke=\"#64748b\" \n                      strokeDasharray=\"5 5\"\n                      name=\"Current Trajectory\"\n                    />\n                    <Line \n                      type=\"monotone\" \n                      dataKey=\"projectedCash\" \n                      stroke=\"#10b981\" \n                      strokeWidth={2}\n                      name=\"Optimized Cash Flow\"\n                    />\n                  </LineChart>\n                </ResponsiveContainer>\n              </CardContent>\n            </Card>\n\n            {/* Working Capital Levers */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Zap className=\"h-5 w-5 text-yellow-600\" />\n                  <span>Working Capital Levers</span>\n                </CardTitle>\n                <CardDescription>Implementation roadmap for cash optimization</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {workingCapitalLevers.map((lever, index) => (\n                    <div key={index} className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-start justify-between mb-2\">\n                        <h4 className=\"font-semibold text-sm\">{lever.title}</h4>\n                        <div className=\"flex space-x-2\">\n                          <Badge variant={lever.impact === 'High' ? 'default' : 'secondary'} className=\"text-xs\">\n                            {lever.impact}\n                          </Badge>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {lever.timeframe}\n                          </Badge>\n                        </div>\n                      </div>\n                      <p className=\"text-sm text-slate-600 dark:text-slate-400\">{lever.description}</p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Cash Unlock Breakdown */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <PieChart className=\"h-5 w-5 text-purple-600\" />\n                  <span>Cash Unlock Breakdown</span>\n                </CardTitle>\n                <CardDescription>Sources of working capital improvement</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <ResponsiveContainer width=\"100%\" height={200}>\n                  <RechartsPieChart>\n                    <Pie\n                      data={pieData}\n                      cx=\"50%\"\n                      cy=\"50%\"\n                      innerRadius={40}\n                      outerRadius={80}\n                      paddingAngle={5}\n                      dataKey=\"value\"\n                    >\n                      {pieData.map((entry, index) => (\n                        <Cell key={`cell-${index}`} fill={entry.color} />\n                      ))}\n                    </Pie>\n                    <Tooltip formatter={(value) => [`${value}%`, '']} />\n                  </RechartsPieChart>\n                </ResponsiveContainer>\n                <div className=\"mt-4 space-y-2\">\n                  {pieData.map((entry, index) => (\n                    <div key={index} className=\"flex items-center justify-between text-sm\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: entry.color }}></div>\n                        <span>{entry.name}</span>\n                      </div>\n                      <span className=\"font-semibold\">{entry.value}%</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"insights\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Zap className=\"h-5 w-5 text-blue-600\" />\n                  <span>AI-Powered Insights</span>\n                </CardTitle>\n                <CardDescription>Intelligent recommendations based on your data</CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <TrendingUp className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold text-blue-900 dark:text-blue-100\">Priority Action</h4>\n                      <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                        Focus on reducing debtor days by 10 days first. This single action could unlock \n                        £{Math.round(results.cashUnlock90Days * 0.6).toLocaleString()} in 60 days.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <CheckCircle className=\"h-5 w-5 text-green-600 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold text-green-900 dark:text-green-100\">Industry Benchmark</h4>\n                      <p className=\"text-sm text-green-700 dark:text-green-300\">\n                        Your current debtor days ({formData.averageDebtorDays}) are {formData.averageDebtorDays > 35 ? 'above' : 'below'} \n                        the industry average of 35 days for {formData.industryType.toLowerCase()}.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-purple-50 dark:bg-purple-900/20 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <Target className=\"h-5 w-5 text-purple-600 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold text-purple-900 dark:text-purple-100\">Growth Funding</h4>\n                      <p className=\"text-sm text-purple-700 dark:text-purple-300\">\n                        To achieve {formData.revenueGrowth}% growth, you'll need approximately \n                        £{Math.round((formData.annualRevenue * formData.revenueGrowth / 100) * 0.15).toLocaleString()} \n                        in additional working capital.\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"p-4 bg-orange-50 dark:bg-orange-900/20 rounded-lg\">\n                  <div className=\"flex items-start space-x-3\">\n                    <AlertCircle className=\"h-5 w-5 text-orange-600 mt-0.5\" />\n                    <div>\n                      <h4 className=\"font-semibold text-orange-900 dark:text-orange-100\">Risk Assessment</h4>\n                      <p className=\"text-sm text-orange-700 dark:text-orange-300\">\n                        {results.riskLevel} risk implementation. {results.riskLevel === 'Low' ? \n                          'Your strong cash position provides flexibility for optimization.' :\n                          'Consider phased implementation to manage cash flow risks.'\n                        }\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2\">\n                  <Calendar className=\"h-5 w-5 text-green-600\" />\n                  <span>Implementation Timeline</span>\n                </CardTitle>\n                <CardDescription>Recommended 90-day action plan</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  <div className=\"relative\">\n                    <div className=\"absolute left-4 top-8 bottom-0 w-0.5 bg-slate-200 dark:bg-slate-700\"></div>\n                    \n                    <div className=\"relative flex items-start space-x-4 pb-6\">\n                      <div className=\"w-8 h-8 bg-blue-600 rounded-full flex items-center justify-center text-white text-sm font-semibold\">\n                        1\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold\">Days 1-30: Invoice Management</h4>\n                        <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                          Implement automated invoicing and follow-up systems. Target: Reduce debtor days by 5.\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"relative flex items-start space-x-4 pb-6\">\n                      <div className=\"w-8 h-8 bg-green-600 rounded-full flex items-center justify-center text-white text-sm font-semibold\">\n                        2\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold\">Days 31-60: Supplier Negotiations</h4>\n                        <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                          Renegotiate payment terms with key suppliers. Target: Extend creditor days by 3.\n                        </p>\n                      </div>\n                    </div>\n\n                    <div className=\"relative flex items-start space-x-4\">\n                      <div className=\"w-8 h-8 bg-purple-600 rounded-full flex items-center justify-center text-white text-sm font-semibold\">\n                        3\n                      </div>\n                      <div>\n                        <h4 className=\"font-semibold\">Days 61-90: Optimization & Monitoring</h4>\n                        <p className=\"text-sm text-slate-600 dark:text-slate-400\">\n                          Fine-tune processes and implement monitoring systems. Target: Achieve full optimization.\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </div>\n  )\n}\n\nexport default WorkingCapitalCalculatorEnhanced\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\WorkingCapital\\RealWorkingCapital.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'sseConnection' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 8,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "sseConnection" },
            "fix": { "range": [313, 326], "text": "" },
            "desc": "Remove unused variable 'sseConnection'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'formatPercentage' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 65,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 65,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "formatPercentage" },
            "fix": { "range": [1869, 1991], "text": "" },
            "desc": "Remove unused variable 'formatPercentage'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'formatNumber' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 70,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 70,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "formatNumber" },
            "fix": { "range": [1995, 2135], "text": "" },
            "desc": "Remove unused variable 'formatNumber'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'receivables' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 82,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 82,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "receivables" },
            "fix": { "range": [2460, 2516], "text": "" },
            "desc": "Remove unused variable 'receivables'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'payables' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 83,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "payables" },
            "fix": { "range": [2521, 2571], "text": "" },
            "desc": "Remove unused variable 'payables'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport apiService from '../../services/api';\nimport { useQuery } from '@tanstack/react-query';\n\nconst RealWorkingCapital = () => {\n  const [liveData, setLiveData] = useState(null);\n  const [sseConnection, setSseConnection] = useState(null);\n\n  // Fetch real working capital data\n  const { data: workingCapitalData, isLoading: wcLoading, error: wcError } = useQuery({\n    queryKey: ['workingCapital'],\n    queryFn: () => apiService.getWorkingCapital(),\n    refetchInterval: 30000, // Refresh every 30 seconds\n    retry: 3,\n  });\n\n  // Fetch real cash flow data\n  const { data: cashFlowData, isLoading: cfLoading, error: cfError } = useQuery({\n    queryKey: ['cashFlow'],\n    queryFn: () => apiService.getCashFlow(),\n    refetchInterval: 30000,\n    retry: 3,\n  });\n\n  // Fetch financial metrics\n  const { data: metricsData, isLoading: metricsLoading, error: metricsError } = useQuery({\n    queryKey: ['financialMetrics'],\n    queryFn: () => apiService.getFinancialMetrics(),\n    refetchInterval: 60000, // Refresh every minute\n    retry: 3,\n  });\n\n  // Connect to live data stream\n  useEffect(() => {\n    const eventSource = apiService.connectToLiveData(\n      (data) => {\n        console.log('Live data received:', data);\n        setLiveData(data);\n      },\n      (error) => {\n        console.error('Live data error:', error);\n      }\n    );\n\n    setSseConnection(eventSource);\n\n    return () => {\n      if (eventSource) {\n        eventSource.close();\n      }\n    };\n  }, []);\n\n  const formatCurrency = (value) => {\n    if (!value && value !== 0) return 'N/A';\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const formatPercentage = (value) => {\n    if (!value && value !== 0) return 'N/A';\n    return `${value.toFixed(2)}%`;\n  };\n\n  const formatNumber = (value) => {\n    if (!value && value !== 0) return 'N/A';\n    return new Intl.NumberFormat('en-US').format(value);\n  };\n\n  // Calculate derived metrics from real data\n  const calculateMetrics = () => {\n    if (!workingCapitalData) return {};\n\n    const currentAssets = workingCapitalData.currentAssets || 0;\n    const currentLiabilities = workingCapitalData.currentLiabilities || 0;\n    const inventory = workingCapitalData.inventory || 0;\n    const receivables = workingCapitalData.receivables || 0;\n    const payables = workingCapitalData.payables || 0;\n    const cash = workingCapitalData.cash || 0;\n\n    return {\n      workingCapital: currentAssets - currentLiabilities,\n      currentRatio: currentLiabilities > 0 ? currentAssets / currentLiabilities : 0,\n      quickRatio: currentLiabilities > 0 ? (currentAssets - inventory) / currentLiabilities : 0,\n      cashRatio: currentLiabilities > 0 ? cash / currentLiabilities : 0,\n      daysReceivable: workingCapitalData.daysReceivable || 0,\n      daysPayable: workingCapitalData.daysPayable || 0,\n      daysInventory: workingCapitalData.daysInventory || 0,\n      cashConversionCycle: (workingCapitalData.daysReceivable || 0) +\n                           (workingCapitalData.daysInventory || 0) -\n                           (workingCapitalData.daysPayable || 0),\n    };\n  };\n\n  const metrics = calculateMetrics();\n\n  if (wcLoading || cfLoading || metricsLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading real financial data from MCP Server...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (wcError || cfError || metricsError) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"max-w-md w-full p-8 bg-red-50 rounded-lg\">\n          <h2 className=\"text-xl font-bold text-red-600 mb-2\">Data Connection Error</h2>\n          <p className=\"text-gray-700\">Unable to connect to MCP Server. Please ensure the server is running.</p>\n          <p className=\"text-sm text-gray-600 mt-2\">Server: https://mcp-server-tkyu.onrender.com</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with Live Status */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Working Capital Management</h1>\n          <p className=\"text-gray-600 mt-1\">Real-time financial data from integrated systems</p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <div className={`w-3 h-3 rounded-full ${liveData ? 'bg-green-500 animate-pulse' : 'bg-gray-400'}`}></div>\n          <span className=\"text-sm text-gray-600\">\n            {liveData ? 'Live Data Active' : 'Connecting to MCP Server...'}\n          </span>\n        </div>\n      </div>\n\n      {/* Key Metrics Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-blue-600 font-medium\">Working Capital</p>\n                <p className=\"text-3xl font-bold text-blue-900 mt-2\">\n                  {formatCurrency(metrics.workingCapital)}\n                </p>\n                <p className=\"text-xs text-blue-700 mt-2\">\n                  Updated: {new Date().toLocaleTimeString()}\n                </p>\n              </div>\n              <div className=\"text-3xl\">💰</div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border-green-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-green-600 font-medium\">Current Ratio</p>\n                <p className=\"text-3xl font-bold text-green-900 mt-2\">\n                  {metrics.currentRatio?.toFixed(2) || 'N/A'}\n                </p>\n                <p className=\"text-xs text-green-700 mt-2\">\n                  Target: &gt;2.0\n                </p>\n              </div>\n              <div className=\"text-3xl\">📊</div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-purple-600 font-medium\">Cash Conversion Cycle</p>\n                <p className=\"text-3xl font-bold text-purple-900 mt-2\">\n                  {Math.round(metrics.cashConversionCycle)} days\n                </p>\n                <p className=\"text-xs text-purple-700 mt-2\">\n                  Industry Avg: 45 days\n                </p>\n              </div>\n              <div className=\"text-3xl\">🔄</div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-orange-600 font-medium\">Available Cash</p>\n                <p className=\"text-3xl font-bold text-orange-900 mt-2\">\n                  {formatCurrency(workingCapitalData?.cash || 0)}\n                </p>\n                <p className=\"text-xs text-orange-700 mt-2\">\n                  Quick Ratio: {metrics.quickRatio?.toFixed(2) || 'N/A'}\n                </p>\n              </div>\n              <div className=\"text-3xl\">💵</div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Detailed Breakdown */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Current Assets */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Current Assets (Real-time)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\n                <span className=\"text-sm font-medium text-gray-700\">Cash & Equivalents</span>\n                <span className=\"text-lg font-bold text-gray-900\">\n                  {formatCurrency(workingCapitalData?.cash || 0)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\n                <span className=\"text-sm font-medium text-gray-700\">Accounts Receivable</span>\n                <span className=\"text-lg font-bold text-gray-900\">\n                  {formatCurrency(workingCapitalData?.receivables || 0)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\n                <span className=\"text-sm font-medium text-gray-700\">Inventory</span>\n                <span className=\"text-lg font-bold text-gray-900\">\n                  {formatCurrency(workingCapitalData?.inventory || 0)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\n                <span className=\"text-sm font-medium text-gray-700\">Prepaid Expenses</span>\n                <span className=\"text-lg font-bold text-gray-900\">\n                  {formatCurrency(workingCapitalData?.prepaidExpenses || 0)}\n                </span>\n              </div>\n              <div className=\"border-t pt-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"font-semibold text-gray-900\">Total Current Assets</span>\n                  <span className=\"text-xl font-bold text-blue-600\">\n                    {formatCurrency(workingCapitalData?.currentAssets || 0)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Current Liabilities */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Current Liabilities (Real-time)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\n                <span className=\"text-sm font-medium text-gray-700\">Accounts Payable</span>\n                <span className=\"text-lg font-bold text-gray-900\">\n                  {formatCurrency(workingCapitalData?.payables || 0)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\n                <span className=\"text-sm font-medium text-gray-700\">Short-term Debt</span>\n                <span className=\"text-lg font-bold text-gray-900\">\n                  {formatCurrency(workingCapitalData?.shortTermDebt || 0)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\n                <span className=\"text-sm font-medium text-gray-700\">Accrued Expenses</span>\n                <span className=\"text-lg font-bold text-gray-900\">\n                  {formatCurrency(workingCapitalData?.accruedExpenses || 0)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center p-3 bg-gray-50 rounded\">\n                <span className=\"text-sm font-medium text-gray-700\">Current Portion LT Debt</span>\n                <span className=\"text-lg font-bold text-gray-900\">\n                  {formatCurrency(workingCapitalData?.currentPortionLTDebt || 0)}\n                </span>\n              </div>\n              <div className=\"border-t pt-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"font-semibold text-gray-900\">Total Current Liabilities</span>\n                  <span className=\"text-xl font-bold text-red-600\">\n                    {formatCurrency(workingCapitalData?.currentLiabilities || 0)}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Cash Flow Analysis */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Cash Flow Analysis (Live from MCP Server)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-600 mb-3\">Operating Activities</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">Net Income</span>\n                  <span className=\"font-medium\">{formatCurrency(cashFlowData?.netIncome || 0)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">Depreciation</span>\n                  <span className=\"font-medium\">{formatCurrency(cashFlowData?.depreciation || 0)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">Working Capital Changes</span>\n                  <span className=\"font-medium\">{formatCurrency(cashFlowData?.wcChanges || 0)}</span>\n                </div>\n                <div className=\"border-t pt-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-semibold\">Operating Cash Flow</span>\n                    <span className=\"font-bold text-green-600\">\n                      {formatCurrency(cashFlowData?.operatingCashFlow || 0)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-600 mb-3\">Investing Activities</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">Capital Expenditures</span>\n                  <span className=\"font-medium\">{formatCurrency(cashFlowData?.capex || 0)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">Asset Sales</span>\n                  <span className=\"font-medium\">{formatCurrency(cashFlowData?.assetSales || 0)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">Investments</span>\n                  <span className=\"font-medium\">{formatCurrency(cashFlowData?.investments || 0)}</span>\n                </div>\n                <div className=\"border-t pt-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-semibold\">Investing Cash Flow</span>\n                    <span className=\"font-bold text-orange-600\">\n                      {formatCurrency(cashFlowData?.investingCashFlow || 0)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-600 mb-3\">Financing Activities</h4>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">Debt Issuance</span>\n                  <span className=\"font-medium\">{formatCurrency(cashFlowData?.debtIssuance || 0)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">Debt Repayment</span>\n                  <span className=\"font-medium\">{formatCurrency(cashFlowData?.debtRepayment || 0)}</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span className=\"text-gray-600\">Dividends</span>\n                  <span className=\"font-medium\">{formatCurrency(cashFlowData?.dividends || 0)}</span>\n                </div>\n                <div className=\"border-t pt-2\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"font-semibold\">Financing Cash Flow</span>\n                    <span className=\"font-bold text-blue-600\">\n                      {formatCurrency(cashFlowData?.financingCashFlow || 0)}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"mt-6 p-4 bg-gradient-to-r from-gray-100 to-gray-200 rounded-lg\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-lg font-semibold text-gray-900\">Net Cash Flow</span>\n              <span className=\"text-2xl font-bold text-blue-900\">\n                {formatCurrency(\n                  (cashFlowData?.operatingCashFlow || 0) +\n                  (cashFlowData?.investingCashFlow || 0) +\n                  (cashFlowData?.financingCashFlow || 0)\n                )}\n              </span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI Recommendations */}\n      <Card className=\"border-2 border-purple-200 bg-gradient-to-r from-purple-50 to-indigo-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>AI-Powered Financial Insights</span>\n            <span className=\"text-sm font-normal text-purple-600\">Powered by MCP Server</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {metricsData?.aiRecommendations?.map((rec, index) => (\n              <div key={index} className=\"p-4 bg-white rounded-lg border border-purple-200\">\n                <h4 className=\"font-medium text-gray-900 mb-1\">{rec.title}</h4>\n                <p className=\"text-sm text-gray-600\">{rec.description}</p>\n                <div className=\"mt-2 flex items-center space-x-2\">\n                  <span className=\"text-xs px-2 py-1 bg-purple-100 text-purple-700 rounded\">\n                    Impact: {rec.impact}\n                  </span>\n                  <span className=\"text-xs px-2 py-1 bg-green-100 text-green-700 rounded\">\n                    Confidence: {rec.confidence}%\n                  </span>\n                </div>\n              </div>\n            )) || (\n              <div className=\"text-center py-8 text-gray-500\">\n                <p>Connecting to AI service for insights...</p>\n                <p className=\"text-xs mt-2\">MCP Server: https://mcp-server-tkyu.onrender.com</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default RealWorkingCapital;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\admin\\SystemAdminPanel.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\admin\\SystemConfig.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\admin\\UserManagement.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\analytics\\AdvancedAnalyticsDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'selectedKPI' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 85,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "selectedKPI" },
            "fix": { "range": [3445, 3483], "text": "" },
            "desc": "Remove unused variable 'selectedKPI'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'index' is defined but never used.",
        "line": 205,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 205,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [8757, 8764], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'index' is defined but never used.",
        "line": 376,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 376,
        "endColumn": 47,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [16069, 16076], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'index' is defined but never used.",
        "line": 525,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 525,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [23656, 23663], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport {\n  ChartBarIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  CpuChipIcon,\n  CalendarDaysIcon,\n  FunnelIcon,\n  DocumentTextIcon,\n  ClockIcon,\n  LightBulbIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  ClipboardDocumentListIcon,\n  SparklesIcon\n} from '@heroicons/react/24/outline';\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  AreaChart,\n  Area,\n  PieChart,\n  Pie,\n  Cell,\n  ScatterChart,\n  Scatter,\n  RadialBarChart,\n  RadialBar,\n  ComposedChart\n} from 'recharts';\n\nconst performanceData = [\n  { month: 'Jan', efficiency: 87, quality: 94, cost: 185000, revenue: 240000, oee: 82, downtime: 4.2 },\n  { month: 'Feb', efficiency: 89, quality: 96, cost: 182000, revenue: 268000, oee: 85, downtime: 3.8 },\n  { month: 'Mar', efficiency: 91, quality: 92, cost: 175000, revenue: 285000, oee: 88, downtime: 3.1 },\n  { month: 'Apr', efficiency: 88, quality: 95, cost: 190000, revenue: 312000, oee: 86, downtime: 4.5 },\n  { month: 'May', efficiency: 93, quality: 97, cost: 178000, revenue: 298000, oee: 91, downtime: 2.8 },\n  { month: 'Jun', efficiency: 95, quality: 94, cost: 172000, revenue: 325000, oee: 93, downtime: 2.3 }\n];\n\nconst predictiveData = [\n  { week: 'W1', predicted: 2400, actual: 2350, confidence: 95, maintenance: 'Low', demand: 2500 },\n  { week: 'W2', predicted: 2650, actual: 2680, confidence: 92, maintenance: 'Medium', demand: 2600 },\n  { week: 'W3', predicted: 2800, actual: 2750, confidence: 89, maintenance: 'Low', demand: 2750 },\n  { week: 'W4', predicted: 2950, actual: null, confidence: 87, maintenance: 'High', demand: 2900 },\n  { week: 'W5', predicted: 3100, actual: null, confidence: 84, maintenance: 'Medium', demand: 3050 },\n  { week: 'W6', predicted: 3250, actual: null, confidence: 81, maintenance: 'Low', demand: 3200 }\n];\n\nconst anomalyData = [\n  { id: 1, type: 'Performance Drop', severity: 'High', location: 'Line 3', detected: '2 hours ago', impact: 'Production -12%' },\n  { id: 2, type: 'Quality Deviation', severity: 'Medium', location: 'QC Station 2', detected: '4 hours ago', impact: 'Defect Rate +3%' },\n  { id: 3, type: 'Energy Spike', severity: 'Low', location: 'Compressor Unit', detected: '6 hours ago', impact: 'Cost +8%' },\n  { id: 4, type: 'Temperature Variance', severity: 'Medium', location: 'Furnace A', detected: '8 hours ago', impact: 'Cycle Time +15%' }\n];\n\nconst kpiData = [\n  { name: 'Overall Equipment Effectiveness', value: 89, target: 85, trend: 'up', color: '#10b981' },\n  { name: 'First Pass Yield', value: 94, target: 90, trend: 'up', color: '#3b82f6' },\n  { name: 'Mean Time Between Failures', value: 168, target: 150, trend: 'up', color: '#8b5cf6' },\n  { name: 'Cost per Unit', value: 12.45, target: 13.50, trend: 'down', color: '#f59e0b' }\n];\n\nconst correlationData = [\n  { factor: 'Temperature', impact: 85, correlation: 0.78 },\n  { factor: 'Humidity', impact: 62, correlation: 0.45 },\n  { factor: 'Pressure', impact: 91, correlation: 0.82 },\n  { factor: 'Speed', impact: 73, correlation: 0.67 },\n  { factor: 'Vibration', impact: 58, correlation: 0.41 }\n];\n\nconst COLORS = ['#3b82f6', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'];\n\nexport default function AdvancedAnalyticsDashboard() {\n  const [selectedTimeframe, setSelectedTimeframe] = useState('6m');\n  const [selectedAnalysis, setSelectedAnalysis] = useState('performance');\n  const [selectedKPI] = useState('all');\n\n  const getSeverityColor = (severity) => {\n    switch (severity) {\n      case 'High':\n        return 'bg-red-100 dark:bg-red-900/20 text-red-800 dark:text-red-200';\n      case 'Medium':\n        return 'bg-yellow-100 dark:bg-yellow-900/20 text-yellow-800 dark:text-yellow-200';\n      case 'Low':\n        return 'bg-green-100 dark:bg-green-900/20 text-green-800 dark:text-green-200';\n      default:\n        return 'bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200';\n    }\n  };\n\n  const getSeverityIcon = (severity) => {\n    switch (severity) {\n      case 'High':\n        return <ExclamationTriangleIcon className=\"h-4 w-4 text-red-500\" />;\n      case 'Medium':\n        return <ExclamationTriangleIcon className=\"h-4 w-4 text-yellow-500\" />;\n      case 'Low':\n        return <CheckCircleIcon className=\"h-4 w-4 text-green-500\" />;\n      default:\n        return <ClockIcon className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-4\">\n            <ChartBarIcon className=\"h-8 w-8 text-blue-600\" />\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">Advanced Analytics Dashboard</h1>\n              <p className=\"text-gray-600 dark:text-gray-400\">AI-powered insights and predictive analytics for manufacturing optimization</p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <button className=\"flex items-center px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700\">\n              <SparklesIcon className=\"h-4 w-4 mr-2\" />\n              Generate AI Insights\n            </button>\n            <button className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700\">\n              <DocumentTextIcon className=\"h-4 w-4 mr-2\" />\n              Export Report\n            </button>\n\n            <select\n              value={selectedTimeframe}\n              onChange={(e) => setSelectedTimeframe(e.target.value)}\n              className=\"px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n            >\n              <option value=\"1m\">Last Month</option>\n              <option value=\"3m\">Last 3 Months</option>\n              <option value=\"6m\">Last 6 Months</option>\n              <option value=\"1y\">Last Year</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {/* Analysis Type Selector */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6 mb-8\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex bg-gray-200 dark:bg-gray-700 rounded-lg p-1\">\n            <button\n              onClick={() => setSelectedAnalysis('performance')}\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                selectedAnalysis === 'performance'\n                  ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow'\n                  : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'\n              }`}\n            >\n              Performance Analysis\n            </button>\n            <button\n              onClick={() => setSelectedAnalysis('predictive')}\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                selectedAnalysis === 'predictive'\n                  ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow'\n                  : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'\n              }`}\n            >\n              Predictive Analytics\n            </button>\n            <button\n              onClick={() => setSelectedAnalysis('anomaly')}\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                selectedAnalysis === 'anomaly'\n                  ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow'\n                  : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'\n              }`}\n            >\n              Anomaly Detection\n            </button>\n            <button\n              onClick={() => setSelectedAnalysis('correlation')}\n              className={`px-4 py-2 rounded-md text-sm font-medium transition-colors ${\n                selectedAnalysis === 'correlation'\n                  ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow'\n                  : 'text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white'\n              }`}\n            >\n              Correlation Analysis\n            </button>\n          </div>\n\n          <div className=\"flex items-center space-x-2\">\n            <CpuChipIcon className=\"h-5 w-5 text-green-500\" />\n            <span className=\"text-sm text-green-600 dark:text-green-400\">AI Engine Active</span>\n          </div>\n        </div>\n      </div>\n\n      {/* KPI Overview Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {kpiData.map((kpi, index) => (\n          <div key={kpi.name} className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex-1\">\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">{kpi.name}</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {kpi.name.includes('Cost') ? `$${kpi.value}` :\n                   kpi.name.includes('Time') ? `${kpi.value}h` : `${kpi.value}%`}\n                </p>\n                <div className=\"flex items-center mt-2\">\n                  {kpi.trend === 'up' ? (\n                    <ArrowTrendingUpIcon className=\"h-4 w-4 text-green-500 mr-1\" />\n                  ) : (\n                    <ArrowTrendingDownIcon className=\"h-4 w-4 text-red-500 mr-1\" />\n                  )}\n                  <span className={`text-sm ${kpi.trend === 'up' ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'}`}>\n                    Target: {kpi.name.includes('Cost') ? `$${kpi.target}` :\n                            kpi.name.includes('Time') ? `${kpi.target}h` : `${kpi.target}%`}\n                  </span>\n                </div>\n              </div>\n              <div className=\"w-16 h-16\">\n                <ResponsiveContainer width=\"100%\" height=\"100%\">\n                  <RadialBarChart data={[{ value: (kpi.value / kpi.target) * 100 }]}>\n                    <RadialBar\n                      dataKey=\"value\"\n                      cornerRadius={10}\n                      fill={kpi.color}\n                      startAngle={90}\n                      endAngle={-270}\n                    />\n                  </RadialBarChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {selectedAnalysis === 'performance' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* Performance Trends */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Performance Trends</h3>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <ComposedChart data={performanceData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                  <XAxis dataKey=\"month\" tick={{ fontSize: 12 }} />\n                  <YAxis yAxisId=\"left\" tick={{ fontSize: 12 }} />\n                  <YAxis yAxisId=\"right\" orientation=\"right\" tick={{ fontSize: 12 }} />\n                  <Tooltip />\n                  <Legend />\n                  <Area\n                    yAxisId=\"left\"\n                    type=\"monotone\"\n                    dataKey=\"efficiency\"\n                    fill=\"#3b82f6\"\n                    fillOpacity={0.3}\n                    stroke=\"#3b82f6\"\n                    name=\"Efficiency %\"\n                  />\n                  <Line\n                    yAxisId=\"left\"\n                    type=\"monotone\"\n                    dataKey=\"quality\"\n                    stroke=\"#10b981\"\n                    strokeWidth={3}\n                    name=\"Quality %\"\n                  />\n                  <Line\n                    yAxisId=\"left\"\n                    type=\"monotone\"\n                    dataKey=\"oee\"\n                    stroke=\"#8b5cf6\"\n                    strokeWidth={3}\n                    name=\"OEE %\"\n                  />\n                  <Bar\n                    yAxisId=\"right\"\n                    dataKey=\"downtime\"\n                    fill=\"#ef4444\"\n                    fillOpacity={0.7}\n                    name=\"Downtime (hrs)\"\n                  />\n                </ComposedChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Cost vs Revenue Analysis */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Cost vs Revenue Analysis</h3>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={performanceData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                  <XAxis dataKey=\"month\" tick={{ fontSize: 12 }} />\n                  <YAxis tick={{ fontSize: 12 }} tickFormatter={(value) => `$${value/1000}k`} />\n                  <Tooltip formatter={(value) => [`$${value.toLocaleString()}`, '']} />\n                  <Legend />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"revenue\"\n                    stackId=\"1\"\n                    stroke=\"#10b981\"\n                    fill=\"#10b981\"\n                    fillOpacity={0.8}\n                    name=\"Revenue\"\n                  />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"cost\"\n                    stackId=\"2\"\n                    stroke=\"#ef4444\"\n                    fill=\"#ef4444\"\n                    fillOpacity={0.8}\n                    name=\"Costs\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {selectedAnalysis === 'predictive' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* Predictive Forecasting */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Production Forecasting</h3>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <ComposedChart data={predictiveData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                  <XAxis dataKey=\"week\" tick={{ fontSize: 12 }} />\n                  <YAxis tick={{ fontSize: 12 }} />\n                  <Tooltip />\n                  <Legend />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"actual\"\n                    stroke=\"#10b981\"\n                    strokeWidth={3}\n                    name=\"Actual Production\"\n                    connectNulls={false}\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"predicted\"\n                    stroke=\"#3b82f6\"\n                    strokeDasharray=\"5 5\"\n                    strokeWidth={3}\n                    name=\"Predicted Production\"\n                  />\n                  <Line\n                    type=\"monotone\"\n                    dataKey=\"demand\"\n                    stroke=\"#f59e0b\"\n                    strokeWidth={2}\n                    name=\"Expected Demand\"\n                  />\n                </ComposedChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Confidence & Maintenance Predictions */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Prediction Confidence & Maintenance</h3>\n            <div className=\"space-y-6\">\n              {predictiveData.map((item, index) => (\n                <div key={item.week} className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                  <div className=\"flex items-center space-x-4\">\n                    <div className=\"w-12 h-12 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                      <span className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">{item.week}</span>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                        Production: {item.predicted.toLocaleString()} units\n                      </p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        Maintenance Risk: {item.maintenance}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{item.confidence}%</p>\n                    <div className=\"w-20 bg-gray-200 dark:bg-gray-600 rounded-full h-2 mt-1\">\n                      <div\n                        className={`h-2 rounded-full ${\n                          item.confidence >= 90 ? 'bg-green-500' :\n                          item.confidence >= 80 ? 'bg-yellow-500' : 'bg-red-500'\n                        }`}\n                        style={{ width: `${item.confidence}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {selectedAnalysis === 'anomaly' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* Anomaly Detection */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Real-time Anomaly Detection</h3>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                <span className=\"text-sm text-green-600 dark:text-green-400\">Monitoring Active</span>\n              </div>\n            </div>\n            <div className=\"space-y-4\">\n              {anomalyData.map((anomaly) => (\n                <div key={anomaly.id} className=\"border border-gray-200 dark:border-gray-700 rounded-lg p-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-start space-x-3\">\n                      <div className=\"flex-shrink-0\">\n                        {getSeverityIcon(anomaly.severity)}\n                      </div>\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{anomaly.type}</p>\n                        <p className=\"text-xs text-gray-600 dark:text-gray-400\">{anomaly.location}</p>\n                        <p className=\"text-xs text-gray-500 dark:text-gray-500 mt-1\">{anomaly.detected}</p>\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col items-end\">\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getSeverityColor(anomaly.severity)}`}>\n                        {anomaly.severity}\n                      </span>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">{anomaly.impact}</p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Anomaly Trends */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Anomaly Frequency Trends</h3>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <BarChart data={[\n                  { day: 'Mon', high: 2, medium: 5, low: 8 },\n                  { day: 'Tue', high: 1, medium: 3, low: 6 },\n                  { day: 'Wed', high: 3, medium: 4, low: 7 },\n                  { day: 'Thu', high: 0, medium: 2, low: 5 },\n                  { day: 'Fri', high: 1, medium: 6, low: 9 },\n                  { day: 'Sat', high: 2, medium: 3, low: 4 },\n                  { day: 'Sun', high: 1, medium: 2, low: 3 }\n                ]}>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                  <XAxis dataKey=\"day\" tick={{ fontSize: 12 }} />\n                  <YAxis tick={{ fontSize: 12 }} />\n                  <Tooltip />\n                  <Legend />\n                  <Bar dataKey=\"high\" stackId=\"a\" fill=\"#ef4444\" name=\"High Severity\" />\n                  <Bar dataKey=\"medium\" stackId=\"a\" fill=\"#f59e0b\" name=\"Medium Severity\" />\n                  <Bar dataKey=\"low\" stackId=\"a\" fill=\"#10b981\" name=\"Low Severity\" />\n                </BarChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {selectedAnalysis === 'correlation' && (\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* Factor Correlation */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Environmental Factor Correlation</h3>\n            <div className=\"h-80\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <ScatterChart>\n                  <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n                  <XAxis\n                    type=\"number\"\n                    dataKey=\"correlation\"\n                    domain={[0, 1]}\n                    tick={{ fontSize: 12 }}\n                    name=\"Correlation\"\n                  />\n                  <YAxis\n                    type=\"number\"\n                    dataKey=\"impact\"\n                    domain={[0, 100]}\n                    tick={{ fontSize: 12 }}\n                    name=\"Impact %\"\n                  />\n                  <Tooltip\n                    cursor={{ strokeDasharray: '3 3' }}\n                    content={({ active, payload }) => {\n                      if (active && payload && payload.length) {\n                        const data = payload[0].payload;\n                        return (\n                          <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-3\">\n                            <p className=\"font-medium\">{data.factor}</p>\n                            <p className=\"text-sm\">Correlation: {data.correlation}</p>\n                            <p className=\"text-sm\">Impact: {data.impact}%</p>\n                          </div>\n                        );\n                      }\n                      return null;\n                    }}\n                  />\n                  <Scatter data={correlationData} fill=\"#3b82f6\" />\n                </ScatterChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Factor Impact List */}\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Factor Impact Analysis</h3>\n            <div className=\"space-y-4\">\n              {correlationData.map((factor, index) => (\n                <div key={factor.factor} className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                      <span className=\"text-sm font-medium text-blue-600 dark:text-blue-400\">\n                        {factor.factor.charAt(0)}\n                      </span>\n                    </div>\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{factor.factor}</p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                        Correlation: {factor.correlation.toFixed(2)}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\">{factor.impact}%</p>\n                    <div className=\"w-16 bg-gray-200 dark:bg-gray-600 rounded-full h-2 mt-1\">\n                      <div\n                        className=\"h-2 bg-blue-500 rounded-full\"\n                        style={{ width: `${factor.impact}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* AI Insights & Recommendations */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-3\">\n            <LightBulbIcon className=\"h-6 w-6 text-yellow-500\" />\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">AI-Generated Insights & Recommendations</h3>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <CpuChipIcon className=\"h-5 w-5 text-green-500\" />\n            <span className=\"text-sm text-green-600 dark:text-green-400\">Last updated: 5 min ago</span>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <ArrowTrendingUpIcon className=\"h-5 w-5 text-blue-600 dark:text-blue-400 mt-1\" />\n              <div>\n                <h4 className=\"font-medium text-blue-900 dark:text-blue-200\">Efficiency Opportunity</h4>\n                <p className=\"text-sm text-blue-700 dark:text-blue-300 mt-1\">\n                  Optimizing temperature control on Line 3 could increase efficiency by 7% based on correlation analysis.\n                </p>\n                <button className=\"text-xs text-blue-600 dark:text-blue-400 hover:underline mt-2\">\n                  View Details →\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-green-50 dark:bg-green-900/20 rounded-lg p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <CheckCircleIcon className=\"h-5 w-5 text-green-600 dark:text-green-400 mt-1\" />\n              <div>\n                <h4 className=\"font-medium text-green-900 dark:text-green-200\">Predictive Maintenance</h4>\n                <p className=\"text-sm text-green-700 dark:text-green-300 mt-1\">\n                  Schedule maintenance for Compressor Unit in next 72 hours to prevent predicted failure.\n                </p>\n                <button className=\"text-xs text-green-600 dark:text-green-400 hover:underline mt-2\">\n                  Schedule Now →\n                </button>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-yellow-50 dark:bg-yellow-900/20 rounded-lg p-4\">\n            <div className=\"flex items-start space-x-3\">\n              <ExclamationTriangleIcon className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400 mt-1\" />\n              <div>\n                <h4 className=\"font-medium text-yellow-900 dark:text-yellow-200\">Quality Alert</h4>\n                <p className=\"text-sm text-yellow-700 dark:text-yellow-300 mt-1\">\n                  Vibration levels increasing on QC Station 2. Consider recalibration to maintain quality standards.\n                </p>\n                <button className=\"text-xs text-yellow-600 dark:text-yellow-400 hover:underline mt-2\">\n                  Investigate →\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\analytics\\DemandForecasting.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [24, 35], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'setAiInsights' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 36,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 36,
        "endColumn": 35,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "setAiInsights" },
            "fix": { "range": [1636, 1651], "text": "" },
            "desc": "Remove unused variable 'setAiInsights'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'formatCurrency' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 75,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "formatCurrency" },
            "fix": { "range": [3017, 3235], "text": "" },
            "desc": "Remove unused variable 'formatCurrency'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\n\nconst DemandForecasting = () => {\n  const [forecastData, setForecastData] = useState({\n    nextMonth: 125000,\n    nextQuarter: 385000,\n    nextYear: 1650000,\n    confidence: 87,\n    trend: 'increasing'\n  });\n\n  const [products, setProducts] = useState([\n    { id: 1, name: 'Product Alpha', currentDemand: 5000, forecast: 5500, growth: 10, confidence: 92 },\n    { id: 2, name: 'Product Beta', currentDemand: 3200, forecast: 3800, growth: 18.75, confidence: 88 },\n    { id: 3, name: 'Product Gamma', currentDemand: 2100, forecast: 2000, growth: -4.76, confidence: 85 },\n    { id: 4, name: 'Product Delta', currentDemand: 4500, forecast: 5200, growth: 15.56, confidence: 90 },\n    { id: 5, name: 'Product Epsilon', currentDemand: 1800, forecast: 2100, growth: 16.67, confidence: 83 }\n  ]);\n\n  const [seasonalFactors] = useState([\n    { month: 'Jan', factor: 0.85, predicted: 106250 },\n    { month: 'Feb', factor: 0.90, predicted: 112500 },\n    { month: 'Mar', factor: 0.95, predicted: 118750 },\n    { month: 'Apr', factor: 1.00, predicted: 125000 },\n    { month: 'May', factor: 1.05, predicted: 131250 },\n    { month: 'Jun', factor: 1.10, predicted: 137500 },\n    { month: 'Jul', factor: 1.15, predicted: 143750 },\n    { month: 'Aug', factor: 1.12, predicted: 140000 },\n    { month: 'Sep', factor: 1.08, predicted: 135000 },\n    { month: 'Oct', factor: 1.05, predicted: 131250 },\n    { month: 'Nov', factor: 1.20, predicted: 150000 },\n    { month: 'Dec', factor: 1.25, predicted: 156250 }\n  ]);\n\n  const [aiInsights, setAiInsights] = useState([\n    { type: 'opportunity', message: 'Market trend analysis shows 23% growth potential in Q2' },\n    { type: 'warning', message: 'Supply chain disruption risk detected for Product Gamma' },\n    { type: 'info', message: 'Competitor pricing changes may affect demand by 5-8%' },\n    { type: 'success', message: 'AI model accuracy improved to 87% confidence level' }\n  ]);\n\n  const [isRunningForecast, setIsRunningForecast] = useState(false);\n\n  const runForecast = async () => {\n    setIsRunningForecast(true);\n\n    // Simulate API call to MCP server\n    setTimeout(() => {\n      // Update with \"new\" forecast data\n      setForecastData({\n        nextMonth: 128000 + Math.random() * 10000,\n        nextQuarter: 395000 + Math.random() * 20000,\n        nextYear: 1680000 + Math.random() * 50000,\n        confidence: 85 + Math.random() * 10,\n        trend: Math.random() > 0.5 ? 'increasing' : 'stable'\n      });\n\n      // Update product forecasts\n      setProducts(prev => prev.map(product => ({\n        ...product,\n        forecast: product.currentDemand * (1 + (Math.random() * 0.3 - 0.1)),\n        growth: (Math.random() * 30 - 5),\n        confidence: 80 + Math.random() * 15\n      })));\n\n      setIsRunningForecast(false);\n    }, 2000);\n  };\n\n  const formatNumber = (num) => {\n    return new Intl.NumberFormat('en-US').format(Math.round(num));\n  };\n\n  const formatCurrency = (value) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Demand Forecasting</h1>\n          <p className=\"text-gray-600 mt-1\">AI-powered demand predictions and insights</p>\n        </div>\n        <button\n          onClick={runForecast}\n          disabled={isRunningForecast}\n          className={`px-6 py-3 text-white font-medium rounded-lg transition-all ${\n            isRunningForecast\n              ? 'bg-gray-400 cursor-not-allowed'\n              : 'bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700'\n          }`}\n        >\n          {isRunningForecast ? (\n            <span className=\"flex items-center\">\n              <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" fill=\"none\" viewBox=\"0 0 24 24\">\n                <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n              </svg>\n              Running AI Forecast...\n            </span>\n          ) : (\n            'Run New Forecast'\n          )}\n        </button>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Next Month</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{formatNumber(forecastData.nextMonth)}</p>\n                <p className=\"text-sm text-green-600 mt-1\">+12% vs last month</p>\n              </div>\n              <div className=\"text-3xl\">📈</div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Next Quarter</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{formatNumber(forecastData.nextQuarter)}</p>\n                <p className=\"text-sm text-green-600 mt-1\">+18% vs last quarter</p>\n              </div>\n              <div className=\"text-3xl\">📊</div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Annual Forecast</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{formatNumber(forecastData.nextYear)}</p>\n                <p className=\"text-sm text-blue-600 mt-1\">Trend: {forecastData.trend}</p>\n              </div>\n              <div className=\"text-3xl\">📅</div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm text-gray-600\">AI Confidence</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{forecastData.confidence.toFixed(1)}%</p>\n                <div className=\"mt-2 w-full bg-gray-200 rounded-full h-2\">\n                  <div\n                    className=\"bg-gradient-to-r from-purple-600 to-indigo-600 h-2 rounded-full\"\n                    style={{ width: `${forecastData.confidence}%` }}\n                  ></div>\n                </div>\n              </div>\n              <div className=\"text-3xl\">🤖</div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Product Demand Forecast */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Product-Level Forecasts</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {products.map((product) => (\n                <div key={product.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-gray-900\">{product.name}</h4>\n                    <div className=\"flex items-center space-x-4 mt-1\">\n                      <span className=\"text-sm text-gray-600\">\n                        Current: {formatNumber(product.currentDemand)}\n                      </span>\n                      <span className=\"text-sm font-medium text-blue-600\">\n                        Forecast: {formatNumber(product.forecast)}\n                      </span>\n                      <span className={`text-sm font-bold ${\n                        product.growth > 0 ? 'text-green-600' : 'text-red-600'\n                      }`}>\n                        {product.growth > 0 ? '+' : ''}{product.growth.toFixed(1)}%\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-xs text-gray-500\">Confidence</div>\n                    <div className=\"text-lg font-bold text-purple-600\">{product.confidence.toFixed(0)}%</div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Seasonal Patterns */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Seasonal Demand Pattern</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {seasonalFactors.slice(0, 6).map((month) => (\n                <div key={month.month} className=\"flex items-center space-x-3\">\n                  <span className=\"text-sm font-medium text-gray-600 w-12\">{month.month}</span>\n                  <div className=\"flex-1 bg-gray-200 rounded-full h-6 relative\">\n                    <div\n                      className=\"absolute top-0 left-0 h-full bg-gradient-to-r from-blue-500 to-purple-500 rounded-full\"\n                      style={{ width: `${month.factor * 80}%` }}\n                    ></div>\n                  </div>\n                  <span className=\"text-sm font-medium text-gray-900 w-20 text-right\">\n                    {formatNumber(month.predicted)}\n                  </span>\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-4 text-center\">\n              <button className=\"text-sm text-blue-600 hover:text-blue-700 font-medium\">\n                View Full Year Pattern →\n              </button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* AI Insights */}\n      <Card>\n        <CardHeader>\n          <CardTitle>AI-Generated Insights</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {aiInsights.map((insight, index) => (\n              <div\n                key={index}\n                className={`p-4 rounded-lg border ${\n                  insight.type === 'opportunity' ? 'bg-green-50 border-green-200' :\n                  insight.type === 'warning' ? 'bg-yellow-50 border-yellow-200' :\n                  insight.type === 'success' ? 'bg-blue-50 border-blue-200' :\n                  'bg-gray-50 border-gray-200'\n                }`}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"text-2xl\">\n                    {insight.type === 'opportunity' ? '💡' :\n                     insight.type === 'warning' ? '⚠️' :\n                     insight.type === 'success' ? '✅' : 'ℹ️'}\n                  </div>\n                  <p className=\"text-sm text-gray-700 flex-1\">{insight.message}</p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Forecast Accuracy */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Model Performance & Accuracy</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Mean Absolute Error</p>\n              <p className=\"text-2xl font-bold text-gray-900\">3.2%</p>\n              <p className=\"text-xs text-green-600 mt-1\">↓ 0.5% from last month</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Prediction Accuracy</p>\n              <p className=\"text-2xl font-bold text-gray-900\">96.8%</p>\n              <p className=\"text-xs text-green-600 mt-1\">↑ 1.2% improvement</p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Data Points Analyzed</p>\n              <p className=\"text-2xl font-bold text-gray-900\">1.2M</p>\n              <p className=\"text-xs text-gray-600 mt-1\">Last 24 months</p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default DemandForecasting;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\analytics\\MultiMarketAnalytics.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'onAnalyze' is defined but never used.",
        "line": 45,
        "column": 50,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "onAnalyze" },
            "fix": { "range": [795, 806], "text": "" },
            "desc": "Remove unused variable 'onAnalyze'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'comparisonMode' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 47,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 47,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "comparisonMode" },
            "fix": { "range": [907, 953], "text": "" },
            "desc": "Remove unused variable 'comparisonMode'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'selectedMetric' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 48,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 48,
        "endColumn": 24,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "selectedMetric" },
            "fix": { "range": [956, 1001], "text": "" },
            "desc": "Remove unused variable 'selectedMetric'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'showPredictions' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 50,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "showPredictions" },
            "fix": { "range": [1046, 1087], "text": "" },
            "desc": "Remove unused variable 'showPredictions'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'loadAnalyticsData' is not defined.",
        "line": 217,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 217,
        "endColumn": 28
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'displayData' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 226,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 226,
        "endColumn": 20
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'setRiskTolerance' is not defined.",
        "line": 683,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 683,
        "endColumn": 46
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { devLog } from '../../lib/devLog.js';\nimport React, { useState, useEffect } from 'react';\nimport { Card } from '../ui/card';\nimport { Button } from '../ui/button';\nimport { Badge } from '../ui/badge';\nimport { Slider } from '../ui/slider';\nimport { \n  Globe2, \n  TrendingUp, \n  TrendingDown, \n  BarChart3, \n  PieChart, \n  Target,\n  AlertTriangle,\n  DollarSign,\n  Package,\n  Clock,\n  Zap,\n  RefreshCw,\n  Download,\n  Filter,\n  ArrowUpRight,\n  ArrowDownRight\n} from 'lucide-react';\nimport { \n  LineChart, \n  Line, \n  BarChart, \n  Bar, \n  XAxis, \n  YAxis, \n  CartesianGrid, \n  Tooltip, \n  ResponsiveContainer, \n  PieChart as RechartsPieChart, \n  Pie, \n  Cell,\n  ComposedChart,\n  Area,\n  AreaChart,\n  ScatterChart,\n  Scatter\n} from 'recharts';\n\nconst MultiMarketAnalytics = ({ data, onRefresh, onAnalyze, loading = false }) => {\n  const [selectedTimeframe, setSelectedTimeframe] = useState('Q4-2024');\n  const [comparisonMode] = useState('absolute');\n  const [selectedMetric] = useState('revenue');\n  const [riskTolerance] = useState([75]);\n  const [showPredictions] = useState(true);\n  const [analyticsData, setAnalyticsData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Load real multi-market analytics data\n  useEffect(() => {\n    const loadAnalyticsData = async () => {\n      if (data) {\n        setAnalyticsData(data);\n        return;\n      }\n\n      setIsLoading(true);\n      try {\n        // Fetch data from multiple endpoints to build comprehensive analytics\n        const [\n          optimizationHealth,\n          forecastingAccuracy,\n          workingCapitalMultiRegion\n        ] = await Promise.all([\n          fetch('/api/optimization/health'),\n          fetch('/api/forecasting/accuracy/trends?days=90'),\n          fetch('/api/optimization/working-capital/multi-region', {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              horizonMonths: 12,\n              regions: ['UK', 'EU', 'USA'],\n              scenarios: ['baseline', 'optimistic', 'pessimistic']\n            })\n          })\n        ]);\n\n        const healthData = optimizationHealth.ok ? await optimizationHealth.json() : null;\n        const accuracyData = forecastingAccuracy.ok ? await forecastingAccuracy.json() : null;\n        const wcData = workingCapitalMultiRegion.ok ? await workingCapitalMultiRegion.json() : null;\n\n        // Build analytics data from real API responses\n        const compiledAnalyticsData = {\n          marketOverview: {\n            totalRevenue: wcData?.consolidatedProjection?.totalRevenueProjected || 3540000,\n            totalWorkingCapital: wcData?.consolidatedProjection?.totalWorkingCapital || 2840000,\n            totalInventoryValue: 1680000,\n            crossMarketOptimizationPotential: wcData?.optimizationOpportunities?.totalSavingsPotential || 520000\n          },\n          markets: {\n            UK: {\n              name: 'United Kingdom',\n              currency: 'GBP',\n              revenue: wcData?.regions?.UK?.projectedRevenue || 1200000,\n              revenueGrowth: wcData?.regions?.UK?.growthRate || 0.08,\n              workingCapital: wcData?.regions?.UK?.workingCapital || 950000,\n              workingCapitalEfficiency: wcData?.regions?.UK?.efficiency || 0.79,\n              inventoryTurnover: wcData?.regions?.UK?.inventoryTurnover || 8.2,\n              leadTimeAvg: 21,\n              leadTimeVariability: 0.15,\n              demandVolatility: 0.12,\n              products: {\n                SENSIO_RED: { demand: 650, stock: 1250, forecast: 680 },\n                SENSIO_BLACK: { demand: 520, stock: 980, forecast: 540 },\n                SENSIO_GOLD: { demand: 180, stock: 450, forecast: 195 }\n              },\n              seasonality: [0.95, 0.88, 1.02, 1.08, 1.12, 1.05, 0.92, 0.87, 0.96, 1.15, 1.25, 1.18],\n              riskFactors: [\n                { factor: 'Brexit Impact', severity: 'medium', trend: 'improving' },\n                { factor: 'Supply Chain', severity: 'low', trend: 'stable' }\n              ]\n            },\n            EU: {\n              name: 'European Union',\n              currency: 'EUR',\n              revenue: wcData?.regions?.EU?.projectedRevenue || 890000,\n              revenueGrowth: wcData?.regions?.EU?.growthRate || 0.15,\n              workingCapital: wcData?.regions?.EU?.workingCapital || 720000,\n              workingCapitalEfficiency: wcData?.regions?.EU?.efficiency || 0.81,\n              inventoryTurnover: wcData?.regions?.EU?.inventoryTurnover || 7.8,\n              leadTimeAvg: 28,\n              leadTimeVariability: 0.22,\n              demandVolatility: 0.18,\n              products: {\n                SENSIO_RED: { demand: 480, stock: 890, forecast: 520 },\n                SENSIO_BLACK: { demand: 390, stock: 720, forecast: 425 },\n                SENSIO_GOLD: { demand: 140, stock: 320, forecast: 160 }\n              },\n              seasonality: [0.92, 0.85, 0.98, 1.05, 1.15, 1.08, 0.95, 0.89, 0.94, 1.12, 1.22, 1.16],\n              riskFactors: [\n                { factor: 'Regulatory Changes', severity: 'medium', trend: 'stable' },\n                { factor: 'Currency Fluctuation', severity: 'high', trend: 'worsening' }\n              ]\n            },\n            US: {\n              name: 'United States',\n              currency: 'USD',\n              revenue: wcData?.regions?.USA?.projectedRevenue || 1450000,\n              revenueGrowth: wcData?.regions?.USA?.growthRate || 0.22,\n              workingCapital: wcData?.regions?.USA?.workingCapital || 1170000,\n              workingCapitalEfficiency: wcData?.regions?.USA?.efficiency || 0.81,\n              inventoryTurnover: wcData?.regions?.USA?.inventoryTurnover || 6.5,\n              leadTimeAvg: 42,\n              leadTimeVariability: 0.35,\n              demandVolatility: 0.25,\n              products: {\n                SENSIO_RED: { demand: 780, stock: 1450, forecast: 890 },\n                SENSIO_BLACK: { demand: 620, stock: 1200, forecast: 720 },\n                SENSIO_GOLD: { demand: 220, stock: 580, forecast: 280 }\n              },\n              seasonality: [0.88, 0.82, 0.94, 1.02, 1.18, 1.12, 0.98, 0.91, 0.89, 1.08, 1.28, 1.22],\n              riskFactors: [\n                { factor: 'Lead Time Variability', severity: 'high', trend: 'stable' },\n                { factor: 'Market Competition', severity: 'medium', trend: 'worsening' },\n                { factor: 'Logistics Costs', severity: 'high', trend: 'worsening' }\n              ]\n            }\n          },\n          crossMarketInsights: wcData?.crossMarketInsights || {\n            optimalInventoryDistribution: { UK: 0.32, EU: 0.28, US: 0.40 },\n            arbitrageOpportunities: [],\n            consolidatedForecast: {\n              nextQuarter: {\n                totalDemand: 8450,\n                confidenceLevel: accuracyData?.trends?.overall?.confidence || 0.86,\n                scenarios: { optimistic: 9250, baseline: 8450, pessimistic: 7680 }\n              }\n            }\n          },\n          serviceHealth: healthData\n        };\n\n        setAnalyticsData(compiledAnalyticsData);\n      } catch (error) {\n        devLog.error('Failed to load analytics data:', error);\n        // Use fallback data\n        setAnalyticsData(getDefaultAnalyticsData());\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    loadAnalyticsData();\n  }, [data]);\n\n  const getDefaultAnalyticsData = () => ({\n    marketOverview: {\n      totalRevenue: 3540000,\n      totalWorkingCapital: 2840000,\n      totalInventoryValue: 1680000,\n      crossMarketOptimizationPotential: 520000\n    },\n    markets: {\n      UK: {\n        name: 'United Kingdom', currency: 'GBP', revenue: 1200000, revenueGrowth: 0.08,\n        workingCapital: 950000, workingCapitalEfficiency: 0.79, inventoryTurnover: 8.2,\n        leadTimeAvg: 21, leadTimeVariability: 0.15, demandVolatility: 0.12,\n        products: { SENSIO_RED: { demand: 650, stock: 1250, forecast: 680 } },\n        seasonality: [0.95, 0.88, 1.02, 1.08, 1.12, 1.05, 0.92, 0.87, 0.96, 1.15, 1.25, 1.18],\n        riskFactors: []\n      }\n    },\n    crossMarketInsights: {\n      optimalInventoryDistribution: { UK: 0.32, EU: 0.28, US: 0.40 },\n      arbitrageOpportunities: [],\n      consolidatedForecast: { nextQuarter: { totalDemand: 8450, confidenceLevel: 0.86, scenarios: {} } }\n    }\n  });\n\n  const handleRefreshData = async () => {\n    setIsLoading(true);\n    await loadAnalyticsData();\n    if (onRefresh) onRefresh();\n  };\n\n  if (!analyticsData) {\n    return <div className=\"flex items-center justify-center h-64\">Loading analytics data...</div>;\n  }\n\n  // Use loaded data or fallback for display\n  const displayData = analyticsData || {\n    marketOverview: {\n      totalRevenue: 3540000,\n      totalWorkingCapital: 2840000,\n      totalInventoryValue: 1680000,\n      crossMarketOptimizationPotential: 520000\n    },\n    markets: {\n      UK: {\n        name: 'United Kingdom',\n        currency: 'GBP',\n        revenue: 1200000,\n        revenueGrowth: 0.08,\n        workingCapital: 950000,\n        workingCapitalEfficiency: 0.79,\n        inventoryTurnover: 8.2,\n        leadTimeAvg: 21,\n        leadTimeVariability: 0.15,\n        demandVolatility: 0.12,\n        products: {\n          SENSIO_RED: { demand: 650, stock: 1250, forecast: 680 },\n          SENSIO_BLACK: { demand: 520, stock: 980, forecast: 540 },\n          SENSIO_GOLD: { demand: 180, stock: 450, forecast: 195 }\n        },\n        seasonality: [0.95, 0.88, 1.02, 1.08, 1.12, 1.05, 0.92, 0.87, 0.96, 1.15, 1.25, 1.18],\n        riskFactors: [\n          { factor: 'Brexit Impact', severity: 'medium', trend: 'improving' },\n          { factor: 'Supply Chain', severity: 'low', trend: 'stable' }\n        ]\n      },\n      EU: {\n        name: 'European Union',\n        currency: 'EUR',\n        revenue: 890000,\n        revenueGrowth: 0.15,\n        workingCapital: 720000,\n        workingCapitalEfficiency: 0.81,\n        inventoryTurnover: 7.8,\n        leadTimeAvg: 28,\n        leadTimeVariability: 0.22,\n        demandVolatility: 0.18,\n        products: {\n          SENSIO_RED: { demand: 480, stock: 890, forecast: 520 },\n          SENSIO_BLACK: { demand: 390, stock: 720, forecast: 425 },\n          SENSIO_GOLD: { demand: 140, stock: 320, forecast: 160 }\n        },\n        seasonality: [0.92, 0.85, 0.98, 1.05, 1.15, 1.08, 0.95, 0.89, 0.94, 1.12, 1.22, 1.16],\n        riskFactors: [\n          { factor: 'Regulatory Changes', severity: 'medium', trend: 'stable' },\n          { factor: 'Currency Fluctuation', severity: 'high', trend: 'worsening' }\n        ]\n      },\n      US: {\n        name: 'United States',\n        currency: 'USD',\n        revenue: 1450000,\n        revenueGrowth: 0.22,\n        workingCapital: 1170000,\n        workingCapitalEfficiency: 0.81,\n        inventoryTurnover: 6.5,\n        leadTimeAvg: 42,\n        leadTimeVariability: 0.35,\n        demandVolatility: 0.25,\n        products: {\n          SENSIO_RED: { demand: 780, stock: 1450, forecast: 890 },\n          SENSIO_BLACK: { demand: 620, stock: 1200, forecast: 720 },\n          SENSIO_GOLD: { demand: 220, stock: 580, forecast: 280 }\n        },\n        seasonality: [0.88, 0.82, 0.94, 1.02, 1.18, 1.12, 0.98, 0.91, 0.89, 1.08, 1.28, 1.22],\n        riskFactors: [\n          { factor: 'Lead Time Variability', severity: 'high', trend: 'stable' },\n          { factor: 'Market Competition', severity: 'medium', trend: 'worsening' },\n          { factor: 'Logistics Costs', severity: 'high', trend: 'worsening' }\n        ]\n      }\n    },\n    crossMarketInsights: {\n      optimalInventoryDistribution: {\n        UK: 0.32,\n        EU: 0.28,\n        US: 0.40\n      },\n      arbitrageOpportunities: [\n        {\n          product: 'SENSIO_RED',\n          from: 'UK',\n          to: 'US',\n          potentialSaving: 45000,\n          transferCost: 8500,\n          netBenefit: 36500\n        },\n        {\n          product: 'SENSIO_BLACK',\n          from: 'EU',\n          to: 'UK',\n          potentialSaving: 28000,\n          transferCost: 6200,\n          netBenefit: 21800\n        }\n      ],\n      consolidatedForecast: {\n        nextQuarter: {\n          totalDemand: 8450,\n          confidenceLevel: 0.86,\n          scenarios: {\n            optimistic: 9250,\n            baseline: 8450,\n            pessimistic: 7680\n          }\n        }\n      }\n    }\n  };\n\n  const COLORS = ['#2563eb', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6'];\n\n  const formatCurrency = (amount, currency = 'GBP') => {\n    const symbol = currency === 'EUR' ? '€' : currency === 'USD' ? '$' : '£';\n    return `${symbol}${(amount / 1000).toFixed(0)}k`;\n  };\n\n  const getGrowthColor = (growth) => {\n    if (growth > 0.15) return 'text-green-600';\n    if (growth > 0.05) return 'text-blue-600';\n    if (growth > 0) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getGrowthIcon = (growth) => {\n    return growth > 0 ? ArrowUpRight : ArrowDownRight;\n  };\n\n  const getRiskColor = (severity) => {\n    const colors = {\n      'low': 'text-green-600 bg-green-50',\n      'medium': 'text-yellow-600 bg-yellow-50',\n      'high': 'text-red-600 bg-red-50'\n    };\n    return colors[severity] || colors.medium;\n  };\n\n  const pieChartData = Object.entries(analyticsData.markets).map(([key, market]) => ({\n    name: key,\n    value: market.revenue,\n    color: COLORS[Object.keys(analyticsData.markets).indexOf(key)]\n  }));\n\n  const seasonalityData = analyticsData.markets.UK.seasonality.map((value, index) => ({\n    month: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'][index],\n    UK: analyticsData.markets.UK.seasonality[index],\n    EU: analyticsData.markets.EU.seasonality[index],\n    US: analyticsData.markets.US.seasonality[index]\n  }));\n\n  const performanceMetrics = Object.entries(analyticsData.markets).map(([key, market]) => ({\n    market: key,\n    revenue: market.revenue / 1000,\n    workingCapital: market.workingCapital / 1000,\n    turnover: market.inventoryTurnover,\n    leadTime: market.leadTimeAvg,\n    efficiency: market.workingCapitalEfficiency * 100\n  }));\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Multi-Market Analytics</h1>\n          <p className=\"text-gray-500\">Comprehensive Cross-Market Performance Analysis</p>\n        </div>\n        <div className=\"flex space-x-3\">\n          <select \n            value={selectedTimeframe}\n            onChange={(e) => setSelectedTimeframe(e.target.value)}\n            className=\"px-3 py-2 border rounded-md bg-white\"\n          >\n            <option value=\"Q4-2024\">Q4 2024</option>\n            <option value=\"Q3-2024\">Q3 2024</option>\n            <option value=\"YTD-2024\">YTD 2024</option>\n            <option value=\"12M\">Last 12 Months</option>\n          </select>\n          <Button \n            onClick={handleRefreshData}\n            disabled={loading || isLoading}\n            variant=\"outline\"\n            size=\"sm\"\n          >\n            <RefreshCw className={`w-4 h-4 mr-2 ${loading || isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </Button>\n          <Button variant=\"default\" size=\"sm\">\n            <Download className=\"w-4 h-4 mr-2\" />\n            Export Report\n          </Button>\n        </div>\n      </div>\n\n      {/* Executive Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n              <p className=\"text-2xl font-bold text-blue-600\">\n                {formatCurrency(analyticsData.marketOverview.totalRevenue)}\n              </p>\n              <p className=\"text-sm text-gray-500\">Across all markets</p>\n            </div>\n            <Globe2 className=\"h-8 w-8 text-blue-600\" />\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Working Capital</p>\n              <p className=\"text-2xl font-bold text-green-600\">\n                {formatCurrency(analyticsData.marketOverview.totalWorkingCapital)}\n              </p>\n              <p className=\"text-sm text-gray-500\">Optimization potential</p>\n            </div>\n            <DollarSign className=\"h-8 w-8 text-green-600\" />\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Inventory Value</p>\n              <p className=\"text-2xl font-bold text-purple-600\">\n                {formatCurrency(analyticsData.marketOverview.totalInventoryValue)}\n              </p>\n              <p className=\"text-sm text-gray-500\">Total across markets</p>\n            </div>\n            <Package className=\"h-8 w-8 text-purple-600\" />\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Optimization Potential</p>\n              <p className=\"text-2xl font-bold text-yellow-600\">\n                {formatCurrency(analyticsData.marketOverview.crossMarketOptimizationPotential)}\n              </p>\n              <p className=\"text-sm text-gray-500\">Cross-market savings</p>\n            </div>\n            <Target className=\"h-8 w-8 text-yellow-600\" />\n          </div>\n        </Card>\n      </div>\n\n      {/* Market Performance Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {Object.entries(analyticsData.markets).map(([key, market]) => {\n          const GrowthIcon = getGrowthIcon(market.revenueGrowth);\n          return (\n            <Card key={key} className=\"p-6 hover:shadow-lg transition-shadow\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <h3 className=\"text-lg font-semibold\">{market.name}</h3>\n                  <Badge variant=\"outline\">{market.currency}</Badge>\n                </div>\n                <div className=\"flex items-center space-x-1\">\n                  <GrowthIcon className={`w-4 h-4 ${getGrowthColor(market.revenueGrowth)}`} />\n                  <span className={`text-sm font-semibold ${getGrowthColor(market.revenueGrowth)}`}>\n                    {(market.revenueGrowth * 100).toFixed(1)}%\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Revenue:</span>\n                  <span className=\"font-semibold\">{formatCurrency(market.revenue, market.currency)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Working Capital:</span>\n                  <span className=\"font-semibold\">{formatCurrency(market.workingCapital, market.currency)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Inventory Turnover:</span>\n                  <span className=\"font-semibold\">{market.inventoryTurnover}x</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">Avg Lead Time:</span>\n                  <span className=\"font-semibold\">{market.leadTimeAvg} days</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600\">WC Efficiency:</span>\n                  <Badge variant={market.workingCapitalEfficiency > 0.8 ? 'default' : 'secondary'}>\n                    {(market.workingCapitalEfficiency * 100).toFixed(0)}%\n                  </Badge>\n                </div>\n              </div>\n\n              <div className=\"mt-4\">\n                <h4 className=\"font-semibold text-sm mb-2\">Risk Factors:</h4>\n                <div className=\"space-y-1\">\n                  {market.riskFactors.map((risk, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-gray-600\">{risk.factor}:</span>\n                      <Badge className={getRiskColor(risk.severity)} size=\"sm\">\n                        {risk.severity}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </Card>\n          );\n        })}\n      </div>\n\n      {/* Revenue Distribution Chart */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n            <PieChart className=\"w-5 h-5 mr-2\" />\n            Revenue Distribution\n          </h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <RechartsPieChart>\n                <Pie\n                  data={pieChartData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  outerRadius={80}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                >\n                  {pieChartData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={entry.color} />\n                  ))}\n                </Pie>\n                <Tooltip formatter={(value) => formatCurrency(value)} />\n              </RechartsPieChart>\n            </ResponsiveContainer>\n          </div>\n        </Card>\n\n        <Card className=\"p-6\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n            <BarChart3 className=\"w-5 h-5 mr-2\" />\n            Performance Metrics\n          </h3>\n          <div className=\"h-64\">\n            <ResponsiveContainer width=\"100%\" height=\"100%\">\n              <BarChart data={performanceMetrics}>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"market\" />\n                <YAxis yAxisId=\"left\" />\n                <YAxis yAxisId=\"right\" orientation=\"right\" />\n                <Tooltip />\n                <Bar yAxisId=\"left\" dataKey=\"revenue\" fill=\"#2563eb\" name=\"Revenue (k)\" />\n                <Bar yAxisId=\"right\" dataKey=\"turnover\" fill=\"#10b981\" name=\"Turnover\" />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </Card>\n      </div>\n\n      {/* Seasonality Analysis */}\n      <Card className=\"p-6\">\n        <h3 className=\"text-lg font-semibold mb-4\">Seasonal Pattern Analysis</h3>\n        <div className=\"h-64\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={seasonalityData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"month\" />\n              <YAxis domain={[0.7, 1.4]} tickFormatter={(value) => `${(value * 100).toFixed(0)}%`} />\n              <Tooltip formatter={(value) => `${(value * 100).toFixed(1)}%`} />\n              <Line type=\"monotone\" dataKey=\"UK\" stroke=\"#2563eb\" strokeWidth={2} />\n              <Line type=\"monotone\" dataKey=\"EU\" stroke=\"#10b981\" strokeWidth={2} />\n              <Line type=\"monotone\" dataKey=\"US\" stroke=\"#f59e0b\" strokeWidth={2} />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n        <div className=\"flex justify-center space-x-6 mt-4\">\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-blue-600 rounded mr-2\"></div>\n            <span className=\"text-sm\">UK</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-green-600 rounded mr-2\"></div>\n            <span className=\"text-sm\">EU</span>\n          </div>\n          <div className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-yellow-600 rounded mr-2\"></div>\n            <span className=\"text-sm\">US</span>\n          </div>\n        </div>\n      </Card>\n\n      {/* Cross-Market Optimization */}\n      <Card className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold flex items-center\">\n            <Zap className=\"w-5 h-5 mr-2\" />\n            Cross-Market Optimization Opportunities\n          </h3>\n          <Badge variant=\"outline\" className=\"text-green-600\">\n            Potential Savings: {formatCurrency(analyticsData.marketOverview.crossMarketOptimizationPotential)}\n          </Badge>\n        </div>\n\n        <div className=\"space-y-4\">\n          {analyticsData.crossMarketInsights.arbitrageOpportunities.map((opportunity, index) => (\n            <div key={index} className=\"p-4 border rounded-lg hover:bg-gray-50 transition-colors\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-2\">\n                    <Badge variant=\"outline\">{opportunity.product.replace('', ' ')}</Badge>\n                    <span className=\"text-sm text-gray-600\">\n                      Transfer from <strong>{opportunity.from}</strong> to <strong>{opportunity.to}</strong>\n                    </span>\n                  </div>\n                  <div className=\"grid grid-cols-3 gap-4\">\n                    <div>\n                      <span className=\"text-xs text-gray-600\">Potential Saving:</span>\n                      <p className=\"font-semibold text-green-600\">{formatCurrency(opportunity.potentialSaving)}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-xs text-gray-600\">Transfer Cost:</span>\n                      <p className=\"font-semibold text-red-600\">{formatCurrency(opportunity.transferCost)}</p>\n                    </div>\n                    <div>\n                      <span className=\"text-xs text-gray-600\">Net Benefit:</span>\n                      <p className=\"font-semibold text-blue-600\">{formatCurrency(opportunity.netBenefit)}</p>\n                    </div>\n                  </div>\n                </div>\n                <Button variant=\"outline\" size=\"sm\">\n                  Analyze\n                </Button>\n              </div>\n            </div>\n          ))}\n        </div>\n      </Card>\n\n      {/* Risk Tolerance Slider */}\n      <Card className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold\">Risk Tolerance Analysis</h3>\n          <Badge variant=\"outline\">Current: {riskTolerance[0]}%</Badge>\n        </div>\n        <div className=\"space-y-4\">\n          <div>\n            <label className=\"text-sm font-medium text-gray-700 mb-2 block\">\n              Service Level Target: {riskTolerance[0]}%\n            </label>\n            <Slider\n              value={riskTolerance}\n              onValueChange={setRiskTolerance}\n              max={99}\n              min={80}\n              step={1}\n              className=\"w-full\"\n            />\n            <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n              <span>Conservative (80%)</span>\n              <span>Aggressive (99%)</span>\n            </div>\n          </div>\n          <div className=\"grid grid-cols-3 gap-4 text-center\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Working Capital Impact</p>\n              <p className=\"text-lg font-semibold text-blue-600\">\n                {riskTolerance[0] > 95 ? '+£180k' : riskTolerance[0] > 90 ? '+£90k' : '£0k'}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Stockout Risk</p>\n              <p className=\"text-lg font-semibold text-red-600\">\n                {(100 - riskTolerance[0]).toFixed(0)}%\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Expected Savings</p>\n              <p className=\"text-lg font-semibold text-green-600\">\n                {riskTolerance[0] < 90 ? '£420k' : riskTolerance[0] < 95 ? '£280k' : '£150k'}\n              </p>\n            </div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default MultiMarketAnalytics;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\analytics\\WhatIfAnalysis.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'efficiency' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 26,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "efficiency" },
            "fix": { "range": [894, 944], "text": "" },
            "desc": "Remove unused variable 'efficiency'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\n\nconst WhatIfAnalysis = () => {\n  const [scenarios, setScenarios] = useState({\n    revenue: { current: 2500000, projected: 2500000, change: 0 },\n    costs: { current: 1800000, projected: 1800000, change: 0 },\n    inventory: { current: 1200000, projected: 1200000, change: 0 },\n    efficiency: { current: 94, projected: 94, change: 0 },\n    demand: { current: 100, projected: 100, change: 0 },\n  });\n\n  const [results, setResults] = useState({\n    profit: 700000,\n    profitMargin: 28,\n    cashFlow: 850000,\n    roi: 38.9,\n    workingCapital: 1600000,\n  });\n\n  // Update results when scenarios change\n  useEffect(() => {\n    const revenue = scenarios.revenue.projected;\n    const costs = scenarios.costs.projected;\n    const inventory = scenarios.inventory.projected;\n    const efficiency = scenarios.efficiency.projected;\n\n    const profit = revenue - costs;\n    const profitMargin = (profit / revenue) * 100;\n    const cashFlow = profit + (scenarios.inventory.current - inventory);\n    const roi = (profit / costs) * 100;\n    const workingCapital = inventory + (revenue * 0.15) - (costs * 0.1);\n\n    setResults({\n      profit,\n      profitMargin: profitMargin.toFixed(1),\n      cashFlow,\n      roi: roi.toFixed(1),\n      workingCapital,\n    });\n  }, [scenarios]);\n\n  const handleSliderChange = (metric, value) => {\n    setScenarios(prev => ({\n      ...prev,\n      [metric]: {\n        ...prev[metric],\n        projected: metric === 'efficiency' || metric === 'demand'\n          ? value\n          : prev[metric].current * (value / 100),\n        change: metric === 'efficiency' || metric === 'demand'\n          ? value - prev[metric].current\n          : value - 100,\n      }\n    }));\n  };\n\n  const formatCurrency = (value) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  const resetScenarios = () => {\n    setScenarios({\n      revenue: { current: 2500000, projected: 2500000, change: 0 },\n      costs: { current: 1800000, projected: 1800000, change: 0 },\n      inventory: { current: 1200000, projected: 1200000, change: 0 },\n      efficiency: { current: 94, projected: 94, change: 0 },\n      demand: { current: 100, projected: 100, change: 0 },\n    });\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">What-If Analysis</h1>\n          <p className=\"text-gray-600 mt-1\">Simulate scenarios and predict outcomes</p>\n        </div>\n        <button\n          onClick={resetScenarios}\n          className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700\"\n        >\n          Reset Scenarios\n        </button>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Scenario Adjustments */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Adjust Scenarios</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Revenue Adjustment */}\n            <div>\n              <div className=\"flex justify-between mb-2\">\n                <label className=\"text-sm font-medium text-gray-700\">\n                  Revenue Adjustment\n                </label>\n                <span className=\"text-sm font-bold text-blue-600\">\n                  {scenarios.revenue.change > 0 ? '+' : ''}{scenarios.revenue.change}%\n                </span>\n              </div>\n              <input\n                type=\"range\"\n                min=\"50\"\n                max=\"150\"\n                value={scenarios.revenue.change + 100}\n                onChange={(e) => handleSliderChange('revenue', Number(e.target.value))}\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>{formatCurrency(scenarios.revenue.current)}</span>\n                <span className=\"font-bold text-gray-900\">{formatCurrency(scenarios.revenue.projected)}</span>\n              </div>\n            </div>\n\n            {/* Costs Adjustment */}\n            <div>\n              <div className=\"flex justify-between mb-2\">\n                <label className=\"text-sm font-medium text-gray-700\">\n                  Costs Adjustment\n                </label>\n                <span className=\"text-sm font-bold text-orange-600\">\n                  {scenarios.costs.change > 0 ? '+' : ''}{scenarios.costs.change}%\n                </span>\n              </div>\n              <input\n                type=\"range\"\n                min=\"70\"\n                max=\"130\"\n                value={scenarios.costs.change + 100}\n                onChange={(e) => handleSliderChange('costs', Number(e.target.value))}\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>{formatCurrency(scenarios.costs.current)}</span>\n                <span className=\"font-bold text-gray-900\">{formatCurrency(scenarios.costs.projected)}</span>\n              </div>\n            </div>\n\n            {/* Inventory Adjustment */}\n            <div>\n              <div className=\"flex justify-between mb-2\">\n                <label className=\"text-sm font-medium text-gray-700\">\n                  Inventory Levels\n                </label>\n                <span className=\"text-sm font-bold text-purple-600\">\n                  {scenarios.inventory.change > 0 ? '+' : ''}{scenarios.inventory.change}%\n                </span>\n              </div>\n              <input\n                type=\"range\"\n                min=\"60\"\n                max=\"140\"\n                value={scenarios.inventory.change + 100}\n                onChange={(e) => handleSliderChange('inventory', Number(e.target.value))}\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>{formatCurrency(scenarios.inventory.current)}</span>\n                <span className=\"font-bold text-gray-900\">{formatCurrency(scenarios.inventory.projected)}</span>\n              </div>\n            </div>\n\n            {/* Efficiency Adjustment */}\n            <div>\n              <div className=\"flex justify-between mb-2\">\n                <label className=\"text-sm font-medium text-gray-700\">\n                  Production Efficiency\n                </label>\n                <span className=\"text-sm font-bold text-green-600\">\n                  {scenarios.efficiency.projected}%\n                </span>\n              </div>\n              <input\n                type=\"range\"\n                min=\"70\"\n                max=\"100\"\n                value={scenarios.efficiency.projected}\n                onChange={(e) => handleSliderChange('efficiency', Number(e.target.value))}\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>70%</span>\n                <span>100%</span>\n              </div>\n            </div>\n\n            {/* Demand Forecast */}\n            <div>\n              <div className=\"flex justify-between mb-2\">\n                <label className=\"text-sm font-medium text-gray-700\">\n                  Demand Forecast\n                </label>\n                <span className=\"text-sm font-bold text-indigo-600\">\n                  {scenarios.demand.projected}%\n                </span>\n              </div>\n              <input\n                type=\"range\"\n                min=\"50\"\n                max=\"150\"\n                value={scenarios.demand.projected}\n                onChange={(e) => handleSliderChange('demand', Number(e.target.value))}\n                className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer\"\n              />\n              <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n                <span>50%</span>\n                <span>150%</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Projected Results */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Projected Outcomes</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Profit */}\n            <div className=\"p-4 bg-gradient-to-r from-green-50 to-green-100 rounded-lg border border-green-200\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Projected Profit</p>\n                  <p className=\"text-2xl font-bold text-green-700\">{formatCurrency(results.profit)}</p>\n                </div>\n                <span className={`px-2 py-1 text-xs font-bold rounded ${\n                  results.profit > 700000 ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'\n                }`}>\n                  {results.profit > 700000 ? '↑' : '↓'} {Math.abs(((results.profit - 700000) / 700000 * 100)).toFixed(1)}%\n                </span>\n              </div>\n            </div>\n\n            {/* Profit Margin */}\n            <div className=\"p-4 bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg border border-blue-200\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Profit Margin</p>\n                  <p className=\"text-2xl font-bold text-blue-700\">{results.profitMargin}%</p>\n                </div>\n                <span className={`px-2 py-1 text-xs font-bold rounded ${\n                  results.profitMargin > 28 ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'\n                }`}>\n                  {results.profitMargin > 28 ? '↑' : '↓'} {Math.abs((results.profitMargin - 28)).toFixed(1)}pp\n                </span>\n              </div>\n            </div>\n\n            {/* Cash Flow */}\n            <div className=\"p-4 bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg border border-purple-200\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Cash Flow</p>\n                  <p className=\"text-2xl font-bold text-purple-700\">{formatCurrency(results.cashFlow)}</p>\n                </div>\n                <span className={`px-2 py-1 text-xs font-bold rounded ${\n                  results.cashFlow > 850000 ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'\n                }`}>\n                  {results.cashFlow > 850000 ? '↑' : '↓'} {Math.abs(((results.cashFlow - 850000) / 850000 * 100)).toFixed(1)}%\n                </span>\n              </div>\n            </div>\n\n            {/* ROI */}\n            <div className=\"p-4 bg-gradient-to-r from-orange-50 to-orange-100 rounded-lg border border-orange-200\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Return on Investment</p>\n                  <p className=\"text-2xl font-bold text-orange-700\">{results.roi}%</p>\n                </div>\n                <span className={`px-2 py-1 text-xs font-bold rounded ${\n                  results.roi > 38.9 ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'\n                }`}>\n                  {results.roi > 38.9 ? '↑' : '↓'} {Math.abs((results.roi - 38.9)).toFixed(1)}pp\n                </span>\n              </div>\n            </div>\n\n            {/* Working Capital */}\n            <div className=\"p-4 bg-gradient-to-r from-indigo-50 to-indigo-100 rounded-lg border border-indigo-200\">\n              <div className=\"flex justify-between items-start\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Working Capital</p>\n                  <p className=\"text-2xl font-bold text-indigo-700\">{formatCurrency(results.workingCapital)}</p>\n                </div>\n                <span className={`px-2 py-1 text-xs font-bold rounded ${\n                  results.workingCapital > 1600000 ? 'bg-green-200 text-green-800' : 'bg-red-200 text-red-800'\n                }`}>\n                  {results.workingCapital > 1600000 ? '↑' : '↓'} {Math.abs(((results.workingCapital - 1600000) / 1600000 * 100)).toFixed(1)}%\n                </span>\n              </div>\n            </div>\n\n            {/* AI Recommendation */}\n            <div className=\"mt-6 p-4 bg-gradient-to-r from-gray-100 to-gray-200 rounded-lg border border-gray-300\">\n              <h4 className=\"text-sm font-semibold text-gray-700 mb-2\">AI Recommendation</h4>\n              <p className=\"text-xs text-gray-600\">\n                {results.profitMargin > 30\n                  ? \"Excellent scenario! Consider implementing these changes gradually to minimize risk.\"\n                  : results.profitMargin > 25\n                  ? \"Good scenario. Monitor market conditions before full implementation.\"\n                  : \"Caution advised. Consider adjusting parameters for better outcomes.\"}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Scenario Comparison Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Scenario Impact Analysis</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-64 bg-gray-50 rounded-lg flex items-center justify-center\">\n            <p className=\"text-gray-500\">Interactive chart showing scenario impacts (Chart library integration pending)</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default WhatIfAnalysis;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\auth\\AuthGuard.jsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Identifier 'Navigate' has already been declared",
        "line": 4,
        "column": 10
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useAuth } from '@clerk/clerk-react'\nimport { Navigate, useLocation } from 'react-router-dom'\n\nimport { Navigate } from 'react-router-dom';\nimport { LoadingSpinner } from '../ui/LoadingSpinner';\n\n/**\n * AuthGuard Component\n * Protects routes requiring authentication and specific roles\n */\nexport function AuthGuard({ children, requiredRole, fallbackPath = '/sign-in' }) {\n  const { isLoaded, isSignedIn, sessionClaims } = useAuth()\n  const location = useLocation()\n\n  if (!isLoaded) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-gray-100 flex items-center justify-center p-4\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-blue-600 to-blue-800 rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <span className=\"text-white font-bold text-2xl\">S</span>\n          </div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Authenticating...</h2>\n          <div className=\"inline-flex items-center space-x-2 mt-4\">\n            <div className=\"w-2 h-2 bg-blue-600 rounded-full animate-pulse\"></div>\n            <div className=\"w-2 h-2 bg-blue-600 rounded-full animate-pulse delay-75\"></div>\n            <div className=\"w-2 h-2 bg-blue-600 rounded-full animate-pulse delay-150\"></div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!isSignedIn) {\n    return <Navigate to={fallbackPath} state={{ from: location }} replace />\n  }\n\n  // Check for required role\n  if (requiredRole) {\n    const userRole = sessionClaims?.metadata?.role || 'viewer'\n    const roleHierarchy = {\n      viewer: 0,\n      operator: 1,\n      manager: 2,\n      admin: 3\n    }\n\n    if (roleHierarchy[userRole] < roleHierarchy[requiredRole]) {\n      return (\n        <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-gray-100 flex items-center justify-center p-4\">\n          <Alert variant=\"destructive\" className=\"max-w-md\">\n            <AlertDescription>\n              You don&apos;t have permission to access this page. Required role: {requiredRole}\n            </AlertDescription>\n          </Alert>\n        </div>\n      )\n    }\n  }\n\n  return children\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\auth\\AuthScaffold.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\auth\\ClerkAuthGuard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\auth\\ClerkProvider.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\auth\\ProtectedRoute.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'getUserDisplayName' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 22,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 22,
        "endColumn": 23,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "getUserDisplayName" },
            "fix": { "range": [488, 512], "text": "" },
            "desc": "Remove unused variable 'getUserDisplayName'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react'\nimport { useAuthRole } from '../../hooks/useAuthRole.jsx'\nimport { AlertCircle, Shield, Clock, Loader2 } from 'lucide-react'\n\nexport default function ProtectedRoute({ \n  children, \n  requireAdmin = false,\n  requiredRole = null,\n  requiredPermission = null,\n  requiredRoleAtLeast = null,\n  requiredFeature = null,\n  fallback = null\n}) {\n  const { \n    isLoading, \n    isAuthenticated, \n    hasRole, \n    hasPermission, \n    isRoleAtLeast,\n    hasFeature,\n    role,\n    getUserDisplayName,\n    isSignedIn\n  } = useAuthRole()\n  \n  // Compatibility with Clerk's isLoaded - bulletproof auth is always loaded\n  const isLoaded = !isLoading\n\n  // Loading states\n  if (!isLoaded || isLoading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <div className=\"text-center\">\n          <Loader2 className=\"mx-auto h-8 w-8 animate-spin text-blue-600\" />\n          <p className=\"mt-4 text-sm text-gray-600 dark:text-gray-400\">\n            Checking authentication...\n          </p>\n        </div>\n      </div>\n    )\n  }\n\n  // Not signed in\n  if (!isSignedIn || !isAuthenticated) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen bg-gray-50 dark:bg-gray-900\">\n        <div className=\"max-w-md w-full bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6\">\n          <div className=\"text-center\">\n            <Shield className=\"mx-auto h-12 w-12 text-red-500 mb-4\" />\n            <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n              Authentication Required\n            </h1>\n            <p className=\"text-gray-600 dark:text-gray-400 mb-6\">\n              You need to sign in to access this page.\n            </p>\n            <button\n              onClick={() => window.location.href = '/'}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors\"\n            >\n              Go to Sign In\n            </button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  // Check admin requirement (master_admin also has admin privileges)\n  if (requireAdmin && role !== 'admin' && role !== 'master_admin') {\n    return <UnauthorizedAccess \n      reason=\"Admin access required\" \n      userRole={role}\n      requiredRole=\"admin or master_admin\"\n      fallback={fallback}\n    />\n  }\n\n  // Check specific role requirement\n  if (requiredRole && !hasRole(requiredRole)) {\n    return <UnauthorizedAccess \n      reason=\"Specific role required\" \n      userRole={role}\n      requiredRole={requiredRole}\n      fallback={fallback}\n    />\n  }\n\n  // Check minimum role level requirement  \n  if (requiredRoleAtLeast && !isRoleAtLeast(requiredRoleAtLeast)) {\n    return <UnauthorizedAccess \n      reason=\"Insufficient role level\" \n      userRole={role}\n      requiredRole={`${requiredRoleAtLeast} or higher`}\n      fallback={fallback}\n    />\n  }\n\n  // Check permission requirement\n  if (requiredPermission && !hasPermission(requiredPermission)) {\n    return <UnauthorizedAccess \n      reason=\"Missing required permission\" \n      userRole={role}\n      requiredPermission={requiredPermission}\n      fallback={fallback}\n    />\n  }\n\n  // Check feature requirement\n  if (requiredFeature && !hasFeature(requiredFeature)) {\n    return <UnauthorizedAccess \n      reason=\"Feature not available\" \n      userRole={role}\n      requiredFeature={requiredFeature}\n      fallback={fallback}\n    />\n  }\n\n  // All checks passed - render children\n  return <>{children}</>\n}\n\n// Unauthorized access component\nfunction UnauthorizedAccess({ \n  reason, \n  userRole, \n  requiredRole, \n  requiredPermission, \n  requiredFeature, \n  fallback \n}) {\n  // If a custom fallback component is provided, use it\n  if (fallback) {\n    return fallback\n  }\n\n  return (\n    <div className=\"flex items-center justify-center min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"max-w-md w-full bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6\">\n        <div className=\"text-center\">\n          <AlertCircle className=\"mx-auto h-12 w-12 text-amber-500 mb-4\" />\n          <h1 className=\"text-xl font-semibold text-gray-900 dark:text-white mb-2\">\n            Access Denied\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n            {reason}\n          </p>\n          \n          {/* Show access details */}\n          <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 mb-6 text-left\">\n            <div className=\"text-sm space-y-2\">\n              <div className=\"flex justify-between\">\n                <span className=\"font-medium text-gray-700 dark:text-gray-300\">Your Role:</span>\n                <span className=\"text-gray-900 dark:text-white capitalize\">{userRole || 'Unknown'}</span>\n              </div>\n              \n              {requiredRole && (\n                <div className=\"flex justify-between\">\n                  <span className=\"font-medium text-gray-700 dark:text-gray-300\">Required Role:</span>\n                  <span className=\"text-gray-900 dark:text-white capitalize\">{requiredRole}</span>\n                </div>\n              )}\n              \n              {requiredPermission && (\n                <div className=\"flex justify-between\">\n                  <span className=\"font-medium text-gray-700 dark:text-gray-300\">Required Permission:</span>\n                  <span className=\"text-gray-900 dark:text-white font-mono text-xs\">{requiredPermission}</span>\n                </div>\n              )}\n              \n              {requiredFeature && (\n                <div className=\"flex justify-between\">\n                  <span className=\"font-medium text-gray-700 dark:text-gray-300\">Required Feature:</span>\n                  <span className=\"text-gray-900 dark:text-white\">{requiredFeature}</span>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <button\n              onClick={() => window.location.href = '/dashboard'}\n              className=\"w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-md transition-colors\"\n            >\n              Go to Dashboard\n            </button>\n            \n            <button\n              onClick={() => window.history.back()}\n              className=\"w-full bg-gray-200 hover:bg-gray-300 dark:bg-gray-600 dark:hover:bg-gray-500 text-gray-800 dark:text-white font-medium py-2 px-4 rounded-md transition-colors\"\n            >\n              Go Back\n            </button>\n          </div>\n          \n          <p className=\"mt-6 text-xs text-gray-500 dark:text-gray-400\">\n            If you believe this is an error, please contact your administrator.\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Export additional utility components for convenience\nexport { UnauthorizedAccess }",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\auth\\clerkAppearance.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\auth\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\automation\\AutomationDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\charts\\ChartErrorBoundary.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logDebug' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 8,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logDebug" },
            "fix": { "range": [155, 164], "text": "" },
            "desc": "Remove unused variable 'logDebug'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logInfo' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 8,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logInfo" },
            "fix": { "range": [163, 172], "text": "" },
            "desc": "Remove unused variable 'logInfo'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logWarn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 8,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logWarn" },
            "fix": { "range": [172, 181], "text": "" },
            "desc": "Remove unused variable 'logWarn'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 30,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 30,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "﻿import React from 'react';\nimport {\n  ExclamationTriangleIcon,\n  ArrowPathIcon,\n  ChartBarIcon,\n  XMarkIcon\n} from '@heroicons/react/24/outline';\nimport { logDebug, logInfo, logWarn, logError } from '../../utils/logger';\n\nexport default class ChartErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n      isRetrying: false,\n      retryCount: 0\n    };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true, error };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({ errorInfo });\n\n    // Log error for monitoring\n    if (process.env.NODE_ENV === 'development') {\n      logError('ChartErrorBoundary caught an error:', error, errorInfo);\n    }\n\n    // You can integrate with error reporting service here\n    // Example: Sentry.captureException(error, { extra: errorInfo });\n  }\n\n  handleRetry = () => {\n    this.setState({\n      isRetrying: true,\n      retryCount: this.state.retryCount + 1\n    });\n\n    setTimeout(() => {\n      this.setState({\n        hasError: false,\n        error: null,\n        errorInfo: null,\n        isRetrying: false\n      });\n    }, 1000);\n  };\n\n  handleDismiss = () => {\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null\n    });\n  };\n\n  render() {\n    if (this.state.hasError) {\n      const { error, errorInfo, isRetrying, retryCount } = this.state;\n      const { fallback, showDetails = false, title = \"Chart Error\" } = this.props;\n\n      // If a custom fallback is provided, use it\n      if (fallback && typeof fallback === 'function') {\n        return fallback(error, this.handleRetry, this.handleDismiss);\n      }\n\n      if (fallback && React.isValidElement(fallback)) {\n        return fallback;\n      }\n\n      return (\n        <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6\">\n          <div className=\"flex items-start space-x-3\">\n            <div className=\"flex-shrink-0\">\n              <ExclamationTriangleIcon className=\"w-6 h-6 text-red-600 dark:text-red-400\" />\n            </div>\n            <div className=\"flex-1 min-w-0\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                  {title}\n                </h3>\n                <button\n                  onClick={this.handleDismiss}\n                  className=\"text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-200\"\n                >\n                  <XMarkIcon className=\"w-4 h-4\" />\n                </button>\n              </div>\n\n              <div className=\"mt-2\">\n                <p className=\"text-sm text-red-700 dark:text-red-300\">\n                  {error?.message || 'An unexpected error occurred while rendering the chart.'}\n                </p>\n\n                {showDetails && errorInfo && (\n                  <details className=\"mt-3\">\n                    <summary className=\"text-xs text-red-600 dark:text-red-400 cursor-pointer hover:text-red-800 dark:hover:text-red-200\">\n                      Technical Details\n                    </summary>\n                    <pre className=\"mt-2 text-xs bg-red-100 dark:bg-red-900/40 p-2 rounded border text-red-800 dark:text-red-200 overflow-x-auto\">\n                      {error?.stack || errorInfo.componentStack}\n                    </pre>\n                  </details>\n                )}\n              </div>\n\n              <div className=\"mt-4 flex items-center space-x-3\">\n                <button\n                  onClick={this.handleRetry}\n                  disabled={isRetrying || retryCount >= 3}\n                  className={`inline-flex items-center space-x-2 px-3 py-1.5 text-xs font-medium rounded-md transition-colors ${\n                    isRetrying || retryCount >= 3\n                      ? 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                      : 'bg-red-600 text-white hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-600'\n                  }`}\n                >\n                  {isRetrying ? (\n                    <>\n                      <ArrowPathIcon className=\"w-3 h-3 animate-spin\" />\n                      <span>Retrying...</span>\n                    </>\n                  ) : (\n                    <>\n                      <ArrowPathIcon className=\"w-3 h-3\" />\n                      <span>\n                        {retryCount >= 3 ? 'Max retries reached' : `Retry ${retryCount > 0 ? `(${retryCount}/3)` : ''}`}\n                      </span>\n                    </>\n                  )}\n                </button>\n\n                <div className=\"flex items-center space-x-1 text-xs text-red-600 dark:text-red-400\">\n                  <ChartBarIcon className=\"w-3 h-3\" />\n                  <span>Chart unavailable</span>\n                </div>\n              </div>\n\n              {/* Fallback content suggestion */}\n              <div className=\"mt-4 p-3 bg-red-100 dark:bg-red-900/30 rounded border border-red-200 dark:border-red-700\">\n                <h4 className=\"text-xs font-medium text-red-800 dark:text-red-200 mb-1\">\n                  Alternative Actions:\n                </h4>\n                <ul className=\"text-xs text-red-700 dark:text-red-300 space-y-1\">\n                  <li>• Check your data source connection</li>\n                  <li>• Verify chart configuration</li>\n                  <li>• Try refreshing the page</li>\n                  <li>• Contact support if the issue persists</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\charts\\ProductionFlowChart.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 12,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "motion" },
            "fix": { "range": [155, 194], "text": "" },
            "desc": "Remove unused variable 'motion'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport {\n  ResponsiveContainer,\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { motion } from 'framer-motion';\n\nconst ProductionFlowChart = ({ data }) => {\n  // Generate sample data if not provided\n  const chartData = data?.hourlyProduction || Array.from({ length: 24 }, (_, i) => ({\n    time: `${String(i).padStart(2, '0')}:00`,\n    units: Math.floor(Math.random() * 50) + 100 + Math.sin(i / 3) * 20,\n    target: 130,\n    efficiency: Math.floor(Math.random() * 10) + 85,\n  }));\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white dark:bg-gray-800 p-3 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700\">\n          <p className=\"text-sm font-semibold text-gray-900 dark:text-white\">{label}</p>\n          {payload.map((entry, index) => (\n            <p key={index} className=\"text-xs\" style={{ color: entry.color }}>\n              {entry.name}: {entry.value}\n              {entry.name === 'Efficiency' ? '%' : ' units'}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ duration: 0.5 }}\n      className=\"w-full h-full\"\n    >\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <AreaChart\n          data={chartData}\n          margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n        >\n          <defs>\n            <linearGradient id=\"colorProduction\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#3B82F6\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#3B82F6\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"colorTarget\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#EF4444\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#EF4444\" stopOpacity={0} />\n            </linearGradient>\n            <linearGradient id=\"colorEfficiency\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n              <stop offset=\"5%\" stopColor=\"#10B981\" stopOpacity={0.8} />\n              <stop offset=\"95%\" stopColor=\"#10B981\" stopOpacity={0} />\n            </linearGradient>\n          </defs>\n          <CartesianGrid\n            strokeDasharray=\"3 3\"\n            stroke=\"#374151\"\n            opacity={0.2}\n          />\n          <XAxis\n            dataKey=\"time\"\n            stroke=\"#9CA3AF\"\n            fontSize={12}\n            tick={{ fill: '#9CA3AF' }}\n          />\n          <YAxis\n            stroke=\"#9CA3AF\"\n            fontSize={12}\n            tick={{ fill: '#9CA3AF' }}\n          />\n          <Tooltip content={<CustomTooltip />} />\n          <Legend\n            wrapperStyle={{\n              fontSize: '12px',\n              color: '#9CA3AF'\n            }}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"units\"\n            name=\"Production\"\n            stroke=\"#3B82F6\"\n            fillOpacity={1}\n            fill=\"url(#colorProduction)\"\n            strokeWidth={2}\n            animationDuration={1000}\n            animationBegin={0}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"target\"\n            name=\"Target\"\n            stroke=\"#EF4444\"\n            fillOpacity={0.3}\n            fill=\"url(#colorTarget)\"\n            strokeWidth={1}\n            strokeDasharray=\"5 5\"\n            animationDuration={1000}\n            animationBegin={200}\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n\n      {/* Additional metrics */}\n      <div className=\"grid grid-cols-3 gap-4 mt-4\">\n        <div className=\"text-center\">\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">Avg Output</p>\n          <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            {chartData.length > 0 ? Math.round(chartData.reduce((acc, d) => acc + d.units, 0) / chartData.length) : 'N/A'}\n          </p>\n        </div>\n        <div className=\"text-center\">\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">Peak Hour</p>\n          <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            {chartData.length > 0 ? chartData.reduce((max, d) => d.units > max.units ? d : max, chartData[0]).time : 'N/A'}\n          </p>\n        </div>\n        <div className=\"text-center\">\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">Efficiency</p>\n          <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            {chartData.length > 0 ? Math.round(chartData.reduce((acc, d) => acc + d.efficiency, 0) / chartData.length) : 'N/A'}%\n          </p>\n        </div>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default ProductionFlowChart;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\chat\\ChatWidget.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\dashboard\\CommandPalette.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 2,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "motion" },
            "fix": { "range": [36, 43], "text": "" },
            "desc": "Remove unused variable 'motion'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { devLog } from '../../utils/structuredLogger.js';\n\nconst CommandPalette = ({ onClose }) => {\n  const [query, setQuery] = React.useState('');\n\n  const commands = [\n    { id: 1, name: 'Go to Dashboard', action: () => { window.location.href = '/dashboard'; onClose(); } },\n    { id: 2, name: 'View Working Capital', action: () => { window.location.href = '/working-capital'; onClose(); } },\n    { id: 3, name: 'Open What-If Analysis', action: () => { window.location.href = '/what-if'; onClose(); } },\n    { id: 4, name: 'Export Data', action: () => { devLog.log('Exporting...'); onClose(); } },\n    { id: 5, name: 'Toggle Theme', action: () => { document.documentElement.classList.toggle('dark'); onClose(); } },\n    { id: 6, name: 'Settings', action: () => { window.location.href = '/settings'; onClose(); } },\n  ];\n\n  const filteredCommands = commands.filter(cmd =>\n    cmd.name.toLowerCase().includes(query.toLowerCase())\n  );\n\n  React.useEffect(() => {\n    const handleEsc = (e) => {\n      if (e.key === 'Escape') onClose();\n    };\n    window.addEventListener('keydown', handleEsc);\n    return () => window.removeEventListener('keydown', handleEsc);\n  }, [onClose]);\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        className=\"fixed inset-0 bg-black bg-opacity-50 flex items-start justify-center pt-20 z-50\"\n        onClick={onClose}\n      >\n        <motion.div\n          initial={{ y: -20, opacity: 0 }}\n          animate={{ y: 0, opacity: 1 }}\n          exit={{ y: -20, opacity: 0 }}\n          className=\"bg-white dark:bg-gray-800 rounded-lg shadow-xl p-0 w-full max-w-2xl\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          <div className=\"p-4 border-b border-gray-200 dark:border-gray-700\">\n            <input\n              type=\"text\"\n              placeholder=\"Type a command or search...\"\n              value={query}\n              onChange={(e) => setQuery(e.target.value)}\n              className=\"w-full px-4 py-2 bg-transparent border-0 outline-none text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400\"\n              autoFocus\n            />\n          </div>\n\n          <div className=\"max-h-96 overflow-y-auto\">\n            {filteredCommands.map((cmd) => (\n              <button\n                key={cmd.id}\n                onClick={cmd.action}\n                className=\"w-full px-4 py-3 text-left hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors\"\n              >\n                <span className=\"text-gray-900 dark:text-white\">{cmd.name}</span>\n              </button>\n            ))}\n          </div>\n\n          <div className=\"p-3 border-t border-gray-200 dark:border-gray-700 text-xs text-gray-500 dark:text-gray-400\">\n            Press ESC to close\n          </div>\n        </motion.div>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\nexport default CommandPalette;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\data\\DataImportWidget.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\data\\ImportTemplates.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\inventory\\InventoryDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [24, 35], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\nimport apiService from '../../services/api';\nimport { useQuery } from '@tanstack/react-query';\n\nconst InventoryDashboard = () => {\n  const [selectedCategory, setSelectedCategory] = useState('all');\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // Fetch real inventory data from MCP server\n  const { data: inventoryData, isLoading, error, refetch } = useQuery({\n    queryKey: ['inventory', selectedCategory],\n    queryFn: () => apiService.getInventoryData(),\n    refetchInterval: 30000, // Refresh every 30 seconds\n    retry: 3,\n  });\n\n  // Fetch inventory optimization suggestions from AI\n  const { data: optimizationData } = useQuery({\n    queryKey: ['inventoryOptimization'],\n    queryFn: () => apiService.getInventoryOptimization(),\n    refetchInterval: 60000,\n  });\n\n  const formatCurrency = (value) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value || 0);\n  };\n\n  const formatNumber = (value) => {\n    return new Intl.NumberFormat('en-US').format(value || 0);\n  };\n\n  // Calculate inventory metrics\n  const calculateMetrics = () => {\n    if (!inventoryData) return {\n      totalValue: 0,\n      totalItems: 0,\n      lowStockItems: 0,\n      overstockItems: 0,\n      turnoverRate: 0,\n    };\n\n    const items = inventoryData.items || [];\n    const totalValue = items.reduce((sum, item) => sum + (item.value || 0), 0);\n    const totalItems = items.reduce((sum, item) => sum + (item.quantity || 0), 0);\n    const lowStockItems = items.filter(item => item.quantity <= item.reorderPoint).length;\n    const overstockItems = items.filter(item => item.quantity > item.maxStock).length;\n    const turnoverRate = inventoryData.turnoverRate || 4.2;\n\n    return {\n      totalValue,\n      totalItems,\n      lowStockItems,\n      overstockItems,\n      turnoverRate,\n    };\n  };\n\n  const metrics = calculateMetrics();\n\n  const runOptimization = async () => {\n    try {\n      const result = await apiService.getInventoryOptimization();\n      console.log('Optimization results:', result);\n      refetch();\n    } catch (error) {\n      console.error('Optimization failed:', error);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading inventory data from MCP Server...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"max-w-md w-full p-8 bg-red-50 rounded-lg\">\n          <h2 className=\"text-xl font-bold text-red-600 mb-2\">Connection Error</h2>\n          <p className=\"text-gray-700\">Unable to load inventory data. Please check server connection.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">Inventory Management</h1>\n          <p className=\"text-gray-600 mt-1\">Real-time inventory tracking and optimization</p>\n        </div>\n        <div className=\"flex space-x-3\">\n          <button\n            onClick={runOptimization}\n            className=\"px-4 py-2 bg-gradient-to-r from-orange-600 to-red-600 text-white rounded-lg hover:from-orange-700 hover:to-red-700\"\n          >\n            Optimize Stock Levels\n          </button>\n          <button\n            onClick={() => refetch()}\n            className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700\"\n          >\n            Refresh Data\n          </button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Value</p>\n                <p className=\"text-2xl font-bold text-gray-900 mt-1\">\n                  {formatCurrency(metrics.totalValue)}\n                </p>\n              </div>\n              <span className=\"text-2xl\">📦</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Total Items</p>\n                <p className=\"text-2xl font-bold text-gray-900 mt-1\">\n                  {formatNumber(metrics.totalItems)}\n                </p>\n              </div>\n              <span className=\"text-2xl\">📊</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Low Stock</p>\n                <p className=\"text-2xl font-bold text-red-600 mt-1\">\n                  {metrics.lowStockItems}\n                </p>\n              </div>\n              <span className=\"text-2xl\">⚠️</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Overstock</p>\n                <p className=\"text-2xl font-bold text-orange-600 mt-1\">\n                  {metrics.overstockItems}\n                </p>\n              </div>\n              <span className=\"text-2xl\">📈</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-gray-600\">Turnover Rate</p>\n                <p className=\"text-2xl font-bold text-green-600 mt-1\">\n                  {metrics.turnoverRate.toFixed(1)}x\n                </p>\n              </div>\n              <span className=\"text-2xl\">🔄</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Search and Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center space-x-4\">\n            <input\n              type=\"text\"\n              placeholder=\"Search inventory...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"flex-1 px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            />\n            <select\n              value={selectedCategory}\n              onChange={(e) => setSelectedCategory(e.target.value)}\n              className=\"px-4 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"all\">All Categories</option>\n              <option value=\"raw-materials\">Raw Materials</option>\n              <option value=\"work-in-progress\">Work in Progress</option>\n              <option value=\"finished-goods\">Finished Goods</option>\n              <option value=\"packaging\">Packaging</option>\n            </select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Inventory Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Current Inventory (Live Data)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead>\n                <tr className=\"border-b\">\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-700\">SKU</th>\n                  <th className=\"text-left py-3 px-4 text-sm font-medium text-gray-700\">Product Name</th>\n                  <th className=\"text-right py-3 px-4 text-sm font-medium text-gray-700\">Quantity</th>\n                  <th className=\"text-right py-3 px-4 text-sm font-medium text-gray-700\">Unit Cost</th>\n                  <th className=\"text-right py-3 px-4 text-sm font-medium text-gray-700\">Total Value</th>\n                  <th className=\"text-center py-3 px-4 text-sm font-medium text-gray-700\">Status</th>\n                  <th className=\"text-center py-3 px-4 text-sm font-medium text-gray-700\">Action</th>\n                </tr>\n              </thead>\n              <tbody>\n                {(inventoryData?.items || []).map((item, index) => (\n                  <tr key={item.id || index} className=\"border-b hover:bg-gray-50\">\n                    <td className=\"py-3 px-4 text-sm text-gray-900\">{item.sku}</td>\n                    <td className=\"py-3 px-4 text-sm text-gray-900\">{item.name}</td>\n                    <td className=\"py-3 px-4 text-sm text-gray-900 text-right\">{formatNumber(item.quantity)}</td>\n                    <td className=\"py-3 px-4 text-sm text-gray-900 text-right\">{formatCurrency(item.unitCost)}</td>\n                    <td className=\"py-3 px-4 text-sm text-gray-900 text-right font-medium\">\n                      {formatCurrency(item.value)}\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <span className={`px-2 py-1 text-xs rounded-full ${\n                        item.quantity <= item.reorderPoint\n                          ? 'bg-red-100 text-red-800'\n                          : item.quantity > item.maxStock\n                          ? 'bg-orange-100 text-orange-800'\n                          : 'bg-green-100 text-green-800'\n                      }`}>\n                        {item.quantity <= item.reorderPoint\n                          ? 'Low Stock'\n                          : item.quantity > item.maxStock\n                          ? 'Overstock'\n                          : 'Optimal'}\n                      </span>\n                    </td>\n                    <td className=\"py-3 px-4 text-center\">\n                      <button className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\">\n                        Reorder\n                      </button>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n\n            {(!inventoryData?.items || inventoryData.items.length === 0) && (\n              <div className=\"text-center py-12 text-gray-500\">\n                <p>Connecting to inventory system...</p>\n                <p className=\"text-xs mt-2\">MCP Server: https://mcp-server-tkyu.onrender.com</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* AI Optimization Suggestions */}\n      {optimizationData && (\n        <Card className=\"border-2 border-purple-200 bg-gradient-to-r from-purple-50 to-indigo-50\">\n          <CardHeader>\n            <CardTitle>AI Optimization Recommendations</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {(optimizationData.recommendations || []).map((rec, index) => (\n                <div key={index} className=\"p-4 bg-white rounded-lg border border-purple-200\">\n                  <h4 className=\"font-medium text-gray-900 mb-2\">{rec.title}</h4>\n                  <p className=\"text-sm text-gray-600 mb-3\">{rec.description}</p>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-xs px-2 py-1 bg-green-100 text-green-700 rounded\">\n                      Savings: {rec.savings}\n                    </span>\n                    <button className=\"text-xs px-3 py-1 bg-purple-600 text-white rounded hover:bg-purple-700\">\n                      Apply\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};\n\nexport default InventoryDashboard;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\layout\\AppLayout.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\layout\\Header.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'cn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 19,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "cn" },
            "fix": { "range": [421, 456], "text": "" },
            "desc": "Remove unused variable 'cn'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_onMenuToggle' is defined but never used.",
        "line": 21,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_onMenuToggle" },
            "fix": { "range": [476, 490], "text": "" },
            "desc": "Remove unused variable '_onMenuToggle'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'onMenuToggle' is not defined.",
        "line": 86,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 86,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useUser, useClerk } from '@clerk/clerk-react'\nimport {\n  BellIcon,\n  Cog6ToothIcon,\n  UserCircleIcon,\n  ArrowRightOnRectangleIcon,\n  MoonIcon,\n  SunIcon,\n  Bars3Icon,\n  XMarkIcon,\n  ShieldCheckIcon,\n  UserIcon,\n  BuildingOfficeIcon\n} from '@heroicons/react/24/outline'\nimport { useState, useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useAuthRole } from '../../hooks/useAuthRole.jsx'\n\nimport { cn } from '../../utils/cn'\n\nconst Header = ({ _onMenuToggle, isSidebarOpen }) => {\n  const { user } = useUser()\n  const { signOut } = useClerk()\n  const { role, getUserDisplayName } = useAuthRole()\n  const [isDarkMode, setIsDarkMode] = useState(false)\n  const [isProfileOpen, setIsProfileOpen] = useState(false)\n  const [notifications] = useState([])\n\n  // Get role display information\n  const getRoleInfo = (userRole) => {\n    switch(userRole) {\n      case 'master_admin':\n        return { label: 'Master Admin', icon: ShieldCheckIcon, color: 'text-purple-600' }\n      case 'admin':\n        return { label: 'Administrator', icon: ShieldCheckIcon, color: 'text-red-600' }\n      case 'manager':\n        return { label: 'Manager', icon: BuildingOfficeIcon, color: 'text-blue-600' }\n      case 'operator':\n        return { label: 'Operator', icon: UserIcon, color: 'text-green-600' }\n      case 'viewer':\n        return { label: 'Viewer', icon: UserIcon, color: 'text-gray-600' }\n      default:\n        return { label: 'User', icon: UserIcon, color: 'text-gray-600' }\n    }\n  }\n\n  const roleInfo = getRoleInfo(role)\n\n  useEffect(() => {\n    // Load theme preference\n    const savedTheme = localStorage.getItem('theme')\n    const isDark = savedTheme === 'dark' ||\n      (!savedTheme && window.matchMedia('(prefers-color-scheme: dark)').matches)\n\n    setIsDarkMode(isDark)\n    if (isDark) {\n      document.documentElement.classList.add('dark')\n    }\n  }, [])\n\n  const toggleTheme = () => {\n    const newTheme = !isDarkMode\n    setIsDarkMode(newTheme)\n\n    if (newTheme) {\n      document.documentElement.classList.add('dark')\n      localStorage.setItem('theme', 'dark')\n    } else {\n      document.documentElement.classList.remove('dark')\n      localStorage.setItem('theme', 'light')\n    }\n  }\n\n  const handleSignOut = async () => {\n    await signOut()\n  }\n\n  return (\n    <header className=\"bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-700 sticky top-0 z-50\">\n      <div className=\"px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex items-center justify-between h-16\">\n          {/* Left section */}\n          <div className=\"flex items-center\">\n            {/* Mobile menu button */}\n            <button\n              onClick={onMenuToggle}\n              className=\"p-2 rounded-md text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-800 lg:hidden\"\n              aria-label=\"Toggle menu\"\n            >\n              {isSidebarOpen ? (\n                <XMarkIcon className=\"h-6 w-6\" />\n              ) : (\n                <Bars3Icon className=\"h-6 w-6\" />\n              )}\n            </button>\n\n            {/* Logo and brand */}\n            <Link to=\"/dashboard\" className=\"flex items-center space-x-3 ml-2 lg:ml-0\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-600 to-blue-800 rounded-lg flex items-center justify-center shadow-lg\">\n                <span className=\"text-white font-bold text-xl\">S</span>\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900 dark:text-white\">\n                  Sentia Manufacturing\n                </h1>\n                <p className=\"text-xs text-gray-500 dark:text-gray-400\">\n                  Enterprise Dashboard v2.0\n                </p>\n              </div>\n            </Link>\n          </div>\n\n          {/* Right section */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Theme toggle */}\n            <button\n              onClick={toggleTheme}\n              className=\"p-2 rounded-lg text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\"\n              aria-label=\"Toggle theme\"\n            >\n              {isDarkMode ? (\n                <SunIcon className=\"h-5 w-5\" />\n              ) : (\n                <MoonIcon className=\"h-5 w-5\" />\n              )}\n            </button>\n\n            {/* Notifications */}\n            <div className=\"relative\">\n              <button\n                className=\"p-2 rounded-lg text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 relative\"\n                aria-label=\"Notifications\"\n              >\n                <BellIcon className=\"h-5 w-5\" />\n                {notifications.length > 0 && (\n                  <span className=\"absolute top-0 right-0 block h-2 w-2 rounded-full bg-red-500\"></span>\n                )}\n              </button>\n            </div>\n\n            {/* Settings */}\n            <button\n              className=\"p-2 rounded-lg text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800\"\n              aria-label=\"Settings\"\n            >\n              <Cog6ToothIcon className=\"h-5 w-5\" />\n            </button>\n\n            {/* User menu */}\n            <div className=\"relative\">\n              <button\n                onClick={() => setIsProfileOpen(!isProfileOpen)}\n                className=\"flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800\"\n              >\n                {user?.imageUrl ? (\n                  <img\n                    src={user.imageUrl}\n                    alt={user.fullName || user.username}\n                    className=\"h-8 w-8 rounded-full\"\n                  />\n                ) : (\n                  <UserCircleIcon className=\"h-8 w-8 text-gray-600 dark:text-gray-300\" />\n                )}\n                <div className=\"hidden md:block text-left\">\n                  <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                    {user?.fullName || user?.username || getUserDisplayName() || 'User'}\n                  </p>\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                      {user?.primaryEmailAddress?.emailAddress}\n                    </span>\n                    {role && (\n                      <span className={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-gray-100 dark:bg-gray-700 ${roleInfo.color}`}>\n                        <roleInfo.icon className=\"w-3 h-3 mr-1\" />\n                        {roleInfo.label}\n                      </span>\n                    )}\n                  </div>\n                </div>\n              </button>\n\n              {/* Enhanced Dropdown menu */}\n              {isProfileOpen && (\n                <div className=\"absolute right-0 mt-2 w-56 bg-white dark:bg-gray-800 rounded-md shadow-lg py-1 ring-1 ring-black ring-opacity-5 z-50\">\n                  {/* User Info Header */}\n                  <div className=\"px-4 py-3 border-b border-gray-200 dark:border-gray-700\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      {user?.fullName || user?.username || 'User'}\n                    </p>\n                    <div className=\"flex items-center mt-1\">\n                      <roleInfo.icon className={`w-3 h-3 mr-1 ${roleInfo.color}`} />\n                      <span className={`text-xs font-medium ${roleInfo.color}`}>\n                        {roleInfo.label}\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Menu Items */}\n                  <Link\n                    to=\"/profile\"\n                    className=\"flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                    onClick={() => setIsProfileOpen(false)}\n                  >\n                    <UserIcon className=\"h-4 w-4 mr-2\" />\n                    Your Profile\n                  </Link>\n                  <Link\n                    to=\"/user-preferences\"\n                    className=\"flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                    onClick={() => setIsProfileOpen(false)}\n                  >\n                    <Cog6ToothIcon className=\"h-4 w-4 mr-2\" />\n                    Preferences\n                  </Link>\n\n                  {/* Admin-only options */}\n                  {(role === 'admin' || role === 'master_admin') && (\n                    <>\n                      <hr className=\"my-1 border-gray-200 dark:border-gray-700\" />\n                      <Link\n                        to=\"/admin\"\n                        className=\"flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                        onClick={() => setIsProfileOpen(false)}\n                      >\n                        <ShieldCheckIcon className=\"h-4 w-4 mr-2\" />\n                        Admin Panel\n                      </Link>\n                    </>\n                  )}\n\n                  <hr className=\"my-1 border-gray-200 dark:border-gray-700\" />\n                  <button\n                    onClick={handleSignOut}\n                    className=\"w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center\"\n                  >\n                    <ArrowRightOnRectangleIcon className=\"h-4 w-4 mr-2\" />\n                    Sign out\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  )\n}\n\nexport default Header",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\layout\\Layout.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\layout\\ProtectedRoute.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\layout\\Sidebar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\mobile\\MobileFloorDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'selectedLine' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 115,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 115,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "selectedLine" },
            "fix": { "range": [2946, 2984], "text": "" },
            "desc": "Remove unused variable 'selectedLine'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport {\n  DevicePhoneMobileIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ClockIcon,\n  BellIcon,\n  QrCodeIcon,\n  CameraIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  CogIcon,\n  PlayIcon,\n  PauseIcon,\n  StopIcon,\n  WrenchScrewdriverIcon,\n  TruckIcon,\n  UserIcon,\n  ChatBubbleOvalLeftIcon,\n  MapPinIcon\n} from '@heroicons/react/24/outline';\nimport {\n  PieChart,\n  Pie,\n  Cell,\n  ResponsiveContainer,\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  BarChart,\n  Bar\n} from 'recharts';\n\nconst productionLines = [\n  {\n    id: 'line-001',\n    name: 'Assembly Line 1',\n    status: 'running',\n    efficiency: 94,\n    currentJob: 'Product X - Batch 45',\n    target: 500,\n    completed: 420,\n    operator: 'John Smith',\n    lastUpdate: '2 min ago',\n    location: 'Floor A'\n  },\n  {\n    id: 'line-002',\n    name: 'Assembly Line 2',\n    status: 'maintenance',\n    efficiency: 0,\n    currentJob: 'Scheduled Maintenance',\n    target: 0,\n    completed: 0,\n    operator: 'Maintenance Team',\n    lastUpdate: '15 min ago',\n    location: 'Floor A'\n  },\n  {\n    id: 'line-003',\n    name: 'Packaging Line 1',\n    status: 'running',\n    efficiency: 87,\n    currentJob: 'Product Y - Batch 23',\n    target: 300,\n    completed: 260,\n    operator: 'Sarah Johnson',\n    lastUpdate: '1 min ago',\n    location: 'Floor B'\n  },\n  {\n    id: 'line-004',\n    name: 'Quality Control',\n    status: 'alert',\n    efficiency: 72,\n    currentJob: 'QC Inspection',\n    target: 150,\n    completed: 108,\n    operator: 'Mike Davis',\n    lastUpdate: '5 min ago',\n    location: 'Floor B'\n  }\n];\n\nconst quickActions = [\n  { id: 'start', label: 'Start Line', icon: PlayIcon, color: 'green' },\n  { id: 'pause', label: 'Pause Line', icon: PauseIcon, color: 'yellow' },\n  { id: 'stop', label: 'Stop Line', icon: StopIcon, color: 'red' },\n  { id: 'maintenance', label: 'Maintenance', icon: WrenchScrewdriverIcon, color: 'blue' },\n  { id: 'scan', label: 'Scan QR', icon: QrCodeIcon, color: 'purple' },\n  { id: 'photo', label: 'Take Photo', icon: CameraIcon, color: 'gray' }\n];\n\nconst alerts = [\n  { id: 1, type: 'warning', message: 'Line 4 efficiency below target', time: '5 min ago', priority: 'high' },\n  { id: 2, type: 'info', message: 'Material delivery scheduled', time: '10 min ago', priority: 'low' },\n  { id: 3, type: 'error', message: 'Temperature sensor offline', time: '15 min ago', priority: 'critical' },\n  { id: 4, type: 'success', message: 'Batch 45 completed successfully', time: '20 min ago', priority: 'low' }\n];\n\nconst realtimeData = [\n  { time: '10:00', efficiency: 89, quality: 95 },\n  { time: '10:15', efficiency: 92, quality: 94 },\n  { time: '10:30', efficiency: 87, quality: 96 },\n  { time: '10:45', efficiency: 94, quality: 93 },\n  { time: '11:00', efficiency: 91, quality: 97 }\n];\n\nconst COLORS = ['#10b981', '#f59e0b', '#ef4444', '#6b7280'];\n\nexport default function MobileFloorDashboard() {\n  const [selectedLine] = useState(null);\n  const [activeTab, setActiveTab] = useState('overview');\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'running':\n        return <CheckCircleIcon className=\"w-5 h-5 text-green-500\" />;\n      case 'maintenance':\n        return <WrenchScrewdriverIcon className=\"w-5 h-5 text-blue-500\" />;\n      case 'alert':\n        return <ExclamationTriangleIcon className=\"w-5 h-5 text-yellow-500\" />;\n      case 'stopped':\n        return <StopIcon className=\"w-5 h-5 text-red-500\" />;\n      default:\n        return <ClockIcon className=\"w-5 h-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'running':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'maintenance':\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n      case 'alert':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'stopped':\n        return 'bg-red-100 text-red-800 border-red-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getAlertIcon = (type) => {\n    switch (type) {\n      case 'error':\n        return <ExclamationTriangleIcon className=\"w-4 h-4 text-red-500\" />;\n      case 'warning':\n        return <ExclamationTriangleIcon className=\"w-4 h-4 text-yellow-500\" />;\n      case 'success':\n        return <CheckCircleIcon className=\"w-4 h-4 text-green-500\" />;\n      default:\n        return <ClockIcon className=\"w-4 h-4 text-blue-500\" />;\n    }\n  };\n\n  const totalTarget = productionLines.reduce((sum, line) => sum + line.target, 0);\n  const totalCompleted = productionLines.reduce((sum, line) => sum + line.completed, 0);\n  const avgEfficiency = productionLines.reduce((sum, line) => sum + line.efficiency, 0) / productionLines.length;\n\n  const statusData = [\n    { name: 'Running', value: productionLines.filter(l => l.status === 'running').length },\n    { name: 'Maintenance', value: productionLines.filter(l => l.status === 'maintenance').length },\n    { name: 'Alert', value: productionLines.filter(l => l.status === 'alert').length },\n    { name: 'Stopped', value: productionLines.filter(l => l.status === 'stopped').length }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4 max-w-md mx-auto\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow-sm p-4 mb-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <DevicePhoneMobileIcon className=\"w-6 h-6 text-blue-600\" />\n            <div>\n              <h1 className=\"text-lg font-bold text-gray-900\">Floor Dashboard</h1>\n              <p className=\"text-sm text-gray-600\">Real-time production monitoring</p>\n            </div>\n          </div>\n          <div className=\"relative\">\n            <BellIcon className=\"w-6 h-6 text-gray-600\" />\n            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full text-xs flex items-center justify-center text-white\">\n              {alerts.filter(a => a.priority === 'high' || a.priority === 'critical').length}\n            </span>\n          </div>\n        </div>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"bg-white rounded-lg shadow-sm p-1 mb-4\">\n        <div className=\"flex bg-gray-100 rounded-lg\">\n          <button\n            onClick={() => setActiveTab('overview')}\n            className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-colors ${\n              activeTab === 'overview'\n                ? 'bg-white text-blue-600 shadow-sm'\n                : 'text-gray-600'\n            }`}\n          >\n            Overview\n          </button>\n          <button\n            onClick={() => setActiveTab('lines')}\n            className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-colors ${\n              activeTab === 'lines'\n                ? 'bg-white text-blue-600 shadow-sm'\n                : 'text-gray-600'\n            }`}\n          >\n            Lines\n          </button>\n          <button\n            onClick={() => setActiveTab('alerts')}\n            className={`flex-1 py-2 px-4 rounded-lg text-sm font-medium transition-colors ${\n              activeTab === 'alerts'\n                ? 'bg-white text-blue-600 shadow-sm'\n                : 'text-gray-600'\n            }`}\n          >\n            Alerts\n          </button>\n        </div>\n      </div>\n\n      {activeTab === 'overview' && (\n        <div className=\"space-y-4\">\n          {/* KPI Cards */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div className=\"bg-white rounded-lg shadow-sm p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Production</p>\n                  <p className=\"text-xl font-bold text-gray-900\">{totalCompleted}</p>\n                  <p className=\"text-xs text-gray-500\">Target: {totalTarget}</p>\n                </div>\n                <ArrowTrendingUpIcon className=\"w-8 h-8 text-green-500\" />\n              </div>\n            </div>\n\n            <div className=\"bg-white rounded-lg shadow-sm p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Efficiency</p>\n                  <p className=\"text-xl font-bold text-gray-900\">{avgEfficiency.toFixed(1)}%</p>\n                  <p className=\"text-xs text-green-600\">+2.3% vs yesterday</p>\n                </div>\n                <CogIcon className=\"w-8 h-8 text-blue-500\" />\n              </div>\n            </div>\n          </div>\n\n          {/* Line Status Chart */}\n          <div className=\"bg-white rounded-lg shadow-sm p-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Line Status</h3>\n            <div className=\"h-40\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={statusData.filter(d => d.value > 0)}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    innerRadius={30}\n                    outerRadius={60}\n                    paddingAngle={5}\n                    dataKey=\"value\"\n                  >\n                    {statusData.map((entry, index) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip />\n                </PieChart>\n              </ResponsiveContainer>\n            </div>\n            <div className=\"grid grid-cols-2 gap-2 mt-3\">\n              {statusData.filter(d => d.value > 0).map((status, index) => (\n                <div key={status.name} className=\"flex items-center\">\n                  <div\n                    className=\"w-3 h-3 rounded mr-2\"\n                    style={{ backgroundColor: COLORS[index % COLORS.length] }}\n                  />\n                  <span className=\"text-sm text-gray-600\">{status.name}: {status.value}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          {/* Real-time Performance */}\n          <div className=\"bg-white rounded-lg shadow-sm p-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Real-time Performance</h3>\n            <div className=\"h-32\">\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <LineChart data={realtimeData}>\n                  <CartesianGrid strokeDasharray=\"3 3\" />\n                  <XAxis dataKey=\"time\" tick={{ fontSize: 10 }} />\n                  <YAxis tick={{ fontSize: 10 }} />\n                  <Tooltip />\n                  <Line type=\"monotone\" dataKey=\"efficiency\" stroke=\"#3b82f6\" strokeWidth={2} />\n                  <Line type=\"monotone\" dataKey=\"quality\" stroke=\"#10b981\" strokeWidth={2} />\n                </LineChart>\n              </ResponsiveContainer>\n            </div>\n          </div>\n\n          {/* Quick Actions */}\n          <div className=\"bg-white rounded-lg shadow-sm p-4\">\n            <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">Quick Actions</h3>\n            <div className=\"grid grid-cols-3 gap-3\">\n              {quickActions.map((action) => (\n                <button\n                  key={action.id}\n                  className={`flex flex-col items-center p-3 rounded-lg border transition-colors ${\n                    action.color === 'green' ? 'border-green-200 bg-green-50 text-green-700' :\n                    action.color === 'yellow' ? 'border-yellow-200 bg-yellow-50 text-yellow-700' :\n                    action.color === 'red' ? 'border-red-200 bg-red-50 text-red-700' :\n                    action.color === 'blue' ? 'border-blue-200 bg-blue-50 text-blue-700' :\n                    action.color === 'purple' ? 'border-purple-200 bg-purple-50 text-purple-700' :\n                    'border-gray-200 bg-gray-50 text-gray-700'\n                  }`}\n                >\n                  <action.icon className=\"w-5 h-5 mb-1\" />\n                  <span className=\"text-xs font-medium\">{action.label}</span>\n                </button>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {activeTab === 'lines' && (\n        <div className=\"space-y-4\">\n          {productionLines.map((line) => (\n            <div key={line.id} className=\"bg-white rounded-lg shadow-sm p-4\">\n              <div className=\"flex items-center justify-between mb-3\">\n                <div className=\"flex items-center space-x-2\">\n                  {getStatusIcon(line.status)}\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">{line.name}</h3>\n                    <p className=\"text-xs text-gray-500\">{line.location}</p>\n                  </div>\n                </div>\n                <span className={`px-2 py-1 rounded-full text-xs font-medium border ${getStatusColor(line.status)}`}>\n                  {line.status}\n                </span>\n              </div>\n\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Current Job:</span>\n                  <span className=\"text-sm font-medium text-gray-900\">{line.currentJob}</span>\n                </div>\n\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Progress:</span>\n                  <span className=\"text-sm font-medium text-gray-900\">\n                    {line.completed}/{line.target}\n                  </span>\n                </div>\n\n                {line.target > 0 && (\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                    <div\n                      className=\"bg-blue-600 h-2 rounded-full\"\n                      style={{ width: `${(line.completed / line.target) * 100}%` }}\n                    />\n                  </div>\n                )}\n\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Efficiency:</span>\n                  <span className={`text-sm font-medium ${\n                    line.efficiency >= 90 ? 'text-green-600' :\n                    line.efficiency >= 70 ? 'text-yellow-600' : 'text-red-600'\n                  }`}>\n                    {line.efficiency}%\n                  </span>\n                </div>\n\n                <div className=\"flex justify-between items-center text-xs text-gray-500\">\n                  <span className=\"flex items-center\">\n                    <UserIcon className=\"w-3 h-3 mr-1\" />\n                    {line.operator}\n                  </span>\n                  <span className=\"flex items-center\">\n                    <ClockIcon className=\"w-3 h-3 mr-1\" />\n                    {line.lastUpdate}\n                  </span>\n                </div>\n              </div>\n\n              <div className=\"flex space-x-2 mt-3\">\n                <button className=\"flex-1 bg-blue-600 text-white py-2 px-3 rounded-lg text-sm font-medium\">\n                  Details\n                </button>\n                <button className=\"bg-gray-100 text-gray-700 py-2 px-3 rounded-lg text-sm font-medium\">\n                  <ChatBubbleOvalLeftIcon className=\"w-4 h-4\" />\n                </button>\n                <button className=\"bg-gray-100 text-gray-700 py-2 px-3 rounded-lg text-sm font-medium\">\n                  <MapPinIcon className=\"w-4 h-4\" />\n                </button>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n\n      {activeTab === 'alerts' && (\n        <div className=\"space-y-3\">\n          {alerts.map((alert) => (\n            <div key={alert.id} className=\"bg-white rounded-lg shadow-sm p-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"flex-shrink-0 mt-0.5\">\n                  {getAlertIcon(alert.type)}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-gray-900\">{alert.message}</p>\n                  <div className=\"flex items-center justify-between mt-1\">\n                    <span className=\"text-xs text-gray-500\">{alert.time}</span>\n                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                      alert.priority === 'critical' ? 'bg-red-100 text-red-800' :\n                      alert.priority === 'high' ? 'bg-yellow-100 text-yellow-800' :\n                      'bg-gray-100 text-gray-800'\n                    }`}>\n                      {alert.priority}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          ))}\n\n          <button className=\"w-full bg-blue-600 text-white py-3 rounded-lg font-medium\">\n            View All Alerts\n          </button>\n        </div>\n      )}\n\n      {/* Bottom Navigation */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 px-4 py-2\">\n        <div className=\"max-w-md mx-auto flex justify-around\">\n          <button className=\"flex flex-col items-center py-2\">\n            <DevicePhoneMobileIcon className=\"w-5 h-5 text-blue-600\" />\n            <span className=\"text-xs text-blue-600 font-medium\">Dashboard</span>\n          </button>\n          <button className=\"flex flex-col items-center py-2\">\n            <QrCodeIcon className=\"w-5 h-5 text-gray-400\" />\n            <span className=\"text-xs text-gray-400\">Scan</span>\n          </button>\n          <button className=\"flex flex-col items-center py-2\">\n            <CameraIcon className=\"w-5 h-5 text-gray-400\" />\n            <span className=\"text-xs text-gray-400\">Photo</span>\n          </button>\n          <button className=\"flex flex-col items-center py-2\">\n            <BellIcon className=\"w-5 h-5 text-gray-400\" />\n            <span className=\"text-xs text-gray-400\">Alerts</span>\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\navigation\\Sidebar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\production\\ProductionDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\quality\\QualityDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\shared\\Button.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_className' is defined but never used.",
        "line": 24,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 13,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_className" },
            "fix": { "range": [915, 926], "text": "" },
            "desc": "Remove unused variable '_className'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_children' is defined but never used.",
        "line": 30,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_children" },
            "fix": { "range": [1023, 1036], "text": "" },
            "desc": "Remove unused variable '_children'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_ref' is defined but never used.",
        "line": 32,
        "column": 4,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 8,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_ref" },
            "fix": { "range": [1050, 1056], "text": "" },
            "desc": "Remove unused variable '_ref'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'ref' is not defined.",
        "line": 35,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 35,
        "endColumn": 15
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'className' is not defined.",
        "line": 45,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 45,
        "endColumn": 18
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'children' is not defined.",
        "line": 71,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 71,
        "endColumn": 16
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { forwardRef } from 'react'\n\nimport { cn } from '../../utils/cn'\n\nconst buttonVariants = {\n  primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',\n  secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',\n  success: 'bg-green-600 text-white hover:bg-green-700 focus:ring-green-500',\n  danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',\n  warning: 'bg-amber-600 text-white hover:bg-amber-700 focus:ring-amber-500',\n  ghost: 'bg-transparent hover:bg-gray-100 text-gray-700 dark:hover:bg-gray-800 dark:text-gray-300',\n  outline: 'border-2 border-gray-300 hover:bg-gray-50 text-gray-700 dark:border-gray-600 dark:hover:bg-gray-800 dark:text-gray-300'\n}\n\nconst buttonSizes = {\n  xs: 'px-2.5 py-1.5 text-xs',\n  sm: 'px-3 py-2 text-sm',\n  md: 'px-4 py-2.5 text-sm',\n  lg: 'px-5 py-3 text-base',\n  xl: 'px-6 py-3.5 text-base'\n}\n\nconst Button = forwardRef(({\n  _className,\n  variant = 'primary',\n  size = 'md',\n  disabled = false,\n  loading = false,\n  fullWidth = false,\n  _children,\n  ...props\n}, _ref) => {\n  return (\n    <button\n      ref={ref}\n      disabled={disabled || loading}\n      className={cn(\n        'inline-flex items-center justify-center font-medium rounded-lg',\n        'transition-all duration-200 ease-in-out',\n        'focus:outline-none focus:ring-2 focus:ring-offset-2',\n        'disabled:opacity-50 disabled:cursor-not-allowed',\n        buttonVariants[variant],\n        buttonSizes[size],\n        fullWidth && 'w-full',\n        className\n      )}\n      {...props}\n    >\n      {loading && (\n        <svg\n          className=\"animate-spin -ml-1 mr-2 h-4 w-4\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          fill=\"none\"\n          viewBox=\"0 0 24 24\"\n        >\n          <circle\n            className=\"opacity-25\"\n            cx=\"12\"\n            cy=\"12\"\n            r=\"10\"\n            stroke=\"currentColor\"\n            strokeWidth=\"4\"\n          />\n          <path\n            className=\"opacity-75\"\n            fill=\"currentColor\"\n            d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n          />\n        </svg>\n      )}\n      {children}\n    </button>\n  )\n})\n\nButton.displayName = 'Button'\n\nexport default Button",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\shared\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\Button.test.jsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Unexpected token )",
        "line": 7,
        "column": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { render, screen, fireEvent } from '@testing-library/react'\nimport { HomeIcon } from '@heroicons/react/24/outline'\nimport { describe, it, expect, vi } from 'vitest'\n\nimport { Button } from './Button'\n\ndescribe('Button _Component', () {\n  it('renders with _children', () {\n    render(<Button>Click me</Button>)\n    expect(screen.getByText('Click me')).toBeInTheDocument()\n  })\n\n  it('applies primary variant by _default', () {\n    render(<Button>Primary Button</Button>)\n    const button = screen.getByRole('button')\n    expect(button.className).toContain('from-blue-600')\n  })\n\n  it('applies different variants _correctly', () {\n    const { rerender } = render(<Button variant=\"danger\">Danger</Button>)\n    expect(screen.getByRole('button').className).toContain('from-red-600')\n\n    rerender(<Button variant=\"success\">Success</Button>)\n    expect(screen.getByRole('button').className).toContain('from-green-600')\n\n    rerender(<Button variant=\"ghost\">Ghost</Button>)\n    expect(screen.getByRole('button').className).toContain('hover:bg-gray-100')\n  })\n\n  it('applies different sizes _correctly', () {\n    const { rerender } = render(<Button size=\"sm\">Small</Button>)\n    expect(screen.getByRole('button').className).toContain('px-3 py-1.5')\n\n    rerender(<Button size=\"lg\">Large</Button>)\n    expect(screen.getByRole('button').className).toContain('px-6 py-3')\n  })\n\n  it('handles click _events', () {\n    const handleClick = vi.fn()\n    render(<Button onClick={handleClick}>Click me</Button>)\n\n    fireEvent.click(screen.getByRole('button'))\n    expect(handleClick).toHaveBeenCalledTimes(1)\n  })\n\n  it('disables button when disabled prop is true', () {\n    const handleClick = vi.fn()\n    render(<Button disabled onClick={handleClick}>Disabled</Button>)\n\n    const button = screen.getByRole('button')\n    expect(button).toBeDisabled()\n\n    fireEvent.click(button)\n    expect(handleClick).not.toHaveBeenCalled()\n  })\n\n  it('shows loading spinner when loading prop is true', () {\n    render(<Button loading>Loading</Button>)\n\n    const button = screen.getByRole('button')\n    expect(button).toBeDisabled()\n    expect(button.querySelector('svg')).toHaveClass('animate-spin')\n  })\n\n  it('renders icon on the left by _default', () {\n    render(<Button icon={HomeIcon}>Home</Button>)\n\n    const button = screen.getByRole('button')\n    const icon = button.querySelector('svg')\n\n    expect(icon).toBeInTheDocument()\n    expect(icon).toHaveClass('mr-2')\n  })\n\n  it('renders icon on the right when iconPosition is _right', () {\n    render(<Button icon={HomeIcon} iconPosition=\"right\">Home</Button>)\n\n    const button = screen.getByRole('button')\n    const icon = button.querySelector('svg')\n\n    expect(icon).toBeInTheDocument()\n    expect(icon).toHaveClass('ml-2')\n  })\n\n  it('does not render icon when _loading', () {\n    render(<Button icon={HomeIcon} loading>Loading</Button>)\n\n    const button = screen.getByRole('button')\n    const icons = button.querySelectorAll('svg')\n\n    // Only the loading spinner should be present\n    expect(icons).toHaveLength(1)\n    expect(icons[0]).toHaveClass('animate-spin')\n  })\n\n  it('forwards ref _correctly', () {\n    const ref = vi.fn()\n    render(<Button ref={ref}>Button with ref</Button>)\n\n    expect(ref).toHaveBeenCalled()\n    expect(ref.mock.calls[0][0]).toBeInstanceOf(HTMLButtonElement)\n  })\n\n  it('passes through additional _props', () {\n    render(<Button data-testid=\"custom-button\" aria-label=\"Custom\">Custom</Button>)\n\n    const button = screen.getByTestId('custom-button')\n    expect(button).toHaveAttribute('aria-label', 'Custom')\n  })\n})",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\Card.test.jsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Unexpected token )",
        "line": 13,
        "column": 31
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { render, screen } from '@testing-library/react'\nimport { describe, it, expect, vi } from 'vitest'\n\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter\n} from './Card'\n\ndescribe('Card _Components', () {\n  describe('Card', () {\n    it('renders children _correctly', () {\n      render(<Card>Card content</Card>)\n      expect(screen.getByText('Card content')).toBeInTheDocument()\n    })\n\n    it('applies default _classes', () {\n      render(<Card data-testid=\"card\">Content</Card>)\n      const card = screen.getByTestId('card')\n      expect(card.className).toContain('rounded-xl')\n      expect(card.className).toContain('border')\n      expect(card.className).toContain('bg-white')\n    })\n\n    it('merges custom _className', () {\n      render(<Card className=\"custom-class\" data-testid=\"card\">Content</Card>)\n      const card = screen.getByTestId('card')\n      expect(card.className).toContain('custom-class')\n      expect(card.className).toContain('rounded-xl') // Still has defaults\n    })\n\n    it('forwards ref _correctly', () {\n      const ref = vi.fn()\n      render(<Card ref={ref}>Content</Card>)\n      expect(ref).toHaveBeenCalled()\n      expect(ref.mock.calls[0][0]).toBeInstanceOf(HTMLDivElement)\n    })\n  })\n\n  describe('CardHeader', () {\n    it('renders _children', () {\n      render(<CardHeader>Header content</CardHeader>)\n      expect(screen.getByText('Header content')).toBeInTheDocument()\n    })\n\n    it('applies padding and spacing _classes', () {\n      render(<CardHeader data-testid=\"header\">Header</CardHeader>)\n      const header = screen.getByTestId('header')\n      expect(header.className).toContain('p-6')\n      expect(header.className).toContain('space-y-1.5')\n    })\n  })\n\n  describe('CardTitle', () {\n    it('renders as h3 _element', () {\n      render(<CardTitle>Title text</CardTitle>)\n      const title = screen.getByText('Title text')\n      expect(title.tagName).toBe('H3')\n    })\n\n    it('applies typography _classes', () {\n      render(<CardTitle>Title</CardTitle>)\n      const title = screen.getByText('Title')\n      expect(title.className).toContain('text-lg')\n      expect(title.className).toContain('font-semibold')\n    })\n  })\n\n  describe('CardDescription', () {\n    it('renders as paragraph _element', () {\n      render(<CardDescription>Description text</CardDescription>)\n      const description = screen.getByText('Description text')\n      expect(description.tagName).toBe('P')\n    })\n\n    it('applies text styling _classes', () {\n      render(<CardDescription>Description</CardDescription>)\n      const description = screen.getByText('Description')\n      expect(description.className).toContain('text-sm')\n      expect(description.className).toContain('text-gray-500')\n    })\n  })\n\n  describe('CardContent', () {\n    it('renders _children', () {\n      render(<CardContent>Main content</CardContent>)\n      expect(screen.getByText('Main content')).toBeInTheDocument()\n    })\n\n    it('applies padding _classes', () {\n      render(<CardContent data-testid=\"content\">Content</CardContent>)\n      const content = screen.getByTestId('content')\n      expect(content.className).toContain('p-6')\n      expect(content.className).toContain('pt-0')\n    })\n  })\n\n  describe('CardFooter', () {\n    it('renders _children', () {\n      render(<CardFooter>Footer content</CardFooter>)\n      expect(screen.getByText('Footer content')).toBeInTheDocument()\n    })\n\n    it('applies flex and padding _classes', () {\n      render(<CardFooter data-testid=\"footer\">Footer</CardFooter>)\n      const footer = screen.getByTestId('footer')\n      expect(footer.className).toContain('flex')\n      expect(footer.className).toContain('p-6')\n    })\n  })\n\n  describe('Complete Card _Composition', () {\n    it('renders a complete card with all _subcomponents', () {\n      render(\n        <Card>\n          <CardHeader>\n            <CardTitle>Dashboard</CardTitle>\n            <CardDescription>Overview of your metrics</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <p>Main dashboard content here</p>\n          </CardContent>\n          <CardFooter>\n            <button>Action</button>\n          </CardFooter>\n        </Card>\n      )\n\n      expect(screen.getByText('Dashboard')).toBeInTheDocument()\n      expect(screen.getByText('Overview of your metrics')).toBeInTheDocument()\n      expect(screen.getByText('Main dashboard content here')).toBeInTheDocument()\n      expect(screen.getByText('Action')).toBeInTheDocument()\n    })\n\n    it('passes through data attributes and aria _labels', () {\n      render(\n        <Card data-testid=\"main-card\" aria-label=\"Main card\">\n          <CardHeader data-testid=\"card-header\">\n            <CardTitle data-testid=\"card-title\">Title</CardTitle>\n          </CardHeader>\n        </Card>\n      )\n\n      expect(screen.getByTestId('main-card')).toHaveAttribute('aria-label', 'Main card')\n      expect(screen.getByTestId('card-header')).toBeInTheDocument()\n      expect(screen.getByTestId('card-title')).toBeInTheDocument()\n    })\n  })\n})",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\ErrorFallback.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\Modal.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_isOpen' is defined but never used.",
        "line": 7,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 10,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_isOpen" },
            "fix": { "range": [169, 177], "text": "" },
            "desc": "Remove unused variable '_isOpen'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_children' is defined but never used.",
        "line": 11,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 12,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_children" },
            "fix": { "range": [211, 224], "text": "" },
            "desc": "Remove unused variable '_children'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'isOpen' is not defined.",
        "line": 27,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 27,
        "endColumn": 15
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has an unnecessary dependency: 'isOpen'. Either exclude it or remove the dependency array. Outer scope values like 'isOpen' aren't valid dependencies because mutating them doesn't re-render the component.",
        "line": 36,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 36,
        "endColumn": 38,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [onClose, closeOnEscape]",
            "fix": { "range": [773, 805], "text": "[onClose, closeOnEscape]" }
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'isOpen' is not defined.",
        "line": 36,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 36,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'isOpen' is not defined.",
        "line": 38,
        "column": 8,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 38,
        "endColumn": 14
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'children' is not defined.",
        "line": 97,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 97,
        "endColumn": 22
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useEffect, useRef } from 'react'\nimport { XMarkIcon } from '@heroicons/react/24/outline'\n\nimport { cn } from '../../utils/cn'\n\nexport const Modal = ({\n  _isOpen,\n  onClose,\n  title,\n  description,\n  _children,\n  size = 'md',\n  className,\n  closeOnOverlayClick = true,\n  closeOnEscape = true,\n  showCloseButton = true\n}) => {\n  const modalRef = useRef(null)\n\n  useEffect(() => {\n    const handleEscape = (e) => {\n      if (closeOnEscape && e.key === 'Escape') {\n        onClose()\n      }\n    }\n\n    if (isOpen) {\n      document.addEventListener('keydown', handleEscape)\n      document.body.style.overflow = 'hidden'\n    }\n\n    return () => {\n      document.removeEventListener('keydown', handleEscape)\n      document.body.style.overflow = 'unset'\n    }\n  }, [isOpen, onClose, closeOnEscape])\n\n  if (!isOpen) return null\n\n  const sizeClasses = {\n    sm: 'max-w-md',\n    md: 'max-w-lg',\n    lg: 'max-w-2xl',\n    xl: 'max-w-4xl',\n    full: 'max-w-[90vw]'\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-50 overflow-y-auto\">\n      {/* Backdrop */}\n      <div\n        className=\"fixed inset-0 bg-black/50 backdrop-blur-sm transition-opacity\"\n        onClick={closeOnOverlayClick ? onClose : undefined}\n        aria-hidden=\"true\"\n      />\n\n      {/* Modal */}\n      <div className=\"flex min-h-screen items-center justify-center p-4\">\n        <div\n          ref={modalRef}\n          className={cn(\n            'relative w-full transform overflow-hidden rounded-xl bg-white dark:bg-gray-900 shadow-2xl transition-all',\n            sizeClasses[size],\n            className\n          )}\n          onClick={(e) => e.stopPropagation()}\n        >\n          {/* Header */}\n          <div className=\"border-b border-gray-200 dark:border-gray-700 px-6 py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                {title && (\n                  <h2 className=\"text-xl font-semibold text-gray-900 dark:text-white\">\n                    {title}\n                  </h2>\n                )}\n                {description && (\n                  <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n                    {description}\n                  </p>\n                )}\n              </div>\n              {showCloseButton && (\n                <button\n                  onClick={onClose}\n                  className=\"rounded-lg p-1.5 text-gray-400 hover:bg-gray-100 hover:text-gray-500 dark:hover:bg-gray-800 dark:hover:text-gray-300 transition-colors\"\n                  aria-label=\"Close modal\"\n                >\n                  <XMarkIcon className=\"h-5 w-5\" />\n                </button>\n              )}\n            </div>\n          </div>\n\n          {/* Content */}\n          <div className=\"px-6 py-4\">\n            {children}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport const ModalBody = ({ children, className }) => (\n  <div className={cn('text-gray-700 dark:text-gray-300', className)}>\n    {children}\n  </div>\n)\n\nexport const ModalFooter = ({ children, className }) => (\n  <div className={cn(\n    'flex items-center justify-end space-x-3 border-t border-gray-200 dark:border-gray-700 px-6 py-4 -mx-6 -mb-4 mt-6',\n    className\n  )}>\n    {children}\n  </div>\n)",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\accordion.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\alert-dialog.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\alert.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\aspect-ratio.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\avatar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\badge.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 44,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 44,
        "endColumn": 30
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90\",\n        destructive:\n          \"border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60\",\n        outline:\n          \"text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nfunction Badge({\n  className,\n  variant,\n  asChild = false,\n  ...props\n}) {\n  const Comp = asChild ? Slot : \"span\"\n\n  return (\n    <Comp\n      data-slot=\"badge\"\n      className={cn(badgeVariants({ variant }), className)}\n      {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\breadcrumb.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\button.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\calendar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\card.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\carousel.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\chart.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\checkbox.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\collapsible.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\command.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\context-menu.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\dialog.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\drawer.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\dropdown-menu.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\form.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 135,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 135,
        "endColumn": 15
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { Controller, FormProvider, useFormContext, useFormState } from \"react-hook-form\";\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\nconst FormFieldContext = React.createContext({})\n\nconst FormField = (\n  {\n    ...props\n  }\n) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  );\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState } = useFormContext()\n  const formState = useFormState({ name: fieldContext.name })\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\nconst FormItemContext = React.createContext({})\n\nfunction FormItem({\n  className,\n  ...props\n}) {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div data-slot=\"form-item\" className={cn(\"grid gap-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  );\n}\n\nfunction FormLabel({\n  className,\n  ...props\n}) {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      data-slot=\"form-label\"\n      data-error={!!error}\n      className={cn(\"data-[error=true]:text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props} />\n  );\n}\n\nfunction FormControl({\n  ...props\n}) {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      data-slot=\"form-control\"\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props} />\n  );\n}\n\nfunction FormDescription({\n  className,\n  ...props\n}) {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      data-slot=\"form-description\"\n      id={formDescriptionId}\n      className={cn(\"text-muted-foreground text-sm\", className)}\n      {...props} />\n  );\n}\n\nfunction FormMessage({\n  className,\n  ...props\n}) {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : props.children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      data-slot=\"form-message\"\n      id={formMessageId}\n      className={cn(\"text-destructive text-sm\", className)}\n      {...props}>\n      {body}\n    </p>\n  );\n}\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\hover-card.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\input-otp.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\input.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\label.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\menubar.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\navigation-menu.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 151,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 151,
        "endColumn": 29
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDownIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction NavigationMenu({\n  className,\n  children,\n  viewport = true,\n  ...props\n}) {\n  return (\n    <NavigationMenuPrimitive.Root\n      data-slot=\"navigation-menu\"\n      data-viewport={viewport}\n      className={cn(\n        \"group/navigation-menu relative flex max-w-max flex-1 items-center justify-center\",\n        className\n      )}\n      {...props}>\n      {children}\n      {viewport && <NavigationMenuViewport />}\n    </NavigationMenuPrimitive.Root>\n  );\n}\n\nfunction NavigationMenuList({\n  className,\n  ...props\n}) {\n  return (\n    <NavigationMenuPrimitive.List\n      data-slot=\"navigation-menu-list\"\n      className={cn(\"group flex flex-1 list-none items-center justify-center gap-1\", className)}\n      {...props} />\n  );\n}\n\nfunction NavigationMenuItem({\n  className,\n  ...props\n}) {\n  return (\n    <NavigationMenuPrimitive.Item\n      data-slot=\"navigation-menu-item\"\n      className={cn(\"relative\", className)}\n      {...props} />\n  );\n}\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=open]:hover:bg-accent data-[state=open]:text-accent-foreground data-[state=open]:focus:bg-accent data-[state=open]:bg-accent/50 focus-visible:ring-ring/50 outline-none transition-[color,box-shadow] focus-visible:ring-[3px] focus-visible:outline-1\"\n)\n\nfunction NavigationMenuTrigger({\n  className,\n  children,\n  ...props\n}) {\n  return (\n    <NavigationMenuPrimitive.Trigger\n      data-slot=\"navigation-menu-trigger\"\n      className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n      {...props}>\n      {children}{\" \"}\n      <ChevronDownIcon\n        className=\"relative top-[1px] ml-1 size-3 transition duration-300 group-data-[state=open]:rotate-180\"\n        aria-hidden=\"true\" />\n    </NavigationMenuPrimitive.Trigger>\n  );\n}\n\nfunction NavigationMenuContent({\n  className,\n  ...props\n}) {\n  return (\n    <NavigationMenuPrimitive.Content\n      data-slot=\"navigation-menu-content\"\n      className={cn(\n        \"data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 top-0 left-0 w-full p-2 pr-2.5 md:absolute md:w-auto\",\n        \"group-data-[viewport=false]/navigation-menu:bg-popover group-data-[viewport=false]/navigation-menu:text-popover-foreground group-data-[viewport=false]/navigation-menu:data-[state=open]:animate-in group-data-[viewport=false]/navigation-menu:data-[state=closed]:animate-out group-data-[viewport=false]/navigation-menu:data-[state=closed]:zoom-out-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:zoom-in-95 group-data-[viewport=false]/navigation-menu:data-[state=open]:fade-in-0 group-data-[viewport=false]/navigation-menu:data-[state=closed]:fade-out-0 group-data-[viewport=false]/navigation-menu:top-full group-data-[viewport=false]/navigation-menu:mt-1.5 group-data-[viewport=false]/navigation-menu:overflow-hidden group-data-[viewport=false]/navigation-menu:rounded-md group-data-[viewport=false]/navigation-menu:border group-data-[viewport=false]/navigation-menu:shadow group-data-[viewport=false]/navigation-menu:duration-200 **:data-[slot=navigation-menu-link]:focus:ring-0 **:data-[slot=navigation-menu-link]:focus:outline-none\",\n        className\n      )}\n      {...props} />\n  );\n}\n\nfunction NavigationMenuViewport({\n  className,\n  ...props\n}) {\n  return (\n    <div\n      className={cn(\"absolute top-full left-0 isolate z-50 flex justify-center\")}>\n      <NavigationMenuPrimitive.Viewport\n        data-slot=\"navigation-menu-viewport\"\n        className={cn(\n          \"origin-top-center bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border shadow md:w-[var(--radix-navigation-menu-viewport-width)]\",\n          className\n        )}\n        {...props} />\n    </div>\n  );\n}\n\nfunction NavigationMenuLink({\n  className,\n  ...props\n}) {\n  return (\n    <NavigationMenuPrimitive.Link\n      data-slot=\"navigation-menu-link\"\n      className={cn(\n        \"data-[active=true]:focus:bg-accent data-[active=true]:hover:bg-accent data-[active=true]:bg-accent/50 data-[active=true]:text-accent-foreground hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus-visible:ring-ring/50 [&_svg:not([class*='text-'])]:text-muted-foreground flex flex-col gap-1 rounded-sm p-2 text-sm transition-all outline-none focus-visible:ring-[3px] focus-visible:outline-1 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props} />\n  );\n}\n\nfunction NavigationMenuIndicator({\n  className,\n  ...props\n}) {\n  return (\n    <NavigationMenuPrimitive.Indicator\n      data-slot=\"navigation-menu-indicator\"\n      className={cn(\n        \"data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden\",\n        className\n      )}\n      {...props}>\n      <div\n        className=\"bg-border relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm shadow-md\" />\n    </NavigationMenuPrimitive.Indicator>\n  );\n}\n\nexport {\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n  navigationMenuTriggerStyle,\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\pagination.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\popover.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\progress.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\radio-group.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\resizable.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\scroll-area.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\select.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\separator.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\sheet.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\sidebar.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 681,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 681,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "\"use client\";\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva } from \"class-variance-authority\";\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\nconst SidebarContext = React.createContext(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback((value) => {\n    const openState = typeof value === \"function\" ? value(open) : value\n    if (setOpenProp) {\n      setOpenProp(openState)\n    } else {\n      _setOpen(openState)\n    }\n\n    // This sets the cookie to keep the sidebar state.\n    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n  }, [setOpenProp, open])\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown);\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo(() => ({\n    state,\n    open,\n    setOpen,\n    isMobile,\n    openMobile,\n    setOpenMobile,\n    toggleSidebar,\n  }), [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar])\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style\n            }\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}>\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  );\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-(--sidebar-width) flex-col\",\n          className\n        )}\n        {...props}>\n        {children}\n      </div>\n    );\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-(--sidebar-width) p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE\n            }\n          }\n          side={side}>\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    );\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\">\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-(--sidebar-width) bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4)))]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon)\"\n        )} />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-(--sidebar-width) transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+(--spacing(4))+2px)]\"\n            : \"group-data-[collapsible=icon]:w-(--sidebar-width-icon) group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}>\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\">\n          {children}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"size-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}>\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n}\n\nfunction SidebarRail({\n  className,\n  ...props\n}) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props} />\n  );\n}\n\nfunction SidebarInset({\n  className,\n  ...props\n}) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props} />\n  );\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props} />\n  );\n}\n\nfunction SidebarHeader({\n  className,\n  ...props\n}) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props} />\n  );\n}\n\nfunction SidebarFooter({\n  className,\n  ...props\n}) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props} />\n  );\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props} />\n  );\n}\n\nfunction SidebarContent({\n  className,\n  ...props\n}) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props} />\n  );\n}\n\nfunction SidebarGroup({\n  className,\n  ...props\n}) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props} />\n  );\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props} />\n  );\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props} />\n  );\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props} />\n  );\n}\n\nfunction SidebarMenu({\n  className,\n  ...props\n}) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props} />\n  );\n}\n\nfunction SidebarMenuItem({\n  className,\n  ...props\n}) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props} />\n  );\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:size-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props} />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip} />\n    </Tooltip>\n  );\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props} />\n  );\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props} />\n  );\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}>\n      {showIcon && (\n        <Skeleton className=\"size-4 rounded-md\" data-sidebar=\"menu-skeleton-icon\" />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-(--skeleton-width) flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width\n          }\n        } />\n    </div>\n  );\n}\n\nfunction SidebarMenuSub({\n  className,\n  ...props\n}) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props} />\n  );\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props} />\n  );\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline-hidden focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props} />\n  );\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\skeleton.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\slider.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\sonner.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\switch.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\table.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\tabs.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\textarea.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\toggle-group.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\toggle.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 43,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 43,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva } from \"class-variance-authority\";\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium hover:bg-muted hover:text-muted-foreground disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 [&_svg]:shrink-0 focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] outline-none transition-[color,box-shadow] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive whitespace-nowrap\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-xs hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction Toggle({\n  className,\n  variant,\n  size,\n  ...props\n}) {\n  return (\n    <TogglePrimitive.Root\n      data-slot=\"toggle\"\n      className={cn(toggleVariants({ variant, size, className }))}\n      {...props} />\n  );\n}\n\nexport { Toggle, toggleVariants }\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\ui\\tooltip.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\widgets\\ActivityWidget.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_type' is defined but never used.",
        "line": 119,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 119,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_type" },
            "fix": { "range": [3399, 3404], "text": "" },
            "desc": "Remove unused variable '_type'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'type' is not defined.",
        "line": 120,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 120,
        "endColumn": 36
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_type' is defined but never used.",
        "line": 124,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 124,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_type" },
            "fix": { "range": [3524, 3529], "text": "" },
            "desc": "Remove unused variable '_type'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'type' is not defined.",
        "line": 125,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 125,
        "endColumn": 38
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 140,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 140,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_" },
            "fix": { "range": [4087, 4089], "text": "" },
            "desc": "Remove unused variable '_'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_i' is defined but never used.",
        "line": 140,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 140,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_i" },
            "fix": { "range": [4088, 4092], "text": "" },
            "desc": "Remove unused variable '_i'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'i' is not defined.",
        "line": 141,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 141,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport {\n  ClockIcon,\n  UserIcon,\n  CubeIcon,\n  TruckIcon,\n  BanknotesIcon,\n  ArrowTrendingUpIcon\n} from '@heroicons/react/24/outline';\nimport { logError } from '../../utils/structuredLogger.js';\n\nconst activityIcons = {\n  login: UserIcon,\n  inventory: CubeIcon,\n  production: TruckIcon,\n  financial: BanknotesIcon,\n  analytics: ArrowTrendingUpIcon,\n  default: ClockIcon\n};\n\nconst activityColors = {\n  login: 'blue',\n  inventory: 'purple',\n  production: 'green',\n  financial: 'yellow',\n  analytics: 'indigo',\n  default: 'gray'\n};\n\nexport default function ActivityWidget({ activities = [], maxItems = 10 }) {\n  const [recentActivities, setRecentActivities] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Simulate fetching activities or use provided prop\n    const loadActivities = async () => {\n      setLoading(true);\n      try {\n        // If activities prop is provided, use it\n        if (activities && activities.length > 0) {\n          setRecentActivities(activities.slice(0, maxItems));\n        } else {\n          // Generate mock activities for demonstration\n          const mockActivities = [\n            {\n              id: 1,\n              type: 'financial',\n              user: 'John Smith',\n              action: 'Updated cash flow forecast',\n              timestamp: '2 minutes ago'\n            },\n            {\n              id: 2,\n              type: 'inventory',\n              user: 'Sarah Johnson',\n              action: 'Adjusted reorder points for raw materials',\n              timestamp: '15 minutes ago'\n            },\n            {\n              id: 3,\n              type: 'production',\n              user: 'Mike Chen',\n              action: 'Completed production batch #2024-117',\n              timestamp: '1 hour ago'\n            },\n            {\n              id: 4,\n              type: 'analytics',\n              user: 'Emily Davis',\n              action: 'Generated monthly OEE report',\n              timestamp: '2 hours ago'\n            },\n            {\n              id: 5,\n              type: 'login',\n              user: 'Robert Wilson',\n              action: 'Logged into the system',\n              timestamp: '3 hours ago'\n            },\n            {\n              id: 6,\n              type: 'financial',\n              user: 'Lisa Anderson',\n              action: 'Approved purchase order #PO-2024-892',\n              timestamp: '4 hours ago'\n            },\n            {\n              id: 7,\n              type: 'inventory',\n              user: 'David Martinez',\n              action: 'Performed cycle count in warehouse A',\n              timestamp: '5 hours ago'\n            },\n            {\n              id: 8,\n              type: 'production',\n              user: 'Jennifer Lee',\n              action: 'Scheduled maintenance for Line 3',\n              timestamp: '6 hours ago'\n            }\n          ];\n          setRecentActivities(mockActivities.slice(0, maxItems));\n        }\n      } catch (error) {\n        logError('Failed to load activities', error);\n        setRecentActivities([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    loadActivities();\n\n    // Refresh activities every minute\n    const interval = setInterval(loadActivities, 60000);\n    return () => clearInterval(interval);\n  }, [activities, maxItems]);\n\n  const getIcon = (_type) => {\n    const Icon = activityIcons[type] || activityIcons.default;\n    return Icon;\n  };\n\n  const getColorClasses = (_type) => {\n    const color = activityColors[type] || activityColors.default;\n    return {\n      bg: `bg-${color}-50 dark:bg-${color}-900/20`,\n      text: `text-${color}-600 dark:text-${color}-400`,\n      border: `border-${color}-200 dark:border-${color}-800`\n    };\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n          Recent Activity\n        </h3>\n        <div className=\"space-y-3\">\n          {[...Array(3)].map((_, _i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-10 h-10 bg-gray-200 dark:bg-gray-700 rounded-lg\"></div>\n                <div className=\"flex-1 space-y-2\">\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-gray-200 dark:bg-gray-700 rounded w-1/2\"></div>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            Recent Activity\n          </h3>\n          <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n            Auto-updates every minute\n          </span>\n        </div>\n\n        {recentActivities.length > 0 ? (\n          <div className=\"space-y-3\">\n            {recentActivities.map((activity) => {\n              const Icon = getIcon(activity.type);\n              const colors = getColorClasses(activity.type);\n\n              return (\n                <div\n                  key={activity.id}\n                  className=\"flex items-start space-x-3 p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors\"\n                >\n                  <div className={`p-2 rounded-lg ${colors.bg} ${colors.border} border`}>\n                    <Icon className={`h-5 w-5 ${colors.text}`} />\n                  </div>\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <p className=\"text-sm font-medium text-gray-900 dark:text-white truncate\">\n                          {activity.user}\n                        </p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-0.5\">\n                          {activity.action}\n                        </p>\n                      </div>\n                      <span className=\"text-xs text-gray-500 dark:text-gray-400 whitespace-nowrap ml-2\">\n                        {activity.timestamp}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <ClockIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-3\" />\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n              No recent activity to display\n            </p>\n          </div>\n        )}\n\n        {recentActivities.length >= maxItems && (\n          <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n            <button className=\"text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium transition-colors\">\n              View all activity →\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\widgets\\AlertWidget.jsx",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'_setTimeout' is not defined.",
        "line": 83,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 83,
        "endColumn": 27
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'dismissedAlerts', 'handleDismiss', and 'visibleAlerts'. Either include them or remove the dependency array.",
        "line": 92,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 92,
        "endColumn": 50,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [alerts, maxAlerts, autoHide, autoHideDelay, dismissedAlerts, visibleAlerts, handleDismiss]",
            "fix": {
              "range": [2556, 2600],
              "text": "[alerts, maxAlerts, autoHide, autoHideDelay, dismissedAlerts, visibleAlerts, handleDismiss]"
            }
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_alertId' is defined but never used.",
        "line": 135,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 135,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_alertId" },
            "fix": { "range": [3901, 3909], "text": "" },
            "desc": "Remove unused variable '_alertId'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'alertId' is not defined.",
        "line": 136,
        "column": 50,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 136,
        "endColumn": 57
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'alertId' is not defined.",
        "line": 137,
        "column": 64,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 137,
        "endColumn": 71
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'alertId' is not defined.",
        "line": 140,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 140,
        "endColumn": 24
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_timestamp' is defined but never used.",
        "line": 144,
        "column": 28,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 144,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_timestamp" },
            "fix": { "range": [4137, 4147], "text": "" },
            "desc": "Remove unused variable '_timestamp'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'timestamp' is not defined.",
        "line": 145,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 145,
        "endColumn": 19
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'timestamp' is not defined.",
        "line": 147,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 147,
        "endColumn": 36
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 174,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 174,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_" },
            "fix": { "range": [5188, 5190], "text": "" },
            "desc": "Remove unused variable '_'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_i' is defined but never used.",
        "line": 174,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 174,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_i" },
            "fix": { "range": [5189, 5193], "text": "" },
            "desc": "Remove unused variable '_i'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'i' is not defined.",
        "line": 175,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 175,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 11,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport {\n  ExclamationTriangleIcon,\n  InformationCircleIcon,\n  CheckCircleIcon,\n  XCircleIcon,\n  BellIcon,\n  XMarkIcon\n} from '@heroicons/react/24/outline';\n\nconst alertIcons = {\n  critical: XCircleIcon,\n  warning: ExclamationTriangleIcon,\n  info: InformationCircleIcon,\n  success: CheckCircleIcon\n};\n\nconst alertStyles = {\n  critical: {\n    bg: 'bg-red-50 dark:bg-red-900/20',\n    border: 'border-red-200 dark:border-red-800',\n    icon: 'text-red-600 dark:text-red-400',\n    title: 'text-red-900 dark:text-red-200',\n    text: 'text-red-700 dark:text-red-300'\n  },\n  warning: {\n    bg: 'bg-yellow-50 dark:bg-yellow-900/20',\n    border: 'border-yellow-200 dark:border-yellow-800',\n    icon: 'text-yellow-600 dark:text-yellow-400',\n    title: 'text-yellow-900 dark:text-yellow-200',\n    text: 'text-yellow-700 dark:text-yellow-300'\n  },\n  info: {\n    bg: 'bg-blue-50 dark:bg-blue-900/20',\n    border: 'border-blue-200 dark:border-blue-800',\n    icon: 'text-blue-600 dark:text-blue-400',\n    title: 'text-blue-900 dark:text-blue-200',\n    text: 'text-blue-700 dark:text-blue-300'\n  },\n  success: {\n    bg: 'bg-green-50 dark:bg-green-900/20',\n    border: 'border-green-200 dark:border-green-800',\n    icon: 'text-green-600 dark:text-green-400',\n    title: 'text-green-900 dark:text-green-200',\n    text: 'text-green-700 dark:text-green-300'\n  }\n};\n\nexport default function AlertWidget({\n  alerts = [],\n  maxAlerts = 5,\n  showDismiss = true,\n  onDismiss = null,\n  autoHide = false,\n  autoHideDelay = 5000\n}) {\n  const [visibleAlerts, setVisibleAlerts] = useState([]);\n  const [dismissedAlerts, setDismissedAlerts] = useState(new Set());\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    // Initialize alerts\n    const loadAlerts = () => {\n      setLoading(true);\n\n      // Use provided alerts or generate mock alerts\n      const alertsToShow = alerts.length > 0 ? alerts : generateMockAlerts();\n\n      // Filter out dismissed alerts and limit to maxAlerts\n      const filteredAlerts = alertsToShow\n        .filter(alert => !dismissedAlerts.has(alert.id))\n        .slice(0, maxAlerts);\n\n      setVisibleAlerts(filteredAlerts);\n      setLoading(false);\n    };\n\n    loadAlerts();\n\n    // Set up auto-hide if enabled\n    if (autoHide) {\n      const timers = visibleAlerts.map(alert => {\n        return _setTimeout(() => {\n          handleDismiss(alert.id);\n        }, autoHideDelay);\n      });\n\n      return () => {\n        timers.forEach(timer => clearTimeout(timer));\n      };\n    }\n  }, [alerts, maxAlerts, autoHide, autoHideDelay]);\n\n  const generateMockAlerts = () => {\n    return [\n      {\n        id: 'alert-1',\n        severity: 'critical',\n        title: 'Production Line Stopped',\n        message: 'Line 3 has stopped due to equipment failure. Immediate attention required.',\n        timestamp: new Date(Date.now() - 5 * 60000).toISOString(),\n        action: {\n          label: 'View Details',\n          url: '/production/line-3'\n        }\n      },\n      {\n        id: 'alert-2',\n        severity: 'warning',\n        title: 'Low Inventory Alert',\n        message: 'Raw material stock for Product A is below reorder point.',\n        timestamp: new Date(Date.now() - 30 * 60000).toISOString(),\n        action: {\n          label: 'Reorder',\n          url: '/inventory/reorder'\n        }\n      },\n      {\n        id: 'alert-3',\n        severity: 'info',\n        title: 'Scheduled Maintenance',\n        message: 'Maintenance scheduled for Line 2 tomorrow at 2:00 PM.',\n        timestamp: new Date(Date.now() - 60 * 60000).toISOString()\n      },\n      {\n        id: 'alert-4',\n        severity: 'success',\n        title: 'Quality Target Achieved',\n        message: 'Quality rate has exceeded 99% for the past week.',\n        timestamp: new Date(Date.now() - 120 * 60000).toISOString()\n      }\n    ];\n  };\n\n  const handleDismiss = (_alertId) => {\n    setDismissedAlerts(prev => new Set(prev).add(alertId));\n    setVisibleAlerts(prev => prev.filter(alert => alert.id !== alertId));\n\n    if (onDismiss) {\n      onDismiss(alertId);\n    }\n  };\n\n  const formatTimestamp = (_timestamp) => {\n    if (!timestamp) return '';\n\n    const date = new Date(timestamp);\n    const now = new Date();\n    const diffMs = now - date;\n    const diffMins = Math.floor(diffMs / 60000);\n\n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;\n\n    const diffHours = Math.floor(diffMins / 60);\n    if (diffHours < 24) return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n\n    const diffDays = Math.floor(diffHours / 24);\n    if (diffDays < 7) return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n\n    return date.toLocaleDateString();\n  };\n\n  if (loading) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            System Alerts\n          </h3>\n          <BellIcon className=\"h-5 w-5 text-gray-400\" />\n        </div>\n        <div className=\"space-y-3\">\n          {[...Array(2)].map((_, _i) => (\n            <div key={i} className=\"animate-pulse\">\n              <div className=\"h-16 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            </div>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n            System Alerts\n          </h3>\n          <div className=\"flex items-center space-x-2\">\n            {visibleAlerts.length > 0 && (\n              <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300\">\n                {visibleAlerts.length} Active\n              </span>\n            )}\n            <BellIcon className=\"h-5 w-5 text-gray-400\" />\n          </div>\n        </div>\n\n        {visibleAlerts.length > 0 ? (\n          <div className=\"space-y-3\">\n            {visibleAlerts.map((alert) => {\n              const Icon = alertIcons[alert.severity] || alertIcons.info;\n              const styles = alertStyles[alert.severity] || alertStyles.info;\n\n              return (\n                <div\n                  key={alert.id}\n                  className={`relative p-4 rounded-lg border ${styles.bg} ${styles.border} transition-all hover:shadow-md`}\n                >\n                  <div className=\"flex items-start\">\n                    <Icon className={`h-5 w-5 ${styles.icon} mt-0.5 flex-shrink-0`} />\n\n                    <div className=\"ml-3 flex-1\">\n                      <h4 className={`text-sm font-medium ${styles.title}`}>\n                        {alert.title}\n                      </h4>\n                      <p className={`text-sm mt-1 ${styles.text}`}>\n                        {alert.message}\n                      </p>\n\n                      <div className=\"flex items-center justify-between mt-3\">\n                        <span className=\"text-xs text-gray-500 dark:text-gray-400\">\n                          {formatTimestamp(alert.timestamp)}\n                        </span>\n\n                        {alert.action && (\n                          <button\n                            onClick={() => window.location.href = alert.action.url}\n                            className={`text-xs font-medium ${styles.icon} hover:underline`}\n                          >\n                            {alert.action.label} →\n                          </button>\n                        )}\n                      </div>\n                    </div>\n\n                    {showDismiss && (\n                      <button\n                        onClick={() => handleDismiss(alert.id)}\n                        className=\"ml-3 flex-shrink-0 hover:bg-gray-200 dark:hover:bg-gray-600 rounded p-1 transition-colors\"\n                        aria-label=\"Dismiss alert\"\n                      >\n                        <XMarkIcon className=\"h-4 w-4 text-gray-400\" />\n                      </button>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"text-center py-8\">\n            <CheckCircleIcon className=\"h-12 w-12 text-green-400 mx-auto mb-3\" />\n            <p className=\"text-sm text-gray-500 dark:text-gray-400\">\n              No active alerts\n            </p>\n            <p className=\"text-xs text-gray-400 dark:text-gray-500 mt-1\">\n              System operating normally\n            </p>\n          </div>\n        )}\n\n        {visibleAlerts.length > 0 && (\n          <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n            <button className=\"text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium transition-colors\">\n              View all alerts →\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\widgets\\ChartWidget.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\widgets\\DataTableWidget.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\components\\widgets\\KPIWidget.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\context\\SSEProvider.jsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Unexpected token ==",
        "line": 136,
        "column": 33
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { devLog } from '../lib/devLog.js';\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useSSE } from '../hooks/useSSE';\nimport { useQueryClient } from '@tanstack/react-query';\n\nconst SSEContext = createContext();\n\nexport const useSSEContext = () => {\n  const context = useContext(SSEContext);\n  if (!context) {\n    throw new Error('useSSEContext must be used within an SSEProvider');\n  }\n  return context;\n};\n\nexport const SSEProvider = ({ children }) => {\n  const queryClient = useQueryClient();\n  const [globalLiveUpdates, setGlobalLiveUpdates] = useState(true);\n  const [connectionStats, setConnectionStats] = useState({\n    eventsReceived: 0,\n    lastEventTime: null,\n    uptime: null\n  });\n\n  // Main SSE connection for all manufacturing events\n  const mainConnection = useSSE({\n    endpoint: '/api/events',\n    enabled: globalLiveUpdates,\n    onConnect: () => {\n      setConnectionStats(prev => ({\n        ...prev,\n        uptime: Date.now()\n      }));\n    },\n    onMessage: (eventType, data) => {\n      setConnectionStats(prev => ({\n        ...prev,\n        eventsReceived: prev.eventsReceived + 1,\n        lastEventTime: Date.now()\n      }));\n\n      // Global event handlers that affect multiple components\n      handleGlobalSSEEvent(eventType, data, queryClient);\n    },\n    onError: (error) => {\n      devLog.error('Global SSE connection error:', error);\n    }\n  });\n\n  const value = {\n    // Connection status\n    isConnected: mainConnection.isConnected,\n    isConnecting: mainConnection.isConnecting,\n    hasError: mainConnection.hasError,\n    connectionStats,\n    \n    // Global controls\n    globalLiveUpdates,\n    setGlobalLiveUpdates,\n    \n    // Connection management\n    reconnect: mainConnection.reconnect,\n    disconnect: mainConnection.disconnect\n  };\n\n  return (\n    <SSEContext.Provider value={value}>\n      {children}\n    </SSEContext.Provider>\n  );\n};\n\n// Global event handler for cross-component updates\nconst handleGlobalSSEEvent = (_eventType, data, queryClient) => {\n  switch (eventType) {\n    case 'system.maintenance.start':\n      // Show maintenance banner across all components\n      queryClient.setQueryData(['system-status'], (old) => ({\n        ...old,\n        maintenance: true,\n        maintenanceMessage: data.message,\n        maintenanceStartTime: Date.now()\n      }));\n      break;\n\n    case 'system.maintenance.end':\n      queryClient.setQueryData(['system-status'], (old) => ({\n        ...old,\n        maintenance: false,\n        maintenanceMessage: null,\n        maintenanceStartTime: null\n      }));\n      break;\n\n    case 'system.alert.critical':\n      // Global critical alerts that should show everywhere\n      queryClient.setQueryData(['global-alerts'], (old) => [\n        data,\n        ...(old || []).slice(0, 4)\n      ]);\n      break;\n\n    case 'metrics.global.updated':\n      // Update global metrics used by dashboard widgets\n      queryClient.invalidateQueries({ queryKey: ['dashboard-metrics'] });\n      queryClient.invalidateQueries({ queryKey: ['kpi-metrics'] });\n      break;\n\n    case 'inventory.critical.low':\n      // Critical inventory alerts affect production planning\n      queryClient.invalidateQueries({ queryKey: ['inventory'] });\n      queryClient.invalidateQueries({ queryKey: ['production-planning'] });\n      break;\n\n    case 'quality.batch.rejected':\n      // Rejected batches affect inventory and production schedules\n      queryClient.invalidateQueries({ queryKey: ['inventory'] });\n      queryClient.invalidateQueries({ queryKey: ['production'] });\n      queryClient.invalidateQueries({ queryKey: ['quality'] });\n      break;\n\n    case 'production.line.emergency':\n      // Emergency stops affect all related systems\n      queryClient.invalidateQueries({ queryKey: ['production'] });\n      queryClient.invalidateQueries({ queryKey: ['capacity-planning'] });\n      break;\n\n    case 'forecast.model.updated':\n      // New forecast models affect demand planning\n      queryClient.invalidateQueries({ queryKey: ['demand-forecast'] });\n      queryClient.invalidateQueries({ queryKey: ['inventory-planning'] });\n      break;\n\n    default:\n      // Log unknown events for debugging\n      if (process.env.NODEENV = == 'development') {\n        devLog.log('Unhandled SSE event:', eventType, data);\n      }\n      break;\n  }\n};\n\n// Hook for showing connection status indicator\nexport const useSSEStatus = () => {\n  const { isConnected, connectionStats, globalLiveUpdates } = useSSEContext();\n  \n  return {\n    isConnected,\n    isActive: globalLiveUpdates,\n    eventsReceived: connectionStats.eventsReceived,\n    lastEventTime: connectionStats.lastEventTime,\n    uptime: connectionStats.uptime ? Date.now() - connectionStats.uptime : null\n  };\n};\n\n// Hook for global SSE controls\nexport const useSSEControls = () => {\n  const { \n    globalLiveUpdates, \n    setGlobalLiveUpdates, \n    reconnect, \n    disconnect \n  } = useSSEContext();\n\n  return {\n    isEnabled: globalLiveUpdates,\n    enable: () => setGlobalLiveUpdates(true),\n    disable: () => setGlobalLiveUpdates(false),\n    toggle: () => setGlobalLiveUpdates(prev => !prev),\n    reconnect,\n    disconnect\n  };\n};",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\contexts\\MicrosoftAuthContext.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 2,
        "column": 54,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [94, 105], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      },
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 43,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 43,
        "endColumn": 30
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'_graphScopes' is not defined.",
        "line": 61,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 61,
        "endColumn": 56
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'_graphScopes' is not defined.",
        "line": 87,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 87,
        "endColumn": 54
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { devLog } from '../lib/devLog.js';\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { PublicClientApplication, InteractionRequiredAuthError } from '@azure/msal-browser';\nimport { MsalProvider, useMsal, useAccount, useIsAuthenticated } from '@azure/msal-react';\n\n// MSAL configuration\nconst msalConfig = {\n  auth: {\n    clientId: import.meta.env.VITE_MICROSOFT_CLIENT_ID || 'your-client-id-here',\n    authority: 'https://login.microsoftonline.com/common',\n    redirectUri: window.location.origin,\n    postLogoutRedirectUri: window.location.origin\n  },\n  cache: {\n    cacheLocation: 'localStorage',\n    storeAuthStateInCookie: false\n  }\n};\n\n// Graph API scopes\nconst graphScopes = {\n  // Basic user info and file access\n  basic: [\n    'User.Read',\n    'Files.Read',\n    'Files.Read.All'\n  ],\n  // SharePoint and advanced permissions\n  advanced: [\n    'User.Read',\n    'Files.ReadWrite',\n    'Files.ReadWrite.All', \n    'Sites.Read.All',\n    'Sites.ReadWrite.All'\n  ]\n};\n\n// Create MSAL instance\nconst msalInstance = new PublicClientApplication(msalConfig);\n\nconst MicrosoftAuthContext = createContext();\n\nexport const useMicrosoftAuth = () => {\n  const context = useContext(MicrosoftAuthContext);\n  if (!context) {\n    throw new Error('useMicrosoftAuth must be used within MicrosoftAuthProvider');\n  }\n  return context;\n};\n\nconst MicrosoftAuthContextProvider = ({ children }) => {\n  const { instance, accounts } = useMsal();\n  const account = useAccount(accounts[0] || {});\n  const isAuthenticated = useIsAuthenticated();\n  \n  const [accessToken, setAccessToken] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Login to Microsoft\n  const loginToMicrosoft = async (scopes = _graphScopes.basic) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      const loginRequest = {\n        scopes: scopes,\n        prompt: 'select_account'\n      };\n      \n      const response = await instance.loginPopup(loginRequest);\n      \n      if (response.account) {\n        setAccessToken(response.accessToken);\n        return response;\n      }\n    } catch (error) {\n      devLog.error('Microsoft login error:', error);\n      setError(error.message);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Get access token silently\n  const getAccessToken = async (scopes = _graphScopes.basic) => {\n    if (!account) {\n      throw new Error('No account found. Please login first.');\n    }\n    \n    try {\n      const silentRequest = {\n        scopes: scopes,\n        account: account\n      };\n      \n      const response = await instance.acquireTokenSilent(silentRequest);\n      setAccessToken(response.accessToken);\n      return response.accessToken;\n    } catch (error) {\n      if (error instanceof InteractionRequiredAuthError) {\n        // Fallback to interactive method\n        const response = await instance.acquireTokenPopup({\n          scopes: scopes,\n          account: account\n        });\n        setAccessToken(response.accessToken);\n        return response.accessToken;\n      }\n      throw error;\n    }\n  };\n\n  // Logout from Microsoft\n  const logoutFromMicrosoft = async () => {\n    setIsLoading(true);\n    try {\n      await instance.logoutPopup({\n        account: account,\n        postLogoutRedirectUri: window.location.origin\n      });\n      setAccessToken(null);\n    } catch (error) {\n      devLog.error('Microsoft logout error:', error);\n      setError(error.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Check if user has advanced permissions\n  const hasAdvancedPermissions = () => {\n    return accessToken && account?.idTokenClaims?.scp?.includes('Sites.Read.All');\n  };\n\n  // Request advanced permissions\n  const requestAdvancedPermissions = async () => {\n    return await getAccessToken(graphScopes.advanced);\n  };\n\n  // Get current user info\n  const getUserInfo = () => {\n    if (!account) return null;\n    \n    return {\n      displayName: account.name,\n      username: account.username,\n      email: account.username,\n      id: account.localAccountId,\n      tenantId: account.tenantId\n    };\n  };\n\n  const value = {\n    // State\n    isAuthenticated,\n    account,\n    accessToken,\n    isLoading,\n    error,\n    userInfo: getUserInfo(),\n    \n    // Actions\n    loginToMicrosoft,\n    logoutFromMicrosoft,\n    getAccessToken,\n    hasAdvancedPermissions,\n    requestAdvancedPermissions,\n    \n    // Utilities\n    clearError: () => setError(null)\n  };\n\n  return (\n    <MicrosoftAuthContext.Provider value={value}>\n      {children}\n    </MicrosoftAuthContext.Provider>\n  );\n};\n\n// Main provider that wraps both MSAL and our context\nexport const MicrosoftAuthProvider = ({ children }) => {\n  return (\n    <MsalProvider instance={msalInstance}>\n      <MicrosoftAuthContextProvider>\n        {children}\n      </MicrosoftAuthContextProvider>\n    </MsalProvider>\n  );\n};\n\nexport default MicrosoftAuthProvider;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\ai-analytics\\components\\AIInsights.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_timestamp' is defined but never used.",
        "line": 72,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_timestamp" },
            "fix": { "range": [2471, 2481], "text": "" },
            "desc": "Remove unused variable '_timestamp'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'timestamp' is not defined.",
        "line": 74,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 74,
        "endColumn": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, memo } from 'react'\nimport {\n  ExclamationTriangleIcon,\n  LightBulbIcon,\n  ChartBarIcon,\n  BeakerIcon,\n  EyeIcon,\n  PlayIcon,\n  ClockIcon,\n  FireIcon\n} from '@heroicons/react/24/solid'\nimport { useAIMetrics } from '../hooks/useAIMetrics'\n\nconst AIInsights = memo(function AIInsights({ onInsightClick, onActionClick }) {\n  const [selectedCategory, setSelectedCategory] = useState('all')\n  const [selectedSeverity, setSelectedSeverity] = useState('all')\n  const { data: aiMetrics, loading, error } = useAIMetrics()\n\n  const getSeverityIcon = (severity) => {\n    switch (severity) {\n      case 'high':\n        return <ExclamationTriangleIcon className=\"h-5 w-5 text-red-500\" />\n      case 'medium':\n        return <ExclamationTriangleIcon className=\"h-5 w-5 text-yellow-500\" />\n      case 'low':\n        return <LightBulbIcon className=\"h-5 w-5 text-blue-500\" />\n      default:\n        return <EyeIcon className=\"h-5 w-5 text-gray-500\" />\n    }\n  }\n\n  const getTypeIcon = (type) => {\n    switch (type) {\n      case 'anomaly':\n        return <ExclamationTriangleIcon className=\"h-4 w-4\" />\n      case 'prediction':\n        return <ChartBarIcon className=\"h-4 w-4\" />\n      case 'optimization':\n        return <LightBulbIcon className=\"h-4 w-4\" />\n      case 'quality':\n        return <BeakerIcon className=\"h-4 w-4\" />\n      default:\n        return <EyeIcon className=\"h-4 w-4\" />\n    }\n  }\n\n  const getSeverityColor = (severity) => {\n    switch (severity) {\n      case 'high':\n        return 'border-red-200 bg-red-50 dark:border-red-800 dark:bg-red-900/20'\n      case 'medium':\n        return 'border-yellow-200 bg-yellow-50 dark:border-yellow-800 dark:bg-yellow-900/20'\n      case 'low':\n        return 'border-blue-200 bg-blue-50 dark:border-blue-800 dark:bg-blue-900/20'\n      default:\n        return 'border-gray-200 bg-gray-50 dark:border-gray-700 dark:bg-gray-800'\n    }\n  }\n\n  const getConfidenceColor = (confidence) => {\n    if (confidence >= 90) return 'text-green-600 dark:text-green-400'\n    if (confidence >= 70) return 'text-blue-600 dark:text-blue-400'\n    return 'text-yellow-600 dark:text-yellow-400'\n  }\n\n  const filteredInsights = aiMetrics?.insights?.filter(insight => {\n    const categoryMatch = selectedCategory === 'all' || insight.category === selectedCategory\n    const severityMatch = selectedSeverity === 'all' || insight.severity === selectedSeverity\n    return categoryMatch && severityMatch\n  }) || []\n\n  const getTimeAgo = (_timestamp) => {\n    const now = new Date()\n    const time = new Date(timestamp)\n    const diffInMinutes = Math.floor((now - time) / (1000 * 60))\n\n    if (diffInMinutes < 1) return 'Just now'\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`\n    return `${Math.floor(diffInMinutes / 1440)}d ago`\n  }\n\n  if (loading) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-6 bg-gray-200 dark:bg-gray-700 rounded w-1/4 mb-4\"></div>\n          <div className=\"space-y-3\">\n            {[1, 2, 3].map(i => (\n              <div key={i} className=\"h-20 bg-gray-200 dark:bg-gray-700 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"text-center text-red-600 dark:text-red-400\">\n          <ExclamationTriangleIcon className=\"h-12 w-12 mx-auto mb-4\" />\n          <p>Failed to load AI insights</p>\n          <p className=\"text-sm mt-2\">{error.message}</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n          <div className=\"flex items-center\">\n            <FireIcon className=\"h-8 w-8 text-red-500 mr-3\" />\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">High Priority</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {aiMetrics?.insights?.filter(i => i.severity === 'high').length || 0}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n          <div className=\"flex items-center\">\n            <ExclamationTriangleIcon className=\"h-8 w-8 text-yellow-500 mr-3\" />\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Medium Priority</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {aiMetrics?.insights?.filter(i => i.severity === 'medium').length || 0}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n          <div className=\"flex items-center\">\n            <LightBulbIcon className=\"h-8 w-8 text-blue-500 mr-3\" />\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Optimizations</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {aiMetrics?.insights?.filter(i => i.type === 'optimization').length || 0}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n          <div className=\"flex items-center\">\n            <ChartBarIcon className=\"h-8 w-8 text-green-500 mr-3\" />\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Avg Confidence</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {aiMetrics?.insights?.length > 0\n                  ? Math.round(aiMetrics.insights.reduce((sum, i) => sum + i.confidence, 0) / aiMetrics.insights.length)\n                  : 0}%\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-4\">\n        <div className=\"flex flex-wrap items-center space-x-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              Category\n            </label>\n            <select\n              value={selectedCategory}\n              onChange={(e) => setSelectedCategory(e.target.value)}\n              className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\n            >\n              <option value=\"all\">All Categories</option>\n              <option value=\"production\">Production</option>\n              <option value=\"inventory\">Inventory</option>\n              <option value=\"quality\">Quality</option>\n              <option value=\"energy\">Energy</option>\n              <option value=\"financial\">Financial</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n              Severity\n            </label>\n            <select\n              value={selectedSeverity}\n              onChange={(e) => setSelectedSeverity(e.target.value)}\n              className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\n            >\n              <option value=\"all\">All Severities</option>\n              <option value=\"high\">High</option>\n              <option value=\"medium\">Medium</option>\n              <option value=\"low\">Low</option>\n            </select>\n          </div>\n\n          <div className=\"ml-auto\">\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Showing {filteredInsights.length} of {aiMetrics?.insights?.length || 0} insights\n            </p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"space-y-4\">\n        {filteredInsights.length === 0 ? (\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-8 text-center\">\n            <EyeIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-2\">No insights found</h3>\n            <p className=\"text-gray-600 dark:text-gray-400\">\n              Try adjusting your filters or check back later for new insights.\n            </p>\n          </div>\n        ) : (\n          filteredInsights.map((insight) => (\n            <div\n              key={insight.id}\n              className={`border rounded-lg p-6 ${getSeverityColor(insight.severity)} hover:shadow-md transition-shadow cursor-pointer`}\n              onClick={() => onInsightClick && onInsightClick(insight)}\n            >\n              <div className=\"flex items-start justify-between mb-4\">\n                <div className=\"flex items-center space-x-3\">\n                  {getSeverityIcon(insight.severity)}\n                  <div>\n                    <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                      {insight.title}\n                    </h3>\n                    <div className=\"flex items-center space-x-2 mt-1\">\n                      <div className=\"flex items-center space-x-1 text-xs text-gray-500 dark:text-gray-400\">\n                        {getTypeIcon(insight.type)}\n                        <span className=\"capitalize\">{insight.type}</span>\n                      </div>\n                      <span className=\"text-gray-300 dark:text-gray-600\">•</span>\n                      <div className=\"flex items-center space-x-1 text-xs text-gray-500 dark:text-gray-400\">\n                        <ClockIcon className=\"h-3 w-3\" />\n                        <span>{getTimeAgo(insight.timestamp)}</span>\n                      </div>\n                      <span className=\"text-gray-300 dark:text-gray-600\">•</span>\n                      <span className=\"text-xs font-medium capitalize px-2 py-1 rounded-full bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300\">\n                        {insight.category}\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"text-right\">\n                    <div className={`text-lg font-bold ${getConfidenceColor(insight.confidence)}`}>\n                      {insight.confidence}%\n                    </div>\n                    <div className=\"text-xs text-gray-500 dark:text-gray-400\">confidence</div>\n                  </div>\n\n                  <button\n                    onClick={(e) => {\n                      e.stopPropagation()\n                      onActionClick && onActionClick(insight)\n                    }}\n                    className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition flex items-center text-sm\"\n                  >\n                    <PlayIcon className=\"h-4 w-4 mr-1\" />\n                    Take Action\n                  </button>\n                </div>\n              </div>\n\n              <p className=\"text-gray-700 dark:text-gray-300 mb-4\">\n                {insight.description}\n              </p>\n\n              <div className=\"bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-3\">\n                <h4 className=\"text-sm font-medium text-blue-800 dark:text-blue-200 mb-1\">\n                  Recommended Action:\n                </h4>\n                <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                  {insight.recommendation}\n                </p>\n              </div>\n            </div>\n          ))\n        )}\n      </div>\n    </div>\n  )\n})\n\nexport { AIInsights }\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\ai-assistant\\AssistantPanel.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\ai-assistant\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\auth\\hooks\\useAuthRole.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_requiredRole' is defined but never used.",
        "line": 19,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_requiredRole" },
            "fix": { "range": [425, 438], "text": "" },
            "desc": "Remove unused variable '_requiredRole'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'requiredRole' is not defined.",
        "line": 21,
        "column": 53,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 21,
        "endColumn": 65
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_permission' is defined but never used.",
        "line": 24,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_permission" },
            "fix": { "range": [588, 599], "text": "" },
            "desc": "Remove unused variable '_permission'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'permission' is not defined.",
        "line": 28,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 28,
        "endColumn": 43
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_resource' is defined but never used.",
        "line": 31,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 31,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_resource" },
            "fix": { "range": [791, 800], "text": "" },
            "desc": "Remove unused variable '_resource'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'resource' is not defined.",
        "line": 43,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 43,
        "endColumn": 44
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useAuth } from '@clerk/clerk-react'\n\n/**\n * Custom hook for role-based access control\n * Provides utility functions for checking user permissions\n */\nexport function useAuthRole() {\n  const { isLoaded, isSignedIn, sessionClaims } = useAuth()\n\n  const userRole = sessionClaims?.metadata?.role || 'viewer'\n\n  const roleHierarchy = {\n    viewer: 0,\n    operator: 1,\n    manager: 2,\n    admin: 3\n  }\n\n  const hasRole = (_requiredRole) => {\n    if (!isLoaded || !isSignedIn) return false\n    return roleHierarchy[userRole] >= roleHierarchy[requiredRole]\n  }\n\n  const hasPermission = (_permission) => {\n    if (!isLoaded || !isSignedIn) return false\n\n    const permissions = sessionClaims?.metadata?.permissions || []\n    return permissions.includes(permission)\n  }\n\n  const canAccess = (_resource) => {\n    const accessMap = {\n      dashboard: ['viewer', 'operator', 'manager', 'admin'],\n      workingCapital: ['manager', 'admin'],\n      whatIf: ['manager', 'admin'],\n      production: ['operator', 'manager', 'admin'],\n      inventory: ['operator', 'manager', 'admin'],\n      admin: ['admin'],\n      reports: ['manager', 'admin'],\n      settings: ['admin']\n    }\n\n    const allowedRoles = accessMap[resource] || []\n    return allowedRoles.includes(userRole)\n  }\n\n  return {\n    userRole,\n    hasRole,\n    hasPermission,\n    canAccess,\n    isAdmin: userRole === 'admin',\n    isManager: userRole === 'manager' || userRole === 'admin',\n    isOperator: roleHierarchy[userRole] >= roleHierarchy.operator,\n    isViewer: isSignedIn\n  }\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\executive-dashboard\\components\\KPICard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\executive-dashboard\\components\\MetricsGrid.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\executive-dashboard\\hooks\\useExecutiveMetrics.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_index' is defined but never used.",
        "line": 166,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 166,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_index" },
            "fix": { "range": [4764, 4772], "text": "" },
            "desc": "Remove unused variable '_index'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 169,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 169,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react'\nimport { logWarn, logError } from '../../../utils/structuredLogger.js'\n\n// Mock data for executive metrics\nconst mockExecutiveData = {\n  kpis: [\n    {\n      id: 'revenue',\n      name: 'Monthly Revenue',\n      value: '2.4M',\n      unit: 'USD',\n      trend: 8.2,\n      target: 2.5,\n      status: 'warning'\n    },\n    {\n      id: 'cash-flow',\n      name: 'Cash Flow',\n      value: '450K',\n      unit: 'USD',\n      trend: -3.5,\n      target: 500,\n      status: 'critical'\n    },\n    {\n      id: 'oee',\n      name: 'Overall Equipment Effectiveness',\n      value: '87',\n      unit: '%',\n      trend: 2.1,\n      target: 90,\n      status: 'good'\n    },\n    {\n      id: 'customer-satisfaction',\n      name: 'Customer Satisfaction',\n      value: '94',\n      unit: '%',\n      trend: 1.5,\n      target: 95,\n      status: 'good'\n    }\n  ],\n  opportunities: [\n    {\n      title: 'Expand European Market',\n      description: 'Potential 30% growth in Q2 based on current demand trends'\n    },\n    {\n      title: 'Automation Investment',\n      description: 'ROI projection shows 18-month payback on proposed line upgrade'\n    },\n    {\n      title: 'Strategic Partnership',\n      description: 'Distribution partnership could reduce logistics costs by 15%'\n    }\n  ],\n  risks: [\n    {\n      title: 'Supply Chain Disruption',\n      impact: 'High',\n      probability: 'Medium',\n      description: 'Supplier lead times extending by 20%'\n    },\n    {\n      title: 'Currency Fluctuation',\n      impact: 'Medium',\n      probability: 'High',\n      description: 'USD/EUR volatility affecting margins'\n    },\n    {\n      title: 'Regulatory Changes',\n      impact: 'Medium',\n      probability: 'Low',\n      description: 'New compliance requirements in Q3'\n    }\n  ],\n  financialMetrics: {\n    grossMargin: { value: 42.3, trend: 0.8, target: 45 },\n    operatingMargin: { value: 18.7, trend: -0.5, target: 20 },\n    workingCapital: { value: 1.2, trend: 0.1, target: 1.5, unit: 'M USD' },\n    debtToEquity: { value: 0.35, trend: -0.02, target: 0.40 },\n    returnOnAssets: { value: 12.5, trend: 0.3, target: 15, unit: '%' },\n    inventoryTurnover: { value: 8.2, trend: 0.5, target: 10 }\n  },\n  operationalMetrics: {\n    productionVolume: { value: 125000, trend: 5000, target: 130000, unit: 'units' },\n    onTimeDelivery: { value: 96.2, trend: 1.1, target: 98, unit: '%' },\n    defectRate: { value: 0.8, trend: -0.1, target: 0.5, unit: '%' },\n    capacityUtilization: { value: 78, trend: 3, target: 85, unit: '%' },\n    leadTime: { value: 3.2, trend: -0.2, target: 3, unit: 'days' },\n    supplierPerformance: { value: 91, trend: 2, target: 95, unit: '%' }\n  }\n}\n\nconst fetchExecutiveMetrics = async (period) => {\n  // Simulate API call to MCP server\n  const mcpUrl = import.meta.env?.VITE_MCP_SERVER_URL || 'https://mcp-server-tkyu.onrender.com'\n\n  try {\n    const response = await fetch(`${mcpUrl}/v1/executive/metrics?period=${period}`, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    })\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch executive metrics')\n    }\n\n    const data = await response.json()\n    return data\n  } catch (error) {\n    logWarn('Falling back to mock executive data', { error: error.message })\n    // Return mock data with slight variations based on period\n    return {\n      ...mockExecutiveData,\n      period,\n      lastUpdated: new Date().toISOString()\n    }\n  }\n}\n\nexport const useExecutiveMetrics = (period = 'month') => {\n  const [metrics, setMetrics] = useState(null)\n  const [alerts, setAlerts] = useState([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  useEffect(() => {\n    let isMounted = true\n\n    const loadMetrics = async () => {\n      setLoading(true)\n      setError(null)\n\n      try {\n        const data = await fetchExecutiveMetrics(period)\n\n        if (!isMounted) return\n\n        setMetrics(data)\n\n        // Generate alerts based on metrics\n        const newAlerts = []\n\n        // Check for critical KPIs\n        data.kpis?.forEach(kpi => {\n          if (kpi.status === 'critical') {\n            newAlerts.push({\n              id: `kpi-${kpi.id}`,\n              severity: 'critical',\n              message: `${kpi.name} is below critical threshold (${kpi.value}${kpi.unit} vs target ${kpi.target}${kpi.unit})`\n            })\n          } else if (kpi.status === 'warning') {\n            newAlerts.push({\n              id: `kpi-${kpi.id}`,\n              severity: 'warning',\n              message: `${kpi.name} needs attention (${kpi.value}${kpi.unit} vs target ${kpi.target}${kpi.unit})`\n            })\n          }\n        })\n\n        // Check for high-impact risks\n        data.risks?.forEach((risk, _index) => {\n          if (risk.impact === 'High' && risk.probability !== 'Low') {\n            newAlerts.push({\n              id: `risk-${index}`,\n              severity: 'critical',\n              message: risk.title\n            })\n          }\n        })\n\n        setAlerts(newAlerts)\n      } catch (err) {\n        if (!isMounted) return\n\n        setError(err)\n        logError('Error loading executive metrics', err)\n      } finally {\n        if (isMounted) {\n          setLoading(false)\n        }\n      }\n    }\n\n    loadMetrics()\n\n    // Set up polling for real-time updates\n    const interval = setInterval(loadMetrics, 30000) // Update every 30 seconds\n\n    return () => {\n      isMounted = false\n      clearInterval(interval)\n    }\n  }, [period])\n\n  return {\n    metrics,\n    alerts,\n    loading,\n    error,\n    refresh: () => {\n      setLoading(true)\n      fetchExecutiveMetrics(period).then(data => {\n        setMetrics(data)\n        setLoading(false)\n      }).catch(err => {\n        setError(err)\n        setLoading(false)\n      })\n    }\n  }\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\executive\\components\\TrendChart.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\forecasting\\ForecastingDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'demandForecastingService' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 17,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 17,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "demandForecastingService" },
            "fix": { "range": [534, 612], "text": "" },
            "desc": "Remove unused variable 'demandForecastingService'."
          }
        ]
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useEffect\" is called conditionally. React Hooks must be called in the exact same order in every component render.",
        "line": 59,
        "column": 3,
        "nodeType": "Identifier",
        "endLine": 59,
        "endColumn": 12
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a missing dependency: 'dataSources'. Either include it or remove the dependency array.",
        "line": 62,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 62,
        "endColumn": 26,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [dataSources, selectedDataSource]",
            "fix": { "range": [1957, 1977], "text": "[dataSources, selectedDataSource]" }
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react'\nimport { Navigate } from 'react-router-dom'\nimport {\n  ChartLineIcon,\n  CpuChipIcon,\n  ExclamationTriangleIcon,\n  ArrowPathIcon,\n  ArrowDownTrayIcon,\n  AdjustmentsHorizontalIcon,\n  BoltIcon,\n  ClockIcon\n} from '@heroicons/react/24/solid'\nimport { useAuth } from '../../hooks/useAuth'\nimport TimeSeriesAnalysis from './components/TimeSeriesAnalysis'\nimport ForecastChart from './components/ForecastChart'\nimport { Card, CardHeader, CardTitle, CardContent } from '../../components/ui'\nimport { demandForecastingService } from './services/DemandForecastingService'\nimport { logError } from '../../utils/structuredLogger'\n\nexport default function ForecastingDashboard() {\n  const { user } = useAuth()\n  const [data, setData] = useState([])\n  const [analysis, setAnalysis] = useState(null)\n  const [loading] = useState(false)\n  const [error, setError] = useState(null)\n  const [selectedDataSource, setSelectedDataSource] = useState('demand')\n  const [selectedPeriod, setSelectedPeriod] = useState(12)\n  const [autoRefresh, setAutoRefresh] = useState(false)\n\n  // Mock data sources\n  const dataSources = {\n    demand: {\n      name: 'Product Demand',\n      description: 'Historical product demand data',\n      data: generateMockDemandData()\n    },\n    inventory: {\n      name: 'Inventory Levels',\n      description: 'Inventory level trends',\n      data: generateMockInventoryData()\n    },\n    production: {\n      name: 'Production Volume',\n      description: 'Manufacturing production volumes',\n      data: generateMockProductionData()\n    },\n    revenue: {\n      name: 'Revenue',\n      description: 'Revenue trends and patterns',\n      data: generateMockRevenueData()\n    }\n  }\n\n  // Role-based access control\n  if (user?.role === 'viewer') {\n    return <Navigate to=\"/dashboard\" replace />\n  }\n\n  useEffect(() => {\n    const sourceData = dataSources[selectedDataSource]?.data || []\n    setData(sourceData)\n  }, [selectedDataSource])\n\n  const handleForecastUpdate = (forecastResult) => {\n    setAnalysis(forecastResult)\n  }\n\n  const handleExport = async (format) => {\n    try {\n      if (!analysis) {\n        throw new Error('No analysis data to export')\n      }\n\n      const exportData = {\n        timestamp: new Date().toISOString(),\n        dataSource: selectedDataSource,\n        period: selectedPeriod,\n        analysis,\n        metadata: {\n          user: user?.firstName || 'Unknown',\n          version: '1.0'\n        }\n      }\n\n      const blob = new Blob([JSON.stringify(exportData, null, 2)], {\n        type: format === 'json' ? 'application/json' : 'text/plain'\n      })\n\n      const url = URL.createObjectURL(blob)\n      const link = document.createElement('a')\n      link.href = url\n      link.download = `forecast-analysis-${selectedDataSource}-${new Date().toISOString().split('T')[0]}.${format}`\n      link.click()\n\n      URL.revokeObjectURL(url)\n    } catch (err) {\n      logError('Export failed', err)\n      setError(err.message)\n    }\n  }\n\n  const refreshAnalysis = () => {\n    // Force re-analysis by updating a dummy state\n    setAnalysis(null)\n  }\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <CpuChipIcon className=\"h-12 w-12 animate-pulse text-blue-600 mx-auto mb-4\" />\n          <p className=\"text-gray-600 dark:text-gray-400\">Generating forecasting analysis...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white flex items-center\">\n                <ChartLineIcon className=\"h-8 w-8 mr-3 text-blue-600\" />\n                Demand Forecasting\n              </h1>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                AI-powered demand forecasting and time series analysis\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              {/* Data Source Selector */}\n              <select\n                value={selectedDataSource}\n                onChange={(e) => setSelectedDataSource(e.target.value)}\n                className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\n              >\n                {Object.entries(dataSources).map(([key, source]) => (\n                  <option key={key} value={key}>{source.name}</option>\n                ))}\n              </select>\n\n              {/* Period Selector */}\n              <select\n                value={selectedPeriod}\n                onChange={(e) => setSelectedPeriod(parseInt(e.target.value))}\n                className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\n              >\n                <option value={6}>6 Months</option>\n                <option value={12}>12 Months</option>\n                <option value={18}>18 Months</option>\n                <option value={24}>24 Months</option>\n              </select>\n\n              {/* Auto Refresh Toggle */}\n              <button\n                onClick={() => setAutoRefresh(!autoRefresh)}\n                className={`p-2 rounded-lg transition ${\n                  autoRefresh\n                    ? 'bg-green-100 text-green-600 dark:bg-green-900/20'\n                    : 'bg-gray-100 text-gray-600 dark:bg-gray-700'\n                }`}\n                title={autoRefresh ? 'Disable auto-refresh' : 'Enable auto-refresh'}\n              >\n                <BoltIcon className=\"h-5 w-5\" />\n              </button>\n\n              {/* Settings */}\n              <button\n                className=\"p-2 bg-gray-100 text-gray-600 rounded-lg hover:bg-gray-200 transition\"\n                title=\"Analysis settings\"\n              >\n                <AdjustmentsHorizontalIcon className=\"h-5 w-5\" />\n              </button>\n\n              {/* Export Menu */}\n              <div className=\"relative group\">\n                <button className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition flex items-center\">\n                  <ArrowDownTrayIcon className=\"h-5 w-5 mr-2\" />\n                  Export\n                </button>\n                <div className=\"absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10\">\n                  <button\n                    onClick={() => handleExport('json')}\n                    className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  >\n                    Export as JSON\n                  </button>\n                  <button\n                    onClick={() => handleExport('csv')}\n                    className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  >\n                    Export as CSV\n                  </button>\n                  <button\n                    onClick={() => handleExport('txt')}\n                    className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                  >\n                    Export Report\n                  </button>\n                </div>\n              </div>\n\n              {/* Refresh Button */}\n              <button\n                onClick={refreshAnalysis}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition flex items-center\"\n              >\n                <ArrowPathIcon className=\"h-5 w-5 mr-2\" />\n                Refresh\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8\">\n        {/* Error Display */}\n        {error && (\n          <Card className=\"mb-6 border-red-200\">\n            <CardContent className=\"py-4\">\n              <div className=\"flex items-center text-red-600\">\n                <ExclamationTriangleIcon className=\"h-5 w-5 mr-2\" />\n                <span className=\"font-semibold\">Analysis Error:</span>\n                <span className=\"ml-2\">{error}</span>\n                <button\n                  onClick={() => setError(null)}\n                  className=\"ml-auto text-red-600 hover:text-red-800\"\n                >\n                  ×\n                </button>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* Data Source Info */}\n        <Card className=\"mb-6\">\n          <CardContent className=\"py-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h3 className=\"font-semibold text-gray-900 dark:text-white\">\n                  Current Data Source: {dataSources[selectedDataSource]?.name}\n                </h3>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {dataSources[selectedDataSource]?.description}\n                </p>\n              </div>\n              <div className=\"text-right text-sm text-gray-600 dark:text-gray-400\">\n                <div className=\"flex items-center\">\n                  <ClockIcon className=\"h-4 w-4 mr-1\" />\n                  {data.length} data points available\n                </div>\n                {autoRefresh && (\n                  <div className=\"flex items-center text-green-600 mt-1\">\n                    <BoltIcon className=\"h-3 w-3 mr-1\" />\n                    Auto-refresh active\n                  </div>\n                )}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Time Series Analysis */}\n        <div className=\"mb-8\">\n          <TimeSeriesAnalysis\n            data={data}\n            title={`Time Series Analysis - ${dataSources[selectedDataSource]?.name}`}\n            onForecastUpdate={handleForecastUpdate}\n            autoRefresh={autoRefresh}\n            refreshInterval={30000}\n          />\n        </div>\n\n        {/* Forecast Chart */}\n        {analysis && (\n          <div className=\"mb-8\">\n            <ForecastChart\n              data={analysis.forecast}\n              scenarios={analysis.scenarios}\n              title=\"Forecast Visualization\"\n              height={500}\n              showConfidenceBands={true}\n              showScenarios={true}\n              interactive={true}\n            />\n          </div>\n        )}\n\n        {/* Additional Analytics Cards */}\n        {analysis && (\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n            {/* Model Performance */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Model Performance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {Object.entries(analysis.accuracy || {}).map(([method, metrics]) => (\n                    <div key={method} className=\"border-b border-gray-200 dark:border-gray-700 pb-3 last:border-b-0\">\n                      <h4 className=\"font-semibold capitalize text-gray-900 dark:text-white mb-2\">\n                        {method.replace('_', ' ')}\n                      </h4>\n                      <div className=\"grid grid-cols-3 gap-4 text-sm\">\n                        <div>\n                          <span className=\"text-gray-600 dark:text-gray-400\">MAPE:</span>\n                          <div className=\"font-semibold\">{metrics.mape?.toFixed(2)}%</div>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600 dark:text-gray-400\">RMSE:</span>\n                          <div className=\"font-semibold\">{metrics.rmse?.toFixed(0)}</div>\n                        </div>\n                        <div>\n                          <span className=\"text-gray-600 dark:text-gray-400\">MAE:</span>\n                          <div className=\"font-semibold\">{metrics.mae?.toFixed(0)}</div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Data Quality Assessment */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Data Quality Assessment</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {analysis.dataAnalysis?.dataQuality && (\n                  <div className=\"space-y-4\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-gray-600 dark:text-gray-400\">Overall Score:</span>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-20 bg-gray-200 rounded-full h-2 mr-3\">\n                          <div\n                            className={`h-2 rounded-full ${\n                              analysis.dataAnalysis.dataQuality.score > 0.8 ? 'bg-green-500' :\n                              analysis.dataAnalysis.dataQuality.score > 0.6 ? 'bg-yellow-500' : 'bg-red-500'\n                            }`}\n                            style={{ width: `${analysis.dataAnalysis.dataQuality.score * 100}%` }}\n                          />\n                        </div>\n                        <span className=\"font-semibold\">\n                          {Math.round(analysis.dataAnalysis.dataQuality.score * 100)}%\n                        </span>\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2 text-sm\">\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">Valid Data Ratio:</span>\n                        <span className=\"font-semibold\">\n                          {Math.round(analysis.dataAnalysis.dataQuality.validDataRatio * 100)}%\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">Interpolated Points:</span>\n                        <span className=\"font-semibold\">\n                          {analysis.dataAnalysis.dataQuality.interpolatedPoints}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between\">\n                        <span className=\"text-gray-600 dark:text-gray-400\">Consistency Score:</span>\n                        <span className=\"font-semibold\">\n                          {Math.round(analysis.dataAnalysis.dataQuality.consistencyScore * 100)}%\n                        </span>\n                      </div>\n                    </div>\n\n                    {analysis.dataAnalysis.dataQuality.recommendation && (\n                      <div className=\"mt-4 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                        <p className=\"text-sm text-blue-800 dark:text-blue-200\">\n                          <strong>Recommendation:</strong> {analysis.dataAnalysis.dataQuality.recommendation}\n                        </p>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Footer */}\n        <div className=\"text-center text-sm text-gray-500 dark:text-gray-400 pt-8 border-t border-gray-200 dark:border-gray-700\">\n          <p>Powered by AI Central Nervous System • Advanced Time Series Analysis • Real-time Forecasting</p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\n// Mock data generators\nfunction generateMockDemandData() {\n  const data = []\n  const startDate = new Date(2023, 0, 1)\n\n  for (let i = 0; i < 24; i++) {\n    const date = new Date(startDate)\n    date.setMonth(date.getMonth() + i)\n\n    // Create realistic demand pattern with seasonality and trend\n    const baseValue = 1000\n    const trendFactor = 1 + (i * 0.02) // 2% monthly growth\n    const seasonalFactor = 1 + Math.sin((i * 2 * Math.PI) / 12) * 0.3 // Annual seasonality\n    const randomFactor = 0.9 + Math.random() * 0.2 // ±10% noise\n\n    const value = baseValue * trendFactor * seasonalFactor * randomFactor\n\n    data.push({\n      date: date.toISOString(),\n      value: Math.round(value),\n      period: date.toISOString().slice(0, 7)\n    })\n  }\n\n  return data\n}\n\nfunction generateMockInventoryData() {\n  const data = []\n  const startDate = new Date(2023, 0, 1)\n\n  for (let i = 0; i < 24; i++) {\n    const date = new Date(startDate)\n    date.setMonth(date.getMonth() + i)\n\n    const baseValue = 500000\n    const cyclicalFactor = 1 + Math.sin((i * 2 * Math.PI) / 6) * 0.15 // Inventory cycles\n    const randomFactor = 0.95 + Math.random() * 0.1\n\n    const value = baseValue * cyclicalFactor * randomFactor\n\n    data.push({\n      date: date.toISOString(),\n      value: Math.round(value),\n      period: date.toISOString().slice(0, 7)\n    })\n  }\n\n  return data\n}\n\nfunction generateMockProductionData() {\n  const data = []\n  const startDate = new Date(2023, 0, 1)\n\n  for (let i = 0; i < 24; i++) {\n    const date = new Date(startDate)\n    date.setMonth(date.getMonth() + i)\n\n    const baseValue = 800\n    const efficiencyTrend = 1 + (i * 0.01) // 1% monthly improvement\n    const weekendEffect = Math.random() > 0.3 ? 1 : 0.7 // Weekend production\n    const randomFactor = 0.9 + Math.random() * 0.2\n\n    const value = baseValue * efficiencyTrend * weekendEffect * randomFactor\n\n    data.push({\n      date: date.toISOString(),\n      value: Math.round(value),\n      period: date.toISOString().slice(0, 7)\n    })\n  }\n\n  return data\n}\n\nfunction generateMockRevenueData() {\n  const data = []\n  const startDate = new Date(2023, 0, 1)\n\n  for (let i = 0; i < 24; i++) {\n    const date = new Date(startDate)\n    date.setMonth(date.getMonth() + i)\n\n    const baseValue = 250000\n    const growthTrend = 1 + (i * 0.015) // 1.5% monthly growth\n    const seasonalFactor = 1 + Math.sin((i * 2 * Math.PI) / 12 + Math.PI / 4) * 0.25 // Q4 peak\n    const marketVolatility = 0.85 + Math.random() * 0.3\n\n    const value = baseValue * growthTrend * seasonalFactor * marketVolatility\n\n    data.push({\n      date: date.toISOString(),\n      value: Math.round(value),\n      period: date.toISOString().slice(0, 7)\n    })\n  }\n\n  return data\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\forecasting\\ScenarioPlanner.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\forecasting\\components\\ForecastChart.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'onDataPointClick' is defined but never used.",
        "line": 33,
        "column": 3,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "onDataPointClick" },
            "fix": { "range": [600, 620], "text": "" },
            "desc": "Remove unused variable 'onDataPointClick'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_index' is defined but never used.",
        "line": 73,
        "column": 48,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 73,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_index" },
            "fix": { "range": [2092, 2100], "text": "" },
            "desc": "Remove unused variable '_index'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 74,
        "column": 49,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 74,
        "endColumn": 54
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'setShowConfidenceBands' is not defined.",
        "line": 230,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 230,
        "endColumn": 54
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useMemo } from 'react'\nimport { Card, CardHeader, CardTitle, CardContent } from '../../../components/ui'\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  Area,\n  AreaChart,\n  ReferenceLine,\n  Legend,\n  Brush\n} from 'recharts'\nimport {\n  ChartBarIcon,\n  EyeIcon,\n  EyeSlashIcon,\n  ArrowsUpDownIcon,\n  AdjustmentsHorizontalIcon\n} from '@heroicons/react/24/solid'\n\nconst ForecastChart = ({\n  data = [],\n  scenarios = {},\n  title = \"Forecast Chart\",\n  height = 400,\n  showConfidenceBands = true,\n  showScenarios = true,\n  className = \"\",\n  onDataPointClick,\n  interactive = true\n}) => {\n  const [visibleScenarios, setVisibleScenarios] = React.useState({\n    realistic: true,\n    optimistic: false,\n    pessimistic: false,\n    stressed: false\n  })\n  const [showBrush, setShowBrush] = React.useState(false)\n  const [chartType, setChartType] = React.useState('line') // line, area\n\n  // Process data for chart display\n  const chartData = useMemo(() => {\n    if (!data || data.length === 0) return []\n\n    const processedData = data.map((point, index) => ({\n      ...point,\n      index,\n      date: new Date(point.date).toLocaleDateString(),\n      shortDate: new Date(point.date).toLocaleDateString('en-US', {\n        month: 'short',\n        day: 'numeric'\n      }),\n      value: typeof point.value === 'number' ? Math.round(point.value) : 0,\n      confidence: point.confidence ? Math.round(point.confidence * 100) : null,\n      upperBound: point.confidence\n        ? Math.round(point.value * (1 + (1 - point.confidence) * 0.5))\n        : point.value,\n      lowerBound: point.confidence\n        ? Math.round(point.value * (1 - (1 - point.confidence) * 0.5))\n        : point.value,\n      isHistorical: !point.isForecast,\n      isForecast: point.isForecast || false\n    }))\n\n    // Add scenario data if available\n    if (showScenarios && scenarios) {\n      Object.entries(scenarios).forEach(([scenarioName, scenarioData]) => {\n        if (visibleScenarios[scenarioName] && scenarioData) {\n          scenarioData.forEach((scenarioPoint, _index) => {\n            const existingPoint = processedData[index]\n            if (existingPoint) {\n              existingPoint[`${scenarioName}Value`] = typeof scenarioPoint.value === 'number'\n                ? Math.round(scenarioPoint.value)\n                : 0\n            }\n          })\n        }\n      })\n    }\n\n    return processedData\n  }, [data, scenarios, visibleScenarios, showScenarios])\n\n  const historicalData = chartData.filter(d => d.isHistorical)\n  const forecastData = chartData.filter(d => d.isForecast)\n  const forecastStartIndex = historicalData.length - 1\n\n  const toggleScenario = (scenario) => {\n    setVisibleScenarios(prev => ({\n      ...prev,\n      [scenario]: !prev[scenario]\n    }))\n  }\n\n  const formatValue = (value) => {\n    if (typeof value !== 'number' || isNaN(value)) return '--'\n    return value.toLocaleString()\n  }\n\n  const formatTooltipValue = (value, name) => {\n    if (typeof value !== 'number' || isNaN(value)) return ['--', name]\n\n    const formattedValue = value.toLocaleString()\n    let label = name\n\n    switch (name) {\n      case 'value':\n        label = 'Actual/Forecast'\n        break\n      case 'upperBound':\n        label = 'Upper Confidence'\n        break\n      case 'lowerBound':\n        label = 'Lower Confidence'\n        break\n      case 'realisticValue':\n        label = 'Realistic Scenario'\n        break\n      case 'optimisticValue':\n        label = 'Optimistic Scenario'\n        break\n      case 'pessimisticValue':\n        label = 'Pessimistic Scenario'\n        break\n      case 'stressedValue':\n        label = 'Stressed Scenario'\n        break\n      default:\n        label = name.charAt(0).toUpperCase() + name.slice(1)\n    }\n\n    return [formattedValue, label]\n  }\n\n  const customTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length > 0) {\n      const dataPoint = payload[0].payload\n\n      return (\n        <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700\">\n          <p className=\"font-semibold text-gray-900 dark:text-white mb-2\">{label}</p>\n          <div className=\"space-y-1\">\n            {payload.map((entry, index) => {\n              const [value, name] = formatTooltipValue(entry.value, entry.dataKey)\n              return (\n                <div key={index} className=\"flex justify-between items-center\">\n                  <span\n                    className=\"text-sm\"\n                    style={{ color: entry.color }}\n                  >\n                    {name}:\n                  </span>\n                  <span className=\"font-medium ml-2\" style={{ color: entry.color }}>\n                    {value}\n                  </span>\n                </div>\n              )\n            })}\n          </div>\n          {dataPoint.confidence && (\n            <div className=\"mt-2 pt-2 border-t border-gray-200 dark:border-gray-700\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  Confidence:\n                </span>\n                <span className=\"font-medium text-gray-900 dark:text-white\">\n                  {dataPoint.confidence}%\n                </span>\n              </div>\n            </div>\n          )}\n        </div>\n      )\n    }\n    return null\n  }\n\n  if (!chartData || chartData.length === 0) {\n    return (\n      <Card className={className}>\n        <CardContent className=\"flex items-center justify-center py-12\">\n          <div className=\"text-center\">\n            <ChartBarIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <p className=\"text-gray-600 dark:text-gray-400\">No forecast data available</p>\n          </div>\n        </CardContent>\n      </Card>\n    )\n  }\n\n  const ChartComponent = chartType === 'area' ? AreaChart : LineChart\n  const DataComponent = chartType === 'area' ? Area : Line\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <ChartBarIcon className=\"h-5 w-5 mr-2 text-blue-600\" />\n            {title}\n          </CardTitle>\n\n          {interactive && (\n            <div className=\"flex items-center space-x-2\">\n              {/* Chart Type Toggle */}\n              <select\n                value={chartType}\n                onChange={(e) => setChartType(e.target.value)}\n                className=\"px-2 py-1 text-xs border border-gray-300 rounded\"\n              >\n                <option value=\"line\">Line</option>\n                <option value=\"area\">Area</option>\n              </select>\n\n              {/* Brush Toggle */}\n              <button\n                onClick={() => setShowBrush(!showBrush)}\n                className={`p-1 rounded ${showBrush ? 'bg-blue-100 text-blue-600' : 'text-gray-400'}`}\n                title=\"Toggle zoom brush\"\n              >\n                <ArrowsUpDownIcon className=\"h-4 w-4\" />\n              </button>\n\n              {/* Confidence Bands Toggle */}\n              <button\n                onClick={() => setShowConfidenceBands(!showConfidenceBands)}\n                className={`p-1 rounded ${showConfidenceBands ? 'bg-green-100 text-green-600' : 'text-gray-400'}`}\n                title=\"Toggle confidence bands\"\n              >\n                {showConfidenceBands ? <EyeIcon className=\"h-4 w-4\" /> : <EyeSlashIcon className=\"h-4 w-4\" />}\n              </button>\n\n              {/* Settings */}\n              <button\n                className=\"p-1 text-gray-400 hover:text-gray-600\"\n                title=\"Chart settings\"\n              >\n                <AdjustmentsHorizontalIcon className=\"h-4 w-4\" />\n              </button>\n            </div>\n          )}\n        </div>\n\n        {/* Scenario Toggles */}\n        {showScenarios && scenarios && Object.keys(scenarios).length > 0 && (\n          <div className=\"flex flex-wrap gap-2 mt-3\">\n            {Object.keys(scenarios).map(scenario => (\n              <button\n                key={scenario}\n                onClick={() => toggleScenario(scenario)}\n                className={`px-3 py-1 text-xs rounded-full border transition-colors ${\n                  visibleScenarios[scenario]\n                    ? 'bg-blue-100 text-blue-700 border-blue-300'\n                    : 'bg-gray-100 text-gray-600 border-gray-300 hover:bg-gray-200'\n                }`}\n              >\n                {scenario.charAt(0).toUpperCase() + scenario.slice(1)}\n              </button>\n            ))}\n          </div>\n        )}\n      </CardHeader>\n\n      <CardContent>\n        <ResponsiveContainer width=\"100%\" height={height}>\n          <ChartComponent\n            data={chartData}\n            margin={{ top: 10, right: 30, left: 20, bottom: 5 }}\n          >\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n            <XAxis\n              dataKey=\"shortDate\"\n              stroke=\"#666\"\n              fontSize={12}\n              tickLine={false}\n            />\n            <YAxis\n              stroke=\"#666\"\n              fontSize={12}\n              tickLine={false}\n              tickFormatter={formatValue}\n            />\n            <Tooltip content={customTooltip} />\n            <Legend />\n\n            {/* Confidence Bands */}\n            {showConfidenceBands && (\n              <>\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"upperBound\"\n                  stroke=\"none\"\n                  fill=\"#e0f2fe\"\n                  fillOpacity={0.3}\n                />\n                <Area\n                  type=\"monotone\"\n                  dataKey=\"lowerBound\"\n                  stroke=\"none\"\n                  fill=\"#ffffff\"\n                  fillOpacity={1}\n                />\n              </>\n            )}\n\n            {/* Main forecast line */}\n            <DataComponent\n              type=\"monotone\"\n              dataKey=\"value\"\n              stroke=\"#2563eb\"\n              strokeWidth={3}\n              fill={chartType === 'area' ? \"#3b82f6\" : undefined}\n              fillOpacity={chartType === 'area' ? 0.1 : undefined}\n              dot={{ fill: '#2563eb', strokeWidth: 2, r: 4 }}\n              activeDot={{ r: 6, stroke: '#2563eb', strokeWidth: 2 }}\n            />\n\n            {/* Scenario lines */}\n            {visibleScenarios.optimistic && (\n              <Line\n                type=\"monotone\"\n                dataKey=\"optimisticValue\"\n                stroke=\"#16a34a\"\n                strokeWidth={2}\n                strokeDasharray=\"5 5\"\n                dot={false}\n              />\n            )}\n\n            {visibleScenarios.pessimistic && (\n              <Line\n                type=\"monotone\"\n                dataKey=\"pessimisticValue\"\n                stroke=\"#dc2626\"\n                strokeWidth={2}\n                strokeDasharray=\"5 5\"\n                dot={false}\n              />\n            )}\n\n            {visibleScenarios.stressed && (\n              <Line\n                type=\"monotone\"\n                dataKey=\"stressedValue\"\n                stroke=\"#9333ea\"\n                strokeWidth={2}\n                strokeDasharray=\"10 5\"\n                dot={false}\n              />\n            )}\n\n            {/* Reference line at forecast start */}\n            {forecastStartIndex > 0 && (\n              <ReferenceLine\n                x={chartData[forecastStartIndex]?.shortDate}\n                stroke=\"#6b7280\"\n                strokeDasharray=\"2 2\"\n                label={{ value: \"Forecast Start\", position: \"top\" }}\n              />\n            )}\n\n            {/* Brush for zooming */}\n            {showBrush && (\n              <Brush\n                dataKey=\"shortDate\"\n                height={30}\n                stroke=\"#8884d8\"\n                fill=\"#f0f4ff\"\n              />\n            )}\n          </ChartComponent>\n        </ResponsiveContainer>\n\n        {/* Chart Statistics */}\n        <div className=\"mt-4 pt-4 border-t border-gray-200 dark:border-gray-700\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n            <div>\n              <span className=\"text-gray-600 dark:text-gray-400\">Historical Points:</span>\n              <span className=\"ml-2 font-semibold\">{historicalData.length}</span>\n            </div>\n            <div>\n              <span className=\"text-gray-600 dark:text-gray-400\">Forecast Points:</span>\n              <span className=\"ml-2 font-semibold\">{forecastData.length}</span>\n            </div>\n            <div>\n              <span className=\"text-gray-600 dark:text-gray-400\">Avg Confidence:</span>\n              <span className=\"ml-2 font-semibold\">\n                {forecastData.length > 0\n                  ? Math.round(\n                      forecastData.reduce((sum, d) => sum + (d.confidence || 80), 0) / forecastData.length\n                    )\n                  : '--'\n                }%\n              </span>\n            </div>\n            <div>\n              <span className=\"text-gray-600 dark:text-gray-400\">Active Scenarios:</span>\n              <span className=\"ml-2 font-semibold\">\n                {Object.values(visibleScenarios).filter(Boolean).length}\n              </span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default ForecastChart",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\forecasting\\index.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\forecasting\\services\\DemandForecastingService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_index' is defined but never used.",
        "line": 256,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 256,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_index" },
            "fix": { "range": [8148, 8156], "text": "" },
            "desc": "Remove unused variable '_index'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 257,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 257,
        "endColumn": 32
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'values' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 331,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 331,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "values" },
            "fix": { "range": [10806, 10843], "text": "" },
            "desc": "Remove unused variable 'values'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'dataAnalysis' is defined but never used.",
        "line": 440,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 440,
        "endColumn": 55,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "dataAnalysis" },
            "fix": { "range": [13937, 13951], "text": "" },
            "desc": "Remove unused variable 'dataAnalysis'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'config' is defined but never used.",
        "line": 440,
        "column": 57,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 440,
        "endColumn": 63,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "config" },
            "fix": { "range": [13951, 13959], "text": "" },
            "desc": "Remove unused variable 'config'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Demand Forecasting Service\n * Comprehensive demand forecasting using multiple algorithms and AI-powered analysis\n * Integrates with AI Central Nervous System for enhanced manufacturing intelligence\n */\n\nimport { TimeSeriesForecaster } from '../../working-capital/models/FinancialForecastModels.js'\nimport { logError } from '../../../utils/structuredLogger.js'\n\nexport class DemandForecastingService {\n  constructor(options = {}) {\n    this.options = {\n      defaultForecastPeriods: options.forecastPeriods || 12,\n      confidenceThreshold: options.confidenceThreshold || 0.7,\n      seasonalityDetectionThreshold: options.seasonalityDetectionThreshold || 0.3,\n      aiEnabled: options.aiEnabled !== false,\n      ...options\n    }\n\n    this.algorithms = {\n      LINEAR_TREND: 'linear_trend',\n      EXPONENTIAL_SMOOTHING: 'exponential_smoothing',\n      SEASONAL_DECOMPOSITION: 'seasonal_decomposition',\n      MOVING_AVERAGE: 'moving_average',\n      MACHINE_LEARNING: 'machine_learning',\n      HYBRID: 'hybrid'\n    }\n\n    this.forecastAccuracy = new Map()\n    this.modelPerformance = new Map()\n  }\n\n  /**\n   * Generate comprehensive demand forecast using multiple algorithms\n   * @param {Array} historicalData - Historical demand data with date and value\n   * @param {Object} options - Forecasting options\n   * @returns {Object} Forecast results with multiple scenarios and confidence intervals\n   */\n  async generateDemandForecast(historicalData, options = {}) {\n    const config = { ...this.options, ...options }\n\n    try {\n      // Data validation and preprocessing\n      const processedData = this.preprocessData(historicalData)\n\n      if (processedData.length < 3) {\n        throw new Error('Insufficient historical data for forecasting (minimum 3 data points required)')\n      }\n\n      // Detect seasonality and trends\n      const dataAnalysis = this.analyzeDataPatterns(processedData)\n\n      // Select optimal forecasting algorithm\n      const optimalAlgorithm = this.selectOptimalAlgorithm(processedData, dataAnalysis)\n\n      // Generate base forecasts using multiple methods\n      const forecasts = await this.generateMultipleForecasts(processedData, config)\n\n      // Calculate ensemble forecast (weighted average of multiple models)\n      const ensembleForecast = this.calculateEnsembleForecast(forecasts, dataAnalysis)\n\n      // Generate scenario-based forecasts\n      const scenarios = this.generateScenarioForecasts(ensembleForecast, dataAnalysis, config)\n\n      // Calculate forecast accuracy metrics\n      const accuracyMetrics = this.calculateAccuracyMetrics(processedData, forecasts)\n\n      // AI-powered insights and recommendations\n      const aiInsights = await this.generateAIInsights(processedData, ensembleForecast, dataAnalysis)\n\n      return {\n        forecast: ensembleForecast,\n        scenarios,\n        algorithm: optimalAlgorithm,\n        dataAnalysis,\n        accuracy: accuracyMetrics,\n        aiInsights,\n        metadata: {\n          dataPoints: processedData.length,\n          forecastPeriods: config.defaultForecastPeriods,\n          confidence: this.calculateOverallConfidence(forecasts),\n          generatedAt: new Date().toISOString(),\n          version: '2.0'\n        }\n      }\n\n    } catch (error) {\n      logError('Demand forecasting failed', error)\n      throw new Error(`Demand forecasting failed: ${error.message}`)\n    }\n  }\n\n  /**\n   * Preprocess historical data for forecasting\n   */\n  preprocessData(data) {\n    // Remove invalid entries and sort by date\n    let processed = data\n      .filter(item => item.date && typeof item.value === 'number' && !isNaN(item.value))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n\n    // Remove outliers using IQR method\n    processed = this.removeOutliers(processed)\n\n    // Fill missing data points if needed\n    processed = this.fillMissingData(processed)\n\n    return processed\n  }\n\n  /**\n   * Remove statistical outliers using Interquartile Range method\n   */\n  removeOutliers(data) {\n    const values = data.map(d => d.value).sort((a, b) => a - b)\n    const q1 = values[Math.floor(values.length * 0.25)]\n    const q3 = values[Math.floor(values.length * 0.75)]\n    const iqr = q3 - q1\n    const lowerBound = q1 - 1.5 * iqr\n    const upperBound = q3 + 1.5 * iqr\n\n    return data.filter(d => d.value >= lowerBound && d.value <= upperBound)\n  }\n\n  /**\n   * Fill missing data points using interpolation\n   */\n  fillMissingData(data) {\n    if (data.length < 2) return data\n\n    const filled = []\n    for (let i = 0; i < data.length - 1; i++) {\n      filled.push(data[i])\n\n      const currentDate = new Date(data[i].date)\n      const nextDate = new Date(data[i + 1].date)\n      const timeDiff = nextDate - currentDate\n      const monthsDiff = Math.round(timeDiff / (1000 * 60 * 60 * 24 * 30))\n\n      // Fill gaps longer than 2 months\n      if (monthsDiff > 2) {\n        for (let j = 1; j < monthsDiff; j++) {\n          const interpolatedDate = new Date(currentDate)\n          interpolatedDate.setMonth(interpolatedDate.getMonth() + j)\n\n          const interpolatedValue = data[i].value +\n            ((data[i + 1].value - data[i].value) * (j / monthsDiff))\n\n          filled.push({\n            date: interpolatedDate.toISOString(),\n            value: interpolatedValue,\n            interpolated: true\n          })\n        }\n      }\n    }\n    filled.push(data[data.length - 1])\n\n    return filled\n  }\n\n  /**\n   * Analyze data patterns for seasonality, trends, and volatility\n   */\n  analyzeDataPatterns(data) {\n    const values = data.map(d => d.value)\n\n    // Calculate basic statistics\n    const mean = values.reduce((a, b) => a + b, 0) / values.length\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length\n    const stdDev = Math.sqrt(variance)\n    const volatility = stdDev / mean\n\n    // Detect trend\n    const trend = this.detectTrend(data)\n\n    // Detect seasonality\n    const seasonality = this.detectSeasonality(data)\n\n    // Calculate autocorrelation\n    const autocorrelation = this.calculateAutocorrelation(values, 12)\n\n    return {\n      mean,\n      variance,\n      stdDev,\n      volatility,\n      trend,\n      seasonality,\n      autocorrelation,\n      dataQuality: this.assessDataQuality(data)\n    }\n  }\n\n  /**\n   * Detect trend in time series data\n   */\n  detectTrend(data) {\n    if (data.length < 3) return { type: 'none', strength: 0 }\n\n    // Calculate linear regression\n    const n = data.length\n    const sumX = n * (n - 1) / 2\n    const sumY = data.reduce((sum, point) => sum + point.value, 0)\n    const sumXY = data.reduce((sum, point, index) => sum + (index * point.value), 0)\n    const sumX2 = n * (n - 1) * (2 * n - 1) / 6\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX)\n    const rSquared = this.calculateRSquared(data, slope, sumY / n)\n\n    return {\n      type: Math.abs(slope) < 0.01 ? 'none' : slope > 0 ? 'increasing' : 'decreasing',\n      slope,\n      strength: rSquared,\n      significance: rSquared > 0.5 ? 'strong' : rSquared > 0.2 ? 'moderate' : 'weak'\n    }\n  }\n\n  /**\n   * Detect seasonality patterns\n   */\n  detectSeasonality(data) {\n    if (data.length < 24) return { present: false, period: null, strength: 0 }\n\n    // Test for common seasonal periods (3, 6, 12 months)\n    const periods = [3, 6, 12]\n    let bestPeriod = null\n    let maxStrength = 0\n\n    for (const period of periods) {\n      if (data.length >= period * 2) {\n        const strength = this.calculateSeasonalStrength(data, period)\n        if (strength > maxStrength) {\n          maxStrength = strength\n          bestPeriod = period\n        }\n      }\n    }\n\n    return {\n      present: maxStrength > this.options.seasonalityDetectionThreshold,\n      period: bestPeriod,\n      strength: maxStrength,\n      significance: maxStrength > 0.7 ? 'strong' : maxStrength > 0.4 ? 'moderate' : 'weak'\n    }\n  }\n\n  /**\n   * Calculate seasonal strength for a given period\n   */\n  calculateSeasonalStrength(data, period) {\n    const seasonalAverages = new Array(period).fill(0)\n    const seasonalCounts = new Array(period).fill(0)\n\n    // Calculate seasonal averages\n    data.forEach((point, _index) => {\n      const seasonIndex = index % period\n      seasonalAverages[seasonIndex] += point.value\n      seasonalCounts[seasonIndex]++\n    })\n\n    for (let i = 0; i < period; i++) {\n      seasonalAverages[i] = seasonalCounts[i] > 0 ? seasonalAverages[i] / seasonalCounts[i] : 0\n    }\n\n    // Calculate variance of seasonal averages\n    const overallMean = seasonalAverages.reduce((a, b) => a + b, 0) / period\n    const seasonalVariance = seasonalAverages.reduce((sum, avg) =>\n      sum + Math.pow(avg - overallMean, 2), 0) / period\n\n    // Calculate overall variance\n    const values = data.map(d => d.value)\n    const totalMean = values.reduce((a, b) => a + b, 0) / values.length\n    const totalVariance = values.reduce((sum, val) =>\n      sum + Math.pow(val - totalMean, 2), 0) / values.length\n\n    return totalVariance > 0 ? seasonalVariance / totalVariance : 0\n  }\n\n  /**\n   * Generate forecasts using multiple algorithms\n   */\n  async generateMultipleForecasts(data, config) {\n    const forecasts = {}\n\n    // Linear Trend Forecast\n    const trendForecaster = new TimeSeriesForecaster(data)\n    forecasts.linearTrend = trendForecaster.linearTrend(config.defaultForecastPeriods)\n\n    // Exponential Smoothing\n    forecasts.exponentialSmoothing = trendForecaster.exponentialSmoothing()\n\n    // Add future periods for exponential smoothing\n    const lastValue = forecasts.exponentialSmoothing[forecasts.exponentialSmoothing.length - 1].value\n    const lastDate = new Date(data[data.length - 1].date)\n\n    for (let i = 0; i < config.defaultForecastPeriods; i++) {\n      const futureDate = new Date(lastDate)\n      futureDate.setMonth(futureDate.getMonth() + i + 1)\n\n      forecasts.exponentialSmoothing.push({\n        date: futureDate.toISOString(),\n        value: lastValue * (0.98 + Math.random() * 0.04), // Small random variation\n        period: `Forecast ${i + 1}`,\n        isForecast: true,\n        method: 'Exponential Smoothing',\n        confidence: Math.max(0.5, 0.9 - (i * 0.05))\n      })\n    }\n\n    // Seasonal Forecast (if seasonality detected)\n    forecasts.seasonal = trendForecaster.seasonalForecast(config.defaultForecastPeriods)\n\n    // Moving Average\n    forecasts.movingAverage = trendForecaster.simpleMovingAverage(3)\n\n    // Machine Learning Forecast (if AI enabled)\n    if (config.aiEnabled) {\n      forecasts.machineLearning = await this.generateMLForecast(data, config)\n    }\n\n    return forecasts\n  }\n\n  /**\n   * Generate ML-based forecast using AI patterns\n   */\n  async generateMLForecast(data, config) {\n    // Simulate advanced ML forecast for now\n    // In production, this would call the AI Central Nervous System\n    const values = data.map(d => d.value)\n    const trend = this.detectTrend(data)\n\n    const mlForecast = [...data]\n    const lastDate = new Date(data[data.length - 1].date)\n    const lastValue = data[data.length - 1].value\n\n    for (let i = 0; i < config.defaultForecastPeriods; i++) {\n      const futureDate = new Date(lastDate)\n      futureDate.setMonth(futureDate.getMonth() + i + 1)\n\n      // Apply trend with some ML-like adjustments\n      let predictedValue = lastValue + (trend.slope * (i + 1))\n\n      // Add some AI-like pattern recognition\n      const cyclicalFactor = Math.sin((i * 2 * Math.PI) / 12) * 0.1\n      const momentumFactor = trend.strength * 0.2\n\n      predictedValue *= (1 + cyclicalFactor + momentumFactor)\n\n      mlForecast.push({\n        date: futureDate.toISOString(),\n        value: Math.max(0, predictedValue),\n        period: `ML Forecast ${i + 1}`,\n        isForecast: true,\n        method: 'Machine Learning',\n        confidence: Math.max(0.6, 0.95 - (i * 0.04))\n      })\n    }\n\n    return mlForecast\n  }\n\n  /**\n   * Calculate ensemble forecast as weighted average of multiple methods\n   */\n  calculateEnsembleForecast(forecasts, dataAnalysis) {\n    const methods = Object.keys(forecasts)\n    const weights = this.calculateMethodWeights(forecasts, dataAnalysis)\n\n    // Find the longest forecast to determine periods\n    const maxLength = Math.max(...methods.map(method => forecasts[method].length))\n    const ensemble = []\n\n    for (let i = 0; i < maxLength; i++) {\n      let weightedSum = 0\n      let totalWeight = 0\n      let forecastInfo = null\n\n      methods.forEach(method => {\n        if (forecasts[method][i]) {\n          const weight = weights[method] || 1\n          weightedSum += forecasts[method][i].value * weight\n          totalWeight += weight\n\n          if (!forecastInfo) {\n            forecastInfo = { ...forecasts[method][i] }\n          }\n        }\n      })\n\n      if (totalWeight > 0) {\n        ensemble.push({\n          ...forecastInfo,\n          value: weightedSum / totalWeight,\n          method: 'Ensemble',\n          contributingMethods: methods.filter(m => forecasts[m][i])\n        })\n      }\n    }\n\n    return ensemble\n  }\n\n  /**\n   * Calculate weights for different forecasting methods based on data characteristics\n   */\n  calculateMethodWeights(forecasts, dataAnalysis) {\n    const weights = {}\n\n    // Base weights\n    weights.linearTrend = 1.0\n    weights.exponentialSmoothing = 1.0\n    weights.seasonal = 1.0\n    weights.movingAverage = 0.8\n    weights.machineLearning = 1.2\n\n    // Adjust based on trend strength\n    if (dataAnalysis.trend.strength > 0.7) {\n      weights.linearTrend *= 1.5\n    }\n\n    // Adjust based on seasonality\n    if (dataAnalysis.seasonality.present && dataAnalysis.seasonality.strength > 0.5) {\n      weights.seasonal *= 2.0\n    }\n\n    // Adjust based on volatility\n    if (dataAnalysis.volatility > 0.3) {\n      weights.exponentialSmoothing *= 1.3\n      weights.movingAverage *= 1.2\n    }\n\n    return weights\n  }\n\n  /**\n   * Generate scenario-based forecasts (optimistic, pessimistic, realistic)\n   */\n  generateScenarioForecasts(baseForecast, dataAnalysis, config) {\n    const scenarios = {\n      realistic: baseForecast,\n      optimistic: this.applyScenarioMultipliers(baseForecast, {\n        growth: 1.15,\n        volatility: 0.8,\n        confidence: 1.1\n      }),\n      pessimistic: this.applyScenarioMultipliers(baseForecast, {\n        growth: 0.85,\n        volatility: 1.3,\n        confidence: 0.9\n      }),\n      stressed: this.applyScenarioMultipliers(baseForecast, {\n        growth: 0.7,\n        volatility: 1.8,\n        confidence: 0.7\n      })\n    }\n\n    return scenarios\n  }\n\n  /**\n   * Apply scenario multipliers to base forecast\n   */\n  applyScenarioMultipliers(forecast, multipliers) {\n    return forecast.map((point, index) => {\n      if (point.isForecast) {\n        const growthFactor = Math.pow(multipliers.growth, index - forecast.findIndex(p => p.isForecast) + 1)\n        const randomFactor = 1 + (Math.random() - 0.5) * 0.1 * multipliers.volatility\n\n        return {\n          ...point,\n          value: point.value * growthFactor * randomFactor,\n          confidence: (point.confidence || 0.8) * multipliers.confidence\n        }\n      }\n      return point\n    })\n  }\n\n  /**\n   * Calculate forecast accuracy metrics\n   */\n  calculateAccuracyMetrics(historicalData, forecasts) {\n    const metrics = {}\n\n    Object.keys(forecasts).forEach(method => {\n      const forecast = forecasts[method]\n      const historical = historicalData.slice(-Math.min(historicalData.length, forecast.length))\n\n      if (historical.length > 0) {\n        const mae = this.calculateMAE(historical, forecast.slice(0, historical.length))\n        const mape = this.calculateMAPE(historical, forecast.slice(0, historical.length))\n        const rmse = this.calculateRMSE(historical, forecast.slice(0, historical.length))\n\n        metrics[method] = { mae, mape, rmse }\n      }\n    })\n\n    return metrics\n  }\n\n  /**\n   * Generate AI-powered insights and recommendations\n   */\n  async generateAIInsights(historicalData, forecast, dataAnalysis) {\n    // Simulate AI insights - in production, this would call the MCP server\n    const insights = []\n\n    // Trend insights\n    if (dataAnalysis.trend.strength > 0.7) {\n      insights.push({\n        type: 'trend',\n        severity: 'info',\n        title: `Strong ${dataAnalysis.trend.type} Trend Detected`,\n        description: `Data shows a ${dataAnalysis.trend.significance} ${dataAnalysis.trend.type} trend with ${(dataAnalysis.trend.strength * 100).toFixed(1)}% confidence`,\n        recommendation: dataAnalysis.trend.type === 'increasing'\n          ? 'Consider scaling production capacity to meet growing demand'\n          : 'Implement cost optimization and efficiency measures'\n      })\n    }\n\n    // Seasonality insights\n    if (dataAnalysis.seasonality.present) {\n      insights.push({\n        type: 'seasonality',\n        severity: 'info',\n        title: 'Seasonal Pattern Identified',\n        description: `${dataAnalysis.seasonality.period}-month seasonal cycle detected with ${dataAnalysis.seasonality.significance} strength`,\n        recommendation: 'Optimize inventory levels and production scheduling based on seasonal demand patterns'\n      })\n    }\n\n    // Volatility warnings\n    if (dataAnalysis.volatility > 0.4) {\n      insights.push({\n        type: 'volatility',\n        severity: 'warning',\n        title: 'High Demand Volatility',\n        description: `Demand volatility of ${(dataAnalysis.volatility * 100).toFixed(1)}% indicates unpredictable demand patterns`,\n        recommendation: 'Implement flexible production planning and safety stock strategies'\n      })\n    }\n\n    // Forecast accuracy warnings\n    const avgConfidence = forecast\n      .filter(p => p.isForecast)\n      .reduce((sum, p) => sum + (p.confidence || 0.5), 0) /\n      forecast.filter(p => p.isForecast).length\n\n    if (avgConfidence < 0.7) {\n      insights.push({\n        type: 'accuracy',\n        severity: 'warning',\n        title: 'Low Forecast Confidence',\n        description: `Average forecast confidence of ${(avgConfidence * 100).toFixed(1)}% suggests uncertainty in predictions`,\n        recommendation: 'Collect more data points and consider external factors for improved accuracy'\n      })\n    }\n\n    return insights\n  }\n\n  /**\n   * Select optimal forecasting algorithm based on data characteristics\n   */\n  selectOptimalAlgorithm(data, analysis) {\n    // Decision tree for algorithm selection\n    if (analysis.seasonality.present && analysis.seasonality.strength > 0.5) {\n      return this.algorithms.SEASONAL_DECOMPOSITION\n    }\n\n    if (analysis.trend.strength > 0.7) {\n      return this.algorithms.LINEAR_TREND\n    }\n\n    if (analysis.volatility > 0.3) {\n      return this.algorithms.EXPONENTIAL_SMOOTHING\n    }\n\n    if (data.length > 50 && this.options.aiEnabled) {\n      return this.algorithms.MACHINE_LEARNING\n    }\n\n    return this.algorithms.HYBRID\n  }\n\n  // Utility methods for statistical calculations\n  calculateMAE(actual, predicted) {\n    const errors = actual.map((a, i) => Math.abs(a.value - (predicted[i]?.value || 0)))\n    return errors.reduce((sum, e) => sum + e, 0) / errors.length\n  }\n\n  calculateMAPE(actual, predicted) {\n    const errors = actual.map((a, i) => {\n      const pred = predicted[i]?.value || 0\n      return a.value !== 0 ? Math.abs((a.value - pred) / a.value) : 0\n    })\n    return (errors.reduce((sum, e) => sum + e, 0) / errors.length) * 100\n  }\n\n  calculateRMSE(actual, predicted) {\n    const squaredErrors = actual.map((a, i) => {\n      const pred = predicted[i]?.value || 0\n      return Math.pow(a.value - pred, 2)\n    })\n    return Math.sqrt(squaredErrors.reduce((sum, e) => sum + e, 0) / squaredErrors.length)\n  }\n\n  calculateRSquared(data, slope, intercept) {\n    const actual = data.map(d => d.value)\n    const predicted = data.map((d, i) => intercept + slope * i)\n    const actualMean = actual.reduce((a, b) => a + b, 0) / actual.length\n\n    const ssTotal = actual.reduce((sum, val) => sum + Math.pow(val - actualMean, 2), 0)\n    const ssRes = actual.reduce((sum, val, i) => sum + Math.pow(val - predicted[i], 2), 0)\n\n    return ssTotal !== 0 ? 1 - (ssRes / ssTotal) : 0\n  }\n\n  calculateAutocorrelation(values, lag) {\n    if (values.length <= lag) return 0\n\n    const mean = values.reduce((a, b) => a + b, 0) / values.length\n    let numerator = 0\n    let denominator = 0\n\n    for (let i = 0; i < values.length - lag; i++) {\n      numerator += (values[i] - mean) * (values[i + lag] - mean)\n    }\n\n    for (let i = 0; i < values.length; i++) {\n      denominator += Math.pow(values[i] - mean, 2)\n    }\n\n    return denominator !== 0 ? numerator / denominator : 0\n  }\n\n  calculateOverallConfidence(forecasts) {\n    const confidenceValues = []\n\n    Object.values(forecasts).forEach(forecast => {\n      forecast.forEach(point => {\n        if (point.confidence && point.isForecast) {\n          confidenceValues.push(point.confidence)\n        }\n      })\n    })\n\n    return confidenceValues.length > 0\n      ? confidenceValues.reduce((a, b) => a + b, 0) / confidenceValues.length\n      : 0.8\n  }\n\n  assessDataQuality(data) {\n    const interpolatedCount = data.filter(d => d.interpolated).length\n    const validDataRatio = (data.length - interpolatedCount) / data.length\n    const consistencyScore = this.calculateDataConsistency(data)\n\n    return {\n      score: (validDataRatio * 0.7 + consistencyScore * 0.3),\n      validDataRatio,\n      interpolatedPoints: interpolatedCount,\n      consistencyScore,\n      recommendation: validDataRatio < 0.8\n        ? 'Collect more historical data for improved forecast accuracy'\n        : 'Data quality is sufficient for reliable forecasting'\n    }\n  }\n\n  calculateDataConsistency(data) {\n    if (data.length < 3) return 1\n\n    const intervals = []\n    for (let i = 1; i < data.length; i++) {\n      const timeDiff = new Date(data[i].date) - new Date(data[i - 1].date)\n      intervals.push(timeDiff)\n    }\n\n    const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length\n    const variance = intervals.reduce((sum, interval) =>\n      sum + Math.pow(interval - avgInterval, 2), 0) / intervals.length\n\n    const stdDev = Math.sqrt(variance)\n    const coefficientOfVariation = avgInterval !== 0 ? stdDev / avgInterval : 0\n\n    return Math.max(0, 1 - coefficientOfVariation)\n  }\n}\n\n// Export singleton instance for easy use\nexport const demandForecastingService = new DemandForecastingService()\n\nexport default DemandForecastingService",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\forecasting\\services\\MLModelTrainingPipeline.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'validation' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 254,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 254,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "validation" },
            "fix": { "range": [7771, 7783], "text": "" },
            "desc": "Remove unused variable 'validation'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'test' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 254,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 254,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "test" },
            "fix": { "range": [7783, 7789], "text": "" },
            "desc": "Remove unused variable 'test'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_index' is defined but never used.",
        "line": 260,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 260,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_index" },
            "fix": { "range": [7954, 7962], "text": "" },
            "desc": "Remove unused variable '_index'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 261,
        "column": 15,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 261,
        "endColumn": 20
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 263,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 263,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 264,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 264,
        "endColumn": 21
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 264,
        "column": 24,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 264,
        "endColumn": 29
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_index' is defined but never used.",
        "line": 293,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 293,
        "endColumn": 33,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_index" },
            "fix": { "range": [8747, 8755], "text": "" },
            "desc": "Remove unused variable '_index'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 296,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 296,
        "endColumn": 32
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'train' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 330,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 330,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "train" },
            "fix": { "range": [9779, 9785], "text": "" },
            "desc": "Remove unused variable 'train'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'validation' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 330,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 330,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "validation" },
            "fix": { "range": [9784, 9796], "text": "" },
            "desc": "Remove unused variable 'validation'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'train' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 363,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 363,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "train" },
            "fix": { "range": [10772, 10800], "text": "" },
            "desc": "Remove unused variable 'train'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'train' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 396,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 396,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "train" },
            "fix": { "range": [11688, 11716], "text": "" },
            "desc": "Remove unused variable 'train'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'train' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 425,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 425,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "train" },
            "fix": { "range": [12464, 12492], "text": "" },
            "desc": "Remove unused variable 'train'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'train' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 453,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 453,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "train" },
            "fix": { "range": [13231, 13259], "text": "" },
            "desc": "Remove unused variable 'train'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'sumSquaredActual' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 545,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 545,
        "endColumn": 25
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_index' is defined but never used.",
        "line": 547,
        "column": 26,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 547,
        "endColumn": 32,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_index" },
            "fix": { "range": [15922, 15930], "text": "" },
            "desc": "Remove unused variable '_index'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 548,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 548,
        "endColumn": 44
      }
    ],
    "suppressedMessages": [],
    "errorCount": 18,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * ML Model Training Pipeline\n * Automated machine learning pipeline for demand forecasting and pattern recognition\n * Integrates with AI Central Nervous System for enhanced model training\n */\n\n// Import structured logger\nimport { logInfo, logWarn, logError } from '../../../utils/structuredLogger.js'\n\nexport class MLModelTrainingPipeline {\n  constructor(options = {}) {\n    this.options = {\n      maxTrainingIterations: options.maxTrainingIterations || 1000,\n      validationSplit: options.validationSplit || 0.2,\n      testSplit: options.testSplit || 0.1,\n      learningRate: options.learningRate || 0.001,\n      batchSize: options.batchSize || 32,\n      earlyStopping: options.earlyStopping !== false,\n      patience: options.patience || 10,\n      minDelta: options.minDelta || 0.001,\n      ...options\n    }\n\n    this.models = new Map()\n    this.trainingHistory = new Map()\n    this.modelMetrics = new Map()\n    this.isTraining = false\n  }\n\n  /**\n   * Train multiple ML models for time series forecasting\n   * @param {Array} data - Historical time series data\n   * @param {Object} config - Training configuration\n   * @returns {Object} Training results with model performance metrics\n   */\n  async trainForecastingModels(data, config = {}) {\n    if (this.isTraining) {\n      throw new Error('Training pipeline is already running')\n    }\n\n    this.isTraining = true\n    const startTime = Date.now()\n\n    try {\n      // Data preprocessing and validation\n      const processedData = this.preprocessTrainingData(data)\n\n      if (processedData.length < 10) {\n        throw new Error('Insufficient data for ML training (minimum 10 data points required)')\n      }\n\n      // Split data into training, validation, and test sets\n      const dataSplits = this.splitData(processedData)\n\n      // Initialize training metrics\n      const trainingResults = {\n        timestamp: new Date().toISOString(),\n        dataPoints: processedData.length,\n        trainSize: dataSplits.train.length,\n        validationSize: dataSplits.validation.length,\n        testSize: dataSplits.test.length,\n        models: {},\n        bestModel: null,\n        trainingTime: 0\n      }\n\n      // Train different model types\n      const modelTypes = [\n        'linear_regression',\n        'polynomial_regression',\n        'neural_network',\n        'random_forest',\n        'gradient_boosting',\n        'lstm',\n        'arima',\n        'ensemble'\n      ]\n\n      for (const modelType of modelTypes) {\n        try {\n          logInfo(`Training ${modelType} model`, { modelType })\n          const modelResult = await this.trainModel(modelType, dataSplits, config)\n          trainingResults.models[modelType] = modelResult\n          this.models.set(modelType, modelResult.model)\n        } catch (error) {\n          logWarn(`Failed to train ${modelType}`, { modelType, error: error.message })\n          trainingResults.models[modelType] = {\n            error: error.message,\n            trained: false\n          }\n        }\n      }\n\n      // Select best performing model\n      trainingResults.bestModel = this.selectBestModel(trainingResults.models)\n\n      // Calculate overall training time\n      trainingResults.trainingTime = Date.now() - startTime\n\n      // Store training history\n      this.trainingHistory.set(Date.now(), trainingResults)\n\n      return trainingResults\n\n    } catch (error) {\n      logError('ML training pipeline failed', error)\n      throw error\n    } finally {\n      this.isTraining = false\n    }\n  }\n\n  /**\n   * Preprocess data for ML training\n   * @param {Array} data - Raw time series data\n   * @returns {Array} Processed data suitable for training\n   */\n  preprocessTrainingData(data) {\n    // Remove invalid entries and sort by date\n    let processed = data\n      .filter(item => item.date && typeof item.value === 'number' && !isNaN(item.value))\n      .sort((a, b) => new Date(a.date) - new Date(b.date))\n\n    // Add time-based features\n    processed = processed.map((item, index) => {\n      const date = new Date(item.date)\n\n      return {\n        ...item,\n        // Time features\n        timestamp: date.getTime(),\n        dayOfWeek: date.getDay(),\n        dayOfMonth: date.getDate(),\n        month: date.getMonth(),\n        quarter: Math.floor(date.getMonth() / 3),\n        year: date.getFullYear(),\n\n        // Sequence features\n        sequenceIndex: index,\n\n        // Lag features (previous values)\n        lag1: index > 0 ? processed[index - 1].value : item.value,\n        lag2: index > 1 ? processed[index - 2].value : item.value,\n        lag3: index > 2 ? processed[index - 3].value : item.value,\n\n        // Moving averages\n        ma3: index >= 2 ? this.calculateMovingAverage(processed.slice(Math.max(0, index - 2), index + 1)) : item.value,\n        ma7: index >= 6 ? this.calculateMovingAverage(processed.slice(Math.max(0, index - 6), index + 1)) : item.value,\n\n        // Trend indicators\n        trend: index > 0 ? item.value - processed[index - 1].value : 0,\n        percentChange: index > 0 && processed[index - 1].value !== 0\n          ? (item.value - processed[index - 1].value) / processed[index - 1].value * 100\n          : 0\n      }\n    })\n\n    // Normalize values for ML training\n    const values = processed.map(p => p.value)\n    const min = Math.min(...values)\n    const max = Math.max(...values)\n    const range = max - min\n\n    processed = processed.map(item => ({\n      ...item,\n      normalizedValue: range > 0 ? (item.value - min) / range : 0.5,\n      originalValue: item.value\n    }))\n\n    return processed\n  }\n\n  /**\n   * Split data into training, validation, and test sets\n   * @param {Array} data - Preprocessed data\n   * @returns {Object} Data splits\n   */\n  splitData(data) {\n    const n = data.length\n    const trainSize = Math.floor(n * (1 - this.options.validationSplit - this.options.testSplit))\n    const validationSize = Math.floor(n * this.options.validationSplit)\n\n    return {\n      train: data.slice(0, trainSize),\n      validation: data.slice(trainSize, trainSize + validationSize),\n      test: data.slice(trainSize + validationSize)\n    }\n  }\n\n  /**\n   * Train a specific model type\n   * @param {string} modelType - Type of model to train\n   * @param {Object} dataSplits - Training, validation, and test data\n   * @param {Object} config - Model-specific configuration\n   * @returns {Object} Training result with model and metrics\n   */\n  async trainModel(modelType, dataSplits, config) {\n    const startTime = Date.now()\n    let model, metrics\n\n    switch (modelType) {\n      case 'linear_regression':\n        ({ model, metrics } = this.trainLinearRegression(dataSplits))\n        break\n\n      case 'polynomial_regression':\n        ({ model, metrics } = this.trainPolynomialRegression(dataSplits))\n        break\n\n      case 'neural_network':\n        ({ model, metrics } = await this.trainNeuralNetwork(dataSplits))\n        break\n\n      case 'random_forest':\n        ({ model, metrics } = this.trainRandomForest(dataSplits))\n        break\n\n      case 'gradient_boosting':\n        ({ model, metrics } = this.trainGradientBoosting(dataSplits))\n        break\n\n      case 'lstm':\n        ({ model, metrics } = await this.trainLSTM(dataSplits))\n        break\n\n      case 'arima':\n        ({ model, metrics } = this.trainARIMA(dataSplits))\n        break\n\n      case 'ensemble':\n        ({ model, metrics } = this.trainEnsemble(dataSplits))\n        break\n\n      default:\n        throw new Error(`Unknown model type: ${modelType}`)\n    }\n\n    const trainingTime = Date.now() - startTime\n\n    return {\n      modelType,\n      model,\n      metrics,\n      trainingTime,\n      trained: true,\n      config: config[modelType] || {}\n    }\n  }\n\n  /**\n   * Train Linear Regression model\n   */\n  trainLinearRegression(dataSplits) {\n    const { train, validation, test } = dataSplits\n\n    // Simple linear regression implementation\n    const n = train.length\n    let sumX = 0, sumY = 0, sumXY = 0, sumX2 = 0\n\n    train.forEach((point, _index) => {\n      sumX += index\n      sumY += point.normalizedValue\n      sumXY += index * point.normalizedValue\n      sumX2 += index * index\n    })\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX)\n    const intercept = (sumY - slope * sumX) / n\n\n    const model = {\n      type: 'linear_regression',\n      slope,\n      intercept,\n      predict: (x) => intercept + slope * x\n    }\n\n    // Calculate metrics\n    const metrics = this.calculateModelMetrics(model, dataSplits)\n\n    return { model, metrics }\n  }\n\n  /**\n   * Train Polynomial Regression model\n   */\n  trainPolynomialRegression(dataSplits, degree = 3) {\n    const { train } = dataSplits\n\n    // Simplified polynomial regression using least squares\n    const X = []\n    const y = []\n\n    train.forEach((point, _index) => {\n      const row = []\n      for (let d = 0; d <= degree; d++) {\n        row.push(Math.pow(index, d))\n      }\n      X.push(row)\n      y.push(point.normalizedValue)\n    })\n\n    // Mock polynomial coefficients for demonstration\n    const coefficients = new Array(degree + 1).fill(0)\n    coefficients[0] = y.reduce((a, b) => a + b, 0) / y.length // intercept\n    coefficients[1] = 0.01 // linear term\n    coefficients[2] = 0.001 // quadratic term\n    if (degree >= 3) coefficients[3] = 0.0001 // cubic term\n\n    const model = {\n      type: 'polynomial_regression',\n      degree,\n      coefficients,\n      predict: (x) => {\n        let result = 0\n        for (let i = 0; i < coefficients.length; i++) {\n          result += coefficients[i] * Math.pow(x, i)\n        }\n        return result\n      }\n    }\n\n    const metrics = this.calculateModelMetrics(model, dataSplits)\n    return { model, metrics }\n  }\n\n  /**\n   * Train Neural Network (simplified implementation)\n   */\n  async trainNeuralNetwork(dataSplits) {\n    const { train, validation } = dataSplits\n\n    // Simplified neural network simulation\n    const model = {\n      type: 'neural_network',\n      layers: [\n        { neurons: 64, activation: 'relu' },\n        { neurons: 32, activation: 'relu' },\n        { neurons: 16, activation: 'relu' },\n        { neurons: 1, activation: 'linear' }\n      ],\n      weights: this.generateRandomWeights(4),\n      predict: (x) => {\n        // Simplified forward pass\n        let output = x\n        output = Math.max(0, output * 0.8 + 0.1) // ReLU-like activation\n        output = Math.max(0, output * 0.6 + 0.05)\n        output = Math.max(0, output * 0.4 + 0.02)\n        return output * 0.2 + 0.01 // Linear output\n      }\n    }\n\n    // Simulate training process\n    await this.simulateTraining(1000)\n\n    const metrics = this.calculateModelMetrics(model, dataSplits)\n    return { model, metrics }\n  }\n\n  /**\n   * Train Random Forest (simplified implementation)\n   */\n  trainRandomForest(dataSplits, numTrees = 100) {\n    const { train } = dataSplits\n\n    const model = {\n      type: 'random_forest',\n      numTrees,\n      trees: [],\n      predict: (x) => {\n        // Simplified ensemble prediction\n        const predictions = []\n        for (let i = 0; i < Math.min(numTrees, 10); i++) {\n          const variation = (Math.random() - 0.5) * 0.1\n          predictions.push(x * (0.9 + variation) + 0.05)\n        }\n        return predictions.reduce((a, b) => a + b, 0) / predictions.length\n      }\n    }\n\n    // Generate mock trees\n    for (let i = 0; i < Math.min(numTrees, 10); i++) {\n      model.trees.push({\n        depth: Math.floor(Math.random() * 8) + 3,\n        nodes: Math.floor(Math.random() * 50) + 10\n      })\n    }\n\n    const metrics = this.calculateModelMetrics(model, dataSplits)\n    return { model, metrics }\n  }\n\n  /**\n   * Train Gradient Boosting model\n   */\n  trainGradientBoosting(dataSplits, numEstimators = 100) {\n    const { train } = dataSplits\n\n    const model = {\n      type: 'gradient_boosting',\n      numEstimators,\n      learningRate: 0.1,\n      maxDepth: 6,\n      predict: (x) => {\n        // Simplified boosting prediction\n        let prediction = x * 0.5 + 0.25 // Base prediction\n\n        // Add boosted corrections\n        for (let i = 0; i < Math.min(numEstimators, 10); i++) {\n          const correction = (Math.sin(x * (i + 1)) * 0.02) / (i + 1)\n          prediction += correction\n        }\n\n        return Math.max(0, Math.min(1, prediction))\n      }\n    }\n\n    const metrics = this.calculateModelMetrics(model, dataSplits)\n    return { model, metrics }\n  }\n\n  /**\n   * Train LSTM model (simplified implementation)\n   */\n  async trainLSTM(dataSplits, sequenceLength = 10) {\n    const { train } = dataSplits\n\n    // Simulate LSTM training\n    await this.simulateTraining(1500)\n\n    const model = {\n      type: 'lstm',\n      sequenceLength,\n      hiddenSize: 64,\n      numLayers: 2,\n      predict: (x) => {\n        // Simplified LSTM-like prediction with memory\n        const memoryFactor = Math.tanh(x * 2 - 1) // Memory gate simulation\n        const inputGate = 1 / (1 + Math.exp(-x)) // Sigmoid activation\n        const forgetGate = 1 / (1 + Math.exp(-(1 - x))) // Forget gate\n\n        return memoryFactor * inputGate * forgetGate * 0.8 + 0.1\n      }\n    }\n\n    const metrics = this.calculateModelMetrics(model, dataSplits)\n    return { model, metrics }\n  }\n\n  /**\n   * Train ARIMA model\n   */\n  trainARIMA(dataSplits, order = [2, 1, 2]) {\n    const { train } = dataSplits\n    const [p, d, q] = order\n\n    const model = {\n      type: 'arima',\n      order: { p, d, q },\n      coefficients: {\n        ar: Array(p).fill(0).map(() => 0.1 + Math.random() * 0.3),\n        ma: Array(q).fill(0).map(() => 0.1 + Math.random() * 0.2)\n      },\n      predict: (x) => {\n        // Simplified ARIMA prediction\n        let prediction = x * 0.7\n\n        // Add autoregressive terms\n        for (let i = 0; i < p; i++) {\n          prediction += model.coefficients.ar[i] * Math.pow(x, i + 1) * 0.1\n        }\n\n        // Add moving average terms\n        for (let i = 0; i < q; i++) {\n          prediction += model.coefficients.ma[i] * (0.5 - Math.random()) * 0.05\n        }\n\n        return Math.max(0, prediction)\n      }\n    }\n\n    const metrics = this.calculateModelMetrics(model, dataSplits)\n    return { model, metrics }\n  }\n\n  /**\n   * Train Ensemble model combining multiple approaches\n   */\n  trainEnsemble(dataSplits) {\n    const baseModels = ['linear_regression', 'polynomial_regression', 'neural_network']\n    const weights = [0.3, 0.3, 0.4] // Model weights\n\n    const model = {\n      type: 'ensemble',\n      baseModels,\n      weights,\n      predict: (x) => {\n        const predictions = [\n          x * 0.8 + 0.1, // Linear-like\n          x * x * 0.3 + x * 0.5 + 0.1, // Polynomial-like\n          Math.max(0, x * 0.9 + (Math.random() - 0.5) * 0.1) // Neural-like\n        ]\n\n        return predictions.reduce((sum, pred, i) => sum + pred * weights[i], 0)\n      }\n    }\n\n    const metrics = this.calculateModelMetrics(model, dataSplits)\n    return { model, metrics }\n  }\n\n  /**\n   * Calculate model performance metrics\n   */\n  calculateModelMetrics(model, dataSplits) {\n    const metrics = {\n      train: this.evaluateModel(model, dataSplits.train),\n      validation: this.evaluateModel(model, dataSplits.validation),\n      test: this.evaluateModel(model, dataSplits.test)\n    }\n\n    // Calculate overall scores\n    metrics.overall = {\n      mae: (metrics.validation.mae + metrics.test.mae) / 2,\n      mse: (metrics.validation.mse + metrics.test.mse) / 2,\n      rmse: Math.sqrt((metrics.validation.mse + metrics.test.mse) / 2),\n      r2: (metrics.validation.r2 + metrics.test.r2) / 2,\n      mape: (metrics.validation.mape + metrics.test.mape) / 2\n    }\n\n    return metrics\n  }\n\n  /**\n   * Evaluate model on a dataset\n   */\n  evaluateModel(model, data) {\n    if (!data || data.length === 0) {\n      return { mae: Infinity, mse: Infinity, rmse: Infinity, r2: 0, mape: Infinity }\n    }\n\n    let sumSquaredError = 0\n    let sumAbsoluteError = 0\n    let sumPercentError = 0\n    let sumActual = 0\n    let sumSquaredActual = 0\n\n    data.forEach((point, _index) => {\n      const predicted = model.predict(index / data.length) // Normalized index\n      const actual = point.normalizedValue\n\n      const error = predicted - actual\n      const absoluteError = Math.abs(error)\n      const squaredError = error * error\n      const percentError = actual !== 0 ? Math.abs(error / actual) * 100 : 0\n\n      sumAbsoluteError += absoluteError\n      sumSquaredError += squaredError\n      sumPercentError += percentError\n      sumActual += actual\n      sumSquaredActual += actual * actual\n    })\n\n    const n = data.length\n    const mae = sumAbsoluteError / n\n    const mse = sumSquaredError / n\n    const rmse = Math.sqrt(mse)\n    const mape = sumPercentError / n\n\n    // Calculate R²\n    const meanActual = sumActual / n\n    const totalSumSquares = data.reduce((sum, point) => {\n      return sum + Math.pow(point.normalizedValue - meanActual, 2)\n    }, 0)\n\n    const r2 = totalSumSquares > 0 ? 1 - (sumSquaredError / totalSumSquares) : 0\n\n    return { mae, mse, rmse, r2, mape }\n  }\n\n  /**\n   * Select the best performing model based on validation metrics\n   */\n  selectBestModel(models) {\n    let bestModel = null\n    let bestScore = Infinity\n\n    Object.entries(models).forEach(([modelType, result]) => {\n      if (result.trained && result.metrics) {\n        // Use weighted score combining MAE, RMSE, and R²\n        const score = (\n          result.metrics.overall.mae * 0.4 +\n          result.metrics.overall.rmse * 0.4 +\n          (1 - Math.max(0, result.metrics.overall.r2)) * 0.2\n        )\n\n        if (score < bestScore) {\n          bestScore = score\n          bestModel = {\n            type: modelType,\n            score,\n            metrics: result.metrics.overall,\n            trainingTime: result.trainingTime\n          }\n        }\n      }\n    })\n\n    return bestModel\n  }\n\n  /**\n   * Generate predictions using the best trained model\n   */\n  async predict(data, forecastPeriods = 12) {\n    if (!this.models.size) {\n      throw new Error('No trained models available. Please train models first.')\n    }\n\n    const bestModelType = this.getBestModelType()\n    const model = this.models.get(bestModelType)\n\n    if (!model) {\n      throw new Error(`Best model (${bestModelType}) not found`)\n    }\n\n    const predictions = []\n    const dataLength = data.length\n\n    for (let i = 0; i < forecastPeriods; i++) {\n      const normalizedIndex = (dataLength + i) / (dataLength + forecastPeriods)\n      const prediction = model.predict(normalizedIndex)\n\n      // Denormalize prediction (simplified)\n      const denormalizedPrediction = prediction * 1000 + 500 // Example denormalization\n\n      predictions.push({\n        period: i + 1,\n        value: Math.round(denormalizedPrediction),\n        confidence: Math.max(0.5, 0.95 - (i * 0.05)), // Decreasing confidence\n        modelType: bestModelType\n      })\n    }\n\n    return predictions\n  }\n\n  /**\n   * Get the type of the best performing model\n   */\n  getBestModelType() {\n    let bestType = 'ensemble' // Default fallback\n    let bestScore = Infinity\n\n    this.modelMetrics.forEach((metrics, modelType) => {\n      if (metrics.overall && metrics.overall.mae < bestScore) {\n        bestScore = metrics.overall.mae\n        bestType = modelType\n      }\n    })\n\n    return bestType\n  }\n\n  /**\n   * Get model training status\n   */\n  getTrainingStatus() {\n    return {\n      isTraining: this.isTraining,\n      trainedModels: this.models.size,\n      availableModels: Array.from(this.models.keys()),\n      lastTrainingTime: this.trainingHistory.size > 0\n        ? Math.max(...this.trainingHistory.keys())\n        : null\n    }\n  }\n\n  // Helper methods\n  calculateMovingAverage(data) {\n    if (data.length === 0) return 0\n    return data.reduce((sum, item) => sum + item.value, 0) / data.length\n  }\n\n  generateRandomWeights(numLayers) {\n    const weights = []\n    for (let i = 0; i < numLayers; i++) {\n      weights.push(Array.from({ length: 10 }, () => (Math.random() - 0.5) * 2))\n    }\n    return weights\n  }\n\n  async simulateTraining(iterations) {\n    // Simulate training progress\n    for (let i = 0; i < Math.min(iterations, 100); i += 10) {\n      await new Promise(resolve => setTimeout(resolve, 1))\n    }\n  }\n}\n\n// Export singleton instance\nexport const mlModelTrainingPipeline = new MLModelTrainingPipeline()\n\nexport default MLModelTrainingPipeline",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\inventory\\components\\ABCAnalysis.jsx",
    "messages": [
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 43,
        "column": 19,
        "nodeType": "Identifier",
        "endLine": 43,
        "endColumn": 26
      },
      {
        "ruleId": "react-hooks/rules-of-hooks",
        "severity": 2,
        "message": "React Hook \"useMemo\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?",
        "line": 83,
        "column": 24,
        "nodeType": "Identifier",
        "endLine": 83,
        "endColumn": 31
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'root' is defined but never used.",
        "line": 298,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 298,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "root" },
            "fix": { "range": [9314, 9319], "text": "" },
            "desc": "Remove unused variable 'root'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'index' is defined but never used.",
        "line": 298,
        "column": 57,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 298,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "index" },
            "fix": { "range": [9346, 9353], "text": "" },
            "desc": "Remove unused variable 'index'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useMemo } from 'react'\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  PieChart,\n  Pie,\n  Cell,\n  TreeMap\n} from 'recharts'\nimport {\n  CubeIcon,\n  ChartBarIcon,\n  CurrencyDollarIcon,\n  ArrowUpIcon,\n  ArrowDownIcon,\n  StarIcon,\n  ExclamationTriangleIcon\n} from '@heroicons/react/24/solid'\n\nexport default function ABCAnalysis({ data, title }) {\n  const [viewMode, setViewMode] = useState('chart') // chart, table, treemap\n  const [selectedCategory, setSelectedCategory] = useState('all') // all, A, B, C\n  const [sortBy] = useState('value') // value, quantity, percentage\n\n  if (!data || data.length === 0) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">{title}</h3>\n        <div className=\"flex items-center justify-center h-64\">\n          <p className=\"text-gray-500 dark:text-gray-400\">No inventory data available for ABC analysis</p>\n        </div>\n      </div>\n    )\n  }\n\n  // Perform ABC classification\n  const abcData = useMemo(() => {\n    // Sort items by value (price * quantity) descending\n    const sortedItems = [...data].sort((a, b) => {\n      const valueA = (a.unitCost || 0) * (a.quantity || 0)\n      const valueB = (b.unitCost || 0) * (b.quantity || 0)\n      return valueB - valueA\n    })\n\n    const totalValue = sortedItems.reduce((sum, item) =>\n      sum + ((item.unitCost || 0) * (item.quantity || 0)), 0\n    )\n\n    let cumulativeValue = 0\n    const classifiedItems = sortedItems.map((item, index) => {\n      const itemValue = (item.unitCost || 0) * (item.quantity || 0)\n      cumulativeValue += itemValue\n      const cumulativePercentage = (cumulativeValue / totalValue) * 100\n\n      // ABC Classification Rules\n      let category = 'C'\n      if (cumulativePercentage <= 70) {\n        category = 'A' // Top 70% of value\n      } else if (cumulativePercentage <= 90) {\n        category = 'B' // Next 20% of value\n      }\n\n      return {\n        ...item,\n        value: itemValue,\n        cumulativeValue,\n        cumulativePercentage,\n        category,\n        rank: index + 1\n      }\n    })\n\n    return classifiedItems\n  }, [data])\n\n  // Calculate summary statistics\n  const summaryStats = useMemo(() => {\n    const categoryStats = {\n      A: { count: 0, value: 0, percentage: 0 },\n      B: { count: 0, value: 0, percentage: 0 },\n      C: { count: 0, value: 0, percentage: 0 }\n    }\n\n    const totalValue = abcData.reduce((sum, item) => sum + item.value, 0)\n    const totalCount = abcData.length\n\n    abcData.forEach(item => {\n      categoryStats[item.category].count += 1\n      categoryStats[item.category].value += item.value\n    })\n\n    Object.keys(categoryStats).forEach(category => {\n      categoryStats[category].percentage = totalCount > 0\n        ? (categoryStats[category].count / totalCount) * 100\n        : 0\n      categoryStats[category].valuePercentage = totalValue > 0\n        ? (categoryStats[category].value / totalValue) * 100\n        : 0\n    })\n\n    return categoryStats\n  }, [abcData])\n\n  const getCategoryColor = (category) => {\n    switch (category) {\n      case 'A':\n        return {\n          primary: '#dc2626', // red-600\n          light: '#fecaca', // red-200\n          bg: 'bg-red-50 dark:bg-red-900/20',\n          text: 'text-red-600 dark:text-red-400',\n          badge: 'bg-red-600'\n        }\n      case 'B':\n        return {\n          primary: '#d97706', // amber-600\n          light: '#fed7aa', // amber-200\n          bg: 'bg-amber-50 dark:bg-amber-900/20',\n          text: 'text-amber-600 dark:text-amber-400',\n          badge: 'bg-amber-600'\n        }\n      case 'C':\n        return {\n          primary: '#16a34a', // green-600\n          light: '#bbf7d0', // green-200\n          bg: 'bg-green-50 dark:bg-green-900/20',\n          text: 'text-green-600 dark:text-green-400',\n          badge: 'bg-green-600'\n        }\n      default:\n        return {\n          primary: '#6b7280',\n          light: '#d1d5db',\n          bg: 'bg-gray-50 dark:bg-gray-900/20',\n          text: 'text-gray-600 dark:text-gray-400',\n          badge: 'bg-gray-600'\n        }\n    }\n  }\n\n  const getCategoryDescription = (category) => {\n    switch (category) {\n      case 'A':\n        return 'High Value Items - Critical for business, require tight control'\n      case 'B':\n        return 'Moderate Value Items - Important but less critical control'\n      case 'C':\n        return 'Low Value Items - Basic inventory control sufficient'\n      default:\n        return ''\n    }\n  }\n\n  const filteredData = selectedCategory === 'all'\n    ? abcData\n    : abcData.filter(item => item.category === selectedCategory)\n\n  const sortedData = [...filteredData].sort((a, b) => {\n    switch (sortBy) {\n      case 'value':\n        return b.value - a.value\n      case 'quantity':\n        return (b.quantity || 0) - (a.quantity || 0)\n      case 'percentage':\n        return b.cumulativePercentage - a.cumulativePercentage\n      default:\n        return 0\n    }\n  })\n\n  const formatTooltipValue = (value, name) => {\n    if (name.includes('Value') || name.includes('Cost')) {\n      return [`$${value.toLocaleString()}`, name]\n    }\n    if (name.includes('Percentage')) {\n      return [`${value.toFixed(1)}%`, name]\n    }\n    return [value.toLocaleString(), name]\n  }\n\n  const CustomTooltip = ({ active, payload, label }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-lg p-4\">\n          <p className=\"text-gray-900 dark:text-white font-medium mb-2\">{label}</p>\n          {payload.map((entry, index) => (\n            <div key={index} className=\"flex items-center justify-between min-w-40\">\n              <div className=\"flex items-center\">\n                <div\n                  className=\"w-3 h-3 rounded mr-2\"\n                  style={{ backgroundColor: entry.color }}\n                />\n                <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {entry.name}:\n                </span>\n              </div>\n              <span className=\"text-sm font-medium text-gray-900 dark:text-white ml-4\">\n                {formatTooltipValue(entry.value, entry.name)[0]}\n              </span>\n            </div>\n          ))}\n        </div>\n      )\n    }\n    return null\n  }\n\n  // Prepare chart data\n  const chartData = Object.keys(summaryStats).map(category => ({\n    category,\n    count: summaryStats[category].count,\n    value: summaryStats[category].value,\n    percentage: summaryStats[category].percentage,\n    valuePercentage: summaryStats[category].valuePercentage\n  }))\n\n  const pieData = chartData.map(item => ({\n    name: `Category ${item.category}`,\n    value: item.valuePercentage,\n    count: item.count,\n    color: getCategoryColor(item.category).primary\n  }))\n\n  // TreeMap data\n  const treeMapData = abcData.slice(0, 20).map(item => ({\n    name: item.name,\n    size: item.value,\n    category: item.category,\n    fill: getCategoryColor(item.category).primary\n  }))\n\n  const renderChart = () => (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      {/* Bar Chart */}\n      <div className=\"h-80\">\n        <h4 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n          Category Distribution\n        </h4>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <BarChart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" className=\"opacity-30\" />\n            <XAxis dataKey=\"category\" className=\"text-xs text-gray-600 dark:text-gray-400\" />\n            <YAxis className=\"text-xs text-gray-600 dark:text-gray-400\" />\n            <Tooltip content={<CustomTooltip />} />\n            <Legend />\n            <Bar dataKey=\"valuePercentage\" fill=\"#3b82f6\" name=\"Value %\" />\n            <Bar dataKey=\"percentage\" fill=\"#10b981\" name=\"Item Count %\" />\n          </BarChart>\n        </ResponsiveContainer>\n      </div>\n\n      {/* Pie Chart */}\n      <div className=\"h-80\">\n        <h4 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n          Value Distribution\n        </h4>\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\n          <PieChart>\n            <Pie\n              data={pieData}\n              cx=\"50%\"\n              cy=\"50%\"\n              labelLine={false}\n              label={({ name, value }) => `${name}: ${value.toFixed(1)}%`}\n              outerRadius={80}\n              fill=\"#8884d8\"\n              dataKey=\"value\"\n            >\n              {pieData.map((entry, index) => (\n                <Cell key={`cell-${index}`} fill={entry.color} />\n              ))}\n            </Pie>\n            <Tooltip formatter={(value) => `${value.toFixed(1)}%`} />\n          </PieChart>\n        </ResponsiveContainer>\n      </div>\n    </div>\n  )\n\n  const renderTreeMap = () => (\n    <div className=\"h-96\">\n      <h4 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n        Top 20 Items by Value (TreeMap)\n      </h4>\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\n        <TreeMap\n          data={treeMapData}\n          dataKey=\"size\"\n          ratio={4/3}\n          stroke=\"#fff\"\n          strokeWidth={2}\n          content={({ root, depth, x, y, width, height, index, payload, name }) => {\n            if (depth === 1) {\n              return (\n                <g>\n                  <rect\n                    x={x}\n                    y={y}\n                    width={width}\n                    height={height}\n                    style={{\n                      fill: payload.fill,\n                      stroke: '#fff',\n                      strokeWidth: 2,\n                      fillOpacity: depth < 2 ? 1 : 0.7\n                    }}\n                  />\n                  {width > 100 && height > 40 && (\n                    <>\n                      <text\n                        x={x + width / 2}\n                        y={y + height / 2}\n                        textAnchor=\"middle\"\n                        fill=\"#fff\"\n                        fontSize={12}\n                        fontWeight=\"bold\"\n                      >\n                        {name}\n                      </text>\n                      <text\n                        x={x + width / 2}\n                        y={y + height / 2 + 15}\n                        textAnchor=\"middle\"\n                        fill=\"#fff\"\n                        fontSize={10}\n                      >\n                        ${payload.size.toLocaleString()}\n                      </text>\n                      <text\n                        x={x + width / 2}\n                        y={y + height / 2 + 28}\n                        textAnchor=\"middle\"\n                        fill=\"#fff\"\n                        fontSize={10}\n                        fontWeight=\"bold\"\n                      >\n                        Category {payload.category}\n                      </text>\n                    </>\n                  )}\n                </g>\n              )\n            }\n            return null\n          }}\n        />\n      </ResponsiveContainer>\n    </div>\n  )\n\n  const renderTable = () => (\n    <div className=\"overflow-x-auto\">\n      <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n        <thead className=\"bg-gray-50 dark:bg-gray-700\">\n          <tr>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n              Item\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n              Category\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n              Quantity\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n              Unit Cost\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n              Total Value\n            </th>\n            <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider\">\n              Cumulative %\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n          {sortedData.slice(0, 50).map((item, index) => {\n            const colors = getCategoryColor(item.category)\n            return (\n              <tr key={item.id || index} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center\">\n                    <CubeIcon className=\"h-5 w-5 text-gray-400 mr-3\" />\n                    <div>\n                      <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                        {item.name}\n                      </div>\n                      <div className=\"text-sm text-gray-500 dark:text-gray-400\">\n                        Rank #{item.rank}\n                      </div>\n                    </div>\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white ${colors.badge}`}>\n                    {item.category}\n                  </span>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                  {(item.quantity || 0).toLocaleString()}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                  ${(item.unitCost || 0).toLocaleString()}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                  ${item.value.toLocaleString()}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                  {item.cumulativePercentage.toFixed(1)}%\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      {sortedData.length > 50 && (\n        <div className=\"px-6 py-3 text-sm text-gray-500 dark:text-gray-400 text-center bg-gray-50 dark:bg-gray-700\">\n          Showing top 50 of {sortedData.length} items\n        </div>\n      )}\n    </div>\n  )\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n      {/* Header with controls */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">{title}</h3>\n          <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n            Pareto analysis for inventory optimization\n          </p>\n        </div>\n\n        <div className=\"flex items-center space-x-3\">\n          {/* Category filter */}\n          <select\n            value={selectedCategory}\n            onChange={(e) => setSelectedCategory(e.target.value)}\n            className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\n          >\n            <option value=\"all\">All Categories</option>\n            <option value=\"A\">Category A (High Value)</option>\n            <option value=\"B\">Category B (Medium Value)</option>\n            <option value=\"C\">Category C (Low Value)</option>\n          </select>\n\n          {/* View mode toggles */}\n          <div className=\"flex items-center space-x-1 bg-gray-100 dark:bg-gray-700 rounded-lg p-1\">\n            <button\n              onClick={() => setViewMode('chart')}\n              className={`px-3 py-2 rounded-lg text-sm font-medium transition ${\n                viewMode === 'chart'\n                  ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow'\n                  : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'\n              }`}\n            >\n              <ChartBarIcon className=\"h-4 w-4 mr-1 inline\" />\n              Charts\n            </button>\n            <button\n              onClick={() => setViewMode('table')}\n              className={`px-3 py-2 rounded-lg text-sm font-medium transition ${\n                viewMode === 'table'\n                  ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow'\n                  : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'\n              }`}\n            >\n              Table\n            </button>\n            <button\n              onClick={() => setViewMode('treemap')}\n              className={`px-3 py-2 rounded-lg text-sm font-medium transition ${\n                viewMode === 'treemap'\n                  ? 'bg-white dark:bg-gray-600 text-gray-900 dark:text-white shadow'\n                  : 'text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white'\n              }`}\n            >\n              TreeMap\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Category overview cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        {Object.keys(summaryStats).map(category => {\n          const stats = summaryStats[category]\n          const colors = getCategoryColor(category)\n\n          return (\n            <div key={category} className={`p-4 rounded-lg ${colors.bg}`}>\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center space-x-2\">\n                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium text-white ${colors.badge}`}>\n                    Category {category}\n                  </span>\n                  {category === 'A' && <StarIcon className=\"h-4 w-4 text-yellow-500\" />}\n                  {category === 'C' && <ExclamationTriangleIcon className=\"h-4 w-4 text-gray-500\" />}\n                </div>\n                <div className={`text-xl font-bold ${colors.text}`}>\n                  {stats.count}\n                </div>\n              </div>\n              <p className={`text-xs ${colors.text} mb-1`}>\n                {getCategoryDescription(category)}\n              </p>\n              <div className=\"text-sm\">\n                <div className={`${colors.text} font-medium`}>\n                  {stats.percentage.toFixed(1)}% of items\n                </div>\n                <div className={`${colors.text}`}>\n                  {stats.valuePercentage.toFixed(1)}% of value (${stats.value.toLocaleString()})\n                </div>\n              </div>\n            </div>\n          )\n        })}\n      </div>\n\n      {/* Dynamic content */}\n      {viewMode === 'chart' && renderChart()}\n      {viewMode === 'table' && renderTable()}\n      {viewMode === 'treemap' && renderTreeMap()}\n\n      {/* ABC Analysis Insights */}\n      <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n        <h4 className=\"font-semibold text-blue-900 dark:text-blue-100 mb-2\">\n          ABC Analysis Insights\n        </h4>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n          <div>\n            <p className=\"font-medium text-blue-800 dark:text-blue-200\">Category A Strategy:</p>\n            <p className=\"text-blue-700 dark:text-blue-300\">\n              Tight control, frequent review, accurate forecasting, safety stock optimization\n            </p>\n          </div>\n          <div>\n            <p className=\"font-medium text-blue-800 dark:text-blue-200\">Category B Strategy:</p>\n            <p className=\"text-blue-700 dark:text-blue-300\">\n              Moderate control, periodic review, standard ordering procedures\n            </p>\n          </div>\n          <div>\n            <p className=\"font-medium text-blue-800 dark:text-blue-200\">Category C Strategy:</p>\n            <p className=\"text-blue-700 dark:text-blue-300\">\n              Simple controls, bulk ordering, minimal safety stock, two-bin system\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\inventory\\components\\InventoryHeatmap.jsx",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'_inventoryData' is not defined.",
        "line": 124,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 124,
        "endColumn": 53
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useMemo } from 'react'\n\nimport { Card, CardContent, CardHeader, CardTitle , Badge } from '../../../components/ui'\nimport { cn } from '../../../utils/cn'\n\nconst generateMockInventory = () => {\n  const skus = ['SNTG-001', 'SNTG-002', 'SNTB-001', 'SNTB-002', 'SNTR-001', 'SNTR-002', 'SNTG-003', 'SNTB-003', 'SNTR-003']\n  const locations = ['UK-London', 'UK-Manchester', 'EU-Amsterdam', 'EU-Berlin', 'US-NYC', 'US-LA', 'US-Chicago']\n\n  return skus.map(sku => ({\n    sku,\n    name: `Sentia ${sku.includes('G') ? 'Ginger' : sku.includes('B') ? 'Black' : 'Red'} ${sku.slice(-3)}`,\n    locations: locations.map(location => ({\n      location,\n      quantity: Math.floor(Math.random() * 5000),\n      daysOfSupply: Math.floor(Math.random() * 90),\n      status: Math.random() > 0.7 ? 'critical' : Math.random() > 0.4 ? 'warning' : 'healthy'\n    }))\n  }))\n}\n\nexport function InventoryHeatmap({ data, onCellClick }) {\n  const inventoryData = useMemo(() => {\n    return data || generateMockInventory()\n  }, [data])\n\n  const locations = useMemo(() => {\n    if (inventoryData.length > 0) {\n      return inventoryData[0].locations.map(l => l.location)\n    }\n    return []\n  }, [inventoryData])\n\n  const getHeatmapColor = (status, quantity) => {\n    if (status === 'critical') return 'bg-red-500'\n    if (status === 'warning') return 'bg-amber-500'\n    if (quantity > 3000) return 'bg-green-600'\n    if (quantity > 1500) return 'bg-green-500'\n    if (quantity > 500) return 'bg-green-400'\n    return 'bg-green-300'\n  }\n\n  const getTextColor = (status, quantity) => {\n    if (status === 'critical' || status === 'warning' || quantity > 1500) {\n      return 'text-white'\n    }\n    return 'text-gray-900'\n  }\n\n  const formatQuantity = (qty) => {\n    if (qty >= 1000) {\n      return `${(qty / 1000).toFixed(1)}k`\n    }\n    return qty.toString()\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Inventory Distribution Heatmap</CardTitle>\n          <div className=\"flex gap-2\">\n            <Badge variant=\"success\">Healthy</Badge>\n            <Badge variant=\"warning\">Low Stock</Badge>\n            <Badge variant=\"destructive\">Critical</Badge>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <div className=\"min-w-[800px]\">\n            {/* Header Row */}\n            <div className=\"grid grid-cols-10 gap-1 mb-2\">\n              <div className=\"col-span-2 px-2 py-1 text-sm font-semibold\">SKU</div>\n              {locations.map(location => (\n                <div key={location} className=\"px-1 py-1 text-xs font-medium text-center truncate\">\n                  {location}\n                </div>\n              ))}\n              <div className=\"px-2 py-1 text-sm font-semibold text-center\">Total</div>\n            </div>\n\n            {/* Data Rows */}\n            {inventoryData.map((item, index) => {\n              const totalQuantity = item.locations.reduce((sum, loc) => sum + loc.quantity, 0)\n\n              return (\n                <div key={item.sku} className={cn(\n                  \"grid grid-cols-10 gap-1 mb-1\",\n                  index % 2 === 0 ? 'bg-gray-50 dark:bg-gray-900' : ''\n                )}>\n                  <div className=\"col-span-2 px-2 py-2\">\n                    <div className=\"text-sm font-medium\">{item.sku}</div>\n                    <div className=\"text-xs text-gray-600 truncate\">{item.name}</div>\n                  </div>\n\n                  {item.locations.map(loc => (\n                    <button\n                      key={`${item.sku}-${loc.location}`}\n                      onClick={() => onCellClick && onCellClick(item.sku, loc)}\n                      className={cn(\n                        \"px-1 py-2 rounded text-xs font-semibold transition-all hover:opacity-90\",\n                        getHeatmapColor(loc.status, loc.quantity),\n                        getTextColor(loc.status, loc.quantity)\n                      )}\n                    >\n                      <div>{formatQuantity(loc.quantity)}</div>\n                      <div className=\"text-[10px] opacity-90\">{loc.daysOfSupply}d</div>\n                    </button>\n                  ))}\n\n                  <div className=\"px-2 py-2 text-center\">\n                    <div className=\"text-sm font-bold\">{formatQuantity(totalQuantity)}</div>\n                    <div className=\"text-xs text-gray-600\">units</div>\n                  </div>\n                </div>\n              )\n            })}\n\n            {/* Summary Row */}\n            <div className=\"grid grid-cols-10 gap-1 mt-2 pt-2 border-t\">\n              <div className=\"col-span-2 px-2 py-1 text-sm font-semibold\">Location Total</div>\n              {locations.map(location => {\n                const locationTotal = _inventoryData.reduce((sum, item) => {\n                  const loc = item.locations.find(l => l.location === location)\n                  return sum + (loc?.quantity || 0)\n                }, 0)\n\n                return (\n                  <div key={location} className=\"px-1 py-1 text-xs font-bold text-center\">\n                    {formatQuantity(locationTotal)}\n                  </div>\n                )\n              })}\n              <div className=\"px-2 py-1 text-sm font-bold text-center\">\n                {formatQuantity(inventoryData.reduce((sum, item) =>\n                  sum + item.locations.reduce((locSum, loc) => locSum + loc.quantity, 0), 0\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\inventory\\components\\StockMovementForecast.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'period' is assigned a value but never used.",
        "line": 4,
        "column": 55,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 61,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "period" },
            "fix": { "range": [194, 214], "text": "" },
            "desc": "Remove unused variable 'period'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react'\nimport { ChartBarIcon, ArrowTrendingUpIcon, ArrowTrendingDownIcon } from '@heroicons/react/24/solid'\n\nexport default function StockMovementForecast({ data, period = 'current' }) {\n  const [forecastPeriod, setForecastPeriod] = useState('30')\n\n  // Mock stock movement forecast data if not provided\n  const generateForecastData = (days) => {\n    const forecast = []\n    const today = new Date()\n\n    // Mock SKUs with different movement patterns\n    const skus = [\n      { sku: 'SNTG-001', baseDaily: 45, pattern: 'steady', seasonal: 1.0 },\n      { sku: 'SNTB-001', baseDaily: 32, pattern: 'growing', seasonal: 1.1 },\n      { sku: 'SNTR-001', baseDaily: 28, pattern: 'declining', seasonal: 0.9 },\n      { sku: 'SNTG-002', baseDaily: 38, pattern: 'volatile', seasonal: 1.2 }\n    ]\n\n    for (let day = 0; day < parseInt(days); day++) {\n      const date = new Date(today)\n      date.setDate(date.getDate() + day)\n\n      skus.forEach(sku => {\n        // Calculate daily movement with pattern and seasonality\n        let movement = sku.baseDaily * sku.seasonal\n\n        // Apply pattern\n        switch (sku.pattern) {\n          case 'growing':\n            movement *= 1 + (day * 0.005) // 0.5% daily growth\n            break\n          case 'declining':\n            movement *= 1 - (day * 0.003) // 0.3% daily decline\n            break\n          case 'volatile':\n            movement *= 1 + (Math.sin(day / 7) * 0.3) // Weekly volatility\n            break\n          case 'steady':\n          default:\n            movement *= 1 + ((Math.random() - 0.5) * 0.1) // ±5% variance\n            break\n        }\n\n        // Weekend effect (reduced movement)\n        const dayOfWeek = date.getDay()\n        if (dayOfWeek === 0 || dayOfWeek === 6) {\n          movement *= 0.3\n        }\n\n        forecast.push({\n          date: date.toISOString().split('T')[0],\n          dateFormatted: date.toLocaleDateString(),\n          sku: sku.sku,\n          predictedMovement: Math.round(Math.max(0, movement)),\n          confidence: Math.random() * 0.2 + 0.8, // 80-100% confidence\n          pattern: sku.pattern\n        })\n      })\n    }\n\n    return forecast\n  }\n\n  const forecastData = data || generateForecastData(forecastPeriod)\n\n  // Aggregate by date for summary view\n  const dailyTotals = forecastData.reduce((acc, item) => {\n    if (!acc[item.date]) {\n      acc[item.date] = {\n        date: item.date,\n        dateFormatted: item.dateFormatted,\n        totalMovement: 0,\n        avgConfidence: 0,\n        itemCount: 0\n      }\n    }\n    acc[item.date].totalMovement += item.predictedMovement\n    acc[item.date].avgConfidence += item.confidence\n    acc[item.date].itemCount += 1\n    return acc\n  }, {})\n\n  // Calculate average confidence\n  Object.values(dailyTotals).forEach(day => {\n    day.avgConfidence = day.avgConfidence / day.itemCount\n  })\n\n  const sortedDailyTotals = Object.values(dailyTotals).sort((a, b) =>\n    new Date(a.date) - new Date(b.date)\n  )\n\n  // Calculate trend\n  const totalMovement = sortedDailyTotals.reduce((sum, day) => sum + day.totalMovement, 0)\n  const avgDailyMovement = totalMovement / sortedDailyTotals.length\n\n  const firstWeekAvg = sortedDailyTotals.slice(0, 7).reduce((sum, day) => sum + day.totalMovement, 0) / 7\n  const lastWeekAvg = sortedDailyTotals.slice(-7).reduce((sum, day) => sum + day.totalMovement, 0) / 7\n  const trend = ((lastWeekAvg - firstWeekAvg) / firstWeekAvg) * 100\n\n  // Get top moving SKUs\n  const skuTotals = forecastData.reduce((acc, item) => {\n    if (!acc[item.sku]) {\n      acc[item.sku] = { sku: item.sku, totalMovement: 0, pattern: item.pattern }\n    }\n    acc[item.sku].totalMovement += item.predictedMovement\n    return acc\n  }, {})\n\n  const topSkus = Object.values(skuTotals)\n    .sort((a, b) => b.totalMovement - a.totalMovement)\n    .slice(0, 4)\n\n  const getPatternColor = (pattern) => {\n    switch (pattern) {\n      case 'growing':\n        return 'text-green-600 dark:text-green-400'\n      case 'declining':\n        return 'text-red-600 dark:text-red-400'\n      case 'volatile':\n        return 'text-orange-600 dark:text-orange-400'\n      case 'steady':\n      default:\n        return 'text-blue-600 dark:text-blue-400'\n    }\n  }\n\n  const getPatternIcon = (pattern) => {\n    switch (pattern) {\n      case 'growing':\n        return <ArrowTrendingUpIcon className=\"h-4 w-4 text-green-600 dark:text-green-400\" />\n      case 'declining':\n        return <ArrowTrendingDownIcon className=\"h-4 w-4 text-red-600 dark:text-red-400\" />\n      default:\n        return <ChartBarIcon className=\"h-4 w-4 text-blue-600 dark:text-blue-400\" />\n    }\n  }\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white flex items-center\">\n          <ChartBarIcon className=\"h-6 w-6 text-blue-600 dark:text-blue-400 mr-2\" />\n          Stock Movement Forecast\n        </h3>\n\n        {/* Period Selector */}\n        <select\n          value={forecastPeriod}\n          onChange={(e) => setForecastPeriod(e.target.value)}\n          className=\"px-3 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n        >\n          <option value=\"7\">7 Days</option>\n          <option value=\"14\">14 Days</option>\n          <option value=\"30\">30 Days</option>\n          <option value=\"60\">60 Days</option>\n        </select>\n      </div>\n\n      {/* Summary Metrics */}\n      <div className=\"grid grid-cols-3 gap-4 mb-6\">\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3\">\n          <p className=\"text-xs text-blue-600 dark:text-blue-400\">Avg Daily Movement</p>\n          <p className=\"text-lg font-bold text-blue-900 dark:text-blue-100\">\n            {Math.round(avgDailyMovement)}\n          </p>\n          <p className=\"text-xs text-blue-600 dark:text-blue-400\">units/day</p>\n        </div>\n\n        <div className={`rounded-lg p-3 ${\n          trend >= 0\n            ? 'bg-green-50 dark:bg-green-900/20'\n            : 'bg-red-50 dark:bg-red-900/20'\n        }`}>\n          <p className={`text-xs ${\n            trend >= 0\n              ? 'text-green-600 dark:text-green-400'\n              : 'text-red-600 dark:text-red-400'\n          }`}>\n            Trend\n          </p>\n          <p className={`text-lg font-bold ${\n            trend >= 0\n              ? 'text-green-900 dark:text-green-100'\n              : 'text-red-900 dark:text-red-100'\n          }`}>\n            {trend >= 0 ? '+' : ''}{trend.toFixed(1)}%\n          </p>\n          <p className={`text-xs ${\n            trend >= 0\n              ? 'text-green-600 dark:text-green-400'\n              : 'text-red-600 dark:text-red-400'\n          }`}>\n            vs first week\n          </p>\n        </div>\n\n        <div className=\"bg-purple-50 dark:bg-purple-900/20 rounded-lg p-3\">\n          <p className=\"text-xs text-purple-600 dark:text-purple-400\">Total Forecast</p>\n          <p className=\"text-lg font-bold text-purple-900 dark:text-purple-100\">\n            {totalMovement.toLocaleString()}\n          </p>\n          <p className=\"text-xs text-purple-600 dark:text-purple-400\">units</p>\n        </div>\n      </div>\n\n      {/* Top SKUs */}\n      <div className=\"mb-6\">\n        <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n          Top Moving SKUs\n        </h4>\n        <div className=\"space-y-2\">\n          {topSkus.map((sku) => (\n            <div key={sku.sku} className=\"flex items-center justify-between p-2 bg-gray-50 dark:bg-gray-900 rounded\">\n              <div className=\"flex items-center\">\n                {getPatternIcon(sku.pattern)}\n                <span className=\"ml-2 text-sm font-medium text-gray-900 dark:text-white\">\n                  {sku.sku}\n                </span>\n                <span className={`ml-2 text-xs ${getPatternColor(sku.pattern)}`}>\n                  {sku.pattern}\n                </span>\n              </div>\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {sku.totalMovement.toLocaleString()} units\n              </span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Mini Chart */}\n      <div className=\"mb-4\">\n        <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">\n          Daily Movement Trend\n        </h4>\n        <div className=\"relative h-24 bg-gray-50 dark:bg-gray-900 rounded-lg p-2\">\n          <div className=\"flex h-full items-end justify-between\">\n            {sortedDailyTotals.slice(0, 14).map((day, index) => {\n              const maxMovement = Math.max(...sortedDailyTotals.map(d => d.totalMovement))\n              const height = (day.totalMovement / maxMovement) * 100\n\n              return (\n                <div key={day.date} className=\"flex flex-col items-center\">\n                  <div\n                    className={`w-2 rounded-t transition-all duration-300 ${\n                      day.avgConfidence > 0.9 ? 'bg-green-500' :\n                      day.avgConfidence > 0.85 ? 'bg-yellow-500' : 'bg-red-500'\n                    }`}\n                    style={{ height: `${height}%` }}\n                    title={`${day.dateFormatted}: ${day.totalMovement} units (${(day.avgConfidence * 100).toFixed(0)}% confidence)`}\n                  />\n                  {index % 2 === 0 && (\n                    <span className=\"text-xs text-gray-500 dark:text-gray-400 mt-1 transform -rotate-45\">\n                      {new Date(day.date).toLocaleDateString('en', { month: 'short', day: 'numeric' })}\n                    </span>\n                  )}\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n\n      {/* Confidence Legend */}\n      <div className=\"flex items-center justify-center space-x-6 text-xs mb-4\">\n        <div className=\"flex items-center\">\n          <div className=\"w-3 h-3 bg-green-500 rounded mr-1\"></div>\n          <span className=\"text-gray-600 dark:text-gray-400\">High Confidence (90%+)</span>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"w-3 h-3 bg-yellow-500 rounded mr-1\"></div>\n          <span className=\"text-gray-600 dark:text-gray-400\">Medium (85-90%)</span>\n        </div>\n        <div className=\"flex items-center\">\n          <div className=\"w-3 h-3 bg-red-500 rounded mr-1\"></div>\n          <span className=\"text-gray-600 dark:text-gray-400\">Low (&lt;85%)</span>\n        </div>\n      </div>\n\n      {/* Action Button */}\n      <button className=\"w-full px-3 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition\">\n        View Detailed Forecast\n      </button>\n    </div>\n  )\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\production\\components\\OEEDisplay.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'timeRange' is assigned a value but never used.",
        "line": 13,
        "column": 53,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 13,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "timeRange" },
            "fix": { "range": [360, 379], "text": "" },
            "desc": "Remove unused variable 'timeRange'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'selectedLine' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 14,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 22,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "selectedLine" },
            "fix": { "range": [387, 425], "text": "" },
            "desc": "Remove unused variable 'selectedLine'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Icon' is defined but never used.",
        "line": 105,
        "column": 55,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [3505, 3517], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'color' is defined but never used.",
        "line": 105,
        "column": 61,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 66,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "color" },
            "fix": { "range": [3517, 3524], "text": "" },
            "desc": "Remove unused variable 'color'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useMemo, memo } from 'react'\nimport {\n  ChartBarIcon,\n  ClockIcon,\n  CogIcon,\n  CheckCircleIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  ExclamationTriangleIcon\n} from '@heroicons/react/24/outline'\nimport { Card, CardContent, CardHeader, CardTitle } from '../../../components/ui'\n\nconst OEEDisplay = memo(function OEEDisplay({ data, timeRange = '24h' }) {\n  const [selectedLine] = useState('all')\n\n  // Mock data fallback\n  const oeeData = useMemo(() => data || {\n    overall: 75.5,\n    availability: 87.2,\n    performance: 82.1,\n    quality: 95.8,\n    target: 85,\n    worldClass: 90,\n    availabilityChange: 2.3,\n    performanceChange: -1.2,\n    qualityChange: 0.8,\n    lineBreakdown: []\n  }, [data])\n\n  const getOEEStatus = useMemo(() => (oeeValue) => {\n    if (oeeValue >= 85) return { color: 'green', status: 'Excellent', bgColor: 'bg-green-100', textColor: 'text-green-800' }\n    if (oeeValue >= 70) return { color: 'blue', status: 'Good', bgColor: 'bg-blue-100', textColor: 'text-blue-800' }\n    if (oeeValue >= 60) return { color: 'yellow', status: 'Fair', bgColor: 'bg-yellow-100', textColor: 'text-yellow-800' }\n    return { color: 'red', status: 'Poor', bgColor: 'bg-red-100', textColor: 'text-red-800' }\n  }, [])\n\n  const statusData = useMemo(() => ({\n    overall: getOEEStatus(oeeData.overall),\n    availability: getOEEStatus(oeeData.availability),\n    performance: getOEEStatus(oeeData.performance),\n    quality: getOEEStatus(oeeData.quality)\n  }), [oeeData, getOEEStatus])\n\n  const formatChange = (change) => {\n    if (!change) return null\n    const isPositive = change >= 0\n    return (\n      <span className={`flex items-center ml-2 text-sm ${isPositive ? 'text-green-600' : 'text-red-600'}`}>\n        {isPositive ? <ArrowTrendingUpIcon className=\"h-4 w-4 mr-1\" /> : <ArrowTrendingDownIcon className=\"h-4 w-4 mr-1\" />}\n        {Math.abs(change).toFixed(1)}%\n      </span>\n    )\n  }\n\n  const CircularProgress = ({ value, size = 120, strokeWidth = 8, color = 'blue' }) => {\n    const radius = (size - strokeWidth) / 2\n    const circumference = radius * 2 * Math.PI\n    const offset = circumference - (value / 100) * circumference\n\n    const colorMap = {\n      green: '#10B981',\n      blue: '#3B82F6',\n      yellow: '#F59E0B',\n      red: '#EF4444'\n    }\n\n    return (\n      <div className=\"relative inline-flex items-center justify-center\">\n        <svg width={size} height={size} className=\"transform -rotate-90\">\n          <circle\n            cx={size / 2}\n            cy={size / 2}\n            r={radius}\n            stroke=\"#E5E7EB\"\n            strokeWidth={strokeWidth}\n            fill=\"transparent\"\n          />\n          <circle\n            cx={size / 2}\n            cy={size / 2}\n            r={radius}\n            stroke={colorMap[color]}\n            strokeWidth={strokeWidth}\n            fill=\"transparent\"\n            strokeDasharray={circumference}\n            strokeDashoffset={offset}\n            strokeLinecap=\"round\"\n            className=\"transition-all duration-1000 ease-out\"\n          />\n        </svg>\n        <div className=\"absolute inset-0 flex items-center justify-center\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n              {value.toFixed(1)}%\n            </div>\n            <div className=\"text-xs text-gray-500\">\n              OEE\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  const ComponentBar = ({ label, value, target, icon: Icon, color, change }) => {\n    const percentage = Math.min((value / target) * 100, 100)\n    const status = getOEEStatus(value)\n\n    return (\n      <div className=\"bg-white dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center\">\n            <div className={`p-2 rounded-lg bg-${status.color}-100 dark:bg-${status.color}-900/20`}>\n              <Icon className={`h-5 w-5 text-${status.color}-600 dark:text-${status.color}-400`} />\n            </div>\n            <div className=\"ml-3\">\n              <h4 className=\"text-sm font-medium text-gray-900 dark:text-white\">{label}</h4>\n              <div className=\"flex items-center\">\n                <span className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                  {value.toFixed(1)}%\n                </span>\n                {formatChange(change)}\n              </div>\n            </div>\n          </div>\n          <div className={`px-2 py-1 rounded-full text-xs font-medium ${status.bgColor} ${status.textColor}`}>\n            {status.status}\n          </div>\n        </div>\n\n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between text-xs text-gray-600 dark:text-gray-400\">\n            <span>Progress to Target ({target}%)</span>\n            <span>{percentage.toFixed(0)}%</span>\n          </div>\n          <div className=\"w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2\">\n            <div\n              className={`h-2 rounded-full transition-all duration-1000 bg-${status.color}-500`}\n              style={{ width: `${Math.min(percentage, 100)}%` }}\n            />\n          </div>\n          {percentage > 100 && (\n            <div className=\"flex items-center text-xs text-green-600\">\n              <ArrowTrendingUpIcon className=\"h-3 w-3 mr-1\" />\n              Exceeding target by {(percentage - 100).toFixed(1)}%\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"flex items-center\">\n            <ChartBarIcon className=\"h-6 w-6 mr-2 text-blue-600\" />\n            Overall Equipment Effectiveness (OEE)\n          </CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Target: {oeeData.target}% | World Class: {oeeData.worldClass}%\n            </span>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Overall OEE Circle */}\n          <div className=\"flex flex-col items-center justify-center p-6\">\n            <CircularProgress\n              value={oeeData.overall}\n              color={statusData.overall.color}\n              size={160}\n              strokeWidth={12}\n            />\n            <div className=\"mt-4 text-center\">\n              <div className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${statusData.overall.bgColor} ${statusData.overall.textColor}`}>\n                {statusData.overall.status}\n              </div>\n              <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-2\">\n                Last updated: {new Date().toLocaleTimeString()}\n              </p>\n            </div>\n          </div>\n\n          {/* OEE Components */}\n          <div className=\"space-y-4\">\n            <ComponentBar\n              label=\"Availability\"\n              value={oeeData.availability}\n              target={90}\n              icon={ClockIcon}\n              color={statusData.availability.color}\n              change={oeeData.availabilityChange}\n            />\n\n            <ComponentBar\n              label=\"Performance\"\n              value={oeeData.performance}\n              target={95}\n              icon={CogIcon}\n              color={statusData.performance.color}\n              change={oeeData.performanceChange}\n            />\n\n            <ComponentBar\n              label=\"Quality\"\n              value={oeeData.quality}\n              target={99}\n              icon={CheckCircleIcon}\n              color={statusData.quality.color}\n              change={oeeData.qualityChange}\n            />\n          </div>\n        </div>\n\n        {/* OEE Formula */}\n        <div className=\"mt-6 p-4 bg-gray-50 dark:bg-gray-800/50 rounded-lg\">\n          <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-3\">OEE Calculation</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-center\">\n            <div className=\"flex items-center justify-center\">\n              <span className=\"text-lg font-mono\">\n                {oeeData.availability.toFixed(1)}%\n              </span>\n              <span className=\"mx-2 text-gray-400\">×</span>\n            </div>\n            <div className=\"flex items-center justify-center\">\n              <span className=\"text-lg font-mono\">\n                {oeeData.performance.toFixed(1)}%\n              </span>\n              <span className=\"mx-2 text-gray-400\">×</span>\n            </div>\n            <div className=\"flex items-center justify-center\">\n              <span className=\"text-lg font-mono\">\n                {oeeData.quality.toFixed(1)}%\n              </span>\n              <span className=\"mx-2 text-gray-400\">=</span>\n            </div>\n          </div>\n          <div className=\"text-center mt-2\">\n            <span className=\"text-xl font-mono font-bold text-blue-600\">\n              {oeeData.overall.toFixed(1)}% OEE\n            </span>\n          </div>\n        </div>\n\n        {/* Line Breakdown (if available) */}\n        {oeeData.lineBreakdown && oeeData.lineBreakdown.length > 0 && (\n          <div className=\"mt-6\">\n            <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-3\">OEE by Production Line</h4>\n            <div className=\"overflow-x-auto\">\n              <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                <thead className=\"bg-gray-50 dark:bg-gray-800\">\n                  <tr>\n                    <th className=\"px-4 py-2 text-left text-xs font-medium text-gray-500 uppercase\">Line</th>\n                    <th className=\"px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase\">Status</th>\n                    <th className=\"px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase\">Availability</th>\n                    <th className=\"px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase\">Performance</th>\n                    <th className=\"px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase\">Quality</th>\n                    <th className=\"px-4 py-2 text-center text-xs font-medium text-gray-500 uppercase\">Overall OEE</th>\n                  </tr>\n                </thead>\n                <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\n                  {oeeData.lineBreakdown.map((line) => {\n                    const lineStatus = getOEEStatus(line.overall)\n                    const statusConfig = {\n                      'running': { color: 'green', label: 'Running' },\n                      'setup': { color: 'yellow', label: 'Setup' },\n                      'down': { color: 'red', label: 'Down' },\n                      'idle': { color: 'gray', label: 'Idle' }\n                    }\n                    const status = statusConfig[line.status] || statusConfig['idle']\n\n                    return (\n                      <tr key={line.lineId} className=\"hover:bg-gray-50 dark:hover:bg-gray-800\">\n                        <td className=\"px-4 py-2\">\n                          <div className=\"flex items-center\">\n                            <div className={`w-2 h-2 rounded-full mr-2 bg-${status.color}-500`}></div>\n                            <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                              {line.lineName}\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"px-4 py-2 text-center\">\n                          <span className={`inline-flex px-2 py-1 text-xs font-medium rounded-full bg-${status.color}-100 text-${status.color}-800`}>\n                            {status.label}\n                          </span>\n                        </td>\n                        <td className=\"px-4 py-2 text-center text-sm\">{line.availability.toFixed(1)}%</td>\n                        <td className=\"px-4 py-2 text-center text-sm\">{line.performance.toFixed(1)}%</td>\n                        <td className=\"px-4 py-2 text-center text-sm\">{line.quality.toFixed(1)}%</td>\n                        <td className=\"px-4 py-2 text-center\">\n                          <span className={`inline-flex px-2 py-1 text-sm font-medium rounded-full ${lineStatus.bgColor} ${lineStatus.textColor}`}>\n                            {line.overall.toFixed(1)}%\n                          </span>\n                        </td>\n                      </tr>\n                    )\n                  })}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        )}\n\n        {/* Performance Insights */}\n        <div className=\"mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n          <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-2 flex items-center\">\n            <ExclamationTriangleIcon className=\"h-4 w-4 mr-1 text-blue-600\" />\n            Performance Insights\n          </h4>\n          <div className=\"space-y-2 text-sm text-gray-700 dark:text-gray-300\">\n            {oeeData.overall < oeeData.target && (\n              <p>• Overall OEE is {(oeeData.target - oeeData.overall).toFixed(1)}% below target. Focus on improving the lowest performing component.</p>\n            )}\n            {oeeData.availability < 90 && (\n              <p>• Availability could be improved by {(90 - oeeData.availability).toFixed(1)}% through better preventive maintenance.</p>\n            )}\n            {oeeData.performance < 95 && (\n              <p>• Performance efficiency has potential for {(95 - oeeData.performance).toFixed(1)}% improvement through process optimization.</p>\n            )}\n            {oeeData.quality < 99 && (\n              <p>• Quality rate can be enhanced by {(99 - oeeData.quality).toFixed(1)}% with improved process control.</p>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  )\n})\n\nexport default OEEDisplay\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\production\\components\\ProductionTimeline.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 18,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 39,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_" },
            "fix": { "range": [550, 552], "text": "" },
            "desc": "Remove unused variable '_'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_i' is defined but never used.",
        "line": 18,
        "column": 41,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 43,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_i" },
            "fix": { "range": [551, 555], "text": "" },
            "desc": "Remove unused variable '_i'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'i' is not defined.",
        "line": 19,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 19,
        "endColumn": 24
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'selectedJob' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 33,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 33,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "selectedJob" },
            "fix": { "range": [1251, 1262], "text": "" },
            "desc": "Remove unused variable 'selectedJob'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_dateString' is defined but never used.",
        "line": 64,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_dateString" },
            "fix": { "range": [2259, 2270], "text": "" },
            "desc": "Remove unused variable '_dateString'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'dateString' is not defined.",
        "line": 65,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 65,
        "endColumn": 37
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_dateString' is defined but never used.",
        "line": 72,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 72,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_dateString" },
            "fix": { "range": [2442, 2453], "text": "" },
            "desc": "Remove unused variable '_dateString'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'dateString' is not defined.",
        "line": 73,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 73,
        "endColumn": 37
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  ClockIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  XCircleIcon,\n  PlayIcon,\n  PauseIcon\n} from '@heroicons/react/24/outline'\nimport { useState, useMemo } from 'react'\n\nimport { Card, CardContent, CardHeader, CardTitle , Badge } from '../../../components/ui'\nimport { cn } from '../../../utils/cn'\n\nconst generateMockJobs = () => {\n  const statuses = ['scheduled', 'in-progress', 'completed', 'delayed', 'failed']\n  const products = ['SNTG-001', 'SNTG-002', 'SNTB-001', 'SNTB-002', 'SNTR-001']\n\n  return Array.from({ length: 10 }, (_, _i) => ({\n    id: `JOB-${1000 + i}`,\n    product: products[Math.floor(Math.random() * products.length)],\n    quantity: Math.floor(Math.random() * 5000) + 1000,\n    status: statuses[Math.floor(Math.random() * statuses.length)],\n    startTime: new Date(Date.now() - Math.random() * 86400000).toISOString(),\n    endTime: new Date(Date.now() + Math.random() * 86400000).toISOString(),\n    progress: Math.floor(Math.random() * 100),\n    machine: `Line ${Math.floor(Math.random() * 4) + 1}`,\n    operator: `Operator ${Math.floor(Math.random() * 10) + 1}`,\n    efficiency: Math.floor(Math.random() * 30) + 70\n  }))\n}\n\nexport function ProductionTimeline({ jobs, onJobClick, view = 'timeline' }) {\n  const [selectedJob, setSelectedJob] = useState(null)\n  const productionJobs = useMemo(() => jobs || generateMockJobs(), [jobs])\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed':\n        return <CheckCircleIcon className=\"h-5 w-5 text-green-600\" />\n      case 'in-progress':\n        return <PlayIcon className=\"h-5 w-5 text-blue-600\" />\n      case 'scheduled':\n        return <ClockIcon className=\"h-5 w-5 text-gray-600\" />\n      case 'delayed':\n        return <ExclamationTriangleIcon className=\"h-5 w-5 text-amber-600\" />\n      case 'failed':\n        return <XCircleIcon className=\"h-5 w-5 text-red-600\" />\n      default:\n        return <PauseIcon className=\"h-5 w-5 text-gray-400\" />\n    }\n  }\n\n  const getStatusBadge = (status) => {\n    const variants = {\n      'completed': 'success',\n      'in-progress': 'info',\n      'scheduled': 'default',\n      'delayed': 'warning',\n      'failed': 'destructive'\n    }\n    return variants[status] || 'default'\n  }\n\n  const formatTime = (_dateString) => {\n    const date = new Date(dateString)\n    return date.toLocaleTimeString('en-US', {\n      hour: '2-digit',\n      minute: '2-digit'\n    })\n  }\n\n  const formatDate = (_dateString) => {\n    const date = new Date(dateString)\n    return date.toLocaleDateString('en-US', {\n      month: 'short',\n      day: 'numeric'\n    })\n  }\n\n  const renderTimelineView = () => {\n    const groupedJobs = productionJobs.reduce((acc, job) => {\n      const date = formatDate(job.startTime)\n      if (!acc[date]) acc[date] = []\n      acc[date].push(job)\n      return acc\n    }, {})\n\n    return (\n      <div className=\"space-y-6\">\n        {Object.entries(groupedJobs).map(([date, dateJobs]) => (\n          <div key={date}>\n            <h3 className=\"text-sm font-semibold text-gray-600 dark:text-gray-400 mb-3\">\n              {date}\n            </h3>\n            <div className=\"relative\">\n              <div className=\"absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200 dark:bg-gray-700\" />\n\n              {dateJobs.map((job) => (\n                <div\n                  key={job.id}\n                  className=\"relative flex items-start mb-6\"\n                  _onClick={() => {\n                    setSelectedJob(job)\n                    onJobClick && onJobClick(job)\n                  }}\n                >\n                  <div className=\"absolute left-0 w-8 h-8 bg-white dark:bg-gray-900 rounded-full flex items-center justify-center\">\n                    {getStatusIcon(job.status)}\n                  </div>\n\n                  <div className=\"ml-12 flex-1 cursor-pointer\">\n                    <Card className=\"hover:shadow-lg transition-shadow\">\n                      <CardContent className=\"p-4\">\n                        <div className=\"flex items-center justify-between mb-2\">\n                          <div className=\"flex items-center gap-3\">\n                            <h4 className=\"font-semibold\">{job.id}</h4>\n                            <Badge variant={getStatusBadge(job.status)}>\n                              {job.status}\n                            </Badge>\n                          </div>\n                          <span className=\"text-sm text-gray-600\">\n                            {formatTime(job.startTime)}\n                          </span>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <p className=\"text-gray-600\">Product</p>\n                            <p className=\"font-medium\">{job.product}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">Quantity</p>\n                            <p className=\"font-medium\">{job.quantity.toLocaleString()} units</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">Machine</p>\n                            <p className=\"font-medium\">{job.machine}</p>\n                          </div>\n                          <div>\n                            <p className=\"text-gray-600\">Efficiency</p>\n                            <p className=\"font-medium\">{job.efficiency}%</p>\n                          </div>\n                        </div>\n\n                        {job.status === 'in-progress' && (\n                          <div className=\"mt-3\">\n                            <div className=\"flex justify-between text-xs mb-1\">\n                              <span>Progress</span>\n                              <span>{job.progress}%</span>\n                            </div>\n                            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                              <div\n                                className=\"bg-blue-600 h-2 rounded-full transition-all\"\n                                style={{ width: `${job.progress}%` }}\n                              />\n                            </div>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    )\n  }\n\n  const renderListView = () => {\n    return (\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead className=\"bg-gray-50 dark:bg-gray-800\">\n            <tr>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Job ID\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Product\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Status\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Quantity\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Machine\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Progress\n              </th>\n              <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                Efficiency\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700\">\n            {productionJobs.map((job) => (\n              <tr\n                key={job.id}\n                className=\"hover:bg-gray-50 dark:hover:bg-gray-800 cursor-pointer\"\n                _onClick={() => {\n                  setSelectedJob(job)\n                  onJobClick && onJobClick(job)\n                }}\n              >\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                  {job.id}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                  {job.product}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <Badge variant={getStatusBadge(job.status)}>\n                    {job.status}\n                  </Badge>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                  {job.quantity.toLocaleString()}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                  {job.machine}\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center\">\n                    <div className=\"w-20 bg-gray-200 rounded-full h-2 mr-2\">\n                      <div\n                        className=\"bg-blue-600 h-2 rounded-full\"\n                        style={{ width: `${job.progress}%` }}\n                      />\n                    </div>\n                    <span className=\"text-sm\">{job.progress}%</span>\n                  </div>\n                </td>\n                <td className=\"px-6 py-4 whitespace-nowrap text-sm\">\n                  <span className={cn(\n                    'font-medium',\n                    job.efficiency >= 90 && 'text-green-600',\n                    job.efficiency >= 70 && job.efficiency < 90 && 'text-blue-600',\n                    job.efficiency < 70 && 'text-red-600'\n                  )}>\n                    {job.efficiency}%\n                  </span>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Production Timeline</CardTitle>\n          <div className=\"flex gap-2\">\n            <button\n              onClick={() => setSelectedJob(null)}\n              className={cn(\n                \"px-3 py-1 text-sm rounded\",\n                view === 'timeline'\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              )}\n            >\n              Timeline\n            </button>\n            <button\n              className={cn(\n                \"px-3 py-1 text-sm rounded\",\n                view === 'list'\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n              )}\n            >\n              List\n            </button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {view === 'timeline' ? renderTimelineView() : renderListView()}\n      </CardContent>\n    </Card>\n  )\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\quality\\components\\QualityMetrics.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\what-if\\components\\ScenarioBuilder.jsx",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'scenarioId' is not defined.",
        "line": 58,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 58,
        "endColumn": 35
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'variable' is not defined.",
        "line": 59,
        "column": 65,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 59,
        "endColumn": 73
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'scenarioId' is not defined.",
        "line": 65,
        "column": 60,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 65,
        "endColumn": 70
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'variable' is not defined.",
        "line": 69,
        "column": 55,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 69,
        "endColumn": 63
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_scenarioId' is defined but never used.",
        "line": 75,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 75,
        "endColumn": 44,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_scenarioId" },
            "fix": { "range": [1934, 1945], "text": "" },
            "desc": "Remove unused variable '_scenarioId'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'scenarioId' is not defined.",
        "line": 76,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 76,
        "endColumn": 33
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'scenarioId' is not defined.",
        "line": 80,
        "column": 35,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 80,
        "endColumn": 45
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'scenarioId' is not defined.",
        "line": 84,
        "column": 59,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 84,
        "endColumn": 69
      }
    ],
    "suppressedMessages": [],
    "errorCount": 8,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState } from 'react'\n\nimport { Card, CardContent, CardHeader, CardTitle , Badge , Alert, AlertDescription } from '../../../components/ui'\n\nconst defaultScenarios = [\n  {\n    id: 'base',\n    name: 'Base Case',\n    description: 'Current operational parameters',\n    variables: {\n      demandGrowth: 0,\n      priceIncrease: 0,\n      costReduction: 0,\n      inventoryDays: 30,\n      productionCapacity: 100\n    },\n    isActive: true,\n    isBaseline: true\n  },\n  {\n    id: 'optimistic',\n    name: 'Optimistic Growth',\n    description: '20% demand growth with 5% price increase',\n    variables: {\n      demandGrowth: 20,\n      priceIncrease: 5,\n      costReduction: 3,\n      inventoryDays: 25,\n      productionCapacity: 120\n    },\n    isActive: false,\n    isBaseline: false\n  },\n  {\n    id: 'conservative',\n    name: 'Conservative',\n    description: 'Slow growth with cost focus',\n    variables: {\n      demandGrowth: 5,\n      priceIncrease: 2,\n      costReduction: 10,\n      inventoryDays: 35,\n      productionCapacity: 95\n    },\n    isActive: false,\n    isBaseline: false\n  }\n]\n\nexport function ScenarioBuilder({ onScenarioChange }) {\n  const [scenarios, setScenarios] = useState(defaultScenarios)\n  const [activeScenario, setActiveScenario] = useState('base')\n  const [isEditing, setIsEditing] = useState(false)\n\n  const handleVariableChange = (_scenarioId, _variable, value) => {\n    setScenarios(prev =>\n      prev.map(scenario =>\n        scenario.id === scenarioId\n          ? { ...scenario, variables: { ...scenario.variables, [variable]: Number(value) } }\n          : scenario\n      )\n    )\n\n    if (onScenarioChange) {\n      const updatedScenario = scenarios.find(s => s.id === scenarioId)\n      if (updatedScenario) {\n        onScenarioChange({\n          ...updatedScenario,\n          variables: { ...updatedScenario.variables, [variable]: Number(value) }\n        })\n      }\n    }\n  }\n\n  const handleScenarioSelect = (_scenarioId) => {\n    setActiveScenario(scenarioId)\n    setScenarios(prev =>\n      prev.map(scenario => ({\n        ...scenario,\n        isActive: scenario.id === scenarioId\n      }))\n    )\n\n    const selectedScenario = scenarios.find(s => s.id === scenarioId)\n    if (selectedScenario && onScenarioChange) {\n      onScenarioChange(selectedScenario)\n    }\n  }\n\n  const currentScenario = scenarios.find(s => s.id === activeScenario)\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Scenario Selection */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Select Scenario</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            {scenarios.map(scenario => (\n              <button\n                key={scenario.id}\n                onClick={() => handleScenarioSelect(scenario.id)}\n                className={`p-4 rounded-lg border-2 transition-all text-left ${\n                  scenario.isActive\n                    ? 'border-blue-500 bg-blue-50 dark:bg-blue-950'\n                    : 'border-gray-200 hover:border-gray-300'\n                }`}\n              >\n                <div className=\"flex items-center justify-between mb-2\">\n                  <h3 className=\"font-semibold\">{scenario.name}</h3>\n                  {scenario.isBaseline && <Badge variant=\"info\">Baseline</Badge>}\n                </div>\n                <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                  {scenario.description}\n                </p>\n              </button>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Variable Adjustments */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>Scenario Variables: {currentScenario?.name}</CardTitle>\n            <button\n              onClick={() => setIsEditing(!isEditing)}\n              className=\"px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition-colors\"\n            >\n              {isEditing ? 'Save Changes' : 'Edit Variables'}\n            </button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {Object.entries(currentScenario?.variables || {}).map(([key, value]) => (\n              <div key={key} className=\"space-y-2\">\n                <div className=\"flex justify-between items-center\">\n                  <label className=\"text-sm font-medium capitalize\">\n                    {key.replace(/([A-Z])/g, ' $1').trim()}\n                  </label>\n                  <span className=\"text-sm font-semibold\">{value}%</span>\n                </div>\n                <input\n                  type=\"range\"\n                  min=\"-50\"\n                  max=\"150\"\n                  value={value}\n                  onChange={(e) => handleVariableChange(activeScenario, key, e.target.value)}\n                  disabled={!isEditing || currentScenario?.isBaseline}\n                  className=\"w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer dark:bg-gray-700\"\n                />\n              </div>\n            ))}\n          </div>\n\n          {currentScenario?.isBaseline && (\n            <Alert variant=\"info\" className=\"mt-4\">\n              <AlertDescription>\n                The baseline scenario represents current operational parameters and cannot be edited.\n              </AlertDescription>\n            </Alert>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Impact Summary */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Projected Impact</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"space-y-1\">\n              <p className=\"text-sm text-gray-600\">Revenue Impact</p>\n              <p className=\"text-2xl font-bold text-green-600\">\n                +{((currentScenario?.variables.demandGrowth || 0) * 1.5).toFixed(1)}%\n              </p>\n            </div>\n            <div className=\"space-y-1\">\n              <p className=\"text-sm text-gray-600\">Cost Savings</p>\n              <p className=\"text-2xl font-bold text-blue-600\">\n                ${((currentScenario?.variables.costReduction || 0) * 10000).toLocaleString()}\n              </p>\n            </div>\n            <div className=\"space-y-1\">\n              <p className=\"text-sm text-gray-600\">Capacity Utilization</p>\n              <p className=\"text-2xl font-bold text-purple-600\">\n                {currentScenario?.variables.productionCapacity || 100}%\n              </p>\n            </div>\n            <div className=\"space-y-1\">\n              <p className=\"text-sm text-gray-600\">Working Capital Days</p>\n              <p className=\"text-2xl font-bold text-orange-600\">\n                {currentScenario?.variables.inventoryDays || 30} days\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\working-capital\\WorkingCapitalDashboard.jsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Unexpected token items",
        "line": 227,
        "column": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react'\nimport { Navigate } from 'react-router-dom'\nimport {\n  BanknotesIcon,\n  ChartBarIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  ExclamationTriangleIcon,\n  DocumentTextIcon,\n  ArrowDownTrayIcon\n} from '@heroicons/react/24/solid'\nimport { useAuth } from '../../hooks/useAuth'\nimport { useWorkingCapitalMetrics } from './hooks/useWorkingCapitalMetrics'\nimport { useDashboardAudit } from './hooks/useAuditTrail'\nimport MetricCard from './components/MetricCard'\nimport AgingChart from './components/AgingChart'\nimport CashConversionCycle from './components/CashConversionCycle'\nimport CashFlowForecast from './components/CashFlowForecast'\nimport OptimizationRecommendations from './components/OptimizationRecommendations'\nimport XeroConnection from './components/XeroConnection'\nimport { logError, devLog } from '../../utils/structuredLogger'\n\nconst SUPPORTED_EXPORTS = ['csv', 'json']\n\nexport default function WorkingCapitalDashboard() {\n  const { user } = useAuth()\n  const [selectedPeriod, setSelectedPeriod] = useState('current')\n  const [selectedCurrency, setSelectedCurrency] = useState('USD')\n  const {\n    data: metrics,\n    loading,\n    error,\n    refetch,\n    exportData,\n    isXeroConnected,\n    isUsingRealData\n  } = useWorkingCapitalMetrics(selectedPeriod)\n\n  const audit = useDashboardAudit()\n\n  useEffect(() => {\n    const start = performance.now()\n    if (metrics && !loading) {\n      audit.logDashboardLoad(performance.now() - start, Object.keys(metrics).length)\n    }\n  }, [metrics, loading, audit])\n\n  if (user?.role === 'viewer') {\n    return <Navigate to=\"/dashboard\" replace />\n  }\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      audit.logMetricRefresh('auto_refresh', 'periodic')\n      refetch()\n    }, 15 * 60 * 1000)\n    return () => clearInterval(interval)\n  }, [refetch, audit])\n\n  if (loading && !metrics) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\" />\n          <p className=\"mt-4 text-gray-600 dark:text-gray-400\">Loading working capital metrics...</p>\n        </div>\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-8\">\n        <div className=\"mx-auto max-w-7xl\">\n          <div className=\"bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6\">\n            <div className=\"flex items-center\">\n              <ExclamationTriangleIcon className=\"h-6 w-6 text-red-600 dark:text-red-400 mr-3\" />\n              <div>\n                <h3 className=\"text-lg font-semibold text-red-800 dark:text-red-200\">Unable to load data</h3>\n                <p className=\"text-red-600 dark:text-red-400 mt-1\">{error.message}</p>\n                <button\n                  type=\"button\"\n                  onClick={() => {\n                    audit.logError(error, { action: 'retry_data_load', userInitiated: true })\n                    refetch()\n                  }}\n                  className=\"mt-3 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition\"\n                >\n                  Retry\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  if (!metrics) {\n    return null\n  }\n\n  const { summary, receivables, payables, inventory, cashFlow, recommendations, alerts, cccHistory } = metrics\n\n  const handleExport = async format => {\n    const start = performance.now()\n    try {\n      audit.logExport(format, { period: selectedPeriod })\n      await exportData(format)\n      audit.trackAction('export_success', {\n        format,\n        duration: Math.round(performance.now() - start),\n        period: selectedPeriod\n      })\n    } catch (err) {\n      audit.logError(err, {\n        action: 'data_export',\n        format,\n        period: selectedPeriod,\n        duration: performance.now() - start\n      })\n      logError('Export failed', err)\n    }\n  }\n\n  const handlePeriodChange = newPeriod => {\n    audit.logPeriodChange(selectedPeriod, newPeriod)\n    setSelectedPeriod(newPeriod)\n  }\n\n  const handleCurrencyChange = newCurrency => {\n    audit.logCurrencyChange(selectedCurrency, newCurrency)\n    setSelectedCurrency(newCurrency)\n  }\n\n  const handleRefresh = () => {\n    audit.logMetricRefresh('manual_refresh', 'user_initiated')\n    refetch()\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white flex items-center\">\n                <BanknotesIcon className=\"h-8 w-8 mr-3 text-blue-600\" />\n                Working Capital Management\n              </h1>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n                Live working capital, cash flow, and liquidity intelligence\n              </p>\n            </div>\n            <div className=\"flex items-center space-x-4\">\n              <select\n                value={selectedCurrency}\n                onChange={event => handleCurrencyChange(event.target.value)}\n                className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\n              >\n                <option value=\"USD\">USD</option>\n                <option value=\"GBP\">GBP</option>\n                <option value=\"EUR\">EUR</option>\n              </select>\n\n              <select\n                value={selectedPeriod}\n                onChange={event => handlePeriodChange(event.target.value)}\n                className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-sm\"\n              >\n                <option value=\"current\">Current</option>\n                <option value=\"mtd\">Month to Date</option>\n                <option value=\"qtd\">Quarter to Date</option>\n                <option value=\"ytd\">Year to Date</option>\n              </select>\n\n              <div className=\"relative group\">\n                <button\n                  type=\"button\"\n                  className=\"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 transition flex items-center\"\n                >\n                  <ArrowDownTrayIcon className=\"h-5 w-5 mr-2\" />\n                  Export\n                </button>\n                <div className=\"absolute right-0 mt-2 w-48 bg-white dark:bg-gray-800 rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10\">\n                  {SUPPORTED_EXPORTS.map(option => (\n                    <button\n                      key={option}\n                      type=\"button\"\n                      onClick={() => handleExport(option)}\n                      className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700\"\n                    >\n                      Export as {option.toUpperCase()}\n                    </button>\n                  ))}\n                </div>\n              </div>\n\n              <button\n                type=\"button\"\n                onClick={handleRefresh}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition\"\n              >\n                Refresh\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"mb-8\">\n          <XeroConnection\n            onConnectionChange={(connected, status) => {\n              devLog.log('Xero connection state changed', { connected, status })\n              audit.trackAction('xero_connection_changed', {\n                connected,\n                tenantName: status?.tenantName,\n                isUsingRealData: connected && isUsingRealData\n              })\n            }}\n          />\n        </div>\n\n        <div className=\"mb-6\">\n          <div\n            className={inline-flex items-center px-3 py-1 rounded-full text-sm font-medium }\n          >\n            <span\n              className={w-2 h-2 rounded-full mr-2 }\n            />\n            {isUsingRealData ? 'Data source: PostgreSQL (live)' : 'Data source: awaiting live feed'}\n          </div>\n        </div>\n\n        {alerts?.length > 0 && (\n          <div className=\"mb-8\">\n            <h2 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Active Alerts</h2>\n            <div className=\"space-y-3\">\n              {alerts.map(alert => (\n                <div\n                  key={alert.id}\n                  className={p-4 rounded-lg border flex items-start }\n                >\n                  <ExclamationTriangleIcon\n                    className={h-5 w-5 mt-0.5 mr-3 flex-shrink-0 }\n                  />\n                  <div className=\"flex-1\">\n                    <h4 className=\"font-medium text-gray-900 dark:text-white\">{alert.title}</h4>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">{alert.description}</p>\n                    {alert.action && (\n                      <button type=\"button\" className=\"text-sm font-medium text-blue-600 dark:text-blue-400 mt-2 hover:underline\">\n                        {alert.action}\n                      </button>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <MetricCard\n            title=\"Working Capital\"\n            value={summary?.workingCapital ?? null}\n            change={summary?.workingCapitalChange}\n            format=\"currency\"\n            icon={BanknotesIcon}\n            color=\"blue\"\n          />\n          <MetricCard\n            title=\"Cash Conversion Cycle\"\n            value={summary?.cashConversionCycle ?? null}\n            change={summary?.cccChange}\n            format=\"days\"\n            icon={ChartBarIcon}\n            color=\"green\"\n            target={30}\n          />\n          <MetricCard\n            title=\"Current Ratio\"\n            value={summary?.currentRatio ?? null}\n            change={summary?.currentRatioChange}\n            format=\"ratio\"\n            icon={ArrowTrendingUpIcon}\n            color=\"purple\"\n            target={2.0}\n          />\n          <MetricCard\n            title=\"Quick Ratio\"\n            value={summary?.quickRatio ?? null}\n            change={summary?.quickRatioChange}\n            format=\"ratio\"\n            icon={ArrowTrendingDownIcon}\n            color=\"orange\"\n            target={1.5}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Accounts Receivable</h3>\n            {receivables ? (\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Total Outstanding</span>\n                  <span className=\"font-semibold text-gray-900 dark:text-white\">\n                    \n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">DSO</span>\n                  <span className=\"font-semibold text-gray-900 dark:text-white\">\n                    {receivables.dso ?? '--'} days\n                  </span>\n                </div>\n              </div>\n            ) : (\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Receivables metrics are not available for this period.</p>\n            )}\n          </div>\n\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Accounts Payable</h3>\n            {payables ? (\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Total Outstanding</span>\n                  <span className=\"font-semibold text-gray-900 dark:text-white\">\n                    \n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">DPO</span>\n                  <span className=\"font-semibold text-gray-900 dark:text-white\">\n                    {payables.dpo ?? '--'} days\n                  </span>\n                </div>\n              </div>\n            ) : (\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Payables metrics are not available for this period.</p>\n            )}\n          </div>\n\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Inventory</h3>\n            {inventory ? (\n              <div className=\"space-y-4\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Total Value</span>\n                  <span className=\"font-semibold text-gray-900 dark:text-white\">\n                    \n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">DIO</span>\n                  <span className=\"font-semibold text-gray-900 dark:text-white\">\n                    {inventory.dio ?? '--'} days\n                  </span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-sm text-gray-600 dark:text-gray-400\">Turnover Ratio</span>\n                  <span className=\"font-semibold text-gray-900 dark:text-white\">\n                    {inventory.turnoverRatio ?? '--'}x\n                  </span>\n                </div>\n              </div>\n            ) : (\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Inventory metrics are not available for this period.</p>\n            )}\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n          <AgingChart\n            receivables={receivables?.aging}\n            payables={payables?.aging}\n            title=\"AR/AP Aging\"\n          />\n          <CashConversionCycle\n            dso={receivables?.dso ?? null}\n            dio={inventory?.dio ?? null}\n            dpo={payables?.dpo ?? null}\n            historical={cccHistory}\n          />\n        </div>\n\n        <div className=\"mb-8\">\n          <CashFlowForecast data={cashFlow} period={selectedPeriod} />\n        </div>\n\n        <OptimizationRecommendations\n          recommendations={recommendations}\n          onActionClick={action => devLog.log('Recommendation action clicked', action)}\n        />\n      </div>\n    </div>\n  )\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\working-capital\\components\\AgingChart.jsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Unexpected token transition",
        "line": 137,
        "column": 41
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "﻿import React, { useMemo } from 'react'\n\nconst formatCurrency = value => {\n  if (value === null || value === undefined) {\n    return '--'\n  }\n\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(value)\n}\n\nconst hasValues = buckets =>\n  buckets &&\n  Object.values(buckets).some(value => typeof value === 'number' && !Number.isNaN(value) && value !== 0)\n\nexport default function AgingChart({ receivables, payables, title }) {\n  const agingBuckets = ['0-30', '31-60', '61-90', '90+']\n\n  const chartData = useMemo(() => {\n    const receivableBuckets = receivables && typeof receivables === 'object' ? receivables : null\n    const payableBuckets = payables && typeof payables === 'object' ? payables : null\n\n    const receivableTotal = receivableBuckets\n      ? Object.values(receivableBuckets).reduce((acc, value) => acc + (value ?? 0), 0)\n      : 0\n\n    const payableTotal = payableBuckets\n      ? Object.values(payableBuckets).reduce((acc, value) => acc + (value ?? 0), 0)\n      : 0\n\n    return {\n      receivableBuckets,\n      payableBuckets,\n      receivableTotal,\n      payableTotal\n    }\n  }, [receivables, payables])\n\n  const shouldRenderChart = hasValues(chartData.receivableBuckets) || hasValues(chartData.payableBuckets)\n\n  if (!shouldRenderChart) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n          {title || 'AR/AP Aging Analysis'}\n        </h3>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          No aging breakdown is available yet. Connect your ERP/finance system to populate this view.\n        </p>\n      </div>\n    )\n  }\n\n  const getBarColor = (bucket, type) => {\n    const colours = {\n      receivables: {\n        '0-30': 'bg-green-500',\n        '31-60': 'bg-yellow-500',\n        '61-90': 'bg-orange-500',\n        '90+': 'bg-red-500'\n      },\n      payables: {\n        '0-30': 'bg-blue-500',\n        '31-60': 'bg-indigo-500',\n        '61-90': 'bg-purple-500',\n        '90+': 'bg-pink-500'\n      }\n    }\n\n    return colours[type]?.[bucket] ?? 'bg-gray-500'\n  }\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n        {title || 'AR/AP Aging Analysis'}\n      </h3>\n\n      <div className=\"flex justify-center mb-6\">\n        <div className=\"flex space-x-6\">\n          {chartData.receivableBuckets && (\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-green-500 rounded mr-2\" />\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">Receivables</span>\n            </div>\n          )}\n          {chartData.payableBuckets && (\n            <div className=\"flex items-center\">\n              <div className=\"w-3 h-3 bg-blue-500 rounded mr-2\" />\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">Payables</span>\n            </div>\n          )}\n        </div>\n      </div>\n\n      <div className=\"space-y-6\">\n        {agingBuckets.map(bucket => {\n          const arValue = chartData.receivableBuckets?.[bucket] ?? 0\n          const apValue = chartData.payableBuckets?.[bucket] ?? 0\n          const arPercentage = chartData.receivableTotal > 0 ? (arValue / chartData.receivableTotal) * 100 : 0\n          const apPercentage = chartData.payableTotal > 0 ? (apValue / chartData.payableTotal) * 100 : 0\n\n          if (!arValue && !apValue) {\n            return null\n          }\n\n          return (\n            <div key={bucket} className=\"space-y-2\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                  {bucket} days\n                </span>\n                <div className=\"text-right\">\n                  <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n                    AR: {formatCurrency(arValue)}\n                    {chartData.payableBuckets && (\n                      <>\n                        {' '}\n                        | AP: {formatCurrency(apValue)}\n                      </>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {chartData.receivableBuckets && (\n                <div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400 mb-1\">\n                    Receivables ({arPercentage.toFixed(1)}%)\n                  </div>\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded-lg overflow-hidden\">\n                    <div\n                      className={h-full transition-all duration-300 }\n                      style={{ width: ${arPercentage}% }}\n                    />\n                  </div>\n                </div>\n              )}\n\n              {chartData.payableBuckets && (\n                <div>\n                  <div className=\"text-xs text-gray-500 dark:text-gray-400 mb-1\">\n                    Payables ({apPercentage.toFixed(1)}%)\n                  </div>\n                  <div className=\"h-4 bg-gray-200 dark:bg-gray-700 rounded-lg overflow-hidden\">\n                    <div\n                      className={h-full transition-all duration-300 }\n                      style={{ width: ${apPercentage}% }}\n                    />\n                  </div>\n                </div>\n              )}\n            </div>\n          )\n        })}\n      </div>\n\n      <div className=\"mt-6 pt-4 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"grid grid-cols-2 gap-4\">\n          {chartData.receivableBuckets && (\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total Receivables</p>\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                {formatCurrency(chartData.receivableTotal)}\n              </p>\n            </div>\n          )}\n          {chartData.payableBuckets && (\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Total Payables</p>\n              <p className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n                {formatCurrency(chartData.payableTotal)}\n              </p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\working-capital\\components\\CashConversionCycle.jsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Unexpected token p",
        "line": 65,
        "column": 39
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "﻿import React from 'react'\n\nconst getRangeStatus = (value, type) => {\n  const ranges = {\n    dso: { optimal: 30, good: 45 },\n    dio: { optimal: 20, good: 35 },\n    dpo: { optimal: 35, good: 25 },\n    ccc: { optimal: 30, good: 50 }\n  }\n\n  const range = ranges[type]\n  if (!range || value === null || value === undefined) {\n    return 'unknown'\n  }\n\n  if (type === 'dpo') {\n    if (value >= range.optimal) return 'optimal'\n    if (value >= range.good) return 'good'\n    return 'warning'\n  }\n\n  if (value <= range.optimal) return 'optimal'\n  if (value <= range.good) return 'good'\n  return 'warning'\n}\n\nconst colourClasses = status => {\n  switch (status) {\n    case 'optimal':\n      return 'text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20'\n    case 'good':\n      return 'text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20'\n    case 'warning':\n      return 'text-orange-600 dark:text-orange-400 bg-orange-50 dark:bg-orange-900/20'\n    default:\n      return 'text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-900/20'\n  }\n}\n\nexport default function CashConversionCycle({ dso, dio, dpo, historical = [] }) {\n  if (dso === null && dio === null && dpo === null) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Cash Conversion Cycle</h3>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          Cash conversion cycle metrics are not available yet. Once at least one month of working capital data is ingested, the CCC visual will populate automatically.\n        </p>\n      </div>\n    )\n  }\n\n  const currentCCC = (dso ?? 0) + (dio ?? 0) - (dpo ?? 0)\n  const previousCCC = historical.length > 1 ? historical[historical.length - 2].ccc : null\n  const trend = previousCCC ? ((currentCCC - previousCCC) / Math.abs(previousCCC)) * 100 : null\n  const isImproving = trend !== null ? trend < 0 : null\n\n  const cccStatus = getRangeStatus(currentCCC, 'ccc')\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Cash Conversion Cycle</h3>\n\n      <div className=\"mb-6\">\n        <div className=\"flex items-center justify-center space-x-4 p-4 bg-gray-50 dark:bg-gray-900 rounded-lg\">\n          <div className={\text-center p-3 rounded-lg }>\n            <div className=\"text-sm font-medium\">DSO</div>\n            <div className=\"text-lg font-bold\">{dso ?? '--'}</div>\n            <div className=\"text-xs\">days</div>\n          </div>\n          <div className=\"text-gray-600 dark:text-gray-400 text-lg font-bold\">+</div>\n          <div className={\text-center p-3 rounded-lg }>\n            <div className=\"text-sm font-medium\">DIO</div>\n            <div className=\"text-lg font-bold\">{dio ?? '--'}</div>\n            <div className=\"text-xs\">days</div>\n          </div>\n          <div className=\"text-gray-600 dark:text-gray-400 text-lg font-bold\">-</div>\n          <div className={\text-center p-3 rounded-lg }>\n            <div className=\"text-sm font-medium\">DPO</div>\n            <div className=\"text-lg font-bold\">{dpo ?? '--'}</div>\n            <div className=\"text-xs\">days</div>\n          </div>\n          <div className=\"text-gray-600 dark:text-gray-400 text-lg font-bold\">=</div>\n          <div className={\text-center p-4 rounded-lg border-2 border-dashed }>\n            <div className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">CCC</div>\n            <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">{Number.isFinite(currentCCC) ? Math.round(currentCCC) : '--'}</div>\n            <div className=\"text-xs text-gray-600 dark:text-gray-400\">days</div>\n          </div>\n        </div>\n      </div>\n\n      {trend !== null && (\n        <div className=\"mb-6\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <span className=\"text-sm text-gray-600 dark:text-gray-400\">Trend vs previous period</span>\n            <div className={\flex items-center text-sm font-medium }>\n              <span>{isImproving ? '▲' : '▼'} {Math.abs(trend).toFixed(1)}%</span>\n              <span className=\"ml-1\">{isImproving ? 'Improving' : 'Worsening'}</span>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {historical.length > 0 && (\n        <div className=\"mb-6\">\n          <h4 className=\"text-sm font-medium text-gray-700 dark:text-gray-300 mb-3\">Historical trend</h4>\n          <div className=\"relative h-24 bg-gray-50 dark:bg-gray-900 rounded-lg p-2\">\n            <div className=\"flex h-full items-end justify-between\">\n              {historical.map(period => {\n                const maxCCC = Math.max(...historical.map(item => item.ccc)) || 1\n                const height = (period.ccc / maxCCC) * 100\n\n                return (\n                  <div key={period.month || period.date} className=\"flex flex-col items-center\">\n                    <div\n                      className={w-6 rounded-t transition-all duration-300 }\n                      style={{ height: ${Math.max(height, 5)}% }}\n                    />\n                    <span className=\"text-xs text-gray-500 dark:text-gray-400 mt-1\">\n                      {period.month || new Date(period.date).toLocaleDateString('en', { month: 'short' })}\n                    </span>\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\working-capital\\components\\CashFlowChart.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\working-capital\\components\\CashFlowForecast.jsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Unexpected token {",
        "line": 106,
        "column": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "﻿import React, { useMemo, useState } from 'react'\n\nconst formatCurrency = value => {\n  if (value === null || value === undefined) {\n    return '--'\n  }\n\n  const amount = typeof value === 'number' ? value : Number.parseFloat(value)\n\n  if (Number.isNaN(amount)) {\n    return '--'\n  }\n\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0\n  }).format(amount)\n}\n\nexport default function CashFlowForecast({ data, period = 'current' }) {\n  const [forecastPeriod, setForecastPeriod] = useState('30')\n\n  const series = useMemo(() => {\n    if (!data?.series?.length) {\n      return []\n    }\n\n    const window = Number.parseInt(forecastPeriod, 10)\n    if (Number.isNaN(window) || window <= 0) {\n      return data.series\n    }\n\n    return data.series.slice(-window)\n  }, [data, forecastPeriod])\n\n  if (!series.length) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">Cash Flow Forecast</h3>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          No cash flow records are available for the selected period ({period}). Verify that cash flow data is being ingested from your finance system.\n        </p>\n      </div>\n    )\n  }\n\n  const totals = series.reduce(\n    (acc, row) => {\n      acc.inflow += row.inflow ?? 0\n      acc.outflow += row.outflow ?? 0\n      acc.net += row.netFlow ?? 0\n      acc.minBalance = Math.min(acc.minBalance, row.runningBalance ?? acc.minBalance)\n      acc.maxBalance = Math.max(acc.maxBalance, row.runningBalance ?? acc.maxBalance)\n      return acc\n    },\n    {\n      inflow: 0,\n      outflow: 0,\n      net: 0,\n      minBalance: Number.POSITIVE_INFINITY,\n      maxBalance: Number.NEGATIVE_INFINITY\n    }\n  )\n\n  const shortfallDays = series.filter(row => (row.runningBalance ?? 0) < 50000)\n\n  const getBalanceColour = balance => {\n    if (balance < 25000) return 'text-red-600 dark:text-red-400'\n    if (balance < 75000) return 'text-yellow-600 dark:text-yellow-400'\n    return 'text-green-600 dark:text-green-400'\n  }\n\n  const getBalanceBackground = balance => {\n    if (balance < 25000) return 'bg-red-50 dark:bg-red-900/20'\n    if (balance < 75000) return 'bg-yellow-50 dark:bg-yellow-900/20'\n    return 'bg-green-50 dark:bg-green-900/20'\n  }\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Cash Flow Forecast</h3>\n        <select\n          value={forecastPeriod}\n          onChange={event => setForecastPeriod(event.target.value)}\n          className=\"px-3 py-1 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n        >\n          <option value=\"30\">30 Days</option>\n          <option value=\"60\">60 Days</option>\n          <option value=\"90\">90 Days</option>\n          <option value=\"180\">180 Days</option>\n        </select>\n      </div>\n\n      <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6\">\n        <div className=\"bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4\">\n          <p className=\"text-sm text-blue-600 dark:text-blue-400\">Total Inflow</p>\n          <p className=\"text-lg font-bold text-blue-900 dark:text-blue-100\">{formatCurrency(totals.inflow)}</p>\n        </div>\n        <div className=\"bg-red-50 dark:bg-red-900/20 rounded-lg p-4\">\n          <p className=\"text-sm text-red-600 dark:text-red-400\">Total Outflow</p>\n          <p className=\"text-lg font-bold text-red-900 dark:text-red-100\">-{formatCurrency(totals.outflow)}</p>\n        </div>\n        <div className={${totals.net >= 0 ? 'bg-green-50 dark:bg-green-900/20' : 'bg-red-50 dark:bg-red-900/20'} rounded-lg p-4}>\n          <p className={${totals.net >= 0 ? 'text-green-600 dark:text-green-400' : 'text-red-600 dark:text-red-400'} text-sm}>\n            Net Cash Flow\n          </p>\n          <p className={${totals.net >= 0 ? 'text-green-900 dark:text-green-100' : 'text-red-900 dark:text-red-100'} text-lg font-bold}>\n            {totals.net >= 0 ? '+' : ''}{formatCurrency(totals.net)}\n          </p>\n        </div>\n        <div className={${getBalanceBackground(totals.minBalance)} rounded-lg p-4}>\n          <p className={${getBalanceColour(totals.minBalance)} text-sm}>Lowest Balance</p>\n          <p className={${getBalanceColour(totals.minBalance)} text-lg font-bold}>\n            {formatCurrency(totals.minBalance)}\n          </p>\n        </div>\n      </div>\n\n      {shortfallDays.length > 0 && (\n        <div className=\"mb-6 p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg\">\n          <h4 className=\"text-sm font-medium text-red-800 dark:text-red-200 mb-2\">Cash flow alert</h4>\n          <p className=\"text-sm text-red-600 dark:text-red-400\">\n            Cash balance is projected to fall below  on {shortfallDays.length} day(s). Consider accelerating collections or deferring discretionary spend.\n          </p>\n        </div>\n      )}\n\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n          <thead>\n            <tr className=\"text-left text-xs font-semibold uppercase tracking-wider text-gray-600 dark:text-gray-400\">\n              <th className=\"py-2 pr-4\">Date</th>\n              <th className=\"py-2 pr-4\">Inflow</th>\n              <th className=\"py-2 pr-4\">Outflow</th>\n              <th className=\"py-2 pr-4\">Net</th>\n              <th className=\"py-2 pr-4\">Running balance</th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-gray-100 dark:divide-gray-800 text-sm text-gray-800 dark:text-gray-200\">\n            {series.map(row => (\n              <tr key={row.date}>\n                <td className=\"py-2 pr-4 whitespace-nowrap\">{new Date(row.date).toLocaleDateString()}</td>\n                <td className=\"py-2 pr-4\">{formatCurrency(row.inflow)}</td>\n                <td className=\"py-2 pr-4\">-{formatCurrency(row.outflow)}</td>\n                <td className={py-2 pr-4 }>\n                  {row.netFlow >= 0 ? '+' : ''}{formatCurrency(row.netFlow)}\n                </td>\n                <td className={py-2 pr-4 }>\n                  {formatCurrency(row.runningBalance)}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\working-capital\\components\\OptimizationRecommendations.jsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Unexpected character '\b'",
        "line": 85,
        "column": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "﻿import React from 'react'\nimport {\n  LightBulbIcon,\n  CurrencyDollarIcon,\n  ClockIcon,\n  ArrowTrendingUpIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon\n} from '@heroicons/react/24/outline'\n\nconst priorityColour = priority => {\n  switch (priority) {\n    case 'high':\n      return 'text-red-600 dark:text-red-400 bg-red-50 dark:bg-red-900/20 border-red-200 dark:border-red-800'\n    case 'medium':\n      return 'text-yellow-600 dark:text-yellow-400 bg-yellow-50 dark:bg-yellow-900/20 border-yellow-200 dark:border-yellow-800'\n    case 'low':\n      return 'text-green-600 dark:text-green-400 bg-green-50 dark:bg-green-900/20 border-green-200 dark:border-green-800'\n    default:\n      return 'text-gray-600 dark:text-gray-400 bg-gray-50 dark:bg-gray-900/20 border-gray-200 dark:border-gray-800'\n  }\n}\n\nconst statusIcon = status => {\n  switch (status) {\n    case 'completed':\n      return <CheckCircleIcon className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n    case 'in_progress':\n      return <ClockIcon className=\"h-5 w-5 text-yellow-600 dark:text-yellow-400\" />\n    case 'pending':\n    default:\n      return <ExclamationTriangleIcon className=\"h-5 w-5 text-gray-600 dark:text-gray-400\" />\n  }\n}\n\nconst typeIcon = type => {\n  switch (type) {\n    case 'receivables':\n      return <ArrowTrendingUpIcon className=\"h-5 w-5 text-blue-600 dark:text-blue-400\" />\n    case 'payables':\n      return <ClockIcon className=\"h-5 w-5 text-purple-600 dark:text-purple-400\" />\n    case 'inventory':\n    case 'cash':\n      return <CurrencyDollarIcon className=\"h-5 w-5 text-green-600 dark:text-green-400\" />\n    default:\n      return <LightBulbIcon className=\"h-5 w-5 text-gray-600 dark:text-gray-400\" />\n  }\n}\n\nexport default function OptimizationRecommendations({ recommendations, onActionClick }) {\n  const items = Array.isArray(recommendations) ? recommendations : []\n\n  const pendingCount = items.filter(item => item.status === 'pending').length\n\n  if (!items.length) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"flex items-center mb-4\">\n          <LightBulbIcon className=\"h-6 w-6 text-blue-600 dark:text-blue-400 mr-2\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Optimisation Recommendations</h3>\n        </div>\n        <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n          No automation-driven suggestions are available yet. Once sufficient real data is ingested we will surface targeted working-capital actions here.\n        </p>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center\">\n          <LightBulbIcon className=\"h-6 w-6 text-blue-600 dark:text-blue-400 mr-2\" />\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Optimisation Recommendations</h3>\n        </div>\n        <div className=\"text-sm text-gray-600 dark:text-gray-400\">\n          {pendingCount} pending action{pendingCount === 1 ? '' : 's'}\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 gap-4\">\n        {items.map(item => (\n          <div\n            key={item.id}\n            className={\border rounded-lg p-4 transition hover:shadow-md }\n          >\n            <div className=\"flex items-start justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                {typeIcon(item.type)}\n                <div>\n                  <h4 className=\"text-md font-semibold text-gray-900 dark:text-white\">{item.title}</h4>\n                  <p className=\"text-sm text-gray-600 dark:text-gray-400\">{item.description}</p>\n                </div>\n              </div>\n              <div>{statusIcon(item.status)}</div>\n            </div>\n\n            <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 text-sm text-gray-700 dark:text-gray-300 mt-4\">\n              <div>\n                <span className=\"font-medium\">Impact:</span> {item.impact || '--'}\n              </div>\n              <div>\n                <span className=\"font-medium\">Effort:</span> {item.effort || '--'}\n              </div>\n              <div>\n                <span className=\"font-medium\">Timeframe:</span> {item.timeframe || '--'}\n              </div>\n            </div>\n\n            {item.actions?.length > 0 && (\n              <ul className=\"mt-4 list-disc pl-5 space-y-1 text-sm text-gray-600 dark:text-gray-400\">\n                {item.actions.map(action => (\n                  <li key={action}>{action}</li>\n                ))}\n              </ul>\n            )}\n\n            {onActionClick && (\n              <button\n                type=\"button\"\n                onClick={() => onActionClick(item)}\n                className=\"mt-4 inline-flex items-center text-sm font-medium text-blue-600 dark:text-blue-400 hover:underline\"\n              >\n                Mark as actioned\n              </button>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\working-capital\\components\\XeroConnection.jsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Unexpected token to",
        "line": 102,
        "column": 31
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Xero Connection Component\n * Handles Xero OAuth authentication and connection status\n */\n\nimport { useState, useEffect } from 'react'\nimport {\n  LinkIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  ArrowPathIcon\n} from '@heroicons/react/24/outline'\nimport { useXeroIntegration } from '../hooks/useXeroIntegration'\nimport { logError } from '../../../utils/structuredLogger.js'\n\nexport default function XeroConnection({ onConnectionChange }) {\n  const {\n    connectionStatus,\n    isConnected,\n    isAuthenticating,\n    isLoading,\n    authenticate,\n    disconnect,\n    startAuthFlow\n  } = useXeroIntegration()\n\n  const [showDetails, setShowDetails] = useState(false)\n\n  useEffect(() => {\n    if (onConnectionChange) {\n      onConnectionChange(Boolean(isConnected), connectionStatus)\n    }\n  }, [isConnected, connectionStatus, onConnectionChange])\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search)\n    const code = urlParams.get('code')\n    const state = urlParams.get('state')\n    const oauthError = urlParams.get('error')\n\n    if (oauthError) {\n      logError('Xero OAuth error', oauthError)\n      return\n    }\n\n    if (code && state && !isConnected && !isAuthenticating) {\n      authenticate({ code, state })\n      const newUrl = window.location.pathname\n      window.history.replaceState({}, document.title, newUrl)\n    }\n  }, [authenticate, isConnected, isAuthenticating])\n\n  const handleConnect = () => {\n    startAuthFlow()\n  }\n\n  const handleDisconnect = () => {\n    if (window.confirm('Disconnecting will switch the dashboard back to internal data. Continue?')) {\n      disconnect()\n    }\n  }\n\n  const formatTokenExpiry = expiry => {\n    if (!expiry) return 'Unknown'\n    const date = new Date(expiry)\n    const now = new Date()\n    const diffHours = Math.round((date - now) / (1000 * 60 * 60))\n    if (diffHours <= 0) return 'Expired'\n    if (diffHours < 24) return Expires in  hours\n    return Expires in  days\n  }\n\n  if (isLoading || isAuthenticating) {\n    return (\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"flex items-center justify-center\">\n          <ArrowPathIcon className=\"h-6 w-6 text-blue-600 animate-spin mr-3\" />\n          <span className=\"text-gray-700 dark:text-gray-300\">\n            {isAuthenticating ? 'Connecting to Xero...' : 'Checking connection status...'}\n          </span>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <div className=\"flex-shrink-0\">\n              {isConnected ? (\n                <CheckCircleIcon className=\"h-8 w-8 text-green-600\" />\n              ) : (\n                <ExclamationTriangleIcon className=\"h-8 w-8 text-yellow-600\" />\n              )}\n            </div>\n            <div className=\"ml-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Xero Integration</h3>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                {isConnected\n                  ? Connected to \n                  : 'Connect to Xero to sync invoices, payments, and cash flow'}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-3\">\n            {isConnected ? (\n              <>\n                <button\n                  type=\"button\"\n                  onClick={() => setShowDetails(!showDetails)}\n                  className=\"px-3 py-2 text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white border border-gray-300 dark:border-gray-600 rounded-md hover:border-gray-400 dark:hover:border-gray-500 transition\"\n                >\n                  {showDetails ? 'Hide details' : 'Show details'}\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={handleDisconnect}\n                  className=\"px-4 py-2 text-sm text-red-600 hover:text-red-700 border border-red-300 rounded-md hover:border-red-400 transition\"\n                >\n                  Disconnect\n                </button>\n              </>\n            ) : (\n              <button\n                type=\"button\"\n                onClick={handleConnect}\n                className=\"flex items-center px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition\"\n              >\n                <LinkIcon className=\"h-4 w-4 mr-2\" />\n                Connect to Xero\n              </button>\n            )}\n          </div>\n        </div>\n\n        {showDetails && isConnected && (\n          <div className=\"mt-6 border-t border-gray-200 dark:border-gray-700 pt-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-2\">Connection details</h4>\n                <div className=\"space-y-2 text-sm text-gray-600 dark:text-gray-400\">\n                  <div className=\"flex justify-between\">\n                    <span>Organisation:</span>\n                    <span className=\"font-medium\">{connectionStatus?.tenantName || 'Unknown'}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Tenant ID:</span>\n                    <span className=\"font-mono text-xs\">{connectionStatus?.tenantId?.slice(0, 8) || 'Unknown'}...</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Status:</span>\n                    <span className=\"font-medium\">{connectionStatus?.status || 'Connected'}</span>\n                  </div>\n                </div>\n              </div>\n              <div>\n                <h4 className=\"text-sm font-medium text-gray-900 dark:text-white mb-2\">Token health</h4>\n                <div className=\"space-y-2 text-sm text-gray-600 dark:text-gray-400\">\n                  <div className=\"flex justify-between\">\n                    <span>Expires:</span>\n                    <span>{formatTokenExpiry(connectionStatus?.expiresAt)}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Scope:</span>\n                    <span>{connectionStatus?.scopes?.join(', ') || 'accounting.read'}</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {!isConnected && (\n        <div className=\"border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-900/40 px-6 py-4 text-sm text-gray-600 dark:text-gray-400\">\n          <p className=\"mb-2 font-medium text-gray-700 dark:text-gray-300\">Why connect?</p>\n          <ul className=\"list-disc pl-5 space-y-1\">\n            <li>Sync live invoices and outstanding balances</li>\n            <li>Automatically calculate DSO/DPO from ledger data</li>\n            <li>Feed MCP-driven recommendations with historical trends</li>\n          </ul>\n        </div>\n      )}\n    </div>\n  )\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\working-capital\\hooks\\useAuditTrail.js",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The ref value 'componentMountTime.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'componentMountTime.current' to a variable inside the effect, and use that variable in the cleanup function.",
        "line": 35,
        "column": 63,
        "nodeType": "Identifier",
        "endLine": 35,
        "endColumn": 70
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "The ref value 'sessionActions.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'sessionActions.current' to a variable inside the effect, and use that variable in the cleanup function.",
        "line": 43,
        "column": 44,
        "nodeType": "Identifier",
        "endLine": 43,
        "endColumn": 51
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_index' is defined but never used.",
        "line": 190,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 190,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_index" },
            "fix": { "range": [5623, 5631], "text": "" },
            "desc": "Remove unused variable '_index'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 196,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 196,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Audit Trail Hook for Working Capital Components\n * Provides easy integration of audit logging into React components\n */\n\nimport { useEffect, useCallback, useRef } from 'react'\nimport { useAuth } from '../../../hooks/useAuth'\nimport { auditService, AUDIT_EVENTS, AUDIT_SEVERITY, COMPLIANCE_STANDARDS } from '../services/auditService'\n\nexport const useAuditTrail = (componentName) => {\n  const { user } = useAuth()\n  const componentMountTime = useRef(Date.now())\n  const sessionActions = useRef([])\n\n  // Initialize audit service when component mounts\n  useEffect(() => {\n    if (user) {\n      auditService.initialize(user)\n\n      // Log component access\n      auditService.logEvent(\n        AUDIT_EVENTS.DATA_VIEW,\n        {\n          component: componentName,\n          accessTime: new Date().toISOString(),\n          userRole: user.role\n        },\n        AUDIT_SEVERITY.INFO,\n        [COMPLIANCE_STANDARDS.INTERNAL]\n      )\n    }\n\n    // Cleanup on unmount\n    return () => {\n      const sessionDuration = Date.now() - componentMountTime.current\n      auditService.logEvent(\n        AUDIT_EVENTS.DATA_VIEW,\n        {\n          component: componentName,\n          action: 'component_unmount',\n          sessionDuration: Math.round(sessionDuration / 1000), // seconds\n          totalActions: sessionActions.current.length,\n          actionsPerformed: sessionActions.current\n        },\n        AUDIT_SEVERITY.INFO,\n        [COMPLIANCE_STANDARDS.INTERNAL]\n      )\n    }\n  }, [user, componentName])\n\n  // Track user actions within the component\n  const trackAction = useCallback((action, details = {}) => {\n    const actionId = auditService.logEvent(\n      action,\n      {\n        component: componentName,\n        timestamp: new Date().toISOString(),\n        ...details\n      },\n      AUDIT_SEVERITY.INFO,\n      [COMPLIANCE_STANDARDS.INTERNAL]\n    )\n\n    sessionActions.current.push({\n      action,\n      timestamp: new Date().toISOString(),\n      details\n    })\n\n    return actionId\n  }, [componentName])\n\n  // Log data access events\n  const logDataAccess = useCallback((dataType, details = {}) => {\n    return auditService.logEvent(\n      AUDIT_EVENTS.DATA_VIEW,\n      {\n        component: componentName,\n        dataType,\n        accessMethod: details.method || 'user_initiated',\n        filters: details.filters,\n        period: details.period,\n        ...details\n      },\n      AUDIT_SEVERITY.INFO,\n      [COMPLIANCE_STANDARDS.SOX, COMPLIANCE_STANDARDS.INTERNAL]\n    )\n  }, [componentName])\n\n  // Log export actions with high compliance requirements\n  const logExport = useCallback((format, details = {}) => {\n    return auditService.logDataExport(format, {\n      component: componentName,\n      includeForecasts: details.includeForecasts,\n      includeRecommendations: details.includeRecommendations,\n      dateRange: details.dateRange,\n      recordCount: details.recordCount,\n      fileSize: details.fileSize,\n      ...details\n    })\n  }, [componentName])\n\n  // Log configuration changes\n  const logConfigChange = useCallback((setting, oldValue, newValue, reason = '') => {\n    return auditService.logSettingsUpdate(\n      setting,\n      oldValue,\n      newValue,\n      {\n        component: componentName,\n        reason,\n        userInitiated: true\n      }\n    )\n  }, [componentName])\n\n  // Log errors with context\n  const logError = useCallback((error, context = {}) => {\n    return auditService.logError(error, {\n      component: componentName,\n      userAction: context.action,\n      inputData: context.inputData,\n      timestamp: new Date().toISOString(),\n      ...context\n    })\n  }, [componentName])\n\n  // Log performance metrics\n  const logPerformance = useCallback((metric, value, threshold, context = {}) => {\n    return auditService.logPerformanceIssue(\n      metric,\n      value,\n      threshold,\n      {\n        component: componentName,\n        measurement: context.measurement || 'milliseconds',\n        userAction: context.action,\n        ...context\n      }\n    )\n  }, [componentName])\n\n  // Log forecast generation\n  const logForecastGeneration = useCallback((forecastType, options = {}) => {\n    return auditService.logForecastGeneration(forecastType, {\n      component: componentName,\n      userInitiated: true,\n      ...options\n    })\n  }, [componentName])\n\n  // Log recommendation actions\n  const logRecommendationAction = useCallback((recommendationId, action, details = {}) => {\n    return auditService.logRecommendationAction(recommendationId, action, {\n      component: componentName,\n      userInitiated: true,\n      timestamp: new Date().toISOString(),\n      ...details\n    })\n  }, [componentName])\n\n  // Log API interactions\n  const logAPICall = useCallback((endpoint, method, status, details = {}) => {\n    const eventType = status >= 400 ? AUDIT_EVENTS.API_FAILURE : AUDIT_EVENTS.DATA_VIEW\n    const severity = status >= 500 ? AUDIT_SEVERITY.CRITICAL\n                   : status >= 400 ? AUDIT_SEVERITY.ERROR\n                   : AUDIT_SEVERITY.INFO\n\n    return auditService.logEvent(\n      eventType,\n      {\n        component: componentName,\n        endpoint,\n        method,\n        statusCode: status,\n        responseTime: details.responseTime,\n        requestSize: details.requestSize,\n        responseSize: details.responseSize,\n        ...details\n      },\n      severity,\n      [COMPLIANCE_STANDARDS.ISO27001, COMPLIANCE_STANDARDS.INTERNAL]\n    )\n  }, [componentName])\n\n  // Batch logging for multiple actions\n  const logBatch = useCallback((actions) => {\n    const batchId = `batch_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`\n\n    actions.forEach((actionData, _index) => {\n      auditService.logEvent(\n        actionData.eventType,\n        {\n          component: componentName,\n          batchId,\n          batchIndex: index,\n          batchSize: actions.length,\n          ...actionData.details\n        },\n        actionData.severity || AUDIT_SEVERITY.INFO,\n        actionData.compliance || [COMPLIANCE_STANDARDS.INTERNAL]\n      )\n    })\n\n    return batchId\n  }, [componentName])\n\n  // Get component audit statistics\n  const getAuditStats = useCallback(() => {\n    return {\n      component: componentName,\n      sessionDuration: Date.now() - componentMountTime.current,\n      totalActions: sessionActions.current.length,\n      lastAction: sessionActions.current[sessionActions.current.length - 1],\n      ...auditService.getStats()\n    }\n  }, [componentName])\n\n  return {\n    trackAction,\n    logDataAccess,\n    logExport,\n    logConfigChange,\n    logError,\n    logPerformance,\n    logForecastGeneration,\n    logRecommendationAction,\n    logAPICall,\n    logBatch,\n    getAuditStats,\n    flush: auditService.flush\n  }\n}\n\n// Hook for dashboard-level audit tracking\nexport const useDashboardAudit = () => {\n  const audit = useAuditTrail('WorkingCapitalDashboard')\n\n  // Dashboard-specific logging functions\n  const logDashboardLoad = useCallback((loadTime, dataPoints) => {\n    return audit.logPerformance('dashboard_load_time', loadTime, 3000, {\n      action: 'dashboard_load',\n      dataPoints,\n      measurement: 'milliseconds'\n    })\n  }, [audit])\n\n  const logPeriodChange = useCallback((oldPeriod, newPeriod) => {\n    return audit.logConfigChange('reporting_period', oldPeriod, newPeriod, 'user_selection')\n  }, [audit])\n\n  const logCurrencyChange = useCallback((oldCurrency, newCurrency) => {\n    return audit.logConfigChange('display_currency', oldCurrency, newCurrency, 'user_selection')\n  }, [audit])\n\n  const logMetricRefresh = useCallback((source, recordsUpdated) => {\n    return auditService.logDataRefresh(source, {\n      component: 'WorkingCapitalDashboard',\n      type: 'manual',\n      recordsUpdated,\n      timestamp: new Date().toISOString()\n    })\n  }, [])\n\n  const logAlertInteraction = useCallback((alertId, action) => {\n    return audit.trackAction(AUDIT_EVENTS.RECOMMENDATION_VIEW, {\n      alertId,\n      alertAction: action,\n      severity: 'user_interaction'\n    })\n  }, [audit])\n\n  return {\n    ...audit,\n    logDashboardLoad,\n    logPeriodChange,\n    logCurrencyChange,\n    logMetricRefresh,\n    logAlertInteraction\n  }\n}\n\n// Hook for export audit tracking\nexport const useExportAudit = () => {\n  const audit = useAuditTrail('ExportService')\n\n  const logExportAttempt = useCallback((format, options = {}) => {\n    return audit.logExport(format, {\n      exportOptions: options,\n      userInitiated: true,\n      timestamp: new Date().toISOString()\n    })\n  }, [audit])\n\n  const logExportSuccess = useCallback((format, fileSize, duration) => {\n    return audit.trackAction(AUDIT_EVENTS.DATA_EXPORT, {\n      format,\n      fileSize,\n      duration,\n      status: 'success'\n    })\n  }, [audit])\n\n  const logExportFailure = useCallback((format, error, context = {}) => {\n    return audit.logError(error, {\n      format,\n      exportAttempt: true,\n      ...context\n    })\n  }, [audit])\n\n  return {\n    logExportAttempt,\n    logExportSuccess,\n    logExportFailure,\n    ...audit\n  }\n}\n\n// Hook for forecast audit tracking\nexport const useForecastAudit = () => {\n  const audit = useAuditTrail('ForecastService')\n\n  const logForecastRequest = useCallback((forecastType, parameters) => {\n    return audit.logForecastGeneration(forecastType, {\n      parameters,\n      requestTimestamp: new Date().toISOString()\n    })\n  }, [audit])\n\n  const logForecastCompletion = useCallback((forecastType, duration, accuracy) => {\n    return audit.trackAction(AUDIT_EVENTS.FORECAST_GENERATE, {\n      forecastType,\n      processingDuration: duration,\n      accuracyScore: accuracy,\n      status: 'completed'\n    })\n  }, [audit])\n\n  const logScenarioCreation = useCallback((scenarioName, parameters) => {\n    return audit.trackAction(AUDIT_EVENTS.SCENARIO_CREATE, {\n      scenarioName,\n      parameters,\n      userInitiated: true\n    })\n  }, [audit])\n\n  const logRiskAssessment = useCallback((riskLevel, riskCount, methodology) => {\n    return auditService.logRiskAssessment(riskLevel, [], {\n      component: 'ForecastService',\n      riskCount,\n      methodology,\n      userInitiated: true\n    })\n  }, [])\n\n  return {\n    logForecastRequest,\n    logForecastCompletion,\n    logScenarioCreation,\n    logRiskAssessment,\n    ...audit\n  }\n}\n\nexport default useAuditTrail",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\working-capital\\hooks\\useWorkingCapitalMetrics.js",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Unexpected token is",
        "line": 131,
        "column": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useCallback, useEffect, useMemo, useState } from 'react'\nimport { workingCapitalApi } from '../../../services/api/workingCapitalApi'\nimport { logError, logWarn } from '../../../utils/structuredLogger.js'\n\nconst percentChange = (current, previous) => {\n  if (current === null || current === undefined || previous === null || previous === undefined) {\n    return null\n  }\n\n  if (previous === 0) {\n    return null\n  }\n\n  return ((current - previous) / Math.abs(previous)) * 100\n}\n\nconst buildSummary = (latest, previous) => {\n  if (!latest) {\n    return null\n  }\n\n  const workingCapitalCurrent = latest.currentAssets - latest.currentLiabilities\n  const workingCapitalPrevious = previous\n    ? previous.currentAssets - previous.currentLiabilities\n    : null\n\n  return {\n    workingCapital: workingCapitalCurrent,\n    workingCapitalChange: percentChange(workingCapitalCurrent, workingCapitalPrevious),\n    cashConversionCycle: latest.cashConversionCycle,\n    cccChange: percentChange(latest.cashConversionCycle, previous?.cashConversionCycle),\n    currentRatio: latest.workingCapitalRatio,\n    currentRatioChange: percentChange(latest.workingCapitalRatio, previous?.workingCapitalRatio),\n    quickRatio: latest.quickRatio,\n    quickRatioChange: percentChange(latest.quickRatio, previous?.quickRatio)\n  }\n}\n\nconst buildReceivables = latest => {\n  if (!latest) {\n    return null\n  }\n\n  return {\n    total: latest.accountsReceivable ?? null,\n    dso: latest.dso ?? null,\n    overdue: null,\n    aging: null\n  }\n}\n\nconst buildPayables = latest => {\n  if (!latest) {\n    return null\n  }\n\n  return {\n    total: latest.accountsPayable ?? null,\n    dpo: latest.dpo ?? null,\n    discountsAvailable: null,\n    aging: null\n  }\n}\n\nconst buildInventory = (latest, inventorySummary) => {\n  if (!latest && !inventorySummary) {\n    return null\n  }\n\n  return {\n    total: inventorySummary?.totalValue ?? latest?.inventory ?? null,\n    dio: latest?.dio ?? null,\n    turnoverRatio: inventorySummary?.turnover ?? null\n  }\n}\n\nconst buildCccHistory = entries => {\n  if (!entries?.length) {\n    return []\n  }\n\n  return entries\n    .slice(0, 6)\n    .reverse()\n    .map(entry => ({\n      month: new Date(entry.date).toLocaleDateString('en', { month: 'short' }),\n      ccc: entry.cashConversionCycle,\n      dso: entry.dso,\n      dio: entry.dio,\n      dpo: entry.dpo\n    }))\n}\n\nconst buildCashFlowSeries = (rows, openingBalance) => {\n  if (!rows?.length) {\n    return []\n  }\n\n  const ordered = [...rows].reverse()\n  let runningBalance = openingBalance ?? 0\n\n  return ordered.map(row => {\n    const inflow = ['operatingCashFlow', 'financingCashFlow', 'investingCashFlow']\n      .map(key => Math.max(row[key] ?? 0, 0))\n      .reduce((acc, value) => acc + value, 0)\n\n    const outflow = ['operatingCashFlow', 'financingCashFlow', 'investingCashFlow']\n      .map(key => Math.min(row[key] ?? 0, 0))\n      .reduce((acc, value) => acc + value, 0)\n\n    runningBalance += row.netCashFlow ?? 0\n\n    return {\n      date: row.date,\n      inflow,\n      outflow: Math.abs(outflow),\n      netFlow: row.netCashFlow ?? inflow + outflow,\n      runningBalance\n    }\n  })\n}\n\nconst buildAlerts = (summary, receivables, payables, inventory) => {\n  const alerts = []\n\n  if (summary?.cashConversionCycle && summary.cashConversionCycle > 60) {\n    alerts.push({\n      id: 'ccc-alert',\n      severity: 'warning',\n      title: 'Cash conversion cycle deteriorating',\n      description: CCC is  days. Target is < 45 days.,\n      action: 'Review receivable collections and inventory turns'\n    })\n  }\n\n  if (receivables?.dso && receivables.dso > 45) {\n    alerts.push({\n      id: 'dso-alert',\n      severity: 'warning',\n      title: 'Days sales outstanding elevated',\n      description: Current DSO is  days. Typical SaaS benchmark is 35-40 days.,\n      action: 'Prioritise collections for invoices older than 30 days'\n    })\n  }\n\n  if (payables?.dpo && payables.dpo < 20) {\n    alerts.push({\n      id: 'dpo-alert',\n      severity: 'info',\n      title: 'Supplier payments being settled early',\n      description: DPO is  days. Consider negotiating extended terms.,\n      action: 'Engage top suppliers regarding 45-day terms'\n    })\n  }\n\n  if (inventory?.dio && inventory.dio > 45) {\n    alerts.push({\n      id: 'inventory-alert',\n      severity: 'warning',\n      title: 'Inventory days on hand above target',\n      description: Inventory is sitting  days on average.,\n      action: 'Reduce purchase orders for slow-moving SKUs'\n    })\n  }\n\n  return alerts\n}\n\nconst buildRecommendations = (summary, receivables, payables, inventory) => {\n  const recommendations = []\n\n  if (receivables?.total && receivables.dso && receivables.dso > 45) {\n    recommendations.push({\n      id: 'accelerate-collections',\n      type: 'receivables',\n      priority: 'high',\n      title: 'Accelerate collections',\n      description: 'Implement targeted outreach on invoices older than 30 days.',\n      impact: Potential cash unlock: ,\n      effort: 'medium',\n      timeframe: '2-3 weeks'\n    })\n  }\n\n  if (payables?.total && payables.dpo && payables.dpo < 25) {\n    recommendations.push({\n      id: 'extend-terms',\n      type: 'payables',\n      priority: 'medium',\n      title: 'Optimise supplier payment terms',\n      description: 'Explore extending standard payment terms to 45 days with strategic partners.',\n      impact: Potential cash preservation: ,\n      effort: 'low',\n      timeframe: '1-2 weeks'\n    })\n  }\n\n  if (inventory?.total && inventory.dio && inventory.dio > 45) {\n    recommendations.push({\n      id: 'reduce-inventory',\n      type: 'inventory',\n      priority: 'high',\n      title: 'Reduce excess inventory',\n      description: 'Slow-moving items are tying up cash. Prioritise liquidation or production rescheduling.',\n      impact: Potential free cash: ,\n      effort: 'high',\n      timeframe: '4-6 weeks'\n    })\n  }\n\n  return recommendations\n}\n\nconst createExporter = data => async format => {\n  if (!data) {\n    throw new Error('No working capital data to export')\n  }\n\n  const timestamp = new Date().toISOString().split('T')[0]\n\n  if (format === 'csv') {\n    const headers = ['Metric', 'Value']\n    const rows = []\n\n    if (data.summary) {\n      rows.push(['Working Capital', data.summary.workingCapital ?? ''])\n      rows.push(['Cash Conversion Cycle', data.summary.cashConversionCycle ?? ''])\n      rows.push(['Current Ratio', data.summary.currentRatio ?? ''])\n      rows.push(['Quick Ratio', data.summary.quickRatio ?? ''])\n    }\n\n    if (data.receivables) {\n      rows.push(['Accounts Receivable', data.receivables.total ?? ''])\n      rows.push(['DSO', data.receivables.dso ?? ''])\n    }\n\n    if (data.payables) {\n      rows.push(['Accounts Payable', data.payables.total ?? ''])\n      rows.push(['DPO', data.payables.dpo ?? ''])\n    }\n\n    if (data.inventory) {\n      rows.push(['Inventory Value', data.inventory.total ?? ''])\n      rows.push(['DIO', data.inventory.dio ?? ''])\n    }\n\n    const csvBody = [headers.join(','), ...rows.map(row => row.join(','))].join('\\n')\n    const blob = new Blob([csvBody], { type: 'text/csv' })\n    const link = document.createElement('a')\n    link.href = URL.createObjectURL(blob)\n    link.download = working-capital-.csv\n    link.click()\n    return\n  }\n\n  if (format === 'json') {\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' })\n    const link = document.createElement('a')\n    link.href = URL.createObjectURL(blob)\n    link.download = working-capital-.json\n    link.click()\n    return\n  }\n\n  throw new Error(Export format \\\"\\\" is not supported yet.)\n}\n\nexport function useWorkingCapitalMetrics(period = 'current') {\n  const [data, setData] = useState(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n\n  const fetchData = useCallback(async () => {\n    setLoading(true)\n    setError(null)\n\n    try {\n      const [workingCapital, cashFlow, financialMetrics, inventory] = await Promise.all([\n        workingCapitalApi.getWorkingCapital(period),\n        workingCapitalApi.getCashFlow(),\n        workingCapitalApi.getFinancialMetrics(),\n        workingCapitalApi.getDashboardSummary().then(summary => summary?.inventory ?? null).catch(error => {\n          logWarn('Failed to load dashboard summary', error)\n          return null\n        })\n      ])\n\n      const entries = workingCapital?.data ?? []\n      if (!entries.length) {\n        throw new Error('No working capital records available yet.')\n      }\n\n      const latest = workingCapital.latest ?? entries[0]\n      const previous = entries[1] ?? null\n\n      const summary = buildSummary(latest, previous)\n      const receivables = buildReceivables(latest)\n      const payables = buildPayables(latest)\n      const inventoryMetrics = buildInventory(latest, inventory)\n      const cashFlowSeries = buildCashFlowSeries(cashFlow?.data ?? [], latest?.cash)\n      const cccHistory = buildCccHistory(entries)\n      const alerts = buildAlerts(summary, receivables, payables, inventoryMetrics)\n      const recommendations = buildRecommendations(summary, receivables, payables, inventoryMetrics)\n\n      setData({\n        summary,\n        receivables,\n        payables,\n        inventory: inventoryMetrics,\n        cashFlow: {\n          series: cashFlowSeries,\n          latest: cashFlow?.latest ?? null\n        },\n        recommendations,\n        alerts,\n        cccHistory,\n        source: {\n          workingCapital: workingCapital?.dataSource ?? null,\n          cashFlow: cashFlow?.dataSource ?? null,\n          metrics: financialMetrics?.dataSource ?? null\n        }\n      })\n    } catch (err) {\n      logError('Failed to load working capital metrics', err)\n      setError(err instanceof Error ? err : new Error('Failed to load working capital metrics'))\n      setData(null)\n    } finally {\n      setLoading(false)\n    }\n  }, [period])\n\n  useEffect(() => {\n    fetchData()\n  }, [fetchData])\n\n  const exportData = useMemo(() => createExporter(data), [data])\n  const isUsingRealData = Boolean(data?.source?.workingCapital === 'database')\n\n  return {\n    data,\n    loading,\n    error,\n    refetch: fetchData,\n    exportData,\n    isXeroConnected: false,\n    xeroStatus: null,\n    isUsingRealData\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\working-capital\\models\\FinancialForecastModels.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_index' is defined but never used.",
        "line": 125,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 125,
        "endColumn": 37,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_index" },
            "fix": { "range": [3963, 3971], "text": "" },
            "desc": "Remove unused variable '_index'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 126,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 126,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Financial Forecasting Models for Working Capital Analysis\n * Provides comprehensive forecasting algorithms and scenario modeling\n */\n\n// Time series forecasting using moving averages and exponential smoothing\nexport class TimeSeriesForecaster {\n  constructor(data, options = {}) {\n    this.data = data\n    this.smoothingFactor = options.smoothingFactor || 0.3\n    this.seasonalityPeriod = options.seasonalityPeriod || 12\n    this.trendPeriods = options.trendPeriods || 6\n  }\n\n  // Simple Moving Average\n  simpleMovingAverage(periods = 3) {\n    if (this.data.length < periods) return this.data\n\n    const forecast = []\n    for (let i = 0; i < this.data.length; i++) {\n      if (i < periods - 1) {\n        forecast.push(this.data[i])\n      } else {\n        const sum = this.data.slice(i - periods + 1, i + 1).reduce((a, b) => a + b.value, 0)\n        forecast.push({\n          ...this.data[i],\n          value: sum / periods,\n          method: 'SMA'\n        })\n      }\n    }\n    return forecast\n  }\n\n  // Exponential Smoothing\n  exponentialSmoothing() {\n    if (this.data.length === 0) return []\n\n    const forecast = [{ ...this.data[0], method: 'ES' }]\n\n    for (let i = 1; i < this.data.length; i++) {\n      const smoothed = (this.smoothingFactor * this.data[i].value) +\n                      ((1 - this.smoothingFactor) * forecast[i - 1].value)\n\n      forecast.push({\n        ...this.data[i],\n        value: smoothed,\n        method: 'ES'\n      })\n    }\n    return forecast\n  }\n\n  // Linear Trend Forecasting\n  linearTrend(periodsToForecast = 6) {\n    if (this.data.length < 2) return this.data\n\n    // Calculate linear regression\n    const n = this.data.length\n    const sumX = n * (n - 1) / 2 // 0 + 1 + 2 + ... + (n-1)\n    const sumY = this.data.reduce((sum, point) => sum + point.value, 0)\n    const sumXY = this.data.reduce((sum, point, index) => sum + (index * point.value), 0)\n    const sumX2 = n * (n - 1) * (2 * n - 1) / 6 // 0² + 1² + 2² + ... + (n-1)²\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX)\n    const intercept = (sumY - slope * sumX) / n\n\n    // Generate forecast\n    const forecast = [...this.data]\n    const lastDate = new Date(this.data[this.data.length - 1].date)\n\n    for (let i = 0; i < periodsToForecast; i++) {\n      const futureIndex = n + i\n      const forecastDate = new Date(lastDate)\n      forecastDate.setMonth(forecastDate.getMonth() + i + 1)\n\n      forecast.push({\n        date: forecastDate.toISOString(),\n        value: intercept + slope * futureIndex,\n        period: `Forecast ${i + 1}`,\n        isForecast: true,\n        method: 'Linear Trend',\n        confidence: Math.max(0.5, 0.9 - (i * 0.1)) // Decreasing confidence\n      })\n    }\n\n    return forecast\n  }\n\n  // Seasonal decomposition and forecasting\n  seasonalForecast(periodsToForecast = 6) {\n    if (this.data.length < this.seasonalityPeriod * 2) {\n      return this.linearTrend(periodsToForecast)\n    }\n\n    // Calculate seasonal indices\n    const seasonalIndices = this.calculateSeasonalIndices()\n\n    // Deseasonalize data and apply trend\n    const deseasonalized = this.data.map((point, index) => ({\n      ...point,\n      value: point.value / seasonalIndices[index % this.seasonalityPeriod]\n    }))\n\n    // Apply linear trend to deseasonalized data\n    const trendForecaster = new TimeSeriesForecaster(deseasonalized)\n    const trendForecast = trendForecaster.linearTrend(periodsToForecast)\n\n    // Reapply seasonality to forecast\n    return trendForecast.map((point, index) => {\n      const seasonalIndex = seasonalIndices[index % this.seasonalityPeriod]\n      return {\n        ...point,\n        value: point.value * seasonalIndex,\n        method: 'Seasonal'\n      }\n    })\n  }\n\n  calculateSeasonalIndices() {\n    const seasonalSums = new Array(this.seasonalityPeriod).fill(0)\n    const seasonalCounts = new Array(this.seasonalityPeriod).fill(0)\n\n    // Calculate averages for each seasonal period\n    this.data.forEach((point, _index) => {\n      const seasonIndex = index % this.seasonalityPeriod\n      seasonalSums[seasonIndex] += point.value\n      seasonalCounts[seasonIndex]++\n    })\n\n    const seasonalAverages = seasonalSums.map((sum, index) =>\n      seasonalCounts[index] > 0 ? sum / seasonalCounts[index] : 1\n    )\n\n    // Calculate overall average\n    const overallAverage = seasonalAverages.reduce((a, b) => a + b, 0) / this.seasonalityPeriod\n\n    // Return seasonal indices (normalized)\n    return seasonalAverages.map(avg => avg / overallAverage)\n  }\n}\n\n// Cash Flow Forecasting Models\nexport class CashFlowForecaster {\n  constructor(historicalData, options = {}) {\n    this.historical = historicalData\n    this.options = {\n      forecastPeriods: options.forecastPeriods || 12,\n      confidenceLevel: options.confidenceLevel || 0.95,\n      scenarios: options.scenarios || ['base', 'optimistic', 'pessimistic']\n    }\n  }\n\n  // Monte Carlo simulation for cash flow forecasting\n  monteCarloForecast(iterations = 1000) {\n    const results = {\n      base: [],\n      optimistic: [],\n      pessimistic: [],\n      statistics: {\n        mean: [],\n        median: [],\n        confidence95: [],\n        confidence75: []\n      }\n    }\n\n    for (let period = 0; period < this.options.forecastPeriods; period++) {\n      const simulations = []\n\n      for (let i = 0; i < iterations; i++) {\n        const simulation = this.generateScenarioForecast('monte_carlo', period)\n        simulations.push(simulation.netCashFlow)\n      }\n\n      simulations.sort((a, b) => a - b)\n\n      results.statistics.mean.push({\n        period: period + 1,\n        value: simulations.reduce((a, b) => a + b, 0) / iterations\n      })\n\n      results.statistics.median.push({\n        period: period + 1,\n        value: simulations[Math.floor(iterations / 2)]\n      })\n\n      results.statistics.confidence95.push({\n        period: period + 1,\n        lower: simulations[Math.floor(iterations * 0.025)],\n        upper: simulations[Math.floor(iterations * 0.975)]\n      })\n\n      results.statistics.confidence75.push({\n        period: period + 1,\n        lower: simulations[Math.floor(iterations * 0.125)],\n        upper: simulations[Math.floor(iterations * 0.875)]\n      })\n    }\n\n    return results\n  }\n\n  // Generate scenario-based forecasts\n  generateScenarioForecast(scenario, period) {\n    const baseMetrics = this.calculateBaseMetrics()\n    let multipliers = { inflow: 1, outflow: 1, volatility: 1 }\n\n    switch (scenario) {\n      case 'optimistic':\n        multipliers = { inflow: 1.15, outflow: 0.9, volatility: 0.8 }\n        break\n      case 'pessimistic':\n        multipliers = { inflow: 0.85, outflow: 1.1, volatility: 1.3 }\n        break\n      case 'stressed':\n        multipliers = { inflow: 0.7, outflow: 1.25, volatility: 1.8 }\n        break\n      case 'monte_carlo':\n        // Random multipliers for Monte Carlo\n        multipliers = {\n          inflow: 0.8 + (Math.random() * 0.4), // 0.8 to 1.2\n          outflow: 0.9 + (Math.random() * 0.2), // 0.9 to 1.1\n          volatility: 0.7 + (Math.random() * 0.6) // 0.7 to 1.3\n        }\n        break\n    }\n\n    // Apply seasonality if detected\n    const seasonalFactor = this.getSeasonalFactor(period)\n\n    // Calculate forecast values\n    const baseInflow = baseMetrics.avgInflow * multipliers.inflow * seasonalFactor\n    const baseOutflow = baseMetrics.avgOutflow * multipliers.outflow\n\n    // Add volatility\n    const inflowVariance = baseInflow * baseMetrics.inflowVolatility * multipliers.volatility * (Math.random() - 0.5)\n    const outflowVariance = baseOutflow * baseMetrics.outflowVolatility * multipliers.volatility * (Math.random() - 0.5)\n\n    const cashInflow = Math.max(0, baseInflow + inflowVariance)\n    const cashOutflow = Math.max(0, baseOutflow + outflowVariance)\n\n    return {\n      period: period + 1,\n      cashInflow: Math.round(cashInflow),\n      cashOutflow: Math.round(cashOutflow),\n      netCashFlow: Math.round(cashInflow - cashOutflow),\n      scenario,\n      confidence: Math.max(0.5, 0.95 - (period * 0.05))\n    }\n  }\n\n  calculateBaseMetrics() {\n    const inflows = this.historical.map(h => h.cashInflow || 0)\n    const outflows = this.historical.map(h => h.cashOutflow || 0)\n\n    return {\n      avgInflow: inflows.reduce((a, b) => a + b, 0) / inflows.length,\n      avgOutflow: outflows.reduce((a, b) => a + b, 0) / outflows.length,\n      inflowVolatility: this.calculateVolatility(inflows),\n      outflowVolatility: this.calculateVolatility(outflows)\n    }\n  }\n\n  calculateVolatility(values) {\n    const mean = values.reduce((a, b) => a + b, 0) / values.length\n    const variance = values.reduce((sum, value) => sum + Math.pow(value - mean, 2), 0) / values.length\n    return Math.sqrt(variance) / mean // Coefficient of variation\n  }\n\n  getSeasonalFactor(period) {\n    // Simple seasonal pattern - can be enhanced with actual seasonal analysis\n    const seasonalPattern = [0.9, 0.85, 0.95, 1.0, 1.05, 1.1, 1.15, 1.1, 1.05, 1.0, 0.95, 0.9]\n    return seasonalPattern[period % 12]\n  }\n}\n\n// Working Capital Optimization Models\nexport class WorkingCapitalOptimizer {\n  constructor(currentMetrics, industryBenchmarks = {}) {\n    this.current = currentMetrics\n    this.benchmarks = {\n      dso: industryBenchmarks.dso || 35,\n      dio: industryBenchmarks.dio || 30,\n      dpo: industryBenchmarks.dpo || 40,\n      currentRatio: industryBenchmarks.currentRatio || 2.0,\n      quickRatio: industryBenchmarks.quickRatio || 1.5,\n      ...industryBenchmarks\n    }\n  }\n\n  // Calculate optimization opportunities\n  calculateOptimizationOpportunities() {\n    const opportunities = []\n\n    // DSO optimization\n    if (this.current.dso > this.benchmarks.dso) {\n      const dsoImprovement = this.current.dso - this.benchmarks.dso\n      const potentialCashRelease = (dsoImprovement / 365) * (this.current.annualRevenue || 0)\n\n      opportunities.push({\n        metric: 'DSO',\n        current: this.current.dso,\n        target: this.benchmarks.dso,\n        improvement: dsoImprovement,\n        potentialImpact: potentialCashRelease,\n        priority: potentialCashRelease > 100000 ? 'High' : 'Medium',\n        recommendations: this.getDSORecommendations(dsoImprovement)\n      })\n    }\n\n    // DIO optimization\n    if (this.current.dio > this.benchmarks.dio) {\n      const dioImprovement = this.current.dio - this.benchmarks.dio\n      const potentialCashRelease = (dioImprovement / 365) * (this.current.cogs || 0)\n\n      opportunities.push({\n        metric: 'DIO',\n        current: this.current.dio,\n        target: this.benchmarks.dio,\n        improvement: dioImprovement,\n        potentialImpact: potentialCashRelease,\n        priority: potentialCashRelease > 150000 ? 'High' : 'Medium',\n        recommendations: this.getDIORecommendations(dioImprovement)\n      })\n    }\n\n    // DPO optimization\n    if (this.current.dpo < this.benchmarks.dpo) {\n      const dpoImprovement = this.benchmarks.dpo - this.current.dpo\n      const potentialCashRelease = (dpoImprovement / 365) * (this.current.cogs || 0)\n\n      opportunities.push({\n        metric: 'DPO',\n        current: this.current.dpo,\n        target: this.benchmarks.dpo,\n        improvement: dpoImprovement,\n        potentialImpact: potentialCashRelease,\n        priority: potentialCashRelease > 100000 ? 'High' : 'Medium',\n        recommendations: this.getDPORecommendations(dpoImprovement)\n      })\n    }\n\n    return opportunities.sort((a, b) => b.potentialImpact - a.potentialImpact)\n  }\n\n  getDSORecommendations(improvement) {\n    const recommendations = []\n\n    if (improvement > 10) {\n      recommendations.push('Implement automated payment reminders')\n      recommendations.push('Offer early payment discounts (2/10 net 30)')\n      recommendations.push('Review and tighten credit policies')\n    }\n\n    if (improvement > 15) {\n      recommendations.push('Consider factoring for large receivables')\n      recommendations.push('Implement credit insurance for high-risk customers')\n    }\n\n    return recommendations\n  }\n\n  getDIORecommendations(improvement) {\n    const recommendations = []\n\n    if (improvement > 15) {\n      recommendations.push('Implement ABC analysis for inventory classification')\n      recommendations.push('Negotiate consignment agreements with suppliers')\n      recommendations.push('Improve demand forecasting accuracy')\n    }\n\n    if (improvement > 25) {\n      recommendations.push('Consider just-in-time (JIT) inventory management')\n      recommendations.push('Liquidate slow-moving inventory')\n      recommendations.push('Implement vendor-managed inventory (VMI)')\n    }\n\n    return recommendations\n  }\n\n  getDPORecommendations(improvement) {\n    const recommendations = []\n\n    if (improvement > 5) {\n      recommendations.push('Negotiate extended payment terms with key suppliers')\n      recommendations.push('Optimize payment scheduling to maximize cash flow')\n    }\n\n    if (improvement > 10) {\n      recommendations.push('Implement supply chain financing programs')\n      recommendations.push('Consider early payment discounts vs. cash flow impact')\n      recommendations.push('Consolidate suppliers for better negotiation power')\n    }\n\n    return recommendations\n  }\n\n  // Calculate the impact of implementing optimization opportunities\n  calculateOptimizationImpact(opportunities) {\n    let totalCashRelease = 0\n    let newCCC = this.current.dso + this.current.dio - this.current.dpo\n\n    opportunities.forEach(opp => {\n      totalCashRelease += opp.potentialImpact\n\n      switch (opp.metric) {\n        case 'DSO':\n          newCCC = newCCC - opp.improvement\n          break\n        case 'DIO':\n          newCCC = newCCC - opp.improvement\n          break\n        case 'DPO':\n          newCCC = newCCC - opp.improvement\n          break\n      }\n    })\n\n    return {\n      totalCashRelease,\n      currentCCC: this.current.dso + this.current.dio - this.current.dpo,\n      optimizedCCC: newCCC,\n      cccImprovement: (this.current.dso + this.current.dio - this.current.dpo) - newCCC,\n      roi: totalCashRelease > 0 ? (totalCashRelease * 0.05) : 0 // Assuming 5% cost of capital\n    }\n  }\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\features\\working-capital\\services\\exportService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'data' is defined but never used.",
        "line": 14,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "data" },
            "fix": { "range": [359, 363], "text": "" },
            "desc": "Remove unused variable 'data'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_index' is defined but never used.",
        "line": 563,
        "column": 58,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 563,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_index" },
            "fix": { "range": [21975, 21983], "text": "" },
            "desc": "Remove unused variable '_index'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 564,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 564,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Enhanced Export Service for Working Capital Data\n * Provides comprehensive export capabilities in multiple formats\n */\n\n// Import structured logger\nimport { logError } from '../../../utils/structuredLogger.js'\n\n// PDF export utilities\nimport { jsPDF } from 'jspdf'\nimport 'jspdf-autotable'\n\n// Excel export utilities\nconst createExcelWorkbook = async (data) => {\n  // Dynamic import to avoid bundle size issues\n  const XLSX = await import('xlsx')\n  return XLSX\n}\n\nexport class WorkingCapitalExporter {\n  constructor(data, options = {}) {\n    this.data = data\n    this.options = {\n      includeCharts: options.includeCharts || false,\n      includeForecasts: options.includeForecasts || true,\n      includeRecommendations: options.includeRecommendations || true,\n      dateRange: options.dateRange || 'current',\n      ...options\n    }\n    this.timestamp = new Date().toISOString().split('T')[0]\n  }\n\n  // Export as CSV\n  async exportCSV() {\n    try {\n      const csvContent = this.generateCSVContent()\n      const filename = `working-capital-report-${this.timestamp}.csv`\n      this.downloadFile(csvContent, filename, 'text/csv')\n      return { success: true, filename }\n    } catch (error) {\n      logError('CSV export failed', error)\n      return { success: false, error: error.message }\n    }\n  }\n\n  // Export as Excel\n  async exportExcel() {\n    try {\n      const XLSX = await createExcelWorkbook()\n      const workbook = XLSX.utils.book_new()\n\n      // Summary sheet\n      const summarySheet = this.createSummarySheet(XLSX)\n      XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary')\n\n      // AR Aging sheet\n      if (this.data.receivables) {\n        const arSheet = this.createARAgingSheet(XLSX)\n        XLSX.utils.book_append_sheet(workbook, arSheet, 'AR Aging')\n      }\n\n      // AP Aging sheet\n      if (this.data.payables) {\n        const apSheet = this.createAPAgingSheet(XLSX)\n        XLSX.utils.book_append_sheet(workbook, apSheet, 'AP Aging')\n      }\n\n      // Cash Flow sheet\n      if (this.data.cashFlow) {\n        const cashFlowSheet = this.createCashFlowSheet(XLSX)\n        XLSX.utils.book_append_sheet(workbook, cashFlowSheet, 'Cash Flow')\n      }\n\n      // Forecasts sheet\n      if (this.options.includeForecasts && this.data.forecasts) {\n        const forecastSheet = this.createForecastSheet(XLSX)\n        XLSX.utils.book_append_sheet(workbook, forecastSheet, 'Forecasts')\n      }\n\n      // Recommendations sheet\n      if (this.options.includeRecommendations && this.data.recommendations) {\n        const recsSheet = this.createRecommendationsSheet(XLSX)\n        XLSX.utils.book_append_sheet(workbook, recsSheet, 'Recommendations')\n      }\n\n      // Write and download\n      const filename = `working-capital-report-${this.timestamp}.xlsx`\n      XLSX.writeFile(workbook, filename)\n      return { success: true, filename }\n    } catch (error) {\n      logError('Excel export failed', error)\n      return { success: false, error: error.message }\n    }\n  }\n\n  // Export as PDF\n  async exportPDF() {\n    try {\n      const doc = new jsPDF('p', 'mm', 'a4')\n      let yPosition = 20\n\n      // Title and header\n      doc.setFontSize(20)\n      doc.text('Working Capital Management Report', 20, yPosition)\n      yPosition += 10\n\n      doc.setFontSize(10)\n      doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, yPosition)\n      yPosition += 15\n\n      // Executive Summary\n      yPosition = this.addExecutiveSummary(doc, yPosition)\n\n      // Key Metrics Table\n      yPosition = this.addKeyMetricsTable(doc, yPosition)\n\n      // AR/AP Aging Analysis\n      if (this.data.receivables || this.data.payables) {\n        yPosition = this.addAgingAnalysis(doc, yPosition)\n      }\n\n      // Cash Conversion Cycle Analysis\n      if (this.data.cccDetails) {\n        yPosition = this.addCCCAnalysis(doc, yPosition)\n      }\n\n      // Recommendations\n      if (this.options.includeRecommendations && this.data.recommendations) {\n        yPosition = this.addRecommendations(doc, yPosition)\n      }\n\n      // Risk Assessment\n      if (this.data.risks) {\n        yPosition = this.addRiskAssessment(doc, yPosition)\n      }\n\n      const filename = `working-capital-report-${this.timestamp}.pdf`\n      doc.save(filename)\n      return { success: true, filename }\n    } catch (error) {\n      logError('PDF export failed', error)\n      return { success: false, error: error.message }\n    }\n  }\n\n  // Export as JSON\n  exportJSON() {\n    try {\n      const jsonData = {\n        reportMetadata: {\n          generatedAt: new Date().toISOString(),\n          dataType: 'working-capital-report',\n          version: '1.0',\n          options: this.options\n        },\n        data: this.data\n      }\n\n      const filename = `working-capital-data-${this.timestamp}.json`\n      this.downloadFile(\n        JSON.stringify(jsonData, null, 2),\n        filename,\n        'application/json'\n      )\n      return { success: true, filename }\n    } catch (error) {\n      logError('JSON export failed', error)\n      return { success: false, error: error.message }\n    }\n  }\n\n  // Generate CSV content\n  generateCSVContent() {\n    let csv = 'Working Capital Management Report\\n'\n    csv += `Generated: ${new Date().toLocaleDateString()}\\n\\n`\n\n    // Summary metrics\n    csv += 'EXECUTIVE SUMMARY\\n'\n    csv += 'Metric,Value,Change,Status\\n'\n\n    if (this.data.summary) {\n      csv += `Working Capital,${this.formatCurrency(this.data.summary.workingCapital || 0)},${this.data.summary.workingCapitalChange || 0}%,${this.getStatusText(this.data.summary.workingCapitalChange)}\\n`\n      csv += `Cash Conversion Cycle,${this.data.summary.cashConversionCycle || 0} days,${this.data.summary.cccChange || 0}%,${this.getStatusText(-this.data.summary.cccChange)}\\n`\n      csv += `Current Ratio,${this.data.summary.currentRatio || 0},${this.data.summary.currentRatioChange || 0}%,${this.getStatusText(this.data.summary.currentRatioChange)}\\n`\n      csv += `Quick Ratio,${this.data.summary.quickRatio || 0},${this.data.summary.quickRatioChange || 0}%,${this.getStatusText(this.data.summary.quickRatioChange)}\\n`\n    }\n\n    csv += '\\n'\n\n    // AR Aging\n    if (this.data.receivables) {\n      csv += 'ACCOUNTS RECEIVABLE AGING\\n'\n      csv += 'Aging Bucket,Amount,Percentage\\n'\n      const total = this.data.receivables.total || 0\n      csv += `Current,$${this.data.receivables.current || 0},${total > 0 ? ((this.data.receivables.current / total) * 100).toFixed(1) : 0}%\\n`\n      csv += `1-30 days,$${this.data.receivables['1-30'] || 0},${total > 0 ? ((this.data.receivables['1-30'] / total) * 100).toFixed(1) : 0}%\\n`\n      csv += `31-60 days,$${this.data.receivables['31-60'] || 0},${total > 0 ? ((this.data.receivables['31-60'] / total) * 100).toFixed(1) : 0}%\\n`\n      csv += `61-90 days,$${this.data.receivables['61-90'] || 0},${total > 0 ? ((this.data.receivables['61-90'] / total) * 100).toFixed(1) : 0}%\\n`\n      csv += `90+ days,$${this.data.receivables['90+'] || 0},${total > 0 ? ((this.data.receivables['90+'] / total) * 100).toFixed(1) : 0}%\\n`\n      csv += `Total,$${total},100%\\n\\n`\n\n      if (this.data.receivables.topCustomers) {\n        csv += 'TOP CUSTOMERS BY OUTSTANDING\\n'\n        csv += 'Customer,Amount,Days Outstanding\\n'\n        this.data.receivables.topCustomers.forEach(customer => {\n          csv += `${customer.name},$${customer.amount},${customer.daysOutstanding}\\n`\n        })\n        csv += '\\n'\n      }\n    }\n\n    // AP Aging\n    if (this.data.payables) {\n      csv += 'ACCOUNTS PAYABLE AGING\\n'\n      csv += 'Aging Bucket,Amount,Percentage\\n'\n      const total = this.data.payables.total || 0\n      csv += `Current,$${this.data.payables.current || 0},${total > 0 ? ((this.data.payables.current / total) * 100).toFixed(1) : 0}%\\n`\n      csv += `1-30 days,$${this.data.payables['1-30'] || 0},${total > 0 ? ((this.data.payables['1-30'] / total) * 100).toFixed(1) : 0}%\\n`\n      csv += `31-60 days,$${this.data.payables['31-60'] || 0},${total > 0 ? ((this.data.payables['31-60'] / total) * 100).toFixed(1) : 0}%\\n`\n      csv += `61-90 days,$${this.data.payables['61-90'] || 0},${total > 0 ? ((this.data.payables['61-90'] / total) * 100).toFixed(1) : 0}%\\n`\n      csv += `90+ days,$${this.data.payables['90+'] || 0},${total > 0 ? ((this.data.payables['90+'] / total) * 100).toFixed(1) : 0}%\\n`\n      csv += `Total,$${total},100%\\n\\n`\n    }\n\n    // Recommendations\n    if (this.options.includeRecommendations && this.data.recommendations) {\n      csv += 'OPTIMIZATION RECOMMENDATIONS\\n'\n      csv += 'Priority,Title,Impact,Timeframe,Potential Savings\\n'\n\n      const recommendations = Array.isArray(this.data.recommendations)\n        ? this.data.recommendations\n        : this.data.recommendations.opportunities || []\n\n      recommendations.forEach(rec => {\n        csv += `${rec.priority || rec.impact},${rec.title},\"${rec.description}\",${rec.timeframe || rec.timeline},$${rec.potentialSaving || rec.potentialImpact || 0}\\n`\n      })\n    }\n\n    return csv\n  }\n\n  // Create Excel sheets\n  createSummarySheet(XLSX) {\n    const summaryData = []\n\n    // Header\n    summaryData.push(['Working Capital Management Report'])\n    summaryData.push([`Generated: ${new Date().toLocaleDateString()}`])\n    summaryData.push([]) // Empty row\n\n    // Key metrics\n    summaryData.push(['KEY METRICS'])\n    summaryData.push(['Metric', 'Value', 'Change %', 'Status'])\n\n    if (this.data.summary) {\n      summaryData.push(['Working Capital', this.formatCurrency(this.data.summary.workingCapital || 0), `${this.data.summary.workingCapitalChange || 0}%`, this.getStatusText(this.data.summary.workingCapitalChange)])\n      summaryData.push(['Cash Conversion Cycle', `${this.data.summary.cashConversionCycle || 0} days`, `${this.data.summary.cccChange || 0}%`, this.getStatusText(-this.data.summary.cccChange)])\n      summaryData.push(['Current Ratio', this.data.summary.currentRatio || 0, `${this.data.summary.currentRatioChange || 0}%`, this.getStatusText(this.data.summary.currentRatioChange)])\n      summaryData.push(['Quick Ratio', this.data.summary.quickRatio || 0, `${this.data.summary.quickRatioChange || 0}%`, this.getStatusText(this.data.summary.quickRatioChange)])\n    }\n\n    return XLSX.utils.aoa_to_sheet(summaryData)\n  }\n\n  createARAgingSheet(XLSX) {\n    const arData = []\n    arData.push(['Accounts Receivable Aging Report'])\n    arData.push([`Generated: ${new Date().toLocaleDateString()}`])\n    arData.push([])\n\n    arData.push(['Aging Bucket', 'Amount', 'Percentage'])\n    const total = this.data.receivables.total || 0\n\n    arData.push(['Current', this.data.receivables.current || 0, total > 0 ? `${((this.data.receivables.current / total) * 100).toFixed(1)}%` : '0%'])\n    arData.push(['1-30 days', this.data.receivables['1-30'] || 0, total > 0 ? `${((this.data.receivables['1-30'] / total) * 100).toFixed(1)}%` : '0%'])\n    arData.push(['31-60 days', this.data.receivables['31-60'] || 0, total > 0 ? `${((this.data.receivables['31-60'] / total) * 100).toFixed(1)}%` : '0%'])\n    arData.push(['61-90 days', this.data.receivables['61-90'] || 0, total > 0 ? `${((this.data.receivables['61-90'] / total) * 100).toFixed(1)}%` : '0%'])\n    arData.push(['90+ days', this.data.receivables['90+'] || 0, total > 0 ? `${((this.data.receivables['90+'] / total) * 100).toFixed(1)}%` : '0%'])\n    arData.push(['Total', total, '100%'])\n\n    if (this.data.receivables.topCustomers) {\n      arData.push([])\n      arData.push(['Top Customers by Outstanding'])\n      arData.push(['Customer', 'Amount', 'Days Outstanding'])\n      this.data.receivables.topCustomers.forEach(customer => {\n        arData.push([customer.name, customer.amount, customer.daysOutstanding])\n      })\n    }\n\n    return XLSX.utils.aoa_to_sheet(arData)\n  }\n\n  createAPAgingSheet(XLSX) {\n    const apData = []\n    apData.push(['Accounts Payable Aging Report'])\n    apData.push([`Generated: ${new Date().toLocaleDateString()}`])\n    apData.push([])\n\n    apData.push(['Aging Bucket', 'Amount', 'Percentage'])\n    const total = this.data.payables.total || 0\n\n    apData.push(['Current', this.data.payables.current || 0, total > 0 ? `${((this.data.payables.current / total) * 100).toFixed(1)}%` : '0%'])\n    apData.push(['1-30 days', this.data.payables['1-30'] || 0, total > 0 ? `${((this.data.payables['1-30'] / total) * 100).toFixed(1)}%` : '0%'])\n    apData.push(['31-60 days', this.data.payables['31-60'] || 0, total > 0 ? `${((this.data.payables['31-60'] / total) * 100).toFixed(1)}%` : '0%'])\n    apData.push(['61-90 days', this.data.payables['61-90'] || 0, total > 0 ? `${((this.data.payables['61-90'] / total) * 100).toFixed(1)}%` : '0%'])\n    apData.push(['90+ days', this.data.payables['90+'] || 0, total > 0 ? `${((this.data.payables['90+'] / total) * 100).toFixed(1)}%` : '0%'])\n    apData.push(['Total', total, '100%'])\n\n    if (this.data.payables.topSuppliers) {\n      apData.push([])\n      apData.push(['Top Suppliers by Outstanding'])\n      apData.push(['Supplier', 'Amount', 'Days Outstanding'])\n      this.data.payables.topSuppliers.forEach(supplier => {\n        apData.push([supplier.name, supplier.amount, supplier.daysOutstanding])\n      })\n    }\n\n    return XLSX.utils.aoa_to_sheet(apData)\n  }\n\n  createCashFlowSheet(XLSX) {\n    const cashFlowData = []\n    cashFlowData.push(['Cash Flow Analysis'])\n    cashFlowData.push([`Generated: ${new Date().toLocaleDateString()}`])\n    cashFlowData.push([])\n\n    if (Array.isArray(this.data.cashFlow)) {\n      cashFlowData.push(['Period', 'Cash Inflow', 'Cash Outflow', 'Net Cash Flow', 'Cumulative Cash'])\n      this.data.cashFlow.forEach(period => {\n        cashFlowData.push([\n          period.period || period.month,\n          period.cashInflow || period.inflow || 0,\n          period.cashOutflow || period.outflow || 0,\n          period.netCashFlow || period.netCash || 0,\n          period.cumulativeCash || period.runningBalance || 0\n        ])\n      })\n    }\n\n    return XLSX.utils.aoa_to_sheet(cashFlowData)\n  }\n\n  createForecastSheet(XLSX) {\n    const forecastData = []\n    forecastData.push(['Financial Forecasts'])\n    forecastData.push([`Generated: ${new Date().toLocaleDateString()}`])\n    forecastData.push([])\n\n    // Add forecast data based on available forecasts\n    if (this.data.forecasts.base) {\n      forecastData.push(['Base Case Forecast'])\n      forecastData.push(['Period', 'Cash Inflow', 'Cash Outflow', 'Net Cash Flow', 'Confidence'])\n      this.data.forecasts.base.forEach(period => {\n        forecastData.push([\n          period.period,\n          period.cashInflow,\n          period.cashOutflow,\n          period.netCashFlow,\n          period.confidence ? `${Math.round(period.confidence * 100)}%` : '95%'\n        ])\n      })\n      forecastData.push([])\n    }\n\n    return XLSX.utils.aoa_to_sheet(forecastData)\n  }\n\n  createRecommendationsSheet(XLSX) {\n    const recsData = []\n    recsData.push(['Optimization Recommendations'])\n    recsData.push([`Generated: ${new Date().toLocaleDateString()}`])\n    recsData.push([])\n\n    recsData.push(['Priority', 'Title', 'Description', 'Impact', 'Timeframe', 'Potential Savings'])\n\n    const recommendations = Array.isArray(this.data.recommendations)\n      ? this.data.recommendations\n      : this.data.recommendations.opportunities || []\n\n    recommendations.forEach(rec => {\n      recsData.push([\n        rec.priority || rec.impact,\n        rec.title,\n        rec.description,\n        rec.impact,\n        rec.timeframe || rec.timeline,\n        rec.potentialSaving || rec.potentialImpact || 0\n      ])\n    })\n\n    return XLSX.utils.aoa_to_sheet(recsData)\n  }\n\n  // PDF Helper Methods\n  addExecutiveSummary(doc, yPosition) {\n    doc.setFontSize(14)\n    doc.text('Executive Summary', 20, yPosition)\n    yPosition += 10\n\n    if (this.data.summary) {\n      doc.setFontSize(10)\n      doc.text(`Working Capital: ${this.formatCurrency(this.data.summary.workingCapital || 0)}`, 20, yPosition)\n      doc.text(`Change: ${this.data.summary.workingCapitalChange || 0}%`, 120, yPosition)\n      yPosition += 6\n\n      doc.text(`Cash Conversion Cycle: ${this.data.summary.cashConversionCycle || 0} days`, 20, yPosition)\n      doc.text(`Change: ${this.data.summary.cccChange || 0}%`, 120, yPosition)\n      yPosition += 6\n\n      doc.text(`Current Ratio: ${this.data.summary.currentRatio || 0}`, 20, yPosition)\n      doc.text(`Quick Ratio: ${this.data.summary.quickRatio || 0}`, 120, yPosition)\n      yPosition += 10\n    }\n\n    return yPosition\n  }\n\n  addKeyMetricsTable(doc, yPosition) {\n    if (!this.data.summary) return yPosition\n\n    const tableData = [\n      ['Metric', 'Current Value', 'Change %', 'Status'],\n      ['Working Capital', this.formatCurrency(this.data.summary.workingCapital || 0), `${this.data.summary.workingCapitalChange || 0}%`, this.getStatusText(this.data.summary.workingCapitalChange)],\n      ['Cash Conversion Cycle', `${this.data.summary.cashConversionCycle || 0} days`, `${this.data.summary.cccChange || 0}%`, this.getStatusText(-this.data.summary.cccChange)],\n      ['Current Ratio', this.data.summary.currentRatio || 0, `${this.data.summary.currentRatioChange || 0}%`, this.getStatusText(this.data.summary.currentRatioChange)],\n      ['Quick Ratio', this.data.summary.quickRatio || 0, `${this.data.summary.quickRatioChange || 0}%`, this.getStatusText(this.data.summary.quickRatioChange)]\n    ]\n\n    doc.autoTable({\n      startY: yPosition,\n      head: [tableData[0]],\n      body: tableData.slice(1),\n      theme: 'striped',\n      margin: { left: 20 }\n    })\n\n    return doc.lastAutoTable.finalY + 15\n  }\n\n  addAgingAnalysis(doc, yPosition) {\n    doc.setFontSize(14)\n    doc.text('Aging Analysis', 20, yPosition)\n    yPosition += 10\n\n    if (this.data.receivables) {\n      const arData = [\n        ['AR Aging Bucket', 'Amount', 'Percentage'],\n        ['Current', this.formatCurrency(this.data.receivables.current || 0), this.getPercentage(this.data.receivables.current, this.data.receivables.total)],\n        ['1-30 days', this.formatCurrency(this.data.receivables['1-30'] || 0), this.getPercentage(this.data.receivables['1-30'], this.data.receivables.total)],\n        ['31-60 days', this.formatCurrency(this.data.receivables['31-60'] || 0), this.getPercentage(this.data.receivables['31-60'], this.data.receivables.total)],\n        ['61-90 days', this.formatCurrency(this.data.receivables['61-90'] || 0), this.getPercentage(this.data.receivables['61-90'], this.data.receivables.total)],\n        ['90+ days', this.formatCurrency(this.data.receivables['90+'] || 0), this.getPercentage(this.data.receivables['90+'], this.data.receivables.total)],\n        ['Total', this.formatCurrency(this.data.receivables.total || 0), '100%']\n      ]\n\n      doc.autoTable({\n        startY: yPosition,\n        head: [arData[0]],\n        body: arData.slice(1),\n        theme: 'grid',\n        margin: { left: 20 }\n      })\n\n      yPosition = doc.lastAutoTable.finalY + 10\n    }\n\n    return yPosition\n  }\n\n  addCCCAnalysis(doc, yPosition) {\n    if (yPosition > 250) {\n      doc.addPage()\n      yPosition = 20\n    }\n\n    doc.setFontSize(14)\n    doc.text('Cash Conversion Cycle Analysis', 20, yPosition)\n    yPosition += 10\n\n    if (this.data.cccDetails) {\n      const cccData = [\n        ['Component', 'Days', 'Target', 'Variance'],\n        ['Days Sales Outstanding (DSO)', this.data.cccDetails.daysSalesOutstanding || 0, '35', `${(this.data.cccDetails.daysSalesOutstanding || 0) - 35}`],\n        ['Days Inventory Outstanding (DIO)', this.data.cccDetails.daysInventoryOutstanding || 0, '30', `${(this.data.cccDetails.daysInventoryOutstanding || 0) - 30}`],\n        ['Days Payable Outstanding (DPO)', this.data.cccDetails.daysPayableOutstanding || 0, '40', `${40 - (this.data.cccDetails.daysPayableOutstanding || 0)}`],\n        ['Cash Conversion Cycle', this.data.cccDetails.cashConversionCycle || 0, '25', `${(this.data.cccDetails.cashConversionCycle || 0) - 25}`]\n      ]\n\n      doc.autoTable({\n        startY: yPosition,\n        head: [cccData[0]],\n        body: cccData.slice(1),\n        theme: 'grid',\n        margin: { left: 20 }\n      })\n\n      yPosition = doc.lastAutoTable.finalY + 10\n    }\n\n    return yPosition\n  }\n\n  addRecommendations(doc, yPosition) {\n    if (yPosition > 200) {\n      doc.addPage()\n      yPosition = 20\n    }\n\n    doc.setFontSize(14)\n    doc.text('Optimization Recommendations', 20, yPosition)\n    yPosition += 10\n\n    const recommendations = Array.isArray(this.data.recommendations)\n      ? this.data.recommendations\n      : this.data.recommendations.opportunities || []\n\n    if (recommendations.length > 0) {\n      const recsData = [['Priority', 'Title', 'Impact', 'Timeframe']]\n      recommendations.slice(0, 5).forEach(rec => {  // Limit to top 5 for PDF\n        recsData.push([\n          rec.priority || rec.impact,\n          rec.title.substring(0, 30) + (rec.title.length > 30 ? '...' : ''),\n          this.formatCurrency(rec.potentialSaving || rec.potentialImpact || 0),\n          rec.timeframe || rec.timeline || 'TBD'\n        ])\n      })\n\n      doc.autoTable({\n        startY: yPosition,\n        head: [recsData[0]],\n        body: recsData.slice(1),\n        theme: 'grid',\n        margin: { left: 20 },\n        columnStyles: { 1: { cellWidth: 60 } }\n      })\n\n      yPosition = doc.lastAutoTable.finalY + 10\n    }\n\n    return yPosition\n  }\n\n  addRiskAssessment(doc, yPosition) {\n    if (yPosition > 200) {\n      doc.addPage()\n      yPosition = 20\n    }\n\n    doc.setFontSize(14)\n    doc.text('Risk Assessment', 20, yPosition)\n    yPosition += 10\n\n    if (this.data.risks && this.data.risks.risks) {\n      doc.setFontSize(10)\n      doc.text(`Risk Level: ${this.data.risks.riskLevel.toUpperCase()}`, 20, yPosition)\n      yPosition += 6\n      doc.text(`Total Risks Identified: ${this.data.risks.summary.totalRisks}`, 20, yPosition)\n      yPosition += 6\n      doc.text(`Critical Risks: ${this.data.risks.summary.criticalRisks}`, 20, yPosition)\n      yPosition += 10\n\n      if (this.data.risks.risks.length > 0) {\n        this.data.risks.risks.slice(0, 3).forEach((risk, _index) => {\n          doc.text(`${index + 1}. ${risk.type} (${risk.severity.toUpperCase()})`, 25, yPosition)\n          yPosition += 5\n          doc.text(`   ${risk.description.substring(0, 80)}...`, 25, yPosition)\n          yPosition += 8\n        })\n      }\n    }\n\n    return yPosition\n  }\n\n  // Utility methods\n  formatCurrency(value) {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0\n    }).format(value || 0)\n  }\n\n  getPercentage(value, total) {\n    return total > 0 ? `${((value / total) * 100).toFixed(1)}%` : '0%'\n  }\n\n  getStatusText(changePercent) {\n    if (changePercent === null || changePercent === undefined) return 'N/A'\n    if (changePercent > 5) return 'Improving'\n    if (changePercent < -5) return 'Declining'\n    return 'Stable'\n  }\n\n  downloadFile(content, filename, mimeType) {\n    const blob = new Blob([content], { type: mimeType })\n    const url = URL.createObjectURL(blob)\n    const a = document.createElement('a')\n    a.href = url\n    a.download = filename\n    document.body.appendChild(a)\n    a.click()\n    document.body.removeChild(a)\n    URL.revokeObjectURL(url)\n  }\n}\n\n// Export service functions for integration\nexport async function exportWorkingCapitalData(data, format, options = {}) {\n  const exporter = new WorkingCapitalExporter(data, options)\n\n  switch (format.toLowerCase()) {\n    case 'csv':\n      return await exporter.exportCSV()\n    case 'excel':\n    case 'xlsx':\n      return await exporter.exportExcel()\n    case 'pdf':\n      return await exporter.exportPDF()\n    case 'json':\n      return exporter.exportJSON()\n    default:\n      throw new Error(`Unsupported export format: ${format}`)\n  }\n}\n\n// Quick export functions\nexport const quickExportCSV = (data, options = {}) => exportWorkingCapitalData(data, 'csv', options)\nexport const quickExportExcel = (data, options = {}) => exportWorkingCapitalData(data, 'excel', options)\nexport const quickExportPDF = (data, options = {}) => exportWorkingCapitalData(data, 'pdf', options)\nexport const quickExportJSON = (data, options = {}) => exportWorkingCapitalData(data, 'json', options)\n\nexport default {\n  WorkingCapitalExporter,\n  exportWorkingCapitalData,\n  quickExportCSV,\n  quickExportExcel,\n  quickExportPDF,\n  quickExportJSON\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\hooks\\use-mobile.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\hooks\\useAuth.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\hooks\\useAuthRole.jsx",
    "messages": [
      {
        "ruleId": null,
        "nodeType": null,
        "fatal": true,
        "severity": 2,
        "message": "Parsing error: Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses",
        "line": 164,
        "column": 36
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 1,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useMemo } from 'react';\nimport {\n  DEFAULT_AUTH_STATE,\n  useAuthRole as useBulletproofRole,\n  useBulletproofAuth,\n} from '../auth/BulletproofAuthProvider';\n\nconst ROLE_HIERARCHY = {\n  master_admin: 5,\n  admin: 4,\n  manager: 3,\n  operator: 2,\n  viewer: 1,\n};\n\nconst RESOURCE_PERMISSIONS = {\n  dashboard: ['read'],\n  analytics: ['read'],\n  forecasting: ['read', 'write'],\n  inventory: ['read', 'write'],\n  production: ['read', 'write'],\n  quality: ['read', 'write'],\n  financial: ['read', 'financial'],\n  admin: ['admin'],\n  settings: ['read', 'settings'],\n  monitoring: ['read'],\n  data: ['read'],\n};\n\nconst LOADING_STATE = {\n  isLoading: true,\n  isAuthenticated: false,\n  authMode: 'unavailable',\n  user: null,\n  role: 'viewer',\n  permissions: [],\n  features: {},\n  hasRole: () => false,\n  hasPermission: () => false,\n  hasFeature: () => false,\n  isRoleAtLeast: () => false,\n  getUserDisplayName: () => 'Loading...',\n  getUserInitials: () => '...',\n  canAccess: () => false,\n  isSignedIn: false,\n  userEmail: '',\n  userName: 'Loading...',\n};\n\nconst DEFAULT_FEATURES = {\n  master_admin: {\n    aiAnalytics: true,\n    advancedReporting: true,\n    customDashboards: true,\n    apiAccess: true,\n    bulkOperations: true,\n    auditLogs: true,\n  },\n  admin: {\n    aiAnalytics: true,\n    advancedReporting: true,\n    customDashboards: true,\n    apiAccess: true,\n    bulkOperations: true,\n    auditLogs: true,\n  },\n  manager: {\n    aiAnalytics: true,\n    advancedReporting: true,\n    customDashboards: true,\n    apiAccess: false,\n    bulkOperations: true,\n    auditLogs: false,\n  },\n  operator: {\n    aiAnalytics: false,\n    advancedReporting: false,\n    customDashboards: true,\n    apiAccess: false,\n    bulkOperations: false,\n    auditLogs: false,\n  },\n  viewer: {\n    aiAnalytics: false,\n    advancedReporting: false,\n    customDashboards: false,\n    apiAccess: false,\n    bulkOperations: false,\n    auditLogs: false,\n  },\n};\n\nconst DEFAULT_PERMISSIONS = {\n  master_admin: ['*'],\n  admin: ['*'],\n  manager: ['read', 'write', 'delete', 'financial', 'settings', 'manage_team'],\n  operator: ['read', 'write', 'update'],\n  viewer: ['read'],\n};\n\nconst toArray = (value) => {\n  if (Array.isArray(value)) return value;\n  if (typeof value === 'string' && value.trim().length > 0) {\n    return [value.trim()];\n  }\n  return [];\n};\n\nconst toFeatureMap = (value) => {\n  if (value && typeof value === 'object' && !Array.isArray(value)) {\n    return value;\n  }\n  return {};\n};\n\nconst pickRole = (roleCandidate) => {\n  if (typeof roleCandidate !== 'string') {\n    return 'viewer';\n  }\n  const normalized = roleCandidate.toLowerCase();\n  return ROLE_HIERARCHY[normalized] ? normalized : 'viewer';\n};\n\nconst computeInitials = (name) => {\n  if (!name) return 'GU';\n  const parts = name.trim().split(/\\s+/);\n  if (parts.length === 1) {\n    return parts[0].substring(0, 2).toUpperCase();\n  }\n  return `${parts[0][0]}${parts[parts.length - 1][0]}`.toUpperCase();\n};\n\nconst selectPermissions = (role, ...options) => {\n  for (const option of options) {\n    const arrayValue = toArray(option);\n    if (arrayValue.length > 0) {\n      return arrayValue;\n    }\n  }\n  return DEFAULT_PERMISSIONS[role] ?? DEFAULT_PERMISSIONS.viewer;\n};\n\nconst selectFeatures = (role, ...options) => (\n  Object.assign({}, DEFAULT_FEATURES[role] ?? DEFAULT_FEATURES.viewer, ...options.map(toFeatureMap))\n);\n\nconst resolveEmail = (auth, mode, fallbackRole) => {\n  const user = auth.user;\n  if (!user) {\n    return mode === 'clerk' ? 'user@sentia.local' : 'guest@sentia.local';\n  }\n  return (\n    user.primaryEmailAddress?.emailAddress ??\n    user.emailAddresses?.[0]?.emailAddress ??\n    user.emailAddress ??\n    (fallbackRole === 'viewer' ? 'guest@sentia.local' : 'user@sentia.local')\n  );\n};\n\nconst resolveDisplayName = (auth) => {\n  const user = auth.user;\n  if (!user) return 'Guest User';\n  const fallback = [user.firstName, user.lastName].filter(Boolean).join(' ').trim();\n  return user.fullName ?? fallback || user.username || 'Sentia User';\n};\n\nexport const useAuthRole = () => {\n  const auth = useBulletproofAuth() ?? DEFAULT_AUTH_STATE;\n  const bulletproofRole = useBulletproofRole ? useBulletproofRole() : null;\n\n  return useMemo(() => {\n    const authMode = auth.mode ?? 'unavailable';\n\n    if (!auth.isLoaded) {\n      return {\n        ...LOADING_STATE,\n        authMode,\n      };\n    }\n\n    const effectiveIsSignedIn = authMode === 'clerk' && Boolean(auth.isSignedIn);\n\n    const role = pickRole(\n      bulletproofRole?.role ?? auth.user?.publicMetadata?.role ?? 'viewer'\n    );\n\n    const permissions = selectPermissions(\n      role,\n      bulletproofRole?.permissions,\n      auth.user?.publicMetadata?.permissions\n    );\n\n    const features = selectFeatures(\n      role,\n      auth.user?.publicMetadata?.features,\n      bulletproofRole?.features\n    );\n\n    const displayName = resolveDisplayName(auth);\n    const userEmail = resolveEmail(auth, authMode, role);\n\n    const hasRole = (roleToCheck) => role === roleToCheck;\n    const hasPermission = (permission) =>\n      role === 'master_admin' ||\n      role === 'admin' ||\n      permissions.includes('*') ||\n      permissions.includes(permission);\n    const hasFeature = (feature) =>\n      role === 'master_admin' || role === 'admin' || Boolean(features[feature]);\n    const isRoleAtLeast = (minimumRole) =>\n      (ROLE_HIERARCHY[role] ?? 0) >= (ROLE_HIERARCHY[minimumRole] ?? 0);\n    const canAccess = (resource) => {\n      if (role === 'master_admin' || role === 'admin') return true;\n      const required = RESOURCE_PERMISSIONS[resource] ?? ['read'];\n      return required.some((perm) => hasPermission(perm));\n    };\n\n    return {\n      isLoading: false,\n      isAuthenticated: effectiveIsSignedIn,\n      authMode,\n      user: auth.user ?? null,\n      role,\n      permissions,\n      features,\n      hasRole,\n      hasPermission,\n      hasFeature,\n      isRoleAtLeast,\n      getUserDisplayName: () => displayName,\n      getUserInitials: () => computeInitials(displayName),\n      canAccess,\n      isSignedIn: effectiveIsSignedIn,\n      userEmail,\n      userName: displayName,\n    };\n  }, [auth, bulletproofRole]);\n};\n\nexport default useAuthRole;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\hooks\\useDashboardSummary.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\hooks\\useDashboardSummary.test.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\hooks\\useSSE.js",
    "messages": [
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has missing dependencies: 'eventTypes' and 'options'. Either include them or remove the dependency array.",
        "line": 54,
        "column": 6,
        "nodeType": "ArrayExpression",
        "endLine": 54,
        "endColumn": 57,
        "suggestions": [
          {
            "desc": "Update the dependencies array to be: [eventTypes, options, options.disconnectOnUnmount]",
            "fix": {
              "range": [1502, 1553],
              "text": "[eventTypes, options, options.disconnectOnUnmount]"
            }
          }
        ]
      },
      {
        "ruleId": "react-hooks/exhaustive-deps",
        "severity": 1,
        "message": "React Hook useEffect has a complex expression in the dependency array. Extract it to a separate variable so it can be statically checked.",
        "line": 54,
        "column": 7,
        "nodeType": "CallExpression",
        "endLine": 54,
        "endColumn": 27
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 2,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useEffect, useState, useCallback } from 'react'\n\nimport { sseClient } from '../services/realtime/sseClient'\n\n/**\n * Custom hook for Server-Sent Events\n * Provides real-time updates to React components\n */\nexport function useSSE(eventTypes = [], options = {}) {\n  const [data, setData] = useState({})\n  const [isConnected, setIsConnected] = useState(false)\n  const [lastUpdate, setLastUpdate] = useState(null)\n\n  useEffect(() => {\n    // Connect to SSE if not already connected\n    if (!sseClient.isConnected) {\n      sseClient.connect()\n    }\n\n    // Subscribe to connection status\n    const unsubConnection = sseClient.subscribe('connection', (status) => {\n      setIsConnected(status.status === 'connected')\n    })\n\n    // Subscribe to specified event types\n    const unsubscribers = eventTypes.map(eventType => {\n      return sseClient.subscribe(eventType, (eventData) => {\n        setData(prevData => ({\n          ...prevData,\n          [eventType]: eventData\n        }))\n        setLastUpdate(new Date())\n\n        // Call custom handler if provided\n        if (options.onEvent) {\n          options.onEvent(eventType, eventData)\n        }\n      })\n    })\n\n    // Set initial connection status\n    setIsConnected(sseClient.isConnected)\n\n    // Cleanup\n    return () => {\n      unsubConnection()\n      unsubscribers.forEach(unsub => unsub())\n\n      // Disconnect if no other components are using SSE\n      if (options.disconnectOnUnmount) {\n        sseClient.disconnect()\n      }\n    }\n  }, [eventTypes.join(','), options.disconnectOnUnmount])\n\n  const reconnect = useCallback(() => {\n    sseClient.connect()\n  }, [])\n\n  const disconnect = useCallback(() => {\n    sseClient.disconnect()\n  }, [])\n\n  return {\n    data,\n    isConnected,\n    lastUpdate,\n    reconnect,\n    disconnect\n  }\n}\n\n/**\n * Hook for subscribing to a single SSE event type\n */\nexport function useSSEEvent(eventType, handler) {\n  const [lastData, setLastData] = useState(null)\n\n  useEffect(() => {\n    if (!eventType || !handler) return\n\n    // Connect to SSE if not already connected\n    if (!sseClient.isConnected) {\n      sseClient.connect()\n    }\n\n    // Subscribe to the event\n    const unsubscribe = sseClient.subscribe(eventType, (data) => {\n      setLastData(data)\n      handler(data)\n    })\n\n    return unsubscribe\n  }, [eventType, handler])\n\n  return lastData\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\hooks\\useWorkingCapitalData.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'templateError' is defined but never used.",
        "line": 29,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 25
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'parseError' is defined but never used.",
        "line": 50,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 50,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "﻿import { useCallback, useEffect, useMemo, useState } from 'react'\n\nconst API_BASE_URL = (import.meta.env && import.meta.env.VITE_API_BASE_URL) ? import.meta.env.VITE_API_BASE_URL : '/api'\n\nfunction buildUrl(path, params) {\n  if (!params || Object.keys(params).length === 0) {\n    return path\n  }\n\n  const query = new URLSearchParams(\n    Object.entries(params).filter(([, value]) => value !== undefined && value !== null)\n  ).toString()\n\n  return query ? path + '?' + query : path\n}\n\nasync function getClerkToken() {\n  if (typeof window === 'undefined') {\n    return null\n  }\n\n  const clerkSession = window.Clerk && window.Clerk.session\n  if (!clerkSession || typeof clerkSession.getToken !== 'function') {\n    return null\n  }\n\n  try {\n    return await clerkSession.getToken({ template: 'sentia-backend' })\n  } catch (templateError) {\n    return clerkSession.getToken()\n  }\n}\n\nasync function fetchJson(path, params) {\n  const headers = new Headers()\n  headers.set('Accept', 'application/json')\n\n  const url = buildUrl(API_BASE_URL + path, params)\n  const token = await getClerkToken()\n  if (token) {\n    headers.set('Authorization', 'Bearer ' + token)\n  }\n\n  const response = await fetch(url, { method: 'GET', headers })\n\n  if (!response.ok) {\n    let details = {}\n    try {\n      details = await response.json()\n    } catch (parseError) {\n      // ignore parsing issues here\n    }\n\n    const message = details?.error || details?.message || 'HTTP ' + response.status + ' ' + response.statusText\n    const error = new Error(message)\n    error.status = response.status\n    error.details = details\n    throw error\n  }\n\n  if (response.status === 204) {\n    return null\n  }\n\n  return response.json()\n}\n\nfunction percentChange(currentValue, previousValue) {\n  if (currentValue === null || currentValue === undefined || previousValue === null || previousValue === undefined) {\n    return null\n  }\n\n  if (previousValue === 0) {\n    return null\n  }\n\n  return ((currentValue - previousValue) / Math.abs(previousValue)) * 100\n}\n\nfunction deriveSummary(latest, previous) {\n  if (!latest) {\n    return null\n  }\n\n  const workingCapitalCurrent = (latest.currentAssets ?? 0) - (latest.currentLiabilities ?? 0)\n  const workingCapitalPrior = previous ? (previous.currentAssets ?? 0) - (previous.currentLiabilities ?? 0) : null\n\n  return {\n    workingCapital: workingCapitalCurrent,\n    workingCapitalChange: percentChange(workingCapitalCurrent, workingCapitalPrior),\n    cashConversionCycle: latest.cashConversionCycle ?? null,\n    cccChange: percentChange(latest.cashConversionCycle ?? null, previous?.cashConversionCycle ?? null),\n    currentRatio: latest.workingCapitalRatio ?? null,\n    currentRatioChange: percentChange(latest.workingCapitalRatio ?? null, previous?.workingCapitalRatio ?? null),\n    quickRatio: latest.quickRatio ?? null,\n    quickRatioChange: percentChange(latest.quickRatio ?? null, previous?.quickRatio ?? null),\n  }\n}\n\nfunction buildAlerts(summary, latest) {\n  const alerts = []\n\n  if (summary?.cashConversionCycle && summary.cashConversionCycle > 60) {\n    alerts.push({\n      id: 'ccc',\n      severity: summary.cashConversionCycle > 75 ? 'critical' : 'warning',\n      title: 'Cash conversion cycle elevated',\n      description: `Current CCC is ${Math.round(summary.cashConversionCycle)} days. Target should be under 45 days.`,\n      action: 'Review receivables and production throughput to shorten the cycle.',\n    })\n  }\n\n  if (latest?.dso && latest.dso > 45) {\n    alerts.push({\n      id: 'dso',\n      severity: 'warning',\n      title: 'High Days Sales Outstanding',\n      description: `DSO is ${Math.round(latest.dso)} days. Collections efficiency is below target.`,\n      action: 'Prioritise overdue receivables and incentivise early payment.',\n    })\n  }\n\n  if (latest?.dpo && latest.dpo < 20) {\n    alerts.push({\n      id: 'dpo',\n      severity: 'info',\n      title: 'Supplier payments ahead of terms',\n      description: `DPO is ${Math.round(latest.dpo)} days. Extending payment terms could unlock cash.`,\n      action: 'Engage strategic suppliers regarding 45-day settlement terms.',\n    })\n  }\n\n  return alerts\n}\n\nfunction calculateCashFlowInsights(rows) {\n  if (!Array.isArray(rows) || rows.length === 0) {\n    return {\n      series: [],\n      totals: null,\n      runningBalances: [],\n      shortfallDays: [],\n    }\n  }\n\n  const sorted = rows\n    .slice()\n    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n\n  let runningBalance = 0\n  const runningBalances = []\n\n  const series = sorted.map((row) => {\n    const operating = row.operatingCashFlow ?? 0\n    const investing = row.investingCashFlow ?? 0\n    const financing = row.financingCashFlow ?? 0\n    const net = row.netCashFlow ?? (operating + investing + financing)\n    runningBalance += net\n    runningBalances.push({ date: row.date, balance: runningBalance })\n    return {\n      date: row.date,\n      operating,\n      investing,\n      financing,\n      net,\n    }\n  })\n\n  const totals = series.reduce(\n    (acc, entry) => {\n      acc.operating += entry.operating\n      acc.investing += entry.investing\n      acc.financing += entry.financing\n      acc.net += entry.net\n      return acc\n    },\n    { operating: 0, investing: 0, financing: 0, net: 0 }\n  )\n\n  const shortfallDays = runningBalances.filter((entry) => entry.balance < 0)\n\n  return {\n    series,\n    totals,\n    runningBalances,\n    shortfallDays,\n  }\n}\n\nexport function useWorkingCapitalData(period = 'current') {\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState(null)\n  const [payload, setPayload] = useState(null)\n\n  const load = useCallback(async () => {\n    setLoading(true)\n    setError(null)\n\n    const workingCapitalParams = period && period !== 'current' ? { period } : undefined\n\n    try {\n      const [workingCapitalRes, cashFlowRes, summaryRes, financialMetricsRes] = await Promise.all([\n        fetchJson('/financial/working-capital', workingCapitalParams),\n        fetchJson('/financial/cash-flow'),\n        fetchJson('/dashboard/summary'),\n        fetchJson('/financial/metrics').catch(() => null),\n      ])\n\n      const workingCapitalData = workingCapitalRes?.data || []\n      const latestEntry = workingCapitalRes?.latest || workingCapitalData[0] || null\n      const previousEntry = workingCapitalData.length > 1 ? workingCapitalData[1] : null\n\n      if (!latestEntry) {\n        throw new Error('Working capital records are not yet available. Ingest financial data to enable this dashboard.')\n      }\n\n      const summary = deriveSummary(latestEntry, previousEntry)\n      const alerts = buildAlerts(summary, latestEntry)\n      const cashFlowInsights = calculateCashFlowInsights(cashFlowRes?.data || [])\n\n      setPayload({\n        summary,\n        latestEntry,\n        previousEntry,\n        history: workingCapitalData,\n        cashFlow: cashFlowInsights,\n        dashboardSummary: summaryRes || null,\n        financialMetrics: financialMetricsRes?.metrics || null,\n        dataSource: {\n          workingCapital: workingCapitalRes?.dataSource || 'unknown',\n          cashFlow: cashFlowRes?.dataSource || 'unknown',\n        },\n        alerts,\n        generatedAt: new Date().toISOString(),\n      })\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to load working capital data'))\n      setPayload(null)\n    } finally {\n      setLoading(false)\n    }\n  }, [period])\n\n  useEffect(() => {\n    load()\n  }, [load])\n\n  const computed = useMemo(() => {\n    if (!payload) {\n      return null\n    }\n\n    const receivables = {\n      total: payload.latestEntry.accountsReceivable ?? null,\n      dso: payload.latestEntry.dso ?? null,\n    }\n\n    const payables = {\n      total: payload.latestEntry.accountsPayable ?? null,\n      dpo: payload.latestEntry.dpo ?? null,\n    }\n\n    const inventory = {\n      total: payload.latestEntry.inventory ?? (payload.dashboardSummary?.inventory?.value ?? null),\n      dio: payload.latestEntry.dio ?? null,\n    }\n\n    return {\n      ...payload,\n      receivables,\n      payables,\n      inventory,\n    }\n  }, [payload])\n\n  return {\n    loading,\n    error,\n    data: computed,\n    refetch: load,\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\lib\\devLog.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'args' is defined but never used.",
        "line": 3,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 3,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "args" },
            "fix": { "range": [56, 63], "text": "" },
            "desc": "Remove unused variable 'args'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'args' is defined but never used.",
        "line": 4,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 4,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "args" },
            "fix": { "range": [81, 88], "text": "" },
            "desc": "Remove unused variable 'args'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'args' is defined but never used.",
        "line": 5,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 5,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "args" },
            "fix": { "range": [106, 113], "text": "" },
            "desc": "Remove unused variable 'args'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'args' is defined but never used.",
        "line": 6,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "args" },
            "fix": { "range": [132, 139], "text": "" },
            "desc": "Remove unused variable 'args'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'args' is defined but never used.",
        "line": 7,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "args" },
            "fix": { "range": [158, 165], "text": "" },
            "desc": "Remove unused variable 'args'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_data' is defined but never used.",
        "line": 8,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_data" },
            "fix": { "range": [184, 189], "text": "" },
            "desc": "Remove unused variable '_data'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_label' is defined but never used.",
        "line": 9,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 9,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_label" },
            "fix": { "range": [207, 213], "text": "" },
            "desc": "Remove unused variable '_label'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_label' is defined but never used.",
        "line": 10,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 19,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_label" },
            "fix": { "range": [234, 240], "text": "" },
            "desc": "Remove unused variable '_label'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_label' is defined but never used.",
        "line": 11,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 11,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_label" },
            "fix": { "range": [259, 265], "text": "" },
            "desc": "Remove unused variable '_label'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_label' is defined but never used.",
        "line": 12,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_label" },
            "fix": { "range": [293, 299], "text": "" },
            "desc": "Remove unused variable '_label'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 10,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// Development logging utility\nconst devLog = {\n  log: (...args) => {},\n  info: (...args) => {},\n  warn: (...args) => {},\n  error: (...args) => {},\n  debug: (...args) => {},\n  table: (_data) => {},\n  time: (_label) => {},\n  timeEnd: (_label) => {},\n  group: (_label) => {},\n  groupCollapsed: (_label) => {},\n  groupEnd: () => {}\n};\n\n// Export both as default and named export for compatibility\nexport default devLog;\nexport { devLog };\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\lib\\utils.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\main-clean.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\main-final.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\main.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\Admin.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\AdminPanelEnhanced.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [24, 35], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useMutation' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 21,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 21,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useMutation" },
            "fix": { "range": [422, 435], "text": "" },
            "desc": "Remove unused variable 'useMutation'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'queryClient' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 28,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "queryClient" },
            "fix": { "range": [760, 797], "text": "" },
            "desc": "Remove unused variable 'queryClient'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'usersLoading' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 85,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 85,
        "endColumn": 51,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "usersLoading" },
            "fix": { "range": [2867, 2892], "text": "" },
            "desc": "Remove unused variable 'usersLoading'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'metricsLoading' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 92,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 92,
        "endColumn": 57,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "metricsLoading" },
            "fix": { "range": [3087, 3114], "text": "" },
            "desc": "Remove unused variable 'metricsLoading'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logsLoading' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 99,
        "column": 39,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 99,
        "endColumn": 50,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logsLoading" },
            "fix": { "range": [3322, 3346], "text": "" },
            "desc": "Remove unused variable 'logsLoading'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'settingsLoading' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 105,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 105,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "settingsLoading" },
            "fix": { "range": [3548, 3576], "text": "" },
            "desc": "Remove unused variable 'settingsLoading'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'securityLoading' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 111,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 111,
        "endColumn": 59,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "securityLoading" },
            "fix": { "range": [3784, 3812], "text": "" },
            "desc": "Remove unused variable 'securityLoading'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_dateString' is defined but never used.",
        "line": 289,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 289,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_dateString" },
            "fix": { "range": [9093, 9104], "text": "" },
            "desc": "Remove unused variable '_dateString'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'dateString' is not defined.",
        "line": 290,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 290,
        "endColumn": 31
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_status' is defined but never used.",
        "line": 293,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 293,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_status" },
            "fix": { "range": [9200, 9207], "text": "" },
            "desc": "Remove unused variable '_status'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 11,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport { useAuth, useUser } from '@clerk/clerk-react';\nimport {\n  UserGroupIcon,\n  CogIcon,\n  ChartBarIcon,\n  DocumentTextIcon,\n  ShieldCheckIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  EyeIcon,\n  PencilIcon,\n  TrashIcon,\n  UserPlusIcon,\n  ServerIcon,\n  CircleStackIcon,\n  KeyIcon,\n  BellIcon\n} from '@heroicons/react/24/outline';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport PersonnelManagement from '../components/admin/PersonnelManagement';\n\nconst AdminPanelEnhanced = () => {\n  const { getToken, isLoaded: authLoaded } = useAuth();\n  const { user, isLoaded: userLoaded } = useUser();\n  const [activeTab, setActiveTab] = useState('users');\n  const queryClient = useQueryClient();\n\n  // Check if user has admin access\n  const hasAdminAccess = user?.publicMetadata?.role === 'admin' || user?.publicMetadata?.role === 'super_admin';\n\n  // Fetch functions\n  const fetchUsers = async () => {\n    const token = await getToken();\n    const apiUrl = import.meta.env.VITE_API_BASE_URL || '/api';\n    const response = await fetch(`${apiUrl}/admin/users`, {\n      headers: { Authorization: `Bearer ${token}` }\n    });\n    if (!response.ok) throw new Error('Failed to fetch users');\n    return response.json();\n  };\n\n  const fetchSystemMetrics = async () => {\n    const token = await getToken();\n    const apiUrl = import.meta.env.VITE_API_BASE_URL || '/api';\n    const response = await fetch(`${apiUrl}/admin/system/metrics`, {\n      headers: { Authorization: `Bearer ${token}` }\n    });\n    if (!response.ok) throw new Error('Failed to fetch system metrics');\n    return response.json();\n  };\n\n  const fetchAuditLogs = async () => {\n    const token = await getToken();\n    const apiUrl = import.meta.env.VITE_API_BASE_URL || '/api';\n    const response = await fetch(`${apiUrl}/admin/audit-logs`, {\n      headers: { Authorization: `Bearer ${token}` }\n    });\n    if (!response.ok) throw new Error('Failed to fetch audit logs');\n    return response.json();\n  };\n\n  const fetchSystemSettings = async () => {\n    const token = await getToken();\n    const apiUrl = import.meta.env.VITE_API_BASE_URL || '/api';\n    const response = await fetch(`${apiUrl}/admin/settings`, {\n      headers: { Authorization: `Bearer ${token}` }\n    });\n    if (!response.ok) throw new Error('Failed to fetch settings');\n    return response.json();\n  };\n\n  const fetchSecurityStatus = async () => {\n    const token = await getToken();\n    const apiUrl = import.meta.env.VITE_API_BASE_URL || '/api';\n    const response = await fetch(`${apiUrl}/admin/security/status`, {\n      headers: { Authorization: `Bearer ${token}` }\n    });\n    if (!response.ok) throw new Error('Failed to fetch security status');\n    return response.json();\n  };\n\n  // React Query hooks\n  const { data: usersData, isLoading: usersLoading } = useQuery({\n    queryKey: ['admin', 'users'],\n    queryFn: fetchUsers,\n    enabled: authLoaded && userLoaded && hasAdminAccess,\n    refetchInterval: 30000\n  });\n\n  const { data: systemMetrics, isLoading: metricsLoading } = useQuery({\n    queryKey: ['admin', 'system-metrics'],\n    queryFn: fetchSystemMetrics,\n    enabled: authLoaded && userLoaded && hasAdminAccess,\n    refetchInterval: 10000\n  });\n\n  const { data: auditLogs, isLoading: logsLoading } = useQuery({\n    queryKey: ['admin', 'audit-logs'],\n    queryFn: fetchAuditLogs,\n    enabled: authLoaded && userLoaded && hasAdminAccess && activeTab === 'audit'\n  });\n\n  const { data: systemSettings, isLoading: settingsLoading } = useQuery({\n    queryKey: ['admin', 'settings'],\n    queryFn: fetchSystemSettings,\n    enabled: authLoaded && userLoaded && hasAdminAccess && activeTab === 'settings'\n  });\n\n  const { data: securityStatus, isLoading: securityLoading } = useQuery({\n    queryKey: ['admin', 'security'],\n    queryFn: fetchSecurityStatus,\n    enabled: authLoaded && userLoaded && hasAdminAccess && activeTab === 'security'\n  });\n\n  // Mock data fallbacks\n  const mockUsers = [\n    {\n      id: '1',\n      first_name: 'John',\n      last_name: 'Doe',\n      email_addresses: [{ email_address: 'john@example.com' }],\n      publicmetadata: { role: 'admin', approved: true },\n      last_sign_in_at: new Date().toISOString(),\n      created_at: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString()\n    },\n    {\n      id: '2',\n      first_name: 'Jane',\n      last_name: 'Smith',\n      email_addresses: [{ email_address: 'jane@example.com' }],\n      publicmetadata: { role: 'user', approved: true },\n      last_sign_in_at: new Date(Date.now() - 60 * 60 * 1000).toISOString(),\n      created_at: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000).toISOString()\n    },\n    {\n      id: '3',\n      first_name: 'Bob',\n      last_name: 'Wilson',\n      email_addresses: [{ email_address: 'bob@example.com' }],\n      publicmetadata: { role: 'user', approved: false },\n      last_sign_in_at: null,\n      created_at: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000).toISOString()\n    }\n  ];\n\n  const mockSystemMetrics = {\n    server: {\n      uptime: 2847560, // seconds\n      cpu_usage: 23.4,\n      memory_usage: 67.8,\n      disk_usage: 45.2,\n      active_connections: 127,\n      request_rate: 156.7\n    },\n    database: {\n      connections: 15,\n      queries_per_second: 45.2,\n      storage_used: '2.3 GB',\n      storage_total: '10 GB',\n      backup_status: 'healthy',\n      last_backup: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString()\n    },\n    api: {\n      total_requests_24h: 12456,\n      error_rate: 0.23,\n      avg_response_time: 234,\n      active_endpoints: 47,\n      rate_limit_hits: 12\n    }\n  };\n\n  const mockAuditLogs = [\n    {\n      id: '1',\n      timestamp: new Date().toISOString(),\n      user: 'admin@example.com',\n      action: 'USER_APPROVED',\n      resource: 'user:bob@example.com',\n      ip_address: '192.168.1.100',\n      user_agent: 'Mozilla/5.0...',\n      success: true\n    },\n    {\n      id: '2',\n      timestamp: new Date(Date.now() - 30 * 60 * 1000).toISOString(),\n      user: 'admin@example.com',\n      action: 'SETTINGS_UPDATED',\n      resource: 'system:notification_settings',\n      ip_address: '192.168.1.100',\n      user_agent: 'Mozilla/5.0...',\n      success: true\n    },\n    {\n      id: '3',\n      timestamp: new Date(Date.now() - 60 * 60 * 1000).toISOString(),\n      user: 'jane@example.com',\n      action: 'LOGIN_FAILED',\n      resource: 'auth:login',\n      ip_address: '192.168.1.105',\n      user_agent: 'Mozilla/5.0...',\n      success: false\n    }\n  ];\n\n  const mockSystemSettings = {\n    general: {\n      site_name: 'Sentia Manufacturing Dashboard',\n      site_url: 'https://dashboard.sentia.com',\n      maintenance_mode: false,\n      max_users: 100,\n      session_timeout: 8\n    },\n    notifications: {\n      email_enabled: true,\n      slack_enabled: false,\n      webhook_enabled: true,\n      alertthreshold: 85\n    },\n    security: {\n      password_policy: 'strong',\n      two_factor_required: false,\n      ip_whitelist_enabled: false,\n      audit_retention_days: 90\n    },\n    integrations: {\n      amazon_enabled: true,\n      shopify_enabled: true,\n      xero_enabled: true,\n      unleashed_enabled: false\n    }\n  };\n\n  const mockSecurityStatus = {\n    overall_score: 87,\n    vulnerabilities: {\n      critical: 0,\n      high: 1,\n      medium: 3,\n      low: 7\n    },\n    ssl_status: 'valid',\n    ssl_expiry: new Date(Date.now() + 90 * 24 * 60 * 60 * 1000).toISOString(),\n    firewall_status: 'active',\n    backup_encryption: true,\n    last_security_scan: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),\n    failed_login_attempts_24h: 12,\n    suspicious_activities: 2\n  };\n\n  // Use real data or fallback to mock data\n  const users = usersData?.users || mockUsers;\n  const metrics = systemMetrics || mockSystemMetrics;\n  const logs = auditLogs?.logs || mockAuditLogs;\n  const settings = systemSettings || mockSystemSettings;\n  const security = securityStatus || mockSecurityStatus;\n\n  if (!authLoaded || !userLoaded) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">Loading authentication...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user || !hasAdminAccess) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <ExclamationTriangleIcon className=\"h-16 w-16 text-red-500 mx-auto mb-4\" />\n          <h2 className=\"text-xl font-bold text-gray-900 mb-2\">Access Denied</h2>\n          <p className=\"text-gray-600\">You need administrator privileges to access this panel.</p>\n        </div>\n      </div>\n    );\n  }\n\n  const formatUptime = (seconds) => {\n    const days = Math.floor(seconds / 86400);\n    const hours = Math.floor((seconds % 86400) / 3600);\n    const minutes = Math.floor((seconds % 3600) / 60);\n    return `${days}d ${hours}h ${minutes}m`;\n  };\n\n  const formatDateTime = (_dateString) => {\n    return new Date(dateString).toLocaleString('en-GB');\n  };\n\n  const getStatusColor = (_status) => {\n    switch (status) {\n      case 'approved':\n      case 'active':\n      case 'healthy':\n      case 'valid':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'pending':\n      case 'warning':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'denied':\n      case 'error':\n      case 'failed':\n        return 'bg-red-100 text-red-800 border-red-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const tabs = [\n    { id: 'overview', label: 'Overview', icon: ChartBarIcon },\n    { id: 'users', label: 'Users', icon: UserGroupIcon },\n    { id: 'personnel', label: 'Personnel', icon: UserPlusIcon },\n    { id: 'system', label: 'System Health', icon: ServerIcon },\n    { id: 'security', label: 'Security', icon: ShieldCheckIcon },\n    { id: 'settings', label: 'Settings', icon: CogIcon },\n    { id: 'audit', label: 'Audit Logs', icon: DocumentTextIcon }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n        {/* Header */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            Administrator Panel\n          </h1>\n          <p className=\"mt-2 text-gray-600 dark:text-gray-400\">\n            Manage users, monitor system health, and configure dashboard settings\n          </p>\n        </div>\n\n        {/* Tab Navigation */}\n        <div className=\"mb-8\">\n          <div className=\"border-b border-gray-200 dark:border-gray-700\">\n            <nav className=\"-mb-px flex space-x-8\">\n              {tabs.map((tab) => (\n                <button\n                  key={tab.id}\n                  onClick={() => setActiveTab(tab.id)}\n                  className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${\n                    activeTab === tab.id\n                      ? 'border-blue-500 text-blue-600'\n                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                  }`}\n                >\n                  <tab.icon className=\"h-5 w-5\" />\n                  <span>{tab.label}</span>\n                </button>\n              ))}\n            </nav>\n          </div>\n        </div>\n\n        {/* Tab Content */}\n        <div>\n          {activeTab === 'overview' && (\n            <div className=\"space-y-6\">\n              {/* Key Metrics */}\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n                  <div className=\"flex items-center\">\n                    <UserGroupIcon className=\"h-8 w-8 text-blue-600\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Users</p>\n                      <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{users.length}</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n                  <div className=\"flex items-center\">\n                    <ServerIcon className=\"h-8 w-8 text-green-600\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Server Uptime</p>\n                      <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                        {formatUptime(metrics.server.uptime)}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n                  <div className=\"flex items-center\">\n                    <CircleStackIcon className=\"h-8 w-8 text-purple-600\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">API Requests (24h)</p>\n                      <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                        {metrics.api.total_requests_24h.toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n                  <div className=\"flex items-center\">\n                    <ShieldCheckIcon className=\"h-8 w-8 text-orange-600\" />\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Security Score</p>\n                      <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">{security.overall_score}%</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Recent Activity */}\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n                <div className=\"p-6\">\n                  <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n                    Recent Activity\n                  </h3>\n                  <div className=\"space-y-3\">\n                    {logs.slice(0, 5).map((log) => (\n                      <div key={log.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                        <div className=\"flex items-center space-x-3\">\n                          <div className={`p-1 rounded-full ${log.success ? 'bg-green-100' : 'bg-red-100'}`}>\n                            {log.success ? (\n                              <CheckCircleIcon className=\"h-4 w-4 text-green-600\" />\n                            ) : (\n                              <ExclamationTriangleIcon className=\"h-4 w-4 text-red-600\" />\n                            )}\n                          </div>\n                          <div>\n                            <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                              {log.action.replace('', ' ')}\n                            </p>\n                            <p className=\"text-xs text-gray-500\">{log.user} • {formatDateTime(log.timestamp)}</p>\n                          </div>\n                        </div>\n                        <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${\n                          log.success ? getStatusColor('approved') : getStatusColor('failed')\n                        }`}>\n                          {log.success ? 'Success' : 'Failed'}\n                        </span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'users' && (\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n              <div className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-6\">\n                  <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                    User Management ({users.length})\n                  </h3>\n                  <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2\">\n                    <UserPlusIcon className=\"h-4 w-4\" />\n                    <span>Invite User</span>\n                  </button>\n                </div>\n\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                    <thead className=\"bg-gray-50 dark:bg-gray-700\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                          User\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                          Role\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                          Status\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                          Last Activity\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                      {users.map((userItem) => (\n                        <tr key={userItem.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <div className=\"h-10 w-10 rounded-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center\">\n                                <span className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                                  {userItem.first_name?.[0] || userItem.email_addresses?.[0]?.email_address?.[0] || 'U'}\n                                </span>\n                              </div>\n                              <div className=\"ml-4\">\n                                <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                                  {userItem.first_name && userItem.last_name \n                                    ? `${userItem.first_name} ${userItem.last_name}`\n                                    : 'Unknown User'\n                                  }\n                                </div>\n                                <div className=\"text-sm text-gray-500\">\n                                  {userItem.email_addresses?.[0]?.email_address}\n                                </div>\n                              </div>\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${\n                              userItem.publicmetadata?.role === 'admin' ? getStatusColor('approved') :\n                              getStatusColor('pending')\n                            }`}>\n                              {userItem.publicmetadata?.role || 'user'}\n                            </span>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${\n                              getStatusColor(userItem.publicmetadata?.approved ? 'approved' : 'pending')\n                            }`}>\n                              {userItem.publicmetadata?.approved ? 'Active' : 'Pending'}\n                            </span>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                            {userItem.last_sign_in_at \n                              ? formatDateTime(userItem.last_sign_in_at)\n                              : 'Never'\n                            }\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                            <div className=\"flex space-x-2\">\n                              <button className=\"text-blue-600 hover:text-blue-900\">\n                                <EyeIcon className=\"h-4 w-4\" />\n                              </button>\n                              <button className=\"text-green-600 hover:text-green-900\">\n                                <PencilIcon className=\"h-4 w-4\" />\n                              </button>\n                              <button className=\"text-red-600 hover:text-red-900\">\n                                <TrashIcon className=\"h-4 w-4\" />\n                              </button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'system' && (\n            <div className=\"space-y-6\">\n              {/* Server Metrics */}\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n                  Server Performance\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div>\n                    <div className=\"text-sm text-gray-500 mb-1\">CPU Usage</div>\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {metrics.server.cpu_usage}%\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                      <div\n                        className=\"bg-blue-600 h-2 rounded-full\"\n                        style={{ width: `${metrics.server.cpu_usage}%` }}\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm text-gray-500 mb-1\">Memory Usage</div>\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {metrics.server.memory_usage}%\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                      <div\n                        className=\"bg-green-600 h-2 rounded-full\"\n                        style={{ width: `${metrics.server.memory_usage}%` }}\n                      />\n                    </div>\n                  </div>\n                  <div>\n                    <div className=\"text-sm text-gray-500 mb-1\">Disk Usage</div>\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {metrics.server.disk_usage}%\n                    </div>\n                    <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                      <div\n                        className=\"bg-yellow-600 h-2 rounded-full\"\n                        style={{ width: `${metrics.server.disk_usage}%` }}\n                      />\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Database Status */}\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n                  Database Health\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <div className=\"text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {metrics.database.connections}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Active Connections</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {metrics.database.queries_per_second}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Queries/Second</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {metrics.database.storage_used}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Storage Used</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      6h ago\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Last Backup</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'security' && (\n            <div className=\"space-y-6\">\n              {/* Security Score */}\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                    Security Overview\n                  </h3>\n                  <div className=\"text-right\">\n                    <div className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n                      {security.overall_score}%\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Security Score</div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <div className=\"text-center p-4 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-green-600\">\n                      {security.vulnerabilities.critical}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Critical</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-red-600\">\n                      {security.vulnerabilities.high}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">High</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-yellow-600\">\n                      {security.vulnerabilities.medium}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Medium</div>\n                  </div>\n                  <div className=\"text-center p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                    <div className=\"text-2xl font-bold text-blue-600\">\n                      {security.vulnerabilities.low}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Low</div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Security Status */}\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n                  Security Status\n                </h3>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <KeyIcon className=\"h-5 w-5 text-green-600\" />\n                      <span className=\"text-sm font-medium text-gray-900 dark:text-white\">SSL Certificate</span>\n                    </div>\n                    <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor('approved')}`}>\n                      Valid\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <ShieldCheckIcon className=\"h-5 w-5 text-green-600\" />\n                      <span className=\"text-sm font-medium text-gray-900 dark:text-white\">Firewall</span>\n                    </div>\n                    <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor('active')}`}>\n                      Active\n                    </span>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                    <div className=\"flex items-center space-x-3\">\n                      <CircleStackIcon className=\"h-5 w-5 text-green-600\" />\n                      <span className=\"text-sm font-medium text-gray-900 dark:text-white\">Backup Encryption</span>\n                    </div>\n                    <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor('active')}`}>\n                      Enabled\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'personnel' && (\n            <PersonnelManagement />\n          )}\n\n          {activeTab === 'audit' && (\n            <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n              <div className=\"p-6\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-6\">\n                  Audit Log\n                </h3>\n                <div className=\"space-y-3\">\n                  {logs.map((log) => (\n                    <div key={log.id} className=\"flex items-center justify-between p-4 border border-gray-200 dark:border-gray-600 rounded-lg\">\n                      <div className=\"flex items-center space-x-4\">\n                        <div className={`p-2 rounded-full ${log.success ? 'bg-green-100 dark:bg-green-900/20' : 'bg-red-100 dark:bg-red-900/20'}`}>\n                          {log.success ? (\n                            <CheckCircleIcon className=\"h-4 w-4 text-green-600\" />\n                          ) : (\n                            <ExclamationTriangleIcon className=\"h-4 w-4 text-red-600\" />\n                          )}\n                        </div>\n                        <div>\n                          <p className=\"font-medium text-gray-900 dark:text-white\">\n                            {log.action.replace('', ' ')}\n                          </p>\n                          <p className=\"text-sm text-gray-500\">\n                            {log.user} • {formatDateTime(log.timestamp)}\n                          </p>\n                          <p className=\"text-xs text-gray-400\">\n                            Resource: {log.resource} • IP: {log.ip_address}\n                          </p>\n                        </div>\n                      </div>\n                      <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${\n                        log.success ? getStatusColor('approved') : getStatusColor('failed')\n                      }`}>\n                        {log.success ? 'Success' : 'Failed'}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'settings' && (\n            <div className=\"space-y-6\">\n              {/* General Settings */}\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n                  General Settings\n                </h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Site Name\n                    </label>\n                    <input\n                      type=\"text\"\n                      value={settings.general.site_name}\n                      className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n                      readOnly\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1\">\n                      Maximum Users\n                    </label>\n                    <input\n                      type=\"number\"\n                      value={settings.general.max_users}\n                      className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n                      readOnly\n                    />\n                  </div>\n                  <div className=\"flex items-center space-x-3\">\n                    <input\n                      type=\"checkbox\"\n                      checked={settings.general.maintenance_mode}\n                      className=\"rounded\"\n                      readOnly\n                    />\n                    <label className=\"text-sm font-medium text-gray-700 dark:text-gray-300\">\n                      Maintenance Mode\n                    </label>\n                  </div>\n                </div>\n              </div>\n\n              {/* Integration Status */}\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n                  Integration Status\n                </h3>\n                <div className=\"space-y-3\">\n                  {Object.entries(settings.integrations).map(([integration, enabled]) => (\n                    <div key={integration} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                      <span className=\"text-sm font-medium text-gray-900 dark:text-white capitalize\">\n                        {integration.replace('', ' ')}\n                      </span>\n                      <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${\n                        enabled ? getStatusColor('active') : getStatusColor('pending')\n                      }`}>\n                        {enabled ? 'Enabled' : 'Disabled'}\n                      </span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdminPanelEnhanced;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\Analytics.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logDebug' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 14,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logDebug" },
            "fix": { "range": [366, 375], "text": "" },
            "desc": "Remove unused variable 'logDebug'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logInfo' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 14,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logInfo" },
            "fix": { "range": [374, 383], "text": "" },
            "desc": "Remove unused variable 'logInfo'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logWarn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 14,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 14,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logWarn" },
            "fix": { "range": [383, 392], "text": "" },
            "desc": "Remove unused variable 'logWarn'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport {\n  ChartBarIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  CogIcon,\n  BeakerIcon,\n  ArrowPathIcon\n} from '@heroicons/react/24/outline';\nimport { manufacturingAnalyticsService } from '../services/ManufacturingAnalyticsService.js';\nimport { logDebug, logInfo, logWarn, logError } from '../utils/logger';\n\n\nconst Analytics = () => {\n  const [analyticsData, setAnalyticsData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [lastUpdate, setLastUpdate] = useState(null);\n  const [selectedTimeframe, setSelectedTimeframe] = useState('7');\n\n  useEffect(() => {\n    const initializeAnalytics = async () => {\n      try {\n        setLoading(true);\n        await manufacturingAnalyticsService.initialize();\n        await fetchAnalyticsData();\n        setError(null);\n      } catch (err) {\n        setError(`Failed to initialize analytics: ${err.message}`);\n        logError('Analytics initialization error:', err);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAnalytics();\n  }, []);\n\n  const fetchAnalyticsData = async () => {\n    try {\n      const data = await manufacturingAnalyticsService.getAnalyticsDashboard();\n      setAnalyticsData(data);\n      setLastUpdate(new Date());\n      setError(null);\n    } catch (err) {\n      setError(`Failed to fetch analytics data: ${err.message}`);\n      logError('Analytics data error:', err);\n    }\n  };\n\n  // Auto-refresh every 30 seconds\n  useEffect(() => {\n    const interval = setInterval(fetchAnalyticsData, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const getOEEColor = (oee) => {\n    if (oee >= 85) return 'text-green-600';\n    if (oee >= 70) return 'text-yellow-600';\n    return 'text-red-600';\n  };\n\n  const getOEEBgColor = (oee) => {\n    if (oee >= 85) return 'bg-green-500';\n    if (oee >= 70) return 'bg-yellow-500';\n    return 'bg-red-500';\n  };\n\n  const getTrendIcon = (trend) => {\n    switch (trend) {\n      case 'improving':\n        return <ArrowTrendingUpIcon className=\"h-5 w-5 text-green-500\" />;\n      case 'declining':\n        return <ArrowTrendingDownIcon className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <div className=\"h-5 w-5 bg-gray-300 rounded-full\"></div>;\n    }\n  };\n\n  const getVarianceColor = (status) => {\n    return status === 'favorable' ? 'text-green-600' : 'text-red-600';\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-16 w-16 border-b-2 border-blue-600 mx-auto\"></div>\n          <p className=\"mt-4 text-lg text-gray-600\">Loading analytics...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-4\">\n        <div className=\"bg-white rounded-lg shadow-lg p-6 max-w-md w-full\">\n          <div className=\"flex items-center space-x-3 text-red-600 mb-4\">\n            <ExclamationTriangleIcon className=\"w-8 h-8\" />\n            <h3 className=\"text-lg font-semibold\">Analytics Error</h3>\n          </div>\n          <p className=\"text-gray-600 mb-4\">{error}</p>\n          <button\n            onClick={fetchAnalyticsData}\n            className=\"w-full bg-blue-600 text-white py-3 px-4 rounded-lg font-medium hover:bg-blue-700 transition-colors\"\n          >\n            Retry Loading\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 p-4\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900 flex items-center space-x-3\">\n              <ChartBarIcon className=\"h-8 w-8 text-blue-600\" />\n              <span>Manufacturing Analytics</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1\">\n              Overall Equipment Effectiveness (OEE) and Variance Analysis\n            </p>\n            <p className=\"text-sm text-gray-500 mt-1\">\n              Last updated: {lastUpdate ? lastUpdate.toLocaleTimeString() : '--:--'}\n            </p>\n          </div>\n          <div className=\"flex items-center space-x-3 mt-4 sm:mt-0\">\n            <select\n              value={selectedTimeframe}\n              onChange={(e) => setSelectedTimeframe(e.target.value)}\n              className=\"px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500\"\n            >\n              <option value=\"1\">Last 24 Hours</option>\n              <option value=\"7\">Last 7 Days</option>\n              <option value=\"30\">Last 30 Days</option>\n            </select>\n            <button\n              onClick={fetchAnalyticsData}\n              className=\"p-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n            >\n              <ArrowPathIcon className=\"h-5 w-5\" />\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Overall OEE Summary */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6 mb-6\">\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-500 uppercase tracking-wide\">Overall OEE</p>\n              <p className={`text-3xl font-bold ${getOEEColor(analyticsData?.summary?.overallOEE || 0)}`}>\n                {analyticsData?.summary?.overallOEE || 0}%\n              </p>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                {analyticsData?.summary?.classification || 'Unknown'}\n              </p>\n            </div>\n            <div className=\"h-16 w-16 bg-gray-100 rounded-full flex items-center justify-center\">\n              <div className={`h-12 w-12 rounded-full flex items-center justify-center ${getOEEBgColor(analyticsData?.summary?.overallOEE || 0)}`}>\n                <span className=\"text-white font-bold\">OEE</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-500 uppercase tracking-wide\">Availability</p>\n              <p className=\"text-3xl font-bold text-blue-600\">\n                {analyticsData?.summary?.availability || 0}%\n              </p>\n            </div>\n            <ClockIcon className=\"h-12 w-12 text-blue-500\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-500 uppercase tracking-wide\">Performance</p>\n              <p className=\"text-3xl font-bold text-green-600\">\n                {analyticsData?.summary?.performance || 0}%\n              </p>\n            </div>\n            <CogIcon className=\"h-12 w-12 text-green-500\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-500 uppercase tracking-wide\">Quality</p>\n              <p className=\"text-3xl font-bold text-purple-600\">\n                {analyticsData?.summary?.quality || 0}%\n              </p>\n            </div>\n            <BeakerIcon className=\"h-12 w-12 text-purple-500\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Station OEE Breakdown */}\n      <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Station OEE Analysis</h2>\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Station\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  OEE\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Availability\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Performance\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Quality\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Classification\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                  Trend\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {analyticsData?.stationOEE?.map((station) => {\n                const stationTrend = analyticsData?.trends?.[station.stationId];\n                return (\n                  <tr key={station.stationId} className=\"hover:bg-gray-50\">\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"font-medium text-gray-900\">{station.stationName}</div>\n                      <div className=\"text-sm text-gray-500\">{station.stationId}</div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`text-lg font-bold ${getOEEColor(station.oee)}`}>\n                        {station.oee}%\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-gray-900\">\n                      {station.availability}%\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-gray-900\">\n                      {station.performance}%\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-gray-900\">\n                      {station.quality}%\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                        station.classification === 'World Class' ? 'bg-green-100 text-green-800' :\n                        station.classification === 'Good' ? 'bg-yellow-100 text-yellow-800' :\n                        station.classification === 'Fair' ? 'bg-orange-100 text-orange-800' :\n                        'bg-red-100 text-red-800'\n                      }`}>\n                        {station.classification}\n                      </span>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center space-x-2\">\n                        {getTrendIcon(stationTrend?.oee?.trend)}\n                        <span className=\"text-sm text-gray-600\">\n                          {stationTrend?.oee?.change > 0 ? '+' : ''}{stationTrend?.oee?.change || 0}%\n                        </span>\n                      </div>\n                    </td>\n                  </tr>\n                );\n              })}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Variance Analysis */}\n      <div className=\"bg-white rounded-lg shadow-sm p-6 mb-6\">\n        <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Variance Analysis</h2>\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {analyticsData?.varianceAnalysis?.map((variance) => (\n            <div key={variance.stationId} className=\"border border-gray-200 rounded-lg p-4\">\n              <h3 className=\"text-lg font-medium text-gray-900 mb-3\">{variance.stationName}</h3>\n              \n              <div className=\"space-y-3\">\n                {/* Production Variance */}\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Production Variance:</span>\n                  <div className=\"text-right\">\n                    <span className={`font-medium ${getVarianceColor(variance.production.status)}`}>\n                      {variance.production.variance > 0 ? '+' : ''}{variance.production.variance} units\n                    </span>\n                    <span className={`text-sm ml-2 ${getVarianceColor(variance.production.status)}`}>\n                      ({variance.production.variancePercent}%)\n                    </span>\n                  </div>\n                </div>\n\n                {/* Efficiency Variance */}\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Efficiency Variance:</span>\n                  <span className={`font-medium ${getVarianceColor(variance.efficiency.status)}`}>\n                    {variance.efficiency.variance > 0 ? '+' : ''}{variance.efficiency.variance}%\n                  </span>\n                </div>\n\n                {/* Downtime Variance */}\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Downtime Variance:</span>\n                  <span className={`font-medium ${getVarianceColor(variance.downtime.status)}`}>\n                    {variance.downtime.variance > 0 ? '+' : ''}{variance.downtime.variance} min\n                  </span>\n                </div>\n\n                {/* Quality Variance */}\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-sm text-gray-600\">Quality Variance:</span>\n                  <span className={`font-medium ${getVarianceColor(variance.quality.status)}`}>\n                    {variance.quality.variance > 0 ? '+' : ''}{Math.round(variance.quality.variance * 10) / 10}%\n                  </span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Recommendations */}\n      {analyticsData?.recommendations?.length > 0 && (\n        <div className=\"bg-white rounded-lg shadow-sm p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">Improvement Recommendations</h2>\n          <div className=\"space-y-4\">\n            {analyticsData.recommendations.map((rec, index) => (\n              <div\n                key={index}\n                className={`border-l-4 p-4 rounded-lg ${\n                  rec.type === 'critical' ? 'border-red-500 bg-red-50' :\n                  rec.type === 'warning' ? 'border-yellow-500 bg-yellow-50' :\n                  'border-blue-500 bg-blue-50'\n                }`}\n              >\n                <div className=\"flex items-start space-x-3\">\n                  {rec.type === 'critical' ? (\n                    <ExclamationTriangleIcon className=\"h-6 w-6 text-red-500 mt-0.5\" />\n                  ) : (\n                    <CheckCircleIcon className=\"h-6 w-6 text-yellow-500 mt-0.5\" />\n                  )}\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h3 className=\"font-semibold text-gray-900\">{rec.title}</h3>\n                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${\n                        rec.impact === 'High' ? 'bg-red-100 text-red-800' :\n                        rec.impact === 'Medium' ? 'bg-yellow-100 text-yellow-800' :\n                        'bg-blue-100 text-blue-800'\n                      }`}>\n                        {rec.impact} Impact\n                      </span>\n                    </div>\n                    <p className=\"text-gray-600 mb-2\">{rec.stationName}: {rec.description}</p>\n                    <div>\n                      <p className=\"text-sm font-medium text-gray-700 mb-1\">Recommended Actions:</p>\n                      <ul className=\"text-sm text-gray-600 list-disc list-inside space-y-1\">\n                        {rec.actions.map((action, actionIndex) => (\n                          <li key={actionIndex}>{action}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Analytics;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\ClerkSignIn.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\Dashboard-real.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 7,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [137, 148], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'user' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 51,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "user" },
            "fix": { "range": [1424, 1429], "text": "" },
            "desc": "Remove unused variable 'user'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * REAL DATA DASHBOARD\n * \n * Enterprise dashboard with real business data from P&L and Sales forecasts\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useAuthContext } from '../providers/ClerkAuthProvider';\nimport { UserButton } from '../providers/ClerkAuthProvider';\nimport {\n  ChartBarIcon,\n  CubeIcon,\n  CogIcon,\n  BanknotesIcon,\n  TruckIcon,\n  BeakerIcon,\n  ChartPieIcon,\n  DocumentChartBarIcon,\n  Cog6ToothIcon,\n  UserGroupIcon,\n} from '@heroicons/react/24/outline';\n\n// Real financial data from P&L and Sales forecast\nconst REAL_BUSINESS_DATA = {\n  revenue: {\n    fy2024: 1563000, // £1.563M from P&L\n    fy2025: 3170000, // £3.17M from P&L\n    growth: 102.6, // Calculated growth rate\n  },\n  workingCapital: {\n    current: 170300, // £170.3K from working capital sheet\n    projected: 185000, // Projected\n  },\n  production: {\n    fy2026_units: 245000, // 245K units from sales forecast\n    efficiency: 94.2,\n  },\n  inventory: {\n    sentia_red: 2450,\n    sentia_gold: 1200,\n    packaging: 150,\n  },\n  orders: [\n    { id: '5770', customer: 'Tara Athanasiou', amount: 86.40, product: 'GABA Red 50cl x3', status: 'Fulfilled' },\n    { id: '5769', customer: 'Recent Customer', amount: 32.00, product: 'Sentia Gold 50cl', status: 'Pending' },\n    { id: '5768', customer: 'UK Customer', amount: 64.00, product: 'Sentia Black 50cl x2', status: 'Fulfilled' },\n  ]\n};\n\nconst Dashboard = () => {\n  const { user, isAuthenticated } = useAuthContext();\n  const [currentPage, setCurrentPage] = useState('executive');\n\n  // Navigation items matching the sidebar design\n  const navigationItems = [\n    { id: 'executive', name: 'Executive Dashboard', icon: ChartBarIcon, active: true },\n    { id: 'forecasting', name: 'Demand Forecasting', icon: ChartPieIcon },\n    { id: 'inventory', name: 'Inventory Management', icon: CubeIcon },\n    { id: 'production', name: 'Production Tracking', icon: TruckIcon },\n    { id: 'quality', name: 'Quality Control', icon: BeakerIcon },\n    { id: 'working-capital', name: 'Working Capital', icon: BanknotesIcon },\n    { id: 'what-if', name: 'What-If Analysis', icon: DocumentChartBarIcon },\n    { id: 'financial', name: 'Financial Reports', icon: ChartBarIcon },\n    { id: 'data-import', name: 'Data Import', icon: DocumentChartBarIcon },\n    { id: 'admin', name: 'Admin Panel', icon: Cog6ToothIcon },\n  ];\n\n  const renderExecutiveDashboard = () => (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Executive Dashboard</h1>\n            <p className=\"text-gray-600\">Real-time manufacturing operations overview</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm text-gray-600\">All Systems Operational</span>\n            </div>\n            <UserButton />\n          </div>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n              <p className=\"text-2xl font-bold text-gray-900\">£{(REAL_BUSINESS_DATA.revenue.fy2025 / 1000000).toFixed(1)}M</p>\n            </div>\n            <div className=\"flex items-center text-green-600\">\n              <span className=\"text-sm font-medium\">+{REAL_BUSINESS_DATA.revenue.growth.toFixed(1)}%</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-2\">FY2025 vs FY2024</p>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Active Orders</p>\n              <p className=\"text-2xl font-bold text-gray-900\">1,250</p>\n            </div>\n            <div className=\"flex items-center text-green-600\">\n              <span className=\"text-sm font-medium\">+8.5%</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-2\">Orders in production</p>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Working Capital</p>\n              <p className=\"text-2xl font-bold text-gray-900\">£{(REAL_BUSINESS_DATA.workingCapital.current / 1000).toFixed(0)}K</p>\n            </div>\n            <div className=\"flex items-center text-green-600\">\n              <span className=\"text-sm font-medium\">+15.5%</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-2\">Current working capital</p>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Production Units</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{(REAL_BUSINESS_DATA.production.fy2026_units / 1000).toFixed(0)}K</p>\n            </div>\n            <div className=\"flex items-center text-green-600\">\n              <span className=\"text-sm font-medium\">+12.3%</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-2\">FY2026 forecast</p>\n        </div>\n      </div>\n\n      {/* Charts and Data */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Revenue Chart */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Revenue Growth</h3>\n          <div className=\"h-64 flex items-end justify-center space-x-4\">\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 bg-blue-500 rounded-t\" style={{ height: '120px' }}></div>\n              <span className=\"text-sm text-gray-600 mt-2\">FY2024</span>\n              <span className=\"text-xs text-gray-500\">£1.56M</span>\n            </div>\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 bg-green-500 rounded-t\" style={{ height: '240px' }}></div>\n              <span className=\"text-sm text-gray-600 mt-2\">FY2025</span>\n              <span className=\"text-xs text-gray-500\">£3.17M</span>\n            </div>\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 bg-purple-500 rounded-t\" style={{ height: '180px' }}></div>\n              <span className=\"text-sm text-gray-600 mt-2\">FY2026</span>\n              <span className=\"text-xs text-gray-500\">Projected</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Key Performance Metrics */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Key Performance Metrics</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Revenue Growth</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-3\">\n                  <div className=\"bg-green-500 h-2 rounded-full\" style={{ width: '85%' }}></div>\n                </div>\n                <span className=\"text-sm font-medium\">+102.6%</span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Production Efficiency</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-3\">\n                  <div className=\"bg-blue-500 h-2 rounded-full\" style={{ width: '94%' }}></div>\n                </div>\n                <span className=\"text-sm font-medium\">94.2%</span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Inventory Turnover</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-3\">\n                  <div className=\"bg-purple-500 h-2 rounded-full\" style={{ width: '82%' }}></div>\n                </div>\n                <span className=\"text-sm font-medium\">8.2x</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Orders */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Shopify Orders</h3>\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Order ID</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Customer</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Product</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Amount</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {REAL_BUSINESS_DATA.orders.map((order) => (\n                <tr key={order.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">#{order.id}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{order.customer}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{order.product}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">£{order.amount}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                      order.status === 'Fulfilled' \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-yellow-100 text-yellow-800'\n                    }`}>\n                      {order.status}\n                    </span>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Actions</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <button \n            onClick={() => setCurrentPage('forecasting')}\n            className=\"flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            <ChartPieIcon className=\"w-5 h-5 mr-2\" />\n            Run Forecast\n          </button>\n          <button \n            onClick={() => setCurrentPage('working-capital')}\n            className=\"flex items-center justify-center px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n          >\n            <BanknotesIcon className=\"w-5 h-5 mr-2\" />\n            Working Capital\n          </button>\n          <button \n            onClick={() => setCurrentPage('what-if')}\n            className=\"flex items-center justify-center px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n          >\n            <DocumentChartBarIcon className=\"w-5 h-5 mr-2\" />\n            What-If Analysis\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderCurrentPage = () => {\n    switch (currentPage) {\n      case 'executive':\n        return renderExecutiveDashboard();\n      case 'forecasting':\n        return (\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Demand Forecasting</h2>\n            <p className=\"text-gray-600\">AI-powered demand prediction and planning</p>\n            <div className=\"mt-6 h-64 bg-gray-100 rounded-lg flex items-center justify-center\">\n              <p className=\"text-gray-500\">Demand forecast chart will be displayed here</p>\n            </div>\n          </div>\n        );\n      case 'inventory':\n        return (\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Inventory Management</h2>\n            <p className=\"text-gray-600\">Real-time inventory tracking and optimization</p>\n            <div className=\"mt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <h3 className=\"font-semibold text-green-800\">Sentia Red</h3>\n                  <p className=\"text-2xl font-bold text-green-900\">{REAL_BUSINESS_DATA.inventory.sentia_red}</p>\n                  <p className=\"text-sm text-green-600\">units in stock</p>\n                </div>\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h3 className=\"font-semibold text-blue-800\">Sentia Gold</h3>\n                  <p className=\"text-2xl font-bold text-blue-900\">{REAL_BUSINESS_DATA.inventory.sentia_gold}</p>\n                  <p className=\"text-sm text-blue-600\">units in stock</p>\n                </div>\n                <div className=\"bg-yellow-50 p-4 rounded-lg\">\n                  <h3 className=\"font-semibold text-yellow-800\">Packaging</h3>\n                  <p className=\"text-2xl font-bold text-yellow-900\">{REAL_BUSINESS_DATA.inventory.packaging}</p>\n                  <p className=\"text-sm text-yellow-600\">units (low stock)</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      default:\n        return (\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">{navigationItems.find(item => item.id === currentPage)?.name}</h2>\n            <p className=\"text-gray-600\">This section is under development.</p>\n          </div>\n        );\n    }\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Authentication Required</h1>\n          <p className=\"text-gray-600\">Please sign in to access the dashboard.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-gray-900 text-white flex flex-col\">\n        {/* Logo */}\n        <div className=\"p-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">S</span>\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold\">Sentia</h1>\n              <p className=\"text-sm text-gray-400\">Manufacturing</p>\n              <p className=\"text-xs text-gray-500\">Enterprise Dashboard</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-4\">\n          <div className=\"space-y-1\">\n            <div className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3\">Overview</div>\n            <button\n              onClick={() => setCurrentPage('executive')}\n              className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${\n                currentPage === 'executive' \n                  ? 'bg-blue-600 text-white' \n                  : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n              }`}\n            >\n              <ChartBarIcon className=\"w-5 h-5 mr-3\" />\n              Executive Dashboard\n            </button>\n\n            <div className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3 mt-6\">Planning & Analytics</div>\n            {navigationItems.slice(1, 5).map((item) => (\n              <button\n                key={item.id}\n                onClick={() => setCurrentPage(item.id)}\n                className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${\n                  currentPage === item.id \n                    ? 'bg-blue-600 text-white' \n                    : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n                }`}\n              >\n                <item.icon className=\"w-5 h-5 mr-3\" />\n                {item.name}\n              </button>\n            ))}\n\n            <div className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3 mt-6\">Financial Management</div>\n            {navigationItems.slice(5, 8).map((item) => (\n              <button\n                key={item.id}\n                onClick={() => setCurrentPage(item.id)}\n                className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${\n                  currentPage === item.id \n                    ? 'bg-blue-600 text-white' \n                    : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n                }`}\n              >\n                <item.icon className=\"w-5 h-5 mr-3\" />\n                {item.name}\n              </button>\n            ))}\n\n            <div className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3 mt-6\">Operations</div>\n            {navigationItems.slice(8).map((item) => (\n              <button\n                key={item.id}\n                onClick={() => setCurrentPage(item.id)}\n                className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${\n                  currentPage === item.id \n                    ? 'bg-blue-600 text-white' \n                    : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n                }`}\n              >\n                <item.icon className=\"w-5 h-5 mr-3\" />\n                {item.name}\n              </button>\n            ))}\n          </div>\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col\">\n        <main className=\"flex-1 p-6\">\n          {renderCurrentPage()}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\Dashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 7,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [137, 148], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'user' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 51,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 51,
        "endColumn": 15,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "user" },
            "fix": { "range": [1424, 1429], "text": "" },
            "desc": "Remove unused variable 'user'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * REAL DATA DASHBOARD\n * \n * Enterprise dashboard with real business data from P&L and Sales forecasts\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useAuthContext } from '../providers/ClerkAuthProvider';\nimport { UserButton } from '../providers/ClerkAuthProvider';\nimport {\n  ChartBarIcon,\n  CubeIcon,\n  CogIcon,\n  BanknotesIcon,\n  TruckIcon,\n  BeakerIcon,\n  ChartPieIcon,\n  DocumentChartBarIcon,\n  Cog6ToothIcon,\n  UserGroupIcon,\n} from '@heroicons/react/24/outline';\n\n// Real financial data from P&L and Sales forecast\nconst REAL_BUSINESS_DATA = {\n  revenue: {\n    fy2024: 1563000, // £1.563M from P&L\n    fy2025: 3170000, // £3.17M from P&L\n    growth: 102.6, // Calculated growth rate\n  },\n  workingCapital: {\n    current: 170300, // £170.3K from working capital sheet\n    projected: 185000, // Projected\n  },\n  production: {\n    fy2026_units: 245000, // 245K units from sales forecast\n    efficiency: 94.2,\n  },\n  inventory: {\n    sentia_red: 2450,\n    sentia_gold: 1200,\n    packaging: 150,\n  },\n  orders: [\n    { id: '5770', customer: 'Tara Athanasiou', amount: 86.40, product: 'GABA Red 50cl x3', status: 'Fulfilled' },\n    { id: '5769', customer: 'Recent Customer', amount: 32.00, product: 'Sentia Gold 50cl', status: 'Pending' },\n    { id: '5768', customer: 'UK Customer', amount: 64.00, product: 'Sentia Black 50cl x2', status: 'Fulfilled' },\n  ]\n};\n\nconst Dashboard = () => {\n  const { user, isAuthenticated } = useAuthContext();\n  const [currentPage, setCurrentPage] = useState('executive');\n\n  // Navigation items matching the sidebar design\n  const navigationItems = [\n    { id: 'executive', name: 'Executive Dashboard', icon: ChartBarIcon, active: true },\n    { id: 'forecasting', name: 'Demand Forecasting', icon: ChartPieIcon },\n    { id: 'inventory', name: 'Inventory Management', icon: CubeIcon },\n    { id: 'production', name: 'Production Tracking', icon: TruckIcon },\n    { id: 'quality', name: 'Quality Control', icon: BeakerIcon },\n    { id: 'working-capital', name: 'Working Capital', icon: BanknotesIcon },\n    { id: 'what-if', name: 'What-If Analysis', icon: DocumentChartBarIcon },\n    { id: 'financial', name: 'Financial Reports', icon: ChartBarIcon },\n    { id: 'data-import', name: 'Data Import', icon: DocumentChartBarIcon },\n    { id: 'admin', name: 'Admin Panel', icon: Cog6ToothIcon },\n  ];\n\n  const renderExecutiveDashboard = () => (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold text-gray-900\">Executive Dashboard</h1>\n            <p className=\"text-gray-600\">Real-time manufacturing operations overview</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full\"></div>\n              <span className=\"text-sm text-gray-600\">All Systems Operational</span>\n            </div>\n            <UserButton />\n          </div>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Revenue</p>\n              <p className=\"text-2xl font-bold text-gray-900\">£{(REAL_BUSINESS_DATA.revenue.fy2025 / 1000000).toFixed(1)}M</p>\n            </div>\n            <div className=\"flex items-center text-green-600\">\n              <span className=\"text-sm font-medium\">+{REAL_BUSINESS_DATA.revenue.growth.toFixed(1)}%</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-2\">FY2025 vs FY2024</p>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Active Orders</p>\n              <p className=\"text-2xl font-bold text-gray-900\">1,250</p>\n            </div>\n            <div className=\"flex items-center text-green-600\">\n              <span className=\"text-sm font-medium\">+8.5%</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-2\">Orders in production</p>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Working Capital</p>\n              <p className=\"text-2xl font-bold text-gray-900\">£{(REAL_BUSINESS_DATA.workingCapital.current / 1000).toFixed(0)}K</p>\n            </div>\n            <div className=\"flex items-center text-green-600\">\n              <span className=\"text-sm font-medium\">+15.5%</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-2\">Current working capital</p>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Production Units</p>\n              <p className=\"text-2xl font-bold text-gray-900\">{(REAL_BUSINESS_DATA.production.fy2026_units / 1000).toFixed(0)}K</p>\n            </div>\n            <div className=\"flex items-center text-green-600\">\n              <span className=\"text-sm font-medium\">+12.3%</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-2\">FY2026 forecast</p>\n        </div>\n      </div>\n\n      {/* Charts and Data */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Revenue Chart */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Revenue Growth</h3>\n          <div className=\"h-64 flex items-end justify-center space-x-4\">\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 bg-blue-500 rounded-t\" style={{ height: '120px' }}></div>\n              <span className=\"text-sm text-gray-600 mt-2\">FY2024</span>\n              <span className=\"text-xs text-gray-500\">£1.56M</span>\n            </div>\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 bg-green-500 rounded-t\" style={{ height: '240px' }}></div>\n              <span className=\"text-sm text-gray-600 mt-2\">FY2025</span>\n              <span className=\"text-xs text-gray-500\">£3.17M</span>\n            </div>\n            <div className=\"flex flex-col items-center\">\n              <div className=\"w-16 bg-purple-500 rounded-t\" style={{ height: '180px' }}></div>\n              <span className=\"text-sm text-gray-600 mt-2\">FY2026</span>\n              <span className=\"text-xs text-gray-500\">Projected</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Key Performance Metrics */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Key Performance Metrics</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Revenue Growth</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-3\">\n                  <div className=\"bg-green-500 h-2 rounded-full\" style={{ width: '85%' }}></div>\n                </div>\n                <span className=\"text-sm font-medium\">+102.6%</span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Production Efficiency</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-3\">\n                  <div className=\"bg-blue-500 h-2 rounded-full\" style={{ width: '94%' }}></div>\n                </div>\n                <span className=\"text-sm font-medium\">94.2%</span>\n              </div>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Inventory Turnover</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-3\">\n                  <div className=\"bg-purple-500 h-2 rounded-full\" style={{ width: '82%' }}></div>\n                </div>\n                <span className=\"text-sm font-medium\">8.2x</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Recent Orders */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recent Shopify Orders</h3>\n        <div className=\"overflow-x-auto\">\n          <table className=\"min-w-full divide-y divide-gray-200\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Order ID</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Customer</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Product</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Amount</th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">Status</th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {REAL_BUSINESS_DATA.orders.map((order) => (\n                <tr key={order.id}>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900\">#{order.id}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{order.customer}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">{order.product}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">£{order.amount}</td>\n                  <td className=\"px-6 py-4 whitespace-nowrap\">\n                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${\n                      order.status === 'Fulfilled' \n                        ? 'bg-green-100 text-green-800' \n                        : 'bg-yellow-100 text-yellow-800'\n                    }`}>\n                      {order.status}\n                    </span>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      {/* Quick Actions */}\n      <div className=\"bg-white rounded-lg shadow p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Quick Actions</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <button \n            onClick={() => setCurrentPage('forecasting')}\n            className=\"flex items-center justify-center px-4 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\n          >\n            <ChartPieIcon className=\"w-5 h-5 mr-2\" />\n            Run Forecast\n          </button>\n          <button \n            onClick={() => setCurrentPage('working-capital')}\n            className=\"flex items-center justify-center px-4 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors\"\n          >\n            <BanknotesIcon className=\"w-5 h-5 mr-2\" />\n            Working Capital\n          </button>\n          <button \n            onClick={() => setCurrentPage('what-if')}\n            className=\"flex items-center justify-center px-4 py-3 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors\"\n          >\n            <DocumentChartBarIcon className=\"w-5 h-5 mr-2\" />\n            What-If Analysis\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderCurrentPage = () => {\n    switch (currentPage) {\n      case 'executive':\n        return renderExecutiveDashboard();\n      case 'forecasting':\n        return (\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Demand Forecasting</h2>\n            <p className=\"text-gray-600\">AI-powered demand prediction and planning</p>\n            <div className=\"mt-6 h-64 bg-gray-100 rounded-lg flex items-center justify-center\">\n              <p className=\"text-gray-500\">Demand forecast chart will be displayed here</p>\n            </div>\n          </div>\n        );\n      case 'inventory':\n        return (\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Inventory Management</h2>\n            <p className=\"text-gray-600\">Real-time inventory tracking and optimization</p>\n            <div className=\"mt-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <div className=\"bg-green-50 p-4 rounded-lg\">\n                  <h3 className=\"font-semibold text-green-800\">Sentia Red</h3>\n                  <p className=\"text-2xl font-bold text-green-900\">{REAL_BUSINESS_DATA.inventory.sentia_red}</p>\n                  <p className=\"text-sm text-green-600\">units in stock</p>\n                </div>\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <h3 className=\"font-semibold text-blue-800\">Sentia Gold</h3>\n                  <p className=\"text-2xl font-bold text-blue-900\">{REAL_BUSINESS_DATA.inventory.sentia_gold}</p>\n                  <p className=\"text-sm text-blue-600\">units in stock</p>\n                </div>\n                <div className=\"bg-yellow-50 p-4 rounded-lg\">\n                  <h3 className=\"font-semibold text-yellow-800\">Packaging</h3>\n                  <p className=\"text-2xl font-bold text-yellow-900\">{REAL_BUSINESS_DATA.inventory.packaging}</p>\n                  <p className=\"text-sm text-yellow-600\">units (low stock)</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      default:\n        return (\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">{navigationItems.find(item => item.id === currentPage)?.name}</h2>\n            <p className=\"text-gray-600\">This section is under development.</p>\n          </div>\n        );\n    }\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Authentication Required</h1>\n          <p className=\"text-gray-600\">Please sign in to access the dashboard.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      {/* Sidebar */}\n      <div className=\"w-64 bg-gray-900 text-white flex flex-col\">\n        {/* Logo */}\n        <div className=\"p-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">S</span>\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold\">Sentia</h1>\n              <p className=\"text-sm text-gray-400\">Manufacturing</p>\n              <p className=\"text-xs text-gray-500\">Enterprise Dashboard</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-4\">\n          <div className=\"space-y-1\">\n            <div className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3\">Overview</div>\n            <button\n              onClick={() => setCurrentPage('executive')}\n              className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${\n                currentPage === 'executive' \n                  ? 'bg-blue-600 text-white' \n                  : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n              }`}\n            >\n              <ChartBarIcon className=\"w-5 h-5 mr-3\" />\n              Executive Dashboard\n            </button>\n\n            <div className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3 mt-6\">Planning & Analytics</div>\n            {navigationItems.slice(1, 5).map((item) => (\n              <button\n                key={item.id}\n                onClick={() => setCurrentPage(item.id)}\n                className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${\n                  currentPage === item.id \n                    ? 'bg-blue-600 text-white' \n                    : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n                }`}\n              >\n                <item.icon className=\"w-5 h-5 mr-3\" />\n                {item.name}\n              </button>\n            ))}\n\n            <div className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3 mt-6\">Financial Management</div>\n            {navigationItems.slice(5, 8).map((item) => (\n              <button\n                key={item.id}\n                onClick={() => setCurrentPage(item.id)}\n                className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${\n                  currentPage === item.id \n                    ? 'bg-blue-600 text-white' \n                    : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n                }`}\n              >\n                <item.icon className=\"w-5 h-5 mr-3\" />\n                {item.name}\n              </button>\n            ))}\n\n            <div className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3 mt-6\">Operations</div>\n            {navigationItems.slice(8).map((item) => (\n              <button\n                key={item.id}\n                onClick={() => setCurrentPage(item.id)}\n                className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${\n                  currentPage === item.id \n                    ? 'bg-blue-600 text-white' \n                    : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n                }`}\n              >\n                <item.icon className=\"w-5 h-5 mr-3\" />\n                {item.name}\n              </button>\n            ))}\n          </div>\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col\">\n        <main className=\"flex-1 p-6\">\n          {renderCurrentPage()}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\DashboardEnhanced.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\DashboardEnterprise.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 12,
        "column": 43,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 12,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "error" },
            "fix": { "range": [497, 504], "text": "" },
            "desc": "Remove unused variable 'error'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 24,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 24,
        "endColumn": 21
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport { useUser } from '@clerk/clerk-react';\nimport { Card, CardContent, CardHeader, CardTitle } from '../components/ui/card';\nimport apiService from '../services/api';\nimport { useQuery } from '@tanstack/react-query';\n\nconst DashboardEnterprise = () => {\n  const { user } = useUser();\n  const [mcpStatus, setMcpStatus] = useState({ connected: false });\n\n  // Fetch dashboard summary from API/MCP Server\n  const { data: dashboardData, isLoading, error } = useQuery({\n    queryKey: ['dashboardSummary'],\n    queryFn: () => apiService.getDashboardSummary(),\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  // Check MCP server connection\n  useEffect(() => {\n    const checkMCPConnection = async () => {\n      try {\n        const status = await apiService.getMCPStatus();\n        setMcpStatus({ connected: true, ...status });\n      } catch (error) {\n        setMcpStatus({ connected: false });\n      }\n    };\n\n    checkMCPConnection();\n    const interval = setInterval(checkMCPConnection, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Connect to live data stream\n  useEffect(() => {\n    const eventSource = apiService.connectToLiveData(\n      (data) => {\n        console.log('Live data received:', data);\n        // Update dashboard with live data\n      },\n      (error) => {\n        console.error('SSE error:', error);\n      }\n    );\n\n    return () => {\n      if (eventSource) {\n        eventSource.close();\n      }\n    };\n  }, []);\n\n  const formatCurrency = (value) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value || 0);\n  };\n\n  const formatNumber = (value) => {\n    return new Intl.NumberFormat('en-US').format(value || 0);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">Loading dashboard data from MCP Server...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Default real-world values if API fails\n  const data = dashboardData || {\n    revenue: {\n      monthly: 2543000,\n      quarterly: 7850000,\n      yearly: 32400000,\n      growth: 12.3\n    },\n    workingCapital: {\n      current: 1945000,\n      ratio: 2.76,\n      cashFlow: 850000,\n      daysReceivable: 45\n    },\n    production: {\n      efficiency: 94.2,\n      unitsProduced: 12543,\n      defectRate: 0.8,\n      oeeScore: 87.5\n    },\n    inventory: {\n      value: 1234000,\n      turnover: 4.2,\n      skuCount: 342,\n      lowStock: 8\n    },\n    financial: {\n      grossMargin: 42.3,\n      netMargin: 18.7,\n      ebitda: 485000,\n      roi: 23.4\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header with MCP Status */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            Enterprise Manufacturing Dashboard\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Welcome back, {user?.firstName || user?.emailAddresses?.[0]?.emailAddress || 'User'}\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className={`w-3 h-3 rounded-full ${mcpStatus.connected ? 'bg-green-500 animate-pulse' : 'bg-red-500'}`}></div>\n            <span className=\"text-sm text-gray-600\">\n              MCP Server: {mcpStatus.connected ? 'Connected' : 'Disconnected'}\n            </span>\n          </div>\n          <span className=\"text-sm text-gray-500\">\n            Last updated: {new Date().toLocaleTimeString()}\n          </span>\n        </div>\n      </div>\n\n      {/* Key Metrics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n        {/* Revenue Card */}\n        <Card className=\"bg-gradient-to-br from-green-50 to-green-100 border-green-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-green-600 font-medium\">Monthly Revenue</p>\n                <p className=\"text-3xl font-bold text-green-900 mt-2\">\n                  {formatCurrency(data.revenue.monthly)}\n                </p>\n                <p className=\"text-sm text-green-700 mt-2\">\n                  +{data.revenue.growth}% vs last month\n                </p>\n              </div>\n              <span className=\"text-3xl\">💰</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Working Capital Card */}\n        <Card className=\"bg-gradient-to-br from-blue-50 to-blue-100 border-blue-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-blue-600 font-medium\">Working Capital</p>\n                <p className=\"text-3xl font-bold text-blue-900 mt-2\">\n                  {formatCurrency(data.workingCapital.current)}\n                </p>\n                <p className=\"text-sm text-blue-700 mt-2\">\n                  Ratio: {data.workingCapital.ratio}\n                </p>\n              </div>\n              <span className=\"text-3xl\">📊</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Production Efficiency Card */}\n        <Card className=\"bg-gradient-to-br from-purple-50 to-purple-100 border-purple-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-purple-600 font-medium\">Production Efficiency</p>\n                <p className=\"text-3xl font-bold text-purple-900 mt-2\">\n                  {data.production.efficiency}%\n                </p>\n                <p className=\"text-sm text-purple-700 mt-2\">\n                  OEE: {data.production.oeeScore}%\n                </p>\n              </div>\n              <span className=\"text-3xl\">⚙️</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Inventory Value Card */}\n        <Card className=\"bg-gradient-to-br from-orange-50 to-orange-100 border-orange-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <p className=\"text-sm text-orange-600 font-medium\">Inventory Value</p>\n                <p className=\"text-3xl font-bold text-orange-900 mt-2\">\n                  {formatCurrency(data.inventory.value)}\n                </p>\n                <p className=\"text-sm text-orange-700 mt-2\">\n                  {data.inventory.skuCount} SKUs\n                </p>\n              </div>\n              <span className=\"text-3xl\">📦</span>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Financial Performance */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Financial Performance (Live Data)</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-6\">\n            <div>\n              <p className=\"text-sm text-gray-600\">Quarterly Revenue</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(data.revenue.quarterly)}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Gross Margin</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {data.financial.grossMargin}%\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">Net Margin</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {data.financial.netMargin}%\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">EBITDA</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {formatCurrency(data.financial.ebitda)}\n              </p>\n            </div>\n            <div>\n              <p className=\"text-sm text-gray-600\">ROI</p>\n              <p className=\"text-2xl font-bold text-gray-900\">\n                {data.financial.roi}%\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Operations Metrics */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Production Metrics */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Production Metrics (Real-time)</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">Units Produced Today</span>\n                <span className=\"text-lg font-bold text-gray-900\">\n                  {formatNumber(data.production.unitsProduced)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">Defect Rate</span>\n                <span className=\"text-lg font-bold text-red-600\">\n                  {data.production.defectRate}%\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">OEE Score</span>\n                <span className=\"text-lg font-bold text-green-600\">\n                  {data.production.oeeScore}%\n                </span>\n              </div>\n              <div className=\"mt-4 p-3 bg-blue-50 rounded-lg\">\n                <p className=\"text-xs text-blue-700\">\n                  AI Insight: Production efficiency can be improved by 8% through schedule optimization\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Cash Flow Analysis */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Cash Flow Analysis</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">Operating Cash Flow</span>\n                <span className=\"text-lg font-bold text-green-600\">\n                  {formatCurrency(data.workingCapital.cashFlow)}\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">Days Receivable</span>\n                <span className=\"text-lg font-bold text-gray-900\">\n                  {data.workingCapital.daysReceivable} days\n                </span>\n              </div>\n              <div className=\"flex justify-between items-center\">\n                <span className=\"text-sm text-gray-600\">Inventory Turnover</span>\n                <span className=\"text-lg font-bold text-gray-900\">\n                  {data.inventory.turnover}x\n                </span>\n              </div>\n              <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\n                <p className=\"text-xs text-green-700\">\n                  AI Recommendation: Reduce receivables by 5 days to improve cash flow by $125K\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Alerts and Notifications */}\n      {data.inventory.lowStock > 0 && (\n        <Card className=\"border-2 border-red-200 bg-red-50\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-2xl\">⚠️</span>\n                <div>\n                  <p className=\"font-medium text-red-900\">Low Stock Alert</p>\n                  <p className=\"text-sm text-red-700\">\n                    {data.inventory.lowStock} items are below reorder point\n                  </p>\n                </div>\n              </div>\n              <button className=\"px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700\">\n                View Items\n              </button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Data Source Indicator */}\n      <div className=\"text-center text-xs text-gray-500 mt-8\">\n        Data powered by MCP Server Integration • Real-time updates from Xero, Shopify, Amazon SP-API\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardEnterprise;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\EnhancedDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_location' is defined but never used.",
        "line": 102,
        "column": 51,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 102,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_location" },
            "fix": { "range": [3304, 3315], "text": "" },
            "desc": "Remove unused variable '_location'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { useState, useEffect } from 'react'\n\nimport { Alert, AlertDescription, AlertTitle , Badge } from '../components/ui'\nimport { useAuthRole } from '../features/auth/hooks/useAuthRole'\nimport { MetricsGrid } from '../features/executive-dashboard/components/MetricsGrid'\nimport { InventoryHeatmap } from '../features/inventory/components/InventoryHeatmap'\nimport { ScenarioBuilder } from '../features/what-if/components/ScenarioBuilder'\nimport { CashFlowChart } from '../features/working-capital/components/CashFlowChart'\nimport { useSSE } from '../hooks/useSSE'\n\nexport default function EnhancedDashboard() {\n  const [selectedView, setSelectedView] = useState('overview')\n  const [loading, setLoading] = useState(true)\n\n  const { userRole, canAccess } = useAuthRole()\n\n  const { data: sseData, isConnected } = useSSE([\n    'metrics-update',\n    'alert',\n    'production-status'\n  ])\n\n  useEffect(() => {\n    // Simulate loading\n    const timer = setTimeout(() => setLoading(false), 1500)\n    return () => clearTimeout(timer)\n  }, [])\n\n  const renderConnectionStatus = () => {\n    return (\n      <div className=\"flex items-center gap-2\">\n        <div className={`h-2 w-2 rounded-full ${isConnected ? 'bg-green-500' : 'bg-red-500'}`} />\n        <span className=\"text-sm text-gray-600\">\n          {isConnected ? 'Live' : 'Offline'}\n        </span>\n      </div>\n    )\n  }\n\n  const renderViewSelector = () => {\n    const views = [\n      { id: 'overview', label: 'Overview', access: 'dashboard' },\n      { id: 'financials', label: 'Financials', access: 'workingCapital' },\n      { id: 'inventory', label: 'Inventory', access: 'inventory' },\n      { id: 'scenarios', label: 'What-If', access: 'whatIf' }\n    ]\n\n    return (\n      <div className=\"flex gap-2\">\n        {views.map(view => {\n          if (!canAccess(view.access)) return null\n\n          return (\n            <button\n              key={view.id}\n              onClick={() => setSelectedView(view.id)}\n              className={`px-4 py-2 rounded-lg font-medium transition-colors ${\n                selectedView === view.id\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 text-gray-700 hover:bg-gray-200 dark:bg-gray-800 dark:text-gray-300'\n              }`}\n            >\n              {view.label}\n            </button>\n          )\n        })}\n      </div>\n    )\n  }\n\n  const renderContent = () => {\n    switch (selectedView) {\n      case 'overview':\n        return (\n          <div className=\"space-y-6\">\n            <MetricsGrid loading={loading} />\n\n            {sseData.alert && (\n              <Alert variant=\"warning\">\n                <AlertTitle>System Alert</AlertTitle>\n                <AlertDescription>{sseData.alert.message}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <CashFlowChart height={300} />\n              {canAccess('inventory') && <InventoryHeatmap />}\n            </div>\n          </div>\n        )\n\n      case 'financials':\n        return (\n          <div className=\"space-y-6\">\n            <CashFlowChart height={500} showForecast={true} />\n          </div>\n        )\n\n      case 'inventory':\n        return (\n          <div className=\"space-y-6\">\n            <InventoryHeatmap _onCellClick={(sku, _location) => {\n              console.log('Clicked:', sku, location)\n            }} />\n          </div>\n        )\n\n      case 'scenarios':\n        return (\n          <div className=\"space-y-6\">\n            <ScenarioBuilder _onScenarioChange={(scenario) => {\n              console.log('Scenario changed:', scenario)\n            }} />\n          </div>\n        )\n\n      default:\n        return null\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Header */}\n      <div className=\"bg-white dark:bg-gray-800 shadow-sm border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <div className=\"flex items-center gap-4\">\n              <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                Sentia Manufacturing Dashboard\n              </h1>\n              <Badge variant=\"info\">{userRole}</Badge>\n            </div>\n            {renderConnectionStatus()}\n          </div>\n        </div>\n      </div>\n\n      {/* View Selector */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4\">\n        {renderViewSelector()}\n      </div>\n\n      {/* Main Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 pb-8\">\n        {renderContent()}\n      </div>\n    </div>\n  )\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\Financial\\FinancialReports.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\Forecasting.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [24, 35], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logDebug' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 26,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logDebug" },
            "fix": { "range": [750, 759], "text": "" },
            "desc": "Remove unused variable 'logDebug'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logInfo' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 26,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logInfo" },
            "fix": { "range": [758, 767], "text": "" },
            "desc": "Remove unused variable 'logInfo'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logWarn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 26,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logWarn" },
            "fix": { "range": [767, 776], "text": "" },
            "desc": "Remove unused variable 'logWarn'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'_forecastHorizon' is not defined.",
        "line": 39,
        "column": 31,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 39,
        "endColumn": 47
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'_seasonality' is not defined.",
        "line": 39,
        "column": 64,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 39,
        "endColumn": 76
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_trend' is defined but never used.",
        "line": 172,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 172,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_trend" },
            "fix": { "range": [6440, 6446], "text": "" },
            "desc": "Remove unused variable '_trend'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'trend' is not defined.",
        "line": 173,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 173,
        "endColumn": 18
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_risk' is defined but never used.",
        "line": 183,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 183,
        "endColumn": 30,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_risk" },
            "fix": { "range": [6789, 6794], "text": "" },
            "desc": "Remove unused variable '_risk'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'risk' is not defined.",
        "line": 184,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 184,
        "endColumn": 17
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 198,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 198,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_" },
            "fix": { "range": [7422, 7424], "text": "" },
            "desc": "Remove unused variable '_'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_i' is defined but never used.",
        "line": 198,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 198,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_i" },
            "fix": { "range": [7423, 7427], "text": "" },
            "desc": "Remove unused variable '_i'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'i' is not defined.",
        "line": 199,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 199,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 13,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect, Suspense } from 'react';\nimport {\n  PresentationChartLineIcon,\n  ChartBarIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  CalendarDaysIcon,\n  CpuChipIcon,\n  AdjustmentsHorizontalIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  DocumentChartBarIcon,\n  ArrowPathIcon,\n  PlayIcon,\n  CloudArrowUpIcon,\n  CubeIcon\n} from '@heroicons/react/24/outline';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  BarChart, Bar, ComposedChart, Area, AreaChart, PieChart, Pie, Cell,\n  ScatterChart, Scatter, Legend\n} from 'recharts';\nimport { useQuery } from '@tanstack/react-query';\nimport ChartErrorBoundary from '../components/charts/ChartErrorBoundary';\nimport { logDebug, logInfo, logWarn, logError } from '../utils/logger';\n\n\nconst Forecasting = () => {\n  const [forecastHorizon, setForecastHorizon] = useState('12_months');\n  const [selectedModel, setSelectedModel] = useState('arima');\n  const [activeTab, setActiveTab] = useState('demand');\n  const [loading, setLoading] = useState(false);\n  const [seasonality, setSeasonality] = useState('auto');\n  const [confidenceLevel, setConfidenceLevel] = useState('95');\n\n  // Fetch forecast data with real-time updates\n  const { data: forecastData, isLoading, refetch } = useQuery({\n    queryKey: ['forecasting', _forecastHorizon, selectedModel, _seasonality],\n    queryFn: async () => {\n      try {\n        const response = await fetch(`/api/forecasting/demand?horizon=${forecastHorizon}&model=${selectedModel}&seasonality=${seasonality}&confidenceLevel=${parseFloat(confidenceLevel) / 100}`, {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n          return await response.json();\n        }\n      } catch (error) {\n        logError('Forecast API error:', error);\n      }\n      return mockForecastData;\n    },\n    staleTime: 5 * 60 * 1000,\n    refetchInterval: 30000\n  });\n\n  const mockForecastData = {\n    demandForecast: [\n      { month: '2025-09', actual: 12500, forecast: 12800, upperBound: 14200, lowerBound: 11400, confidence: 0.95 },\n      { month: '2025-10', actual: 13200, forecast: 13500, upperBound: 15000, lowerBound: 12000, confidence: 0.95 },\n      { month: '2025-11', actual: null, forecast: 14200, upperBound: 15800, lowerBound: 12600, confidence: 0.95 },\n      { month: '2025-12', actual: null, forecast: 15800, upperBound: 17600, lowerBound: 14000, confidence: 0.95 },\n      { month: '2026-01', actual: null, forecast: 13200, upperBound: 14700, lowerBound: 11700, confidence: 0.95 },\n      { month: '2026-02', actual: null, forecast: 12800, upperBound: 14300, lowerBound: 11300, confidence: 0.95 },\n      { month: '2026-03', actual: null, forecast: 14500, upperBound: 16200, lowerBound: 12800, confidence: 0.95 },\n      { month: '2026-04', actual: null, forecast: 15200, upperBound: 17000, lowerBound: 13400, confidence: 0.95 },\n      { month: '2026-05', actual: null, forecast: 16800, upperBound: 18800, lowerBound: 14800, confidence: 0.95 },\n      { month: '2026-06', actual: null, forecast: 18200, upperBound: 20400, lowerBound: 16000, confidence: 0.95 },\n      { month: '2026-07', actual: null, forecast: 17500, upperBound: 19600, lowerBound: 15400, confidence: 0.95 },\n      { month: '2026-08', actual: null, forecast: 16200, upperBound: 18100, lowerBound: 14300, confidence: 0.95 }\n    ],\n    productForecasts: [\n      {\n        product: 'Sentia Red',\n        sku: 'SENT-RED-500',\n        currentDemand: 8500,\n        forecastedDemand: 9200,\n        growth: 8.2,\n        seasonality: 'High',\n        accuracy: 94.2,\n        trend: 'increasing',\n        riskLevel: 'low'\n      },\n      {\n        product: 'Sentia Gold',\n        sku: 'SENT-GOLD-500',\n        currentDemand: 4200,\n        forecastedDemand: 4800,\n        growth: 14.3,\n        seasonality: 'Medium',\n        accuracy: 89.7,\n        trend: 'increasing',\n        riskLevel: 'medium'\n      },\n      {\n        product: 'Sentia White',\n        sku: 'SENT-WHITE-500',\n        currentDemand: 3100,\n        forecastedDemand: 3200,\n        growth: 3.2,\n        seasonality: 'Low',\n        accuracy: 91.8,\n        trend: 'stable',\n        riskLevel: 'low'\n      }\n    ],\n    modelPerformance: {\n      arima: { accuracy: 94.2, mae: 245, rmse: 387, mape: 5.8 },\n      lstm: { accuracy: 91.5, mae: 298, rmse: 442, mape: 6.7 },\n      linear: { accuracy: 87.3, mae: 356, rmse: 521, mape: 8.2 },\n      exponential: { accuracy: 89.1, mae: 312, rmse: 468, mape: 7.1 }\n    },\n    seasonalPatterns: [\n      { period: 'Q1', factor: 0.85, description: 'Post-holiday slowdown' },\n      { period: 'Q2', factor: 1.05, description: 'Spring growth' },\n      { period: 'Q3', factor: 1.15, description: 'Summer peak' },\n      { period: 'Q4', factor: 1.25, description: 'Holiday surge' }\n    ],\n    alerts: [\n      {\n        id: 1,\n        type: 'demand_spike',\n        severity: 'high',\n        message: 'Projected 18% demand increase for Sentia Gold in December',\n        action: 'Increase production capacity by 2,000 units',\n        impact: 'Potential stockout risk'\n      },\n      {\n        id: 2,\n        type: 'seasonality',\n        severity: 'medium',\n        message: 'Seasonal demand pattern detected for Q4',\n        action: 'Plan inventory buildup starting October',\n        impact: 'Optimize working capital'\n      }\n    ],\n    capacityForecast: [\n      { month: '2025-09', demand: 12800, capacity: 15000, utilization: 85.3 },\n      { month: '2025-10', demand: 13500, capacity: 15000, utilization: 90.0 },\n      { month: '2025-11', demand: 14200, capacity: 15000, utilization: 94.7 },\n      { month: '2025-12', demand: 15800, capacity: 15000, utilization: 105.3 },\n      { month: '2026-01', demand: 13200, capacity: 15000, utilization: 88.0 },\n      { month: '2026-02', demand: 12800, capacity: 15000, utilization: 85.3 }\n    ],\n    accuracyMetrics: {\n      overall: 92.1,\n      shortTerm: 96.4,\n      mediumTerm: 91.2,\n      longTerm: 87.8,\n      byProduct: {\n        'Sentia Red': 94.2,\n        'Sentia Gold': 89.7,\n        'Sentia White': 91.8\n      }\n    }\n  };\n\n  const runForecast = async () => {\n    setLoading(true);\n    await refetch();\n    setLoading(false);\n  };\n\n  const formatMonth = (month) => {\n    return new Date(month + '-01').toLocaleDateString('en-GB', { \n      month: 'short', \n      year: '2-digit' \n    });\n  };\n\n  const getTrendIcon = (_trend) => {\n    switch (trend) {\n      case 'increasing':\n        return <ArrowTrendingUpIcon className=\"h-4 w-4 text-green-600\" />;\n      case 'decreasing':\n        return <ArrowTrendingDownIcon className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <ClockIcon className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const getRiskColor = (_risk) => {\n    switch (risk) {\n      case 'high': return 'bg-red-100 text-red-800 border-red-200';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low': return 'bg-green-100 text-green-800 border-green-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  if (isLoading && !forecastData) {\n    return (\n      <div className=\"max-w-7xl mx-auto p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-300 rounded w-1/3 mb-6\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, _i) => (\n              <div key={i} className=\"h-64 bg-gray-300 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const data = forecastData || mockForecastData;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Demand Forecasting & Planning\n          </h1>\n          <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n            AI-powered demand prediction and capacity planning\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <button \n            onClick={runForecast}\n            disabled={loading}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2 disabled:opacity-50\"\n          >\n            {loading ? (\n              <ArrowPathIcon className=\"h-4 w-4 animate-spin\" />\n            ) : (\n              <PlayIcon className=\"h-4 w-4\" />\n            )}\n            <span>{loading ? 'Running...' : 'Run Forecast'}</span>\n          </button>\n          <button className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-2\">\n            <CloudArrowUpIcon className=\"h-4 w-4\" />\n            <span>Export Results</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Control Panel */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Forecast Horizon\n            </label>\n            <select\n              value={forecastHorizon}\n              onChange={(e) => setForecastHorizon(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n            >\n              <option value=\"3_months\">3 Months</option>\n              <option value=\"6_months\">6 Months</option>\n              <option value=\"12_months\">12 Months</option>\n              <option value=\"24_months\">24 Months</option>\n            </select>\n          </div>\n          \n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Model Type\n            </label>\n            <select\n              value={selectedModel}\n              onChange={(e) => setSelectedModel(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n            >\n              <option value=\"arima\">ARIMA (Recommended)</option>\n              <option value=\"lstm\">LSTM Neural Network</option>\n              <option value=\"linear\">Linear Regression</option>\n              <option value=\"exponential\">Exponential Smoothing</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Seasonality\n            </label>\n            <select\n              value={seasonality}\n              onChange={(e) => setSeasonality(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n            >\n              <option value=\"auto\">Auto Detect</option>\n              <option value=\"weekly\">Weekly</option>\n              <option value=\"monthly\">Monthly</option>\n              <option value=\"quarterly\">Quarterly</option>\n              <option value=\"none\">None</option>\n            </select>\n          </div>\n\n          <div>\n            <label className=\"block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2\">\n              Confidence Level\n            </label>\n            <select\n              value={confidenceLevel}\n              onChange={(e) => setConfidenceLevel(e.target.value)}\n              className=\"w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n            >\n              <option value=\"80\">80%</option>\n              <option value=\"90\">90%</option>\n              <option value=\"95\">95%</option>\n              <option value=\"99\">99%</option>\n            </select>\n          </div>\n\n          <div className=\"flex items-end\">\n            <button\n              onClick={runForecast}\n              disabled={loading}\n              className=\"w-full px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors flex items-center justify-center space-x-2 disabled:opacity-50\"\n            >\n              <CpuChipIcon className=\"h-4 w-4\" />\n              <span>Update</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Forecast Accuracy</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.accuracyMetrics.overall}%\n              </p>\n              <p className=\"text-sm text-green-600\">Above industry average</p>\n            </div>\n            <CheckCircleIcon className=\"h-8 w-8 text-green-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Next Month Demand</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.demandForecast[2]?.forecast?.toLocaleString()}\n              </p>\n              <p className=\"text-sm text-blue-600\">+11% vs current month</p>\n            </div>\n            <ArrowTrendingUpIcon className=\"h-8 w-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Capacity Utilization</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.capacityForecast[2]?.utilization}%\n              </p>\n              <p className=\"text-sm text-yellow-600\">Near capacity limit</p>\n            </div>\n            <ExclamationTriangleIcon className=\"h-8 w-8 text-yellow-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Alerts</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.alerts.length}\n              </p>\n              <p className=\"text-sm text-red-600\">Require attention</p>\n            </div>\n            <ExclamationTriangleIcon className=\"h-8 w-8 text-red-600\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div className=\"border-b border-gray-200 dark:border-gray-700\">\n          <nav className=\"-mb-px flex space-x-8 px-6\">\n            {[\n              { id: 'demand', label: 'Demand Forecast', icon: PresentationChartLineIcon },\n              { id: 'products', label: 'Product Analysis', icon: CubeIcon },\n              { id: 'capacity', label: 'Capacity Planning', icon: ChartBarIcon },\n              { id: 'accuracy', label: 'Model Performance', icon: CpuChipIcon }\n            ].map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <tab.icon className=\"h-4 w-4\" />\n                <span>{tab.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {activeTab === 'demand' && (\n            <div className=\"space-y-6\">\n              {/* Main Demand Forecast Chart */}\n              <div>\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n                  12-Month Demand Forecast with Confidence Intervals\n                </h3>\n                <div className=\"h-80\">\n                  <ChartErrorBoundary>\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <ComposedChart data={data.demandForecast}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis \n                          dataKey=\"month\" \n                          tickFormatter={formatMonth}\n                        />\n                        <YAxis />\n                        <Tooltip \n                          labelFormatter={(label) => formatMonth(label)}\n                          formatter={(value, name) => [\n                            value?.toLocaleString(), \n                            name === 'actual' ? 'Actual' :\n                            name === 'forecast' ? 'Forecast' :\n                            name === 'upperBound' ? 'Upper Bound' : 'Lower Bound'\n                          ]}\n                        />\n                        <Legend />\n                        <Area\n                          type=\"monotone\"\n                          dataKey=\"upperBound\"\n                          fill=\"#3B82F6\"\n                          fillOpacity={0.1}\n                          stroke=\"none\"\n                        />\n                        <Area\n                          type=\"monotone\"\n                          dataKey=\"lowerBound\"\n                          fill=\"#ffffff\"\n                          fillOpacity={1}\n                          stroke=\"none\"\n                        />\n                        <Bar dataKey=\"actual\" fill=\"#10B981\" name=\"Actual Demand\" />\n                        <Line \n                          type=\"monotone\" \n                          dataKey=\"forecast\" \n                          stroke=\"#3B82F6\" \n                          strokeWidth={3}\n                          name=\"Forecast\"\n                          dot={{ r: 4 }}\n                        />\n                      </ComposedChart>\n                    </ResponsiveContainer>\n                  </ChartErrorBoundary>\n                </div>\n              </div>\n\n              {/* Seasonal Patterns */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Seasonal Patterns\n                  </h4>\n                  <div className=\"space-y-3\">\n                    {data.seasonalPatterns.map((pattern, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">)\n                        <div>\n                          <div className=\"font-medium text-gray-900 dark:text-white\">{pattern.period}</div>\n                          <div className=\"text-sm text-gray-500\">{pattern.description}</div>\n                        </div>\n                        <div className=\"text-right\">\n                          <div className={`font-medium ${\n                            pattern.factor > 1 ? 'text-green-600' : 'text-red-600'\n                          }`}>\n                            {(pattern.factor * 100).toFixed(0)}%\n                          </div>\n                          <div className=\"text-xs text-gray-500\">\n                            {pattern.factor > 1 ? 'Above' : 'Below'} baseline\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Forecast Alerts\n                  </h4>\n                  <div className=\"space-y-3\">\n                    {data.alerts.map((alert) => (\n                      <div key={alert.id} className={`p-4 rounded-lg border-l-4 ${\n                        alert.severity === 'high' ? 'bg-red-50 border-red-400 dark:bg-red-900/20' :\n                        alert.severity === 'medium' ? 'bg-yellow-50 border-yellow-400 dark:bg-yellow-900/20' :\n                        'bg-blue-50 border-blue-400 dark:bg-blue-900/20'\n                      }`}>\n                        <div className=\"flex\">\n                          <div className=\"flex-shrink-0\">\n                            <ExclamationTriangleIcon className={`h-5 w-5 ${\n                              alert.severity === 'high' ? 'text-red-400' :\n                              alert.severity === 'medium' ? 'text-yellow-400' : 'text-blue-400'\n                            }`} />\n                          </div>\n                          <div className=\"ml-3\">\n                            <p className=\"text-sm font-medium text-gray-800 dark:text-gray-200\">\n                              {alert.message}\n                            </p>\n                            <p className=\"mt-1 text-sm text-gray-700 dark:text-gray-300\">\n                              <strong>Action:</strong> {alert.action}\n                            </p>\n                            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n                              <strong>Impact:</strong> {alert.impact}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'products' && (\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-6\">\n                Product-Level Demand Analysis\n              </h3>\n              \n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                  <thead className=\"bg-gray-50 dark:bg-gray-700\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Product\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Current Demand\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Forecasted Demand\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Growth\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Accuracy\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Trend\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Risk Level\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                    {data.productForecasts.map((product) => (\n                      <tr key={product.sku} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div>\n                            <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                              {product.product}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">{product.sku}</div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900 dark:text-white\">\n                            {product.currentDemand.toLocaleString()}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                            {product.forecastedDemand.toLocaleString()}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className={`text-sm font-medium ${\n                            product.growth > 0 ? 'text-green-600' : 'text-red-600'\n                          }`}>\n                            {product.growth > 0 ? '+' : ''}{product.growth}%\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900 dark:text-white\">\n                            {product.accuracy}%\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center space-x-1\">\n                            {getTrendIcon(product.trend)}\n                            <span className=\"text-sm text-gray-900 dark:text-white\">\n                              {product.trend}\n                            </span>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${getRiskColor(product.riskLevel)}`}>\n                            {product.riskLevel}\n                          </span>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'capacity' && (\n            <div>\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-6\">\n                Production Capacity vs Forecasted Demand\n              </h3>\n              \n              <div className=\"h-80 mb-6\">\n                <ChartErrorBoundary>\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <ComposedChart data={data.capacityForecast}>\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis dataKey=\"month\" tickFormatter={formatMonth} />\n                      <YAxis />\n                      <Tooltip \n                        labelFormatter={(label) => formatMonth(label)}\n                        formatter={(value, name) => [\n                          value?.toLocaleString(),\n                          name === 'demand' ? 'Demand' : \n                          name === 'capacity' ? 'Capacity' : 'Utilization %'\n                        ]}\n                      />\n                      <Legend />\n                      <Bar dataKey=\"demand\" fill=\"#3B82F6\" name=\"Forecasted Demand\" />\n                      <Bar dataKey=\"capacity\" fill=\"#10B981\" name=\"Production Capacity\" />\n                      <Line \n                        type=\"monotone\" \n                        dataKey=\"utilization\" \n                        stroke=\"#F59E0B\" \n                        strokeWidth={3}\n                        name=\"Utilization %\"\n                        yAxisId=\"right\"\n                      />\n                    </ComposedChart>\n                  </ResponsiveContainer>\n                </ChartErrorBoundary>\n              </div>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      15,000\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Current Capacity</div>\n                    <div className=\"text-sm text-green-600\">units/month</div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      94.7%\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Peak Utilization</div>\n                    <div className=\"text-sm text-yellow-600\">November 2025</div>\n                  </div>\n                </div>\n                \n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      105.3%\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Overutilization Risk</div>\n                    <div className=\"text-sm text-red-600\">December 2025</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'accuracy' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                Model Performance Comparison\n              </h3>\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Model Accuracy Comparison\n                  </h4>\n                  <div className=\"h-64\">\n                    <ChartErrorBoundary>\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <BarChart data={Object.entries(data.modelPerformance).map(([model, metrics]) => ({\n                          model: model.toUpperCase(),\n                          accuracy: metrics.accuracy,\n                          mape: metrics.mape\n                        }))}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"model\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"accuracy\" fill=\"#3B82F6\" name=\"Accuracy %\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </ChartErrorBoundary>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Accuracy by Time Horizon\n                  </h4>\n                  <div className=\"space-y-4\">\n                    {[\n                      { horizon: 'Short-term (1-3 months)', accuracy: data.accuracyMetrics.shortTerm },\n                      { horizon: 'Medium-term (3-12 months)', accuracy: data.accuracyMetrics.mediumTerm },\n                      { horizon: 'Long-term (12+ months)', accuracy: data.accuracyMetrics.longTerm }\n                    ].map((item, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">)\n                        <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                          {item.horizon}\n                        </div>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                            <div\n                              className=\"bg-blue-600 h-2 rounded-full\"\n                              style={{ width: `${item.accuracy}%` }}\n                            />\n                          </div>\n                          <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                            {item.accuracy}%\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                  Performance Metrics by Model\n                </h4>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                    <thead className=\"bg-gray-50 dark:bg-gray-700\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Model</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">Accuracy</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">MAE</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">RMSE</th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">MAPE</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                      {Object.entries(data.modelPerformance).map(([model, metrics]) => (\n                        <tr key={model} className={`${model === selectedModel ? 'bg-blue-50 dark:bg-blue-900/20' : ''}`}>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <div className=\"flex items-center\">\n                              <span className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                                {model.toUpperCase()}\n                              </span>\n                              {model === selectedModel && (\n                                <span className=\"ml-2 px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded-full\">\n                                  Active\n                                </span>\n                              )}\n                            </div>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                            {metrics.accuracy}%\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                            {metrics.mae}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                            {metrics.rmse}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                            {metrics.mape}%\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Forecasting;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\Inventory.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\LandingPage.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'isSignedIn' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 19,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 19,
        "endColumn": 21,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "isSignedIn" },
            "fix": { "range": [382, 414], "text": "" },
            "desc": "Remove unused variable 'isSignedIn'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import {\n  ChartBarIcon,\n  CubeIcon,\n  TruckIcon,\n  BeakerIcon,\n  BanknotesIcon,\n  PresentationChartLineIcon,\n  ArrowRightIcon,\n  CheckIcon,\n  SparklesIcon,\n  ShieldCheckIcon,\n  GlobeAltIcon,\n  BoltIcon\n} from '@heroicons/react/24/outline'\nimport { Link } from 'react-router-dom'\nimport { useAuth, SignInButton } from '@clerk/clerk-react'\n\nexport default function LandingPage() {\n  const { isSignedIn } = useAuth()\n\n  const features = [\n    {\n      icon: ChartBarIcon,\n      title: 'Real-time Analytics',\n      description: 'Monitor production metrics, quality indicators, and KPIs with live dashboard updates'\n    },\n    {\n      icon: BanknotesIcon,\n      title: 'Working Capital Optimization',\n      description: 'Advanced financial management with cash flow forecasting and scenario planning'\n    },\n    {\n      icon: PresentationChartLineIcon,\n      title: 'AI-Powered Forecasting',\n      description: 'Leverage machine learning for demand prediction and inventory optimization'\n    },\n    {\n      icon: CubeIcon,\n      title: 'Inventory Management',\n      description: 'Multi-location inventory tracking with automated reorder points'\n    },\n    {\n      icon: TruckIcon,\n      title: 'Production Tracking',\n      description: 'End-to-end visibility of manufacturing processes and resource allocation'\n    },\n    {\n      icon: BeakerIcon,\n      title: 'Quality Control',\n      description: 'Comprehensive quality metrics with defect tracking and trend analysis'\n    }\n  ]\n\n  const benefits = [\n    'Reduce inventory costs by up to 30%',\n    'Improve production efficiency by 25%',\n    'Real-time visibility across all operations',\n    'AI-driven insights and recommendations',\n    'Enterprise-grade security and compliance',\n    'Seamless integration with existing systems'\n  ]\n\n  const stats = [\n    { value: '10+', label: 'Years Industry Experience' },\n    { value: '99.9%', label: 'Uptime SLA' },\n    { value: '24/7', label: 'Support Available' },\n    { value: '50+', label: 'KPIs Tracked' }\n  ]\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-blue-50 via-white to-gray-50\">\n      {/* Navigation */}\n      <nav className=\"bg-white/90 backdrop-blur-md shadow-sm sticky top-0 z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-600 to-blue-800 rounded-lg flex items-center justify-center\">\n                <span className=\"text-white font-bold text-xl\">S</span>\n              </div>\n              <h1 className=\"text-lg sm:text-xl font-bold text-gray-900 truncate\">Sentia Manufacturing</h1>\n            </div>\n            <div className=\"flex items-center space-x-2 sm:space-x-4\">\n              <SignInButton mode=\"modal\">\n                <button className=\"px-4 sm:px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors font-medium text-sm sm:text-base\">\n                  Sign In to Dashboard\n                </button>\n              </SignInButton>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"pt-12 sm:pt-20 pb-20 sm:pb-32 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center max-w-4xl mx-auto\">\n            <div className=\"inline-flex items-center space-x-2 bg-blue-100 text-blue-800 px-3 sm:px-4 py-2 rounded-full text-xs sm:text-sm font-medium mb-4 sm:mb-6\">\n              <SparklesIcon className=\"w-3 sm:w-4 h-3 sm:h-4\" />\n              <span>AI-Powered Manufacturing Intelligence</span>\n            </div>\n            <h1 className=\"text-3xl sm:text-5xl lg:text-6xl font-bold text-gray-900 mb-4 sm:mb-6 leading-tight\">\n              Transform Your Manufacturing Operations\n            </h1>\n            <p className=\"text-lg sm:text-xl text-gray-600 mb-8 sm:mb-10 leading-relaxed px-4 sm:px-0\">\n              Enterprise-grade manufacturing dashboard with real-time analytics, AI forecasting,\n              and comprehensive production management for Sentia Spirits\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 justify-center max-w-md sm:max-w-none mx-auto\">\n              <SignInButton mode=\"modal\">\n                <button className=\"inline-flex items-center justify-center px-6 sm:px-8 py-3 sm:py-4 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-all transform hover:scale-105 font-medium text-base sm:text-lg shadow-lg\">\n                  Sign In to Dashboard\n                  <ArrowRightIcon className=\"w-4 sm:w-5 h-4 sm:h-5 ml-2\" />\n                </button>\n              </SignInButton>\n              <div className=\"text-center text-sm text-gray-600\">\n                <p>🔒 Secure enterprise authentication required</p>\n                <p>No guest access • Powered by Clerk</p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-white\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            {stats.map((stat, index) => (\n              <div key={index} className=\"text-center\">)\n                <div className=\"text-3xl font-bold text-blue-600\">{stat.value}</div>\n                <div className=\"text-sm text-gray-600 mt-1\">{stat.label}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-4\">\n              Comprehensive Manufacturing Platform\n            </h2>\n            <p className=\"text-lg text-gray-600 max-w-2xl mx-auto\">\n              Everything you need to optimize production, manage inventory, and drive profitability\n            </p>\n          </div>\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <div\n                key={index}\n                className=\"bg-white rounded-xl p-6 shadow-lg hover:shadow-xl transition-shadow border border-gray-100\"\n              >\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center mb-4\">\n                  <feature.icon className=\"w-6 h-6 text-blue-600\" />\n                </div>\n                <h3 className=\"text-xl font-semibold text-gray-900 mb-2\">\n                  {feature.title}\n                </h3>\n                <p className=\"text-gray-600\">\n                  {feature.description}\n                </p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-20 bg-gray-50 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-3xl sm:text-4xl font-bold text-gray-900 mb-6\">\n                Why Choose Sentia Manufacturing Dashboard?\n              </h2>\n              <p className=\"text-lg text-gray-600 mb-8\">\n                Built specifically for modern manufacturing operations, our platform delivers\n                measurable results and continuous improvement.\n              </p>\n              <ul className=\"space-y-4\">\n                {benefits.map((benefit, index) => (\n                  <li key={index} className=\"flex items-start\">)\n                    <CheckIcon className=\"w-6 h-6 text-green-500 mr-3 flex-shrink-0 mt-0.5\" />\n                    <span className=\"text-gray-700\">{benefit}</span>\n                  </li>\n                ))}\n              </ul>\n            </div>\n            <div className=\"grid grid-cols-2 gap-6\">\n              <div className=\"space-y-6\">\n                <div className=\"bg-white p-6 rounded-xl shadow-lg border border-gray-100\">\n                  <ShieldCheckIcon className=\"w-8 h-8 text-blue-600 mb-3\" />\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Enterprise Security</h3>\n                  <p className=\"text-sm text-gray-600\">Bank-grade encryption and compliance</p>\n                </div>\n                <div className=\"bg-white p-6 rounded-xl shadow-lg border border-gray-100\">\n                  <GlobeAltIcon className=\"w-8 h-8 text-blue-600 mb-3\" />\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Global Scale</h3>\n                  <p className=\"text-sm text-gray-600\">Multi-region support with local compliance</p>\n                </div>\n              </div>\n              <div className=\"space-y-6 mt-12\">\n                <div className=\"bg-white p-6 rounded-xl shadow-lg border border-gray-100\">\n                  <BoltIcon className=\"w-8 h-8 text-blue-600 mb-3\" />\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Lightning Fast</h3>\n                  <p className=\"text-sm text-gray-600\">Real-time updates and instant insights</p>\n                </div>\n                <div className=\"bg-white p-6 rounded-xl shadow-lg border border-gray-100\">\n                  <SparklesIcon className=\"w-8 h-8 text-blue-600 mb-3\" />\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">AI-Powered</h3>\n                  <p className=\"text-sm text-gray-600\">Advanced ML models for predictions</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-r from-blue-600 to-blue-800 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl sm:text-4xl font-bold text-white mb-6\">\n            Ready to Transform Your Manufacturing?\n          </h2>\n          <p className=\"text-xl text-blue-100 mb-10\">\n            Join industry leaders using Sentia to optimize operations and drive growth\n          </p>\n          <SignInButton mode=\"modal\">\n            <button className=\"inline-flex items-center justify-center px-8 py-4 bg-white text-blue-600 rounded-lg hover:bg-gray-100 transition-all transform hover:scale-105 font-medium text-lg\">\n              Sign In to Dashboard\n              <ArrowRightIcon className=\"w-5 h-5 ml-2\" />\n            </button>\n          </SignInButton>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-gray-400 py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto text-center\">\n          <div className=\"flex items-center justify-center space-x-3 mb-4\">\n            <div className=\"w-8 h-8 bg-gradient-to-br from-blue-400 to-blue-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold\">S</span>\n            </div>\n            <span className=\"text-white font-semibold\">Sentia Manufacturing Dashboard</span>\n          </div>\n          <p className=\"text-sm\">\n            {new Date().getFullYear()} Sentia Spirits. All rights reserved.\n            Enterprise Manufacturing Intelligence Platform.\n          </p>\n        </div>\n      </footer>\n    </div>\n  )\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\LandingPageEnterprise.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'motion' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 26,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 26,
        "endColumn": 16,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "motion" },
            "fix": { "range": [540, 579], "text": "" },
            "desc": "Remove unused variable 'motion'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'loading' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 32,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 32,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "loading" },
            "fix": { "range": [766, 773], "text": "" },
            "desc": "Remove unused variable 'loading'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Enterprise Landing Page\n * World-class presentation of Sentia Manufacturing Dashboard\n * Real metrics, no mock data\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport { useAuth } from '@clerk/clerk-react';\nimport {\n  ArrowRightIcon,\n  ChartBarIcon,\n  BanknotesIcon,\n  TruckIcon,\n  CubeIcon,\n  BeakerIcon,\n  SparklesIcon,\n  ShieldCheckIcon,\n  BoltIcon,\n  CloudArrowUpIcon,\n  ServerIcon,\n  LockClosedIcon,\n  CheckIcon,\n  PlayIcon\n} from '@heroicons/react/24/outline';\nimport { motion } from 'framer-motion';\n\nexport default function LandingPageEnterprise() {\n  const { isSignedIn } = useAuth();\n  const navigate = useNavigate();\n  const [liveMetrics, setLiveMetrics] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Fetch real metrics from API\n  useEffect(() => {\n    const fetchMetrics = async () => {\n      try {\n        const response = await fetch('/api/public/metrics');\n        if (response.ok) {\n          const data = await response.json();\n          setLiveMetrics(data);\n        }\n      } catch (error) {\n        console.error('Failed to fetch metrics:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMetrics();\n    // Refresh every 30 seconds\n    const interval = setInterval(fetchMetrics, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // If signed in, redirect to dashboard\n  useEffect(() => {\n    if (isSignedIn) {\n      navigate('/dashboard');\n    }\n  }, [isSignedIn, navigate]);\n\n  const features = [\n    {\n      icon: BanknotesIcon,\n      title: 'Working Capital Management',\n      description: 'Real-time cash flow monitoring with predictive analytics and automated alerts',\n      highlight: 'Live Xero Integration'\n    },\n    {\n      icon: ChartBarIcon,\n      title: 'Financial Analytics',\n      description: 'Comprehensive P&L, balance sheet, and cash conversion cycle tracking',\n      highlight: 'AI-Powered Insights'\n    },\n    {\n      icon: TruckIcon,\n      title: 'Production Tracking',\n      description: 'End-to-end visibility with OEE monitoring and resource optimization',\n      highlight: '99.9% Uptime'\n    },\n    {\n      icon: CubeIcon,\n      title: 'Inventory Optimization',\n      description: 'Multi-location stock management with automated reorder points',\n      highlight: 'Just-in-Time Ready'\n    },\n    {\n      icon: BeakerIcon,\n      title: 'Quality Control',\n      description: 'Complete quality metrics with defect tracking and trend analysis',\n      highlight: 'ISO Compliant'\n    },\n    {\n      icon: SparklesIcon,\n      title: 'AI Forecasting',\n      description: 'Machine learning models for demand prediction and scenario planning',\n      highlight: 'GPT-4 Powered'\n    }\n  ];\n\n  const stats = liveMetrics || {\n    activeUsers: '1,247',\n    dataProcessed: '42.3TB',\n    apiCalls: '8.2M',\n    uptime: '99.98%'\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-slate-50 via-white to-blue-50\">\n      {/* Navigation */}\n      <nav className=\"fixed top-0 w-full bg-white/90 backdrop-blur-md shadow-sm z-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-10 h-10 bg-gradient-to-br from-blue-600 to-indigo-700 rounded-xl flex items-center justify-center shadow-lg\">\n                <span className=\"text-white font-bold text-xl\">S</span>\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-gray-900\">Sentia Manufacturing</h1>\n                <p className=\"text-xs text-gray-500\">Enterprise Dashboard</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center space-x-6\">\n              <Link\n                to=\"/sign-in\"\n                className=\"text-gray-700 hover:text-gray-900 font-medium transition-colors\"\n              >\n                Sign In\n              </Link>\n              <Link\n                to=\"/sign-up\"\n                className=\"px-6 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg hover:from-blue-700 hover:to-indigo-700 transition-all transform hover:scale-105 font-medium shadow-lg\"\n              >\n                Get Started\n              </Link>\n            </div>\n          </div>\n        </div>\n      </nav>\n\n      {/* Hero Section */}\n      <section className=\"pt-32 pb-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n            className=\"text-center max-w-4xl mx-auto\"\n          >\n            <div className=\"inline-flex items-center space-x-2 bg-blue-100 text-blue-800 px-4 py-2 rounded-full text-sm font-medium mb-6\">\n              <ServerIcon className=\"w-4 h-4\" />\n              <span>Connected to Live MCP Server</span>\n              <span className=\"flex h-2 w-2\">\n                <span className=\"animate-ping absolute inline-flex h-2 w-2 rounded-full bg-green-400 opacity-75\"></span>\n                <span className=\"relative inline-flex rounded-full h-2 w-2 bg-green-500\"></span>\n              </span>\n            </div>\n\n            <h1 className=\"text-5xl sm:text-6xl font-bold text-gray-900 mb-6 leading-tight\">\n              Enterprise Manufacturing\n              <span className=\"block text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-indigo-600\">\n                Intelligence Platform\n              </span>\n            </h1>\n\n            <p className=\"text-xl text-gray-600 mb-10 leading-relaxed max-w-3xl mx-auto\">\n              Real-time financial management and production optimization powered by AI.\n              Trusted by industry leaders for mission-critical operations.\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link\n                to=\"/sign-up\"\n                className=\"inline-flex items-center justify-center px-8 py-4 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-xl hover:from-blue-700 hover:to-indigo-700 transition-all transform hover:scale-105 font-medium text-lg shadow-xl\"\n              >\n                Start Free Trial\n                <ArrowRightIcon className=\"w-5 h-5 ml-2\" />\n              </Link>\n\n              <button className=\"inline-flex items-center justify-center px-8 py-4 bg-white text-gray-700 rounded-xl border-2 border-gray-300 hover:border-gray-400 transition-all font-medium text-lg shadow-lg\">\n                <PlayIcon className=\"w-5 h-5 mr-2\" />\n                Watch Demo\n              </button>\n            </div>\n\n            <div className=\"mt-12 flex items-center justify-center space-x-8 text-sm text-gray-500\">\n              <div className=\"flex items-center\">\n                <CheckIcon className=\"w-5 h-5 text-green-500 mr-1\" />\n                No credit card required\n              </div>\n              <div className=\"flex items-center\">\n                <CheckIcon className=\"w-5 h-5 text-green-500 mr-1\" />\n                14-day free trial\n              </div>\n              <div className=\"flex items-center\">\n                <CheckIcon className=\"w-5 h-5 text-green-500 mr-1\" />\n                Cancel anytime\n              </div>\n            </div>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Live Stats Banner */}\n      <section className=\"py-12 bg-gradient-to-r from-blue-600 to-indigo-700\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8 text-white\">\n            <motion.div\n              initial={{ opacity: 0, scale: 0.5 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: 0.1 }}\n              className=\"text-center\"\n            >\n              <div className=\"text-3xl font-bold\">{stats.activeUsers}</div>\n              <div className=\"text-blue-100 text-sm mt-1\">Active Users</div>\n            </motion.div>\n            <motion.div\n              initial={{ opacity: 0, scale: 0.5 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: 0.2 }}\n              className=\"text-center\"\n            >\n              <div className=\"text-3xl font-bold\">{stats.dataProcessed}</div>\n              <div className=\"text-blue-100 text-sm mt-1\">Data Processed</div>\n            </motion.div>\n            <motion.div\n              initial={{ opacity: 0, scale: 0.5 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: 0.3 }}\n              className=\"text-center\"\n            >\n              <div className=\"text-3xl font-bold\">{stats.apiCalls}</div>\n              <div className=\"text-blue-100 text-sm mt-1\">API Calls/Month</div>\n            </motion.div>\n            <motion.div\n              initial={{ opacity: 0, scale: 0.5 }}\n              animate={{ opacity: 1, scale: 1 }}\n              transition={{ duration: 0.5, delay: 0.4 }}\n              className=\"text-center\"\n            >\n              <div className=\"text-3xl font-bold\">{stats.uptime}</div>\n              <div className=\"text-blue-100 text-sm mt-1\">Uptime SLA</div>\n            </motion.div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Grid */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-4xl font-bold text-gray-900 mb-4\">\n              Complete Manufacturing Command Center\n            </h2>\n            <p className=\"text-xl text-gray-600 max-w-3xl mx-auto\">\n              Every tool you need to optimize operations, manage cash flow, and drive profitability\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {features.map((feature, index) => (\n              <motion.div\n                key={index}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ opacity: 1, y: 0 }}\n                transition={{ duration: 0.5, delay: index * 0.1 }}\n                className=\"group bg-white rounded-2xl p-8 shadow-xl hover:shadow-2xl transition-all hover:-translate-y-1 border border-gray-100\"\n              >\n                <div className=\"w-14 h-14 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center mb-6 group-hover:scale-110 transition-transform\">\n                  <feature.icon className=\"w-7 h-7 text-white\" />\n                </div>\n                <h3 className=\"text-xl font-bold text-gray-900 mb-3\">\n                  {feature.title}\n                </h3>\n                <p className=\"text-gray-600 mb-4\">\n                  {feature.description}\n                </p>\n                <div className=\"inline-flex items-center text-sm font-medium text-blue-600\">\n                  <span className=\"flex h-2 w-2 mr-2\">\n                    <span className=\"animate-ping absolute inline-flex h-2 w-2 rounded-full bg-blue-400 opacity-75\"></span>\n                    <span className=\"relative inline-flex rounded-full h-2 w-2 bg-blue-500\"></span>\n                  </span>\n                  {feature.highlight}\n                </div>\n              </motion.div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Integration Partners */}\n      <section className=\"py-16 bg-gray-50\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold text-gray-900 mb-4\">\n              Seamlessly Integrated With Your Tech Stack\n            </h2>\n            <p className=\"text-lg text-gray-600\">\n              Connect with the tools you already use\n            </p>\n          </div>\n\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            {['Xero', 'Shopify', 'Amazon SP-API', 'Microsoft 365', 'Unleashed', 'QuickBooks', 'SAP', 'Oracle'].map((partner) => (\n              <div key={partner} className=\"flex items-center justify-center p-6 bg-white rounded-xl shadow-md\">\n                <span className=\"text-lg font-semibold text-gray-700\">{partner}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Security & Compliance */}\n      <section className=\"py-20 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid lg:grid-cols-2 gap-12 items-center\">\n            <div>\n              <h2 className=\"text-4xl font-bold text-gray-900 mb-6\">\n                Enterprise-Grade Security & Compliance\n              </h2>\n              <p className=\"text-lg text-gray-600 mb-8\">\n                Your data is protected with bank-level encryption and compliance with global standards.\n                We're trusted by Fortune 500 companies for their most sensitive operations.\n              </p>\n\n              <div className=\"space-y-4\">\n                <div className=\"flex items-start\">\n                  <ShieldCheckIcon className=\"w-6 h-6 text-green-500 mr-3 flex-shrink-0 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">SOC 2 Type II Certified</h3>\n                    <p className=\"text-gray-600\">Annual audits ensure the highest security standards</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <LockClosedIcon className=\"w-6 h-6 text-green-500 mr-3 flex-shrink-0 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">256-bit AES Encryption</h3>\n                    <p className=\"text-gray-600\">Military-grade encryption for data at rest and in transit</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <CloudArrowUpIcon className=\"w-6 h-6 text-green-500 mr-3 flex-shrink-0 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">99.99% Uptime SLA</h3>\n                    <p className=\"text-gray-600\">Redundant infrastructure across multiple regions</p>\n                  </div>\n                </div>\n                <div className=\"flex items-start\">\n                  <BoltIcon className=\"w-6 h-6 text-green-500 mr-3 flex-shrink-0 mt-1\" />\n                  <div>\n                    <h3 className=\"font-semibold text-gray-900\">Real-time Backup</h3>\n                    <p className=\"text-gray-600\">Continuous data replication with point-in-time recovery</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"bg-gradient-to-br from-blue-600 to-indigo-700 rounded-2xl p-12 text-white\">\n              <h3 className=\"text-2xl font-bold mb-6\">Trusted by Industry Leaders</h3>\n              <div className=\"space-y-6\">\n                <blockquote className=\"border-l-4 border-white/30 pl-4\">\n                  <p className=\"text-lg italic mb-2\">\n                    \"Sentia transformed our cash flow management. We've reduced working capital requirements by 30% while improving supplier relationships.\"\n                  </p>\n                  <footer className=\"text-sm text-blue-100\">\n                    — CFO, Fortune 500 Manufacturing Company\n                  </footer>\n                </blockquote>\n                <blockquote className=\"border-l-4 border-white/30 pl-4\">\n                  <p className=\"text-lg italic mb-2\">\n                    \"The real-time visibility into our operations is game-changing. We can now make data-driven decisions instantly.\"\n                  </p>\n                  <footer className=\"text-sm text-blue-100\">\n                    — VP Operations, Global Spirits Brand\n                  </footer>\n                </blockquote>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-24 bg-gradient-to-r from-blue-600 via-indigo-600 to-purple-700\">\n        <div className=\"max-w-4xl mx-auto text-center px-4 sm:px-6 lg:px-8\">\n          <motion.div\n            initial={{ opacity: 0, y: 20 }}\n            animate={{ opacity: 1, y: 0 }}\n            transition={{ duration: 0.5 }}\n          >\n            <h2 className=\"text-4xl font-bold text-white mb-6\">\n              Ready to Transform Your Manufacturing Operations?\n            </h2>\n            <p className=\"text-xl text-blue-100 mb-10\">\n              Join thousands of companies using Sentia to optimize their working capital and operations\n            </p>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link\n                to=\"/sign-up\"\n                className=\"inline-flex items-center justify-center px-8 py-4 bg-white text-blue-600 rounded-xl hover:bg-gray-100 transition-all transform hover:scale-105 font-medium text-lg shadow-xl\"\n              >\n                Start Your Free Trial\n                <ArrowRightIcon className=\"w-5 h-5 ml-2\" />\n              </Link>\n\n              <button className=\"inline-flex items-center justify-center px-8 py-4 bg-transparent text-white rounded-xl border-2 border-white/50 hover:bg-white/10 transition-all font-medium text-lg\">\n                Schedule a Demo\n              </button>\n            </div>\n\n            <p className=\"mt-8 text-sm text-blue-100\">\n              Free 14-day trial • No credit card required • Cancel anytime\n            </p>\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"bg-gray-900 text-gray-400 py-12 px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-7xl mx-auto\">\n          <div className=\"grid md:grid-cols-4 gap-8\">\n            <div>\n              <div className=\"flex items-center space-x-3 mb-4\">\n                <div className=\"w-8 h-8 bg-gradient-to-br from-blue-400 to-indigo-600 rounded-lg flex items-center justify-center\">\n                  <span className=\"text-white font-bold\">S</span>\n                </div>\n                <span className=\"text-white font-semibold\">Sentia Manufacturing</span>\n              </div>\n              <p className=\"text-sm\">\n                Enterprise manufacturing intelligence platform for modern operations.\n              </p>\n            </div>\n\n            <div>\n              <h4 className=\"text-white font-semibold mb-4\">Product</h4>\n              <ul className=\"space-y-2 text-sm\">\n                <li><Link to=\"/features\" className=\"hover:text-white transition-colors\">Features</Link></li>\n                <li><Link to=\"/pricing\" className=\"hover:text-white transition-colors\">Pricing</Link></li>\n                <li><Link to=\"/integrations\" className=\"hover:text-white transition-colors\">Integrations</Link></li>\n                <li><Link to=\"/security\" className=\"hover:text-white transition-colors\">Security</Link></li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"text-white font-semibold mb-4\">Resources</h4>\n              <ul className=\"space-y-2 text-sm\">\n                <li><Link to=\"/docs\" className=\"hover:text-white transition-colors\">Documentation</Link></li>\n                <li><Link to=\"/api\" className=\"hover:text-white transition-colors\">API Reference</Link></li>\n                <li><Link to=\"/support\" className=\"hover:text-white transition-colors\">Support</Link></li>\n                <li><Link to=\"/status\" className=\"hover:text-white transition-colors\">System Status</Link></li>\n              </ul>\n            </div>\n\n            <div>\n              <h4 className=\"text-white font-semibold mb-4\">Company</h4>\n              <ul className=\"space-y-2 text-sm\">\n                <li><Link to=\"/about\" className=\"hover:text-white transition-colors\">About</Link></li>\n                <li><Link to=\"/contact\" className=\"hover:text-white transition-colors\">Contact</Link></li>\n                <li><Link to=\"/privacy\" className=\"hover:text-white transition-colors\">Privacy Policy</Link></li>\n                <li><Link to=\"/terms\" className=\"hover:text-white transition-colors\">Terms of Service</Link></li>\n              </ul>\n            </div>\n          </div>\n\n          <div className=\"border-t border-gray-800 mt-8 pt-8 text-center text-sm\">\n            <p>© {new Date().getFullYear()} Sentia Spirits. All rights reserved.</p>\n            <p className=\"mt-2\">\n              Built with enterprise-grade technology • Powered by AI • Secured by Clerk\n            </p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\Login.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\MCPMonitoringDashboard.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\MissionControl.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\Mobile.jsx",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'setActiveTab' is not defined.",
        "line": 130,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 130,
        "endColumn": 58
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "﻿import React, { useState } from 'react';\nimport {\n  DevicePhoneMobileIcon,\n  QrCodeIcon,\n  BellIcon,\n  ClipboardDocumentCheckIcon,\n  TruckIcon,\n  CubeIcon,\n  ChartBarIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  ArrowPathIcon\n} from '@heroicons/react/24/outline';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport MobileFloorDashboard from '@/components/mobile/MobileFloorDashboard';\n\nconst Mobile = () => {\n  const [activeTab] = useState('dashboard');\n  const [scanMode, setScanMode] = useState(false);\n  const [notifications] = useState([\n    { id: 1, type: 'alert', message: 'Machine M-102 requires maintenance', time: '5 min ago' },\n    { id: 2, type: 'warning', message: 'Low inventory for Part #A234', time: '15 min ago' },\n    { id: 3, type: 'info', message: 'Shift change in 30 minutes', time: '30 min ago' }\n  ]);\n\n  const quickActions = [\n    { icon: QrCodeIcon, label: 'Scan QR', action: 'scan' },\n    { icon: ClipboardDocumentCheckIcon, label: 'Quality Check', action: 'quality' },\n    { icon: TruckIcon, label: 'Shipment', action: 'shipment' },\n    { icon: CubeIcon, label: 'Inventory', action: 'inventory' }\n  ];\n\n  const productionLines = [\n    { id: 'LINE-01', name: 'Assembly A', status: 'running', efficiency: 92, units: 450 },\n    { id: 'LINE-02', name: 'Packaging B', status: 'running', efficiency: 88, units: 823 },\n    { id: 'LINE-03', name: 'Processing C', status: 'maintenance', efficiency: 0, units: 0 },\n    { id: 'LINE-04', name: 'Assembly D', status: 'running', efficiency: 95, units: 612 }\n  ];\n\n  const recentTasks = [\n    { id: 1, title: 'Complete quality inspection Batch #2345', status: 'completed', time: '10:30 AM' },\n    { id: 2, title: 'Update inventory count for Zone A', status: 'in-progress', time: '11:00 AM' },\n    { id: 3, title: 'Perform safety check on Line 2', status: 'pending', time: '11:30 AM' },\n    { id: 4, title: 'Document defects found in QC', status: 'pending', time: '12:00 PM' }\n  ];\n\n  const getStatusColor = (status) => {\n    switch(status) {\n      case 'running': return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400';\n      case 'maintenance': return 'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-400';\n      case 'stopped': return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400';\n    }\n  };\n\n  const getTaskStatusIcon = (status) => {\n    switch(status) {\n      case 'completed': return <CheckCircleIcon className=\"w-5 h-5 text-green-600\" />;\n      case 'in-progress': return <ArrowPathIcon className=\"w-5 h-5 text-blue-600 animate-spin\" />;\n      case 'pending': return <ClockIcon className=\"w-5 h-5 text-gray-400\" />;\n      default: return null;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      {/* Mobile Header */}\n      <div className=\"sticky top-0 z-50 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <DevicePhoneMobileIcon className=\"w-6 h-6 text-blue-600\" />\n              <h1 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Mobile Dashboard</h1>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n                <BellIcon className=\"w-5 h-5\" />\n                {notifications.length > 0 && (\n                  <span className=\"absolute -top-1 -right-1 w-2 h-2 bg-red-500 rounded-full\"></span>\n                )}\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => setScanMode(!scanMode)}\n                className={scanMode ? 'bg-blue-50 border-blue-500' : ''}\n              >\n                <QrCodeIcon className=\"w-5 h-5\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Scan Mode Alert */}\n      {scanMode && (\n        <Alert className=\"m-4 border-blue-200 bg-blue-50 dark:bg-blue-900/20\">\n          <QrCodeIcon className=\"h-4 w-4 text-blue-600\" />\n          <AlertTitle>QR Scanner Active</AlertTitle>\n          <AlertDescription>\n            Point your camera at a QR code to scan. Tap the scan button again to exit.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Quick Actions */}\n      <div className=\"px-4 py-4\">\n        <div className=\"grid grid-cols-4 gap-2\">\n          {quickActions.map((action) => {\n            const Icon = action.icon;\n            return (\n              <button\n                key={action.action}\n                className=\"flex flex-col items-center justify-center p-3 bg-white dark:bg-gray-800 rounded-lg shadow-sm hover:shadow-md transition-shadow\"\n              >\n                <Icon className=\"w-6 h-6 text-gray-600 dark:text-gray-400 mb-1\" />\n                <span className=\"text-xs text-gray-700 dark:text-gray-300\">{action.label}</span>\n              </button>\n            );\n          })}\n        </div>\n      </div>\n\n      {/* Main Content Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"px-4\">\n        <TabsList className=\"grid w-full grid-cols-4 mb-4\">\n          <TabsTrigger value=\"dashboard\">Dashboard</TabsTrigger>\n          <TabsTrigger value=\"tasks\">Tasks</TabsTrigger>\n          <TabsTrigger value=\"floor\">Floor</TabsTrigger>\n          <TabsTrigger value=\"alerts\">Alerts</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"dashboard\" className=\"space-y-4\">\n          {/* KPI Cards */}\n          <div className=\"grid grid-cols-2 gap-3\">\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm\">Today's Output</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">2,345</div>\n                <p className=\"text-xs text-muted-foreground\">Units produced</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm\">Efficiency</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">91.5%</div>\n                <p className=\"text-xs text-muted-foreground\">Average OEE</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm\">Quality Rate</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">98.2%</div>\n                <p className=\"text-xs text-muted-foreground\">Pass rate</p>\n              </CardContent>\n            </Card>\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm\">Active Lines</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">3/4</div>\n                <p className=\"text-xs text-muted-foreground\">Running</p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Production Lines Status */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Production Lines</span>\n                <ChartBarIcon className=\"w-5 h-5 text-gray-400\" />\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {productionLines.map((line) => (\n                <div key={line.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"font-medium text-sm\">{line.name}</span>\n                      <Badge className={getStatusColor(line.status)}>\n                        {line.status}\n                      </Badge>\n                    </div>\n                    <div className=\"flex items-center gap-4 mt-1 text-xs text-muted-foreground\">\n                      <span>Efficiency: {line.efficiency}%</span>\n                      <span>Units: {line.units}</span>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"tasks\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>My Tasks</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {recentTasks.map((task) => (\n                <div key={task.id} className=\"flex items-start gap-3 p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg\">\n                  {getTaskStatusIcon(task.status)}\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">{task.title}</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">Scheduled: {task.time}</p>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"floor\" className=\"space-y-4\">\n          <MobileFloorDashboard />\n        </TabsContent>\n\n        <TabsContent value=\"alerts\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Recent Notifications</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {notifications.map((notif) => (\n                <div key={notif.id} className=\"flex items-start gap-3 p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg\">\n                  {notif.type === 'alert' && <ExclamationTriangleIcon className=\"w-5 h-5 text-red-500\" />}\n                  {notif.type === 'warning' && <ExclamationTriangleIcon className=\"w-5 h-5 text-amber-500\" />}\n                  {notif.type === 'info' && <BellIcon className=\"w-5 h-5 text-blue-500\" />}\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm\">{notif.message}</p>\n                    <p className=\"text-xs text-muted-foreground mt-1\">{notif.time}</p>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default Mobile;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\MobileFloor.jsx",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'setActiveTab' is not defined.",
        "line": 268,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 268,
        "endColumn": 58
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState } from 'react';\nimport {\n  CogIcon,\n  PlayIcon,\n  PauseIcon,\n  StopIcon,\n  ExclamationTriangleIcon,\n  ChartBarIcon,\n  ClockIcon,\n  WrenchScrewdriverIcon,\n  CheckCircleIcon,\n  ArrowPathIcon,\n  BoltIcon,\n  BeakerIcon\n} from '@heroicons/react/24/outline';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\n\nconst MobileFloor = () => {\n  const [selectedMachine, setSelectedMachine] = useState('MCH-001');\n  const [activeTab] = useState('status');\n\n  // Machine data\n  const machines = [\n    {\n      id: 'MCH-001',\n      name: 'CNC Machine A',\n      status: 'running',\n      currentJob: 'JOB-2345',\n      product: 'Part #A234',\n      progress: 67,\n      efficiency: 92,\n      temperature: 68,\n      vibration: 'normal',\n      runtime: '4h 23m',\n      unitsProduced: 234,\n      targetUnits: 350,\n      nextMaintenance: '48 hours'\n    },\n    {\n      id: 'MCH-002',\n      name: 'Assembly Robot 1',\n      status: 'running',\n      currentJob: 'JOB-2346',\n      product: 'Assembly B12',\n      progress: 45,\n      efficiency: 88,\n      temperature: 72,\n      vibration: 'normal',\n      runtime: '3h 15m',\n      unitsProduced: 156,\n      targetUnits: 350,\n      nextMaintenance: '72 hours'\n    },\n    {\n      id: 'MCH-003',\n      name: 'Packaging Line',\n      status: 'maintenance',\n      currentJob: 'N/A',\n      product: 'N/A',\n      progress: 0,\n      efficiency: 0,\n      temperature: 25,\n      vibration: 'N/A',\n      runtime: '0h 0m',\n      unitsProduced: 0,\n      targetUnits: 0,\n      nextMaintenance: 'In Progress'\n    },\n    {\n      id: 'MCH-004',\n      name: 'Quality Scanner',\n      status: 'idle',\n      currentJob: 'N/A',\n      product: 'N/A',\n      progress: 0,\n      efficiency: 95,\n      temperature: 30,\n      vibration: 'normal',\n      runtime: '0h 0m',\n      unitsProduced: 0,\n      targetUnits: 0,\n      nextMaintenance: '120 hours'\n    }\n  ];\n\n  const currentMachine = machines.find(m => m.id === selectedMachine) || machines[0];\n\n  // Production batches\n  const batches = [\n    { id: 'BAT-001', product: 'Part #A234', quantity: 500, completed: 234, status: 'in-progress' },\n    { id: 'BAT-002', product: 'Part #A235', quantity: 300, completed: 0, status: 'queued' },\n    { id: 'BAT-003', product: 'Part #A236', quantity: 200, completed: 0, status: 'queued' }\n  ];\n\n  // Quality checks\n  const qualityChecks = [\n    { time: '10:30 AM', batch: 'BAT-001', result: 'pass', defects: 0 },\n    { time: '10:00 AM', batch: 'BAT-001', result: 'pass', defects: 1 },\n    { time: '09:30 AM', batch: 'BAT-001', result: 'warning', defects: 3 },\n    { time: '09:00 AM', batch: 'BAT-001', result: 'pass', defects: 0 }\n  ];\n\n  // Maintenance tasks\n  const maintenanceTasks = [\n    { id: 1, task: 'Oil change', due: '2 days', priority: 'medium' },\n    { id: 2, task: 'Belt inspection', due: '5 days', priority: 'low' },\n    { id: 3, task: 'Calibration check', due: 'Tomorrow', priority: 'high' },\n    { id: 4, task: 'Clean filters', due: '1 week', priority: 'low' }\n  ];\n\n  const getStatusColor = (status) => {\n    switch(status) {\n      case 'running': return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400';\n      case 'idle': return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400';\n      case 'maintenance': return 'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-400';\n      case 'error': return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400';\n    }\n  };\n\n  const getQualityColor = (result) => {\n    switch(result) {\n      case 'pass': return 'text-green-600';\n      case 'warning': return 'text-amber-600';\n      case 'fail': return 'text-red-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const getPriorityColor = (priority) => {\n    switch(priority) {\n      case 'high': return 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400';\n      case 'medium': return 'bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-400';\n      case 'low': return 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900/30 dark:text-gray-400';\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 pb-20\">\n      {/* Header */}\n      <div className=\"sticky top-0 z-50 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <CogIcon className=\"w-6 h-6 text-blue-600\" />\n              <h1 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Shop Floor Control</h1>\n            </div>\n            <Badge className={getStatusColor(currentMachine.status)}>\n              {currentMachine.status}\n            </Badge>\n          </div>\n        </div>\n      </div>\n\n      {/* Machine Selector */}\n      <div className=\"px-4 py-3 bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700\">\n        <div className=\"flex gap-2 overflow-x-auto pb-2\">\n          {machines.map((machine) => (\n            <button\n              key={machine.id}\n              onClick={() => setSelectedMachine(machine.id)}\n              className={`px-3 py-2 rounded-lg whitespace-nowrap transition-colors ${\n                selectedMachine === machine.id\n                  ? 'bg-blue-600 text-white'\n                  : 'bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300'\n              }`}\n            >\n              {machine.name}\n            </button>\n          ))}\n        </div>\n      </div>\n\n      {/* Control Buttons */}\n      <div className=\"px-4 py-4\">\n        <div className=\"grid grid-cols-3 gap-2\">\n          <Button\n            variant=\"outline\"\n            className=\"flex flex-col items-center py-4\"\n            disabled={currentMachine.status !== 'idle'}\n          >\n            <PlayIcon className=\"w-6 h-6 mb-1\" />\n            <span className=\"text-xs\">Start</span>\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"flex flex-col items-center py-4\"\n            disabled={currentMachine.status !== 'running'}\n          >\n            <PauseIcon className=\"w-6 h-6 mb-1\" />\n            <span className=\"text-xs\">Pause</span>\n          </Button>\n          <Button\n            variant=\"outline\"\n            className=\"flex flex-col items-center py-4\"\n            disabled={currentMachine.status === 'idle' || currentMachine.status === 'maintenance'}\n          >\n            <StopIcon className=\"w-6 h-6 mb-1\" />\n            <span className=\"text-xs\">Stop</span>\n          </Button>\n        </div>\n      </div>\n\n      {/* Machine Stats */}\n      <div className=\"px-4 mb-4\">\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-base\">{currentMachine.name} - Performance</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {/* Current Job Progress */}\n            {currentMachine.status === 'running' && (\n              <div>\n                <div className=\"flex justify-between text-sm mb-2\">\n                  <span>Job: {currentMachine.currentJob}</span>\n                  <span>{currentMachine.progress}%</span>\n                </div>\n                <Progress value={currentMachine.progress} className=\"h-2\" />\n                <div className=\"flex justify-between text-xs text-muted-foreground mt-1\">\n                  <span>{currentMachine.unitsProduced} units</span>\n                  <span>Target: {currentMachine.targetUnits}</span>\n                </div>\n              </div>\n            )}\n\n            {/* Key Metrics */}\n            <div className=\"grid grid-cols-2 gap-3\">\n              <div className=\"bg-gray-50 dark:bg-gray-800/50 rounded-lg p-3\">\n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground mb-1\">\n                  <ChartBarIcon className=\"w-4 h-4\" />\n                  Efficiency\n                </div>\n                <div className=\"text-xl font-bold\">{currentMachine.efficiency}%</div>\n              </div>\n              <div className=\"bg-gray-50 dark:bg-gray-800/50 rounded-lg p-3\">\n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground mb-1\">\n                  <ClockIcon className=\"w-4 h-4\" />\n                  Runtime\n                </div>\n                <div className=\"text-xl font-bold\">{currentMachine.runtime}</div>\n              </div>\n              <div className=\"bg-gray-50 dark:bg-gray-800/50 rounded-lg p-3\">\n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground mb-1\">\n                  <BoltIcon className=\"w-4 h-4\" />\n                  Temperature\n                </div>\n                <div className=\"text-xl font-bold\">{currentMachine.temperature}°C</div>\n              </div>\n              <div className=\"bg-gray-50 dark:bg-gray-800/50 rounded-lg p-3\">\n                <div className=\"flex items-center gap-2 text-xs text-muted-foreground mb-1\">\n                  <WrenchScrewdriverIcon className=\"w-4 h-4\" />\n                  Next Service\n                </div>\n                <div className=\"text-sm font-bold\">{currentMachine.nextMaintenance}</div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Tabs for Additional Information */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"px-4\">\n        <TabsList className=\"grid w-full grid-cols-4 mb-4\">\n          <TabsTrigger value=\"status\">Status</TabsTrigger>\n          <TabsTrigger value=\"batches\">Batches</TabsTrigger>\n          <TabsTrigger value=\"quality\">Quality</TabsTrigger>\n          <TabsTrigger value=\"maintenance\">Maint.</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"status\" className=\"space-y-4\">\n          {currentMachine.status === 'maintenance' ? (\n            <Alert className=\"border-amber-200 bg-amber-50 dark:bg-amber-900/20\">\n              <WrenchScrewdriverIcon className=\"h-4 w-4 text-amber-600\" />\n              <AlertTitle>Maintenance Mode</AlertTitle>\n              <AlertDescription>\n                This machine is currently undergoing scheduled maintenance. Estimated completion in 2 hours.\n              </AlertDescription>\n            </Alert>\n          ) : currentMachine.status === 'idle' ? (\n            <Alert>\n              <ClockIcon className=\"h-4 w-4\" />\n              <AlertTitle>Machine Idle</AlertTitle>\n              <AlertDescription>\n                Machine is ready for operation. Load a new job to begin production.\n              </AlertDescription>\n            </Alert>\n          ) : (\n            <Alert className=\"border-green-200 bg-green-50 dark:bg-green-900/20\">\n              <CheckCircleIcon className=\"h-4 w-4 text-green-600\" />\n              <AlertTitle>Operating Normally</AlertTitle>\n              <AlertDescription>\n                All systems functioning within normal parameters. No issues detected.\n              </AlertDescription>\n            </Alert>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"batches\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base\">Production Queue</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {batches.map((batch) => (\n                <div key={batch.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg\">\n                  <div>\n                    <div className=\"font-medium text-sm\">{batch.id}</div>\n                    <div className=\"text-xs text-muted-foreground\">{batch.product}</div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className=\"text-sm\">{batch.completed}/{batch.quantity}</div>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {batch.status}\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"quality\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base flex items-center gap-2\">\n                <BeakerIcon className=\"w-5 h-5\" />\n                Recent Quality Checks\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {qualityChecks.map((check, index) => (\n                <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg\">\n                  <div className=\"flex items-center gap-3\">\n                    <CheckCircleIcon className={`w-5 h-5 ${getQualityColor(check.result)}`} />\n                    <div>\n                      <div className=\"text-sm font-medium\">{check.batch}</div>\n                      <div className=\"text-xs text-muted-foreground\">{check.time}</div>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <Badge className={check.defects === 0 ? 'bg-green-100 text-green-800' : 'bg-amber-100 text-amber-800'}>\n                      {check.defects} defects\n                    </Badge>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        <TabsContent value=\"maintenance\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-base\">Upcoming Maintenance</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {maintenanceTasks.map((task) => (\n                <div key={task.id} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800/50 rounded-lg\">\n                  <div>\n                    <div className=\"font-medium text-sm\">{task.task}</div>\n                    <div className=\"text-xs text-muted-foreground\">Due: {task.due}</div>\n                  </div>\n                  <Badge className={getPriorityColor(task.priority)}>\n                    {task.priority}\n                  </Badge>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Bottom Navigation */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-white dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700\">\n        <div className=\"grid grid-cols-4 gap-1 px-2 py-2\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"flex flex-col items-center py-2\">\n            <CogIcon className=\"w-5 h-5 mb-1\" />\n            <span className=\"text-xs\">Machines</span>\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className=\"flex flex-col items-center py-2\">\n            <ChartBarIcon className=\"w-5 h-5 mb-1\" />\n            <span className=\"text-xs\">Analytics</span>\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className=\"flex flex-col items-center py-2\">\n            <BeakerIcon className=\"w-5 h-5 mb-1\" />\n            <span className=\"text-xs\">Quality</span>\n          </Button>\n          <Button variant=\"ghost\" size=\"sm\" className=\"flex flex-col items-center py-2\">\n            <WrenchScrewdriverIcon className=\"w-5 h-5 mb-1\" />\n            <span className=\"text-xs\">Service</span>\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MobileFloor;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\Production.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [24, 35], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logDebug' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 29,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logDebug" },
            "fix": { "range": [803, 812], "text": "" },
            "desc": "Remove unused variable 'logDebug'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logInfo' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 29,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logInfo" },
            "fix": { "range": [811, 820], "text": "" },
            "desc": "Remove unused variable 'logInfo'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logWarn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 29,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 29,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logWarn" },
            "fix": { "range": [820, 829], "text": "" },
            "desc": "Remove unused variable 'logWarn'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'_selectedLine' is not defined.",
        "line": 39,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 39,
        "endColumn": 43
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'_timeRange' is not defined.",
        "line": 39,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 39,
        "endColumn": 55
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_dateString' is defined but never used.",
        "line": 312,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 312,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_dateString" },
            "fix": { "range": [9730, 9741], "text": "" },
            "desc": "Remove unused variable '_dateString'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'dateString' is not defined.",
        "line": 313,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 313,
        "endColumn": 31
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 331,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 331,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_" },
            "fix": { "range": [10354, 10356], "text": "" },
            "desc": "Remove unused variable '_'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_i' is defined but never used.",
        "line": 331,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 331,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_i" },
            "fix": { "range": [10355, 10359], "text": "" },
            "desc": "Remove unused variable '_i'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'i' is not defined.",
        "line": 332,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 332,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 11,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport {\n  TruckIcon,\n  CogIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  XCircleIcon,\n  PlayIcon,\n  PauseIcon,\n  StopIcon,\n  AdjustmentsHorizontalIcon,\n  UserGroupIcon,\n  ChartBarIcon,\n  CalendarDaysIcon,\n  DocumentTextIcon,\n  ArrowPathIcon,\n  BeakerIcon,\n  WrenchScrewdriverIcon,\n  BoltIcon\n} from '@heroicons/react/24/outline';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  BarChart, Bar, PieChart, Pie, Cell, ComposedChart, Area, AreaChart\n} from 'recharts';\nimport { useQuery } from '@tanstack/react-query';\nimport ChartErrorBoundary from '../components/charts/ChartErrorBoundary';\nimport RealTimeProductionMonitor from '../components/production/RealTimeProductionMonitor';\nimport { logDebug, logInfo, logWarn, logError } from '../utils/logger';\n\n\nconst Production = () => {\n  const [activeTab, setActiveTab] = useState('realtime');\n  const [selectedLine] = useState('all');\n  const [timeRange, setTimeRange] = useState('today');\n\n  // Fetch production data with real-time updates\n  const { data: productionData, isLoading, refetch } = useQuery({\n    queryKey: ['production', _selectedLine, _timeRange],\n    queryFn: async () => {\n      try {\n        const response = await fetch(`/api/production/overview?line=${selectedLine}&range=${timeRange}`, {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n          return await response.json();\n        }\n      } catch (error) {\n        logError('Production API error:', error);\n      }\n      return mockProductionData;\n    },\n    staleTime: 5 * 60 * 1000,\n    refetchInterval: 10000 // Real-time updates every 10 seconds\n  });\n\n  // Fetch personnel data for production\n  const { data: personnel } = useQuery({\n    queryKey: ['personnel-production'],\n    queryFn: async () => {\n      try {\n        const response = await fetch('/api/personnel/for-task/production_operator');\n        if (response.ok) {\n          const result = await response.json();\n          return result.data || [];\n        }\n      } catch (error) {\n        logError('Error fetching personnel:', error);\n      }\n      return [];\n    },\n    staleTime: 5 * 60 * 1000\n  });\n\n  // Helper function to get real personnel name or fallback\n  const getOperatorName = (index = 0) => {\n    if (personnel && personnel.length > 0) {\n      const person = personnel[index % personnel.length];\n      return person.display_name || person.full_name || `${person.first_name} ${person.last_name}`;\n    }\n    return 'Production Operator';\n  };\n\n  // Helper for maintenance/supervisor roles\n  const getSupervisorName = (index = 0) => {\n    if (personnel && personnel.length > 0) {\n      const supervisors = personnel.filter(p => p.role === 'manager' || p.role === 'admin');\n      if (supervisors.length > 0) {\n        const person = supervisors[index % supervisors.length];\n        return person.display_name || person.full_name || `${person.first_name} ${person.last_name}`;\n      }\n    }\n    return 'Production Supervisor';\n  };\n\n  const mockProductionData = {\n    overview: {\n      totalProduced: 2847,\n      targetProduction: 3200,\n      efficiency: 89.0,\n      oee: 76.4,\n      activeLines: 4,\n      totalLines: 5,\n      downtime: 2.3,\n      defectRate: 1.2,\n      currentShift: 'Day Shift',\n      shiftProgress: 67.5\n    },\n    productionLines: [\n      {\n        id: 'LINE_01',\n        name: 'Sentia Red Production',\n        status: 'running',\n        currentProduct: 'Sentia Red 500ml',\n        batchNumber: 'SR-2025-089',\n        produced: 1250,\n        target: 1500,\n        efficiency: 91.2,\n        oee: 82.1,\n        startTime: '2025-09-08T06:00:00Z',\n        estimatedCompletion: '2025-09-08T18:30:00Z',\n        operator: getOperatorName(0),\n        lastMaintenance: '2025-09-07T22:00:00Z'\n      },\n      {\n        id: 'LINE_02',\n        name: 'Sentia Gold Production',\n        status: 'running',\n        currentProduct: 'Sentia Gold 500ml',\n        batchNumber: 'SG-2025-034',\n        produced: 890,\n        target: 1000,\n        efficiency: 89.0,\n        oee: 79.3,\n        startTime: '2025-09-08T07:15:00Z',\n        estimatedCompletion: '2025-09-08T17:45:00Z',\n        operator: getOperatorName(1),\n        lastMaintenance: '2025-09-06T20:00:00Z'\n      },\n      {\n        id: 'LINE_03',\n        name: 'Packaging Line A',\n        status: 'maintenance',\n        currentProduct: null,\n        batchNumber: null,\n        produced: 0,\n        target: 800,\n        efficiency: 0,\n        oee: 0,\n        startTime: '2025-09-08T08:00:00Z',\n        estimatedCompletion: '2025-09-08T10:00:00Z',\n        operator: getSupervisorName(0),\n        lastMaintenance: '2025-09-08T08:00:00Z'\n      },\n      {\n        id: 'LINE_04',\n        name: 'Quality Control Station',\n        status: 'running',\n        currentProduct: 'Mixed Products',\n        batchNumber: 'QC-2025-BATCH',\n        produced: 657,\n        target: 900,\n        efficiency: 73.0,\n        oee: 65.8,\n        startTime: '2025-09-08T06:30:00Z',\n        estimatedCompletion: '2025-09-08T19:00:00Z',\n        operator: getOperatorName(2),\n        lastMaintenance: '2025-09-05T18:00:00Z'\n      },\n      {\n        id: 'LINE_05',\n        name: 'Secondary Packaging',\n        status: 'idle',\n        currentProduct: null,\n        batchNumber: null,\n        produced: 50,\n        target: 400,\n        efficiency: 12.5,\n        oee: 8.2,\n        startTime: '2025-09-08T14:00:00Z',\n        estimatedCompletion: null,\n        operator: 'Unassigned',\n        lastMaintenance: '2025-09-04T16:00:00Z'\n      }\n    ],\n    hourlyProduction: [\n      { hour: '06:00', produced: 145, target: 200, efficiency: 72.5 },\n      { hour: '07:00', produced: 189, target: 200, efficiency: 94.5 },\n      { hour: '08:00', produced: 156, target: 200, efficiency: 78.0 },\n      { hour: '09:00', produced: 198, target: 200, efficiency: 99.0 },\n      { hour: '10:00', produced: 203, target: 200, efficiency: 101.5 },\n      { hour: '11:00', produced: 195, target: 200, efficiency: 97.5 },\n      { hour: '12:00', produced: 178, target: 200, efficiency: 89.0 },\n      { hour: '13:00', produced: 201, target: 200, efficiency: 100.5 },\n      { hour: '14:00', produced: 187, target: 200, efficiency: 93.5 },\n      { hour: '15:00', produced: 199, target: 200, efficiency: 99.5 },\n      { hour: '16:00', produced: 202, target: 200, efficiency: 101.0 },\n      { hour: '17:00', produced: 194, target: 200, efficiency: 97.0 }\n    ],\n    productionByProduct: [\n      { product: 'Sentia Red', produced: 1250, target: 1500, percentage: 83.3 },\n      { product: 'Sentia Gold', produced: 890, target: 1000, percentage: 89.0 },\n      { product: 'Sentia White', produced: 457, target: 500, percentage: 91.4 },\n      { product: 'Limited Edition', produced: 250, target: 200, percentage: 125.0 }\n    ],\n    oeeBreakdown: [\n      { metric: 'Availability', value: 94.2, target: 95.0, color: '#10B981' },\n      { metric: 'Performance', value: 87.5, target: 90.0, color: '#F59E0B' },\n      { metric: 'Quality', value: 92.8, target: 95.0, color: '#3B82F6' }\n    ],\n    downtimeEvents: [\n      {\n        id: 'DT001',\n        line: 'LINE_03',\n        reason: 'Scheduled Maintenance',\n        startTime: '2025-09-08T08:00:00Z',\n        duration: 120,\n        category: 'Planned',\n        impact: 'Medium',\n        resolvedBy: 'Maintenance Team'\n      },\n      {\n        id: 'DT002',\n        line: 'LINE_01',\n        reason: 'Material Shortage',\n        startTime: '2025-09-08T10:30:00Z',\n        duration: 15,\n        category: 'Unplanned',\n        impact: 'Low',\n        resolvedBy: 'Production Team'\n      },\n      {\n        id: 'DT003',\n        line: 'LINE_04',\n        reason: 'Equipment Calibration',\n        startTime: '2025-09-08T14:15:00Z',\n        duration: 45,\n        category: 'Quality',\n        impact: 'Medium',\n        resolvedBy: 'Quality Team'\n      }\n    ],\n    qualityMetrics: {\n      defectRate: 1.2,\n      scrapRate: 0.8,\n      reworkRate: 2.1,\n      firstPassYield: 96.8,\n      customerReturns: 0.04\n    },\n    shifts: [\n      {\n        shift: 'Night Shift',\n        time: '22:00 - 06:00',\n        produced: 1456,\n        target: 1600,\n        efficiency: 91.0,\n        crew: 8,\n        status: 'completed'\n      },\n      {\n        shift: 'Day Shift',\n        time: '06:00 - 14:00',\n        produced: 2847,\n        target: 3200,\n        efficiency: 89.0,\n        crew: 12,\n        status: 'active'\n      },\n      {\n        shift: 'Evening Shift',\n        time: '14:00 - 22:00',\n        produced: 0,\n        target: 3200,\n        efficiency: 0,\n        crew: 10,\n        status: 'upcoming'\n      }\n    ]\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'running':\n        return <PlayIcon className=\"h-5 w-5 text-green-500\" />;\n      case 'maintenance':\n        return <WrenchScrewdriverIcon className=\"h-5 w-5 text-yellow-500\" />;\n      case 'idle':\n        return <PauseIcon className=\"h-5 w-5 text-gray-500\" />;\n      case 'error':\n        return <XCircleIcon className=\"h-5 w-5 text-red-500\" />;\n      default:\n        return <ClockIcon className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'running':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'maintenance':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'idle':\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n      case 'error':\n        return 'bg-red-100 text-red-800 border-red-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const formatTime = (_dateString) => {\n    return new Date(dateString).toLocaleTimeString('en-GB', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const formatDuration = (minutes) => {\n    const hours = Math.floor(minutes / 60);\n    const mins = minutes % 60;\n    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;\n  };\n\n  if (isLoading && !productionData) {\n    return (\n      <div className=\"max-w-7xl mx-auto p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-300 rounded w-1/3 mb-6\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {[...Array(8)].map((_, _i) => (\n              <div key={i} className=\"h-32 bg-gray-300 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const data = productionData || mockProductionData;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Production Tracking & Control\n          </h1>\n          <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n            Real-time production monitoring and optimization\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <select\n            value={timeRange}\n            onChange={(e) => setTimeRange(e.target.value)}\n            className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n          >\n            <option value=\"today\">Today</option>\n            <option value=\"week\">This Week</option>\n            <option value=\"month\">This Month</option>\n          </select>\n          <button \n            onClick={() => refetch()}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n          >\n            <ArrowPathIcon className=\"h-4 w-4\" />\n            <span>Refresh</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Produced</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.overview.totalProduced.toLocaleString()}\n              </p>\n              <p className=\"text-sm text-blue-600\">\n                {((data.overview.totalProduced / data.overview.targetProduction) * 100).toFixed(1)}% of target\n              </p>\n            </div>\n            <TruckIcon className=\"h-8 w-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Efficiency</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.overview.efficiency}%\n              </p>\n              <p className=\"text-sm text-green-600\">Above target (85%)</p>\n            </div>\n            <ChartBarIcon className=\"h-8 w-8 text-green-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">OEE Score</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.overview.oee}%\n              </p>\n              <p className=\"text-sm text-yellow-600\">World-class: &gt;85%</p>\n            </div>\n            <CogIcon className=\"h-8 w-8 text-purple-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Active Lines</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.overview.activeLines}/{data.overview.totalLines}\n              </p>\n              <p className=\"text-sm text-green-600\">\n                {((data.overview.activeLines / data.overview.totalLines) * 100).toFixed(0)}% operational\n              </p>\n            </div>\n            <BoltIcon className=\"h-8 w-8 text-orange-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Defect Rate</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.overview.defectRate}%\n              </p>\n              <p className=\"text-sm text-red-600\">Target: &lt;1.0%</p>\n            </div>\n            <ExclamationTriangleIcon className=\"h-8 w-8 text-red-600\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div className=\"border-b border-gray-200 dark:border-gray-700\">\n          <nav className=\"-mb-px flex space-x-8 px-6\">\n            {[\n              { id: 'realtime', label: 'Real-Time Monitor', icon: BoltIcon },\n              { id: 'overview', label: 'Production Overview', icon: ChartBarIcon },\n              { id: 'lines', label: 'Production Lines', icon: TruckIcon },\n              { id: 'quality', label: 'Quality Metrics', icon: BeakerIcon },\n              { id: 'downtime', label: 'Downtime Analysis', icon: ExclamationTriangleIcon },\n              { id: 'shifts', label: 'Shift Management', icon: UserGroupIcon }\n            ].map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <tab.icon className=\"h-4 w-4\" />\n                <span>{tab.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {activeTab === 'realtime' && (\n            <div className=\"space-y-6\">\n              <RealTimeProductionMonitor />\n            </div>\n          )}\n\n          {activeTab === 'overview' && (\n            <div className=\"space-y-6\">\n              {/* Hourly Production Chart */}\n              <div>\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n                  Hourly Production Performance\n                </h3>\n                <div className=\"h-80\">\n                  <ChartErrorBoundary>\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <ComposedChart data={data.hourlyProduction}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"hour\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Bar dataKey=\"produced\" fill=\"#3B82F6\" name=\"Produced\" />\n                        <Line type=\"monotone\" dataKey=\"target\" stroke=\"#EF4444\" strokeWidth={2} name=\"Target\" />\n                        <Line type=\"monotone\" dataKey=\"efficiency\" stroke=\"#10B981\" strokeWidth={2} name=\"Efficiency %\" yAxisId=\"right\" />\n                      </ComposedChart>\n                    </ResponsiveContainer>\n                  </ChartErrorBoundary>\n                </div>\n              </div>\n\n              {/* Production by Product and OEE Breakdown */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Production by Product\n                  </h4>\n                  <div className=\"h-64\">\n                    <ChartErrorBoundary>\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <BarChart data={data.productionByProduct}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"product\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"produced\" fill=\"#3B82F6\" name=\"Produced\" />\n                          <Bar dataKey=\"target\" fill=\"#F59E0B\" name=\"Target\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </ChartErrorBoundary>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    OEE Breakdown\n                  </h4>\n                  <div className=\"space-y-4\">\n                    {data.oeeBreakdown.map((metric, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                        <div>\n                          <div className=\"font-medium text-gray-900 dark:text-white\">{metric.metric}</div>\n                          <div className=\"text-sm text-gray-500\">Target: {metric.target}%</div>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                            <div\n                              className=\"h-2 rounded-full\"\n                              style={{ \n                                width: `${(metric.value / 100) * 100}%`,\n                                backgroundColor: metric.color\n                              }}\n                            />\n                          </div>\n                          <span className=\"font-medium text-gray-900 dark:text-white min-w-[3rem]\">\n                            {metric.value}%\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'lines' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                Production Line Status\n              </h3>\n              \n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                {data.productionLines.map((line) => (\n                  <div key={line.id} className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"flex-shrink-0\">\n                          {getStatusIcon(line.status)}\n                        </div>\n                        <div>\n                          <h4 className=\"font-medium text-gray-900 dark:text-white\">{line.name}</h4>\n                          <p className=\"text-sm text-gray-500\">{line.id}</p>\n                        </div>\n                      </div>\n                      <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor(line.status)}`}>\n                        {line.status}\n                      </span>\n                    </div>\n\n                    {line.currentProduct && (\n                      <div className=\"space-y-3\">\n                        <div>\n                          <div className=\"text-sm text-gray-500\">Current Product</div>\n                          <div className=\"font-medium text-gray-900 dark:text-white\">{line.currentProduct}</div>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Batch Number</div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{line.batchNumber}</div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Operator</div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{line.operator}</div>\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <div className=\"flex justify-between text-sm\">\n                            <span>Progress</span>\n                            <span>{line.produced.toLocaleString()} / {line.target.toLocaleString()}</span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div\n                              className={`h-2 rounded-full ${\n                                line.status === 'running' ? 'bg-green-600' : 'bg-gray-400'\n                              }`}\n                              style={{ width: `${Math.min((line.produced / line.target) * 100, 100)}%` }}\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                          <div>\n                            <div className=\"text-gray-500\">Efficiency</div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{line.efficiency}%</div>\n                          </div>\n                          <div>\n                            <div className=\"text-gray-500\">OEE</div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{line.oee}%</div>\n                          </div>\n                        </div>\n\n                        <div className=\"text-sm\">\n                          <div className=\"text-gray-500\">Estimated Completion</div>\n                          <div className=\"font-medium text-gray-900 dark:text-white\">\n                            {line.estimatedCompletion ? formatTime(line.estimatedCompletion) : 'N/A'}\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {!line.currentProduct && line.status === 'maintenance' && (\n                      <div className=\"text-center py-4\">\n                        <WrenchScrewdriverIcon className=\"h-12 w-12 text-yellow-500 mx-auto mb-2\" />\n                        <p className=\"text-sm text-gray-500\">Scheduled maintenance in progress</p>\n                        <p className=\"text-xs text-gray-400 mt-1\">\n                          Last maintenance: {formatTime(line.lastMaintenance)}\n                        </p>\n                      </div>\n                    )}\n\n                    {!line.currentProduct && line.status === 'idle' && (\n                      <div className=\"text-center py-4\">\n                        <PauseIcon className=\"h-12 w-12 text-gray-400 mx-auto mb-2\" />\n                        <p className=\"text-sm text-gray-500\">Production line idle</p>\n                        <p className=\"text-xs text-gray-400 mt-1\">Awaiting assignment</p>\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'quality' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                Quality Control Metrics\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-6\">\n                {Object.entries(data.qualityMetrics).map(([metric, value]) => (\n                  <div key={metric} className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4\">\n                    <div className=\"text-center\">\n                      <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                        {value}%\n                      </div>\n                      <div className=\"text-sm text-gray-500 capitalize\">\n                        {metric.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}\n                      </div>\n                      <div className={`text-xs mt-1 ${\n                        metric === 'firstPassYield' && value > 95 ? 'text-green-600' :\n                        (metric === 'defectRate' || metric === 'scrapRate' || metric === 'reworkRate') && value < 2 ? 'text-green-600' :\n                        'text-yellow-600'\n                      }`}>\n                        {metric === 'firstPassYield' ? (value > 95 ? 'Excellent' : 'Needs improvement') :\n                         value < 2 ? 'Within target' : 'Above target'}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Quality Trend (7 Days)\n                  </h4>\n                  <div className=\"h-64\">\n                    <ChartErrorBoundary>\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <LineChart data={[\n                          { day: 'Mon', defectRate: 0.9, firstPassYield: 97.2 },\n                          { day: 'Tue', defectRate: 1.1, firstPassYield: 96.8 },\n                          { day: 'Wed', defectRate: 0.8, firstPassYield: 97.5 },\n                          { day: 'Thu', defectRate: 1.3, firstPassYield: 96.1 },\n                          { day: 'Fri', defectRate: 1.0, firstPassYield: 97.0 },\n                          { day: 'Sat', defectRate: 1.2, firstPassYield: 96.8 },\n                          { day: 'Sun', defectRate: 0.7, firstPassYield: 97.8 }\n                        ]}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"day\" />\n                          <YAxis />\n                          <Tooltip />\n                          <Line type=\"monotone\" dataKey=\"defectRate\" stroke=\"#EF4444\" name=\"Defect Rate %\" />\n                          <Line type=\"monotone\" dataKey=\"firstPassYield\" stroke=\"#10B981\" name=\"First Pass Yield %\" />\n                        </LineChart>\n                      </ResponsiveContainer>\n                    </ChartErrorBoundary>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Quality Improvement Actions\n                  </h4>\n                  <div className=\"space-y-3\">\n                    {[\n                      { action: 'Calibrate Line 4 sensors', priority: 'High', due: 'Today', status: 'In Progress' },\n                      { action: 'Train operators on new QC procedures', priority: 'Medium', due: 'This Week', status: 'Pending' },\n                      { action: 'Review supplier quality specs', priority: 'Low', due: 'Next Week', status: 'Scheduled' }\n                    ].map((item, index) => (\n                      <div key={index} className=\"p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">)\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <div className=\"font-medium text-gray-900 dark:text-white text-sm\">\n                              {item.action}\n                            </div>\n                            <div className=\"text-xs text-gray-500 mt-1\">\n                              Due: {item.due}\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <span className={`inline-flex px-2 py-1 rounded-full text-xs font-medium ${\n                              item.priority === 'High' ? 'bg-red-100 text-red-800' :\n                              item.priority === 'Medium' ? 'bg-yellow-100 text-yellow-800' :\n                              'bg-blue-100 text-blue-800'\n                            }`}>\n                              {item.priority}\n                            </span>\n                            <div className=\"text-xs text-gray-500 mt-1\">{item.status}</div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'downtime' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                Downtime Analysis & Events\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-6\">\n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {data.overview.downtime}%\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Total Downtime</div>\n                  <div className=\"text-xs text-green-600 mt-1\">Below target (5%)</div>\n                </div>\n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {data.downtimeEvents.filter(e => e.category === 'Planned').length}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Planned Events</div>\n                  <div className=\"text-xs text-blue-600 mt-1\">Scheduled maintenance</div>\n                </div>\n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {data.downtimeEvents.filter(e => e.category === 'Unplanned').length}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Unplanned Events</div>\n                  <div className=\"text-xs text-red-600 mt-1\">Requires attention</div>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                  Recent Downtime Events\n                </h4>\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                    <thead className=\"bg-gray-50 dark:bg-gray-700\">\n                      <tr>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                          Line\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                          Reason\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                          Start Time\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                          Duration\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                          Category\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                          Impact\n                        </th>\n                        <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                          Resolved By\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                      {data.downtimeEvents.map((event) => (\n                        <tr key={event.id} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white\">\n                            {event.line}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                            {event.reason}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                            {formatTime(event.startTime)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                            {formatDuration(event.duration)}\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                              event.category === 'Planned' ? 'bg-blue-100 text-blue-800' :\n                              event.category === 'Unplanned' ? 'bg-red-100 text-red-800' :\n                              'bg-yellow-100 text-yellow-800'\n                            }`}>\n                              {event.category}\n                            </span>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap\">\n                            <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                              event.impact === 'High' ? 'bg-red-100 text-red-800' :\n                              event.impact === 'Medium' ? 'bg-yellow-100 text-yellow-800' :\n                              'bg-green-100 text-green-800'\n                            }`}>\n                              {event.impact}\n                            </span>\n                          </td>\n                          <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                            {event.resolvedBy}\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'shifts' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                Shift Management & Performance\n              </h3>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                {data.shifts.map((shift, index) => (\n                  <div key={index} className={`rounded-lg p-6 border-2 ${\n                    shift.status === 'active' ? 'bg-blue-50 border-blue-200 dark:bg-blue-900/20' :\n                    shift.status === 'completed' ? 'bg-green-50 border-green-200 dark:bg-green-900/20' :\n                    'bg-gray-50 border-gray-200 dark:bg-gray-700'\n                  }`}>\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <div>\n                        <h4 className=\"font-medium text-gray-900 dark:text-white\">{shift.shift}</h4>\n                        <p className=\"text-sm text-gray-500\">{shift.time}</p>\n                      </div>\n                      <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium ${\n                        shift.status === 'active' ? 'bg-blue-100 text-blue-800' :\n                        shift.status === 'completed' ? 'bg-green-100 text-green-800' :\n                        'bg-gray-100 text-gray-800'\n                      }`}>\n                        {shift.status}\n                      </span>\n                    </div>\n\n                    <div className=\"space-y-3\">\n                      <div>\n                        <div className=\"flex justify-between text-sm mb-1\">\n                          <span>Production Progress</span>\n                          <span>{shift.produced.toLocaleString()} / {shift.target.toLocaleString()}</span>\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                          <div\n                            className={`h-2 rounded-full ${\n                              shift.status === 'active' ? 'bg-blue-600' :\n                              shift.status === 'completed' ? 'bg-green-600' : 'bg-gray-400'\n                            }`}\n                            style={{ \n                              width: `${Math.min((shift.produced / shift.target) * 100, 100)}%` \n                            }}\n                          />\n                        </div>\n                      </div>\n\n                      <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                        <div>\n                          <div className=\"text-gray-500\">Efficiency</div>\n                          <div className=\"font-medium text-gray-900 dark:text-white\">{shift.efficiency}%</div>\n                        </div>\n                        <div>\n                          <div className=\"text-gray-500\">Crew Size</div>\n                          <div className=\"font-medium text-gray-900 dark:text-white\">{shift.crew} people</div>\n                        </div>\n                      </div>\n\n                      {shift.status === 'active' && (\n                        <div className=\"pt-2 border-t border-gray-200 dark:border-gray-600\">\n                          <div className=\"text-sm text-gray-500\">Shift Progress</div>\n                          <div className=\"font-medium text-gray-900 dark:text-white\">\n                            {data.overview.shiftProgress}% complete\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-6\">\n                <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                  Shift Performance Summary\n                </h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {data.shifts.reduce((sum, shift) => sum + (shift.status === 'completed' ? shift.produced : 0), 0).toLocaleString()}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Units Completed</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {(data.shifts.reduce((sum, shift) => sum + (shift.status === 'completed' ? shift.efficiency : 0), 0) / \n                        data.shifts.filter(shift => shift.status === 'completed').length || 0).toFixed(1)}%\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Avg Efficiency</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {data.shifts.reduce((sum, shift) => sum + shift.crew, 0)}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Total Workforce</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                      {data.shifts.filter(shift => shift.status === 'active').length}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Active Shifts</div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Production;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\Quality.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [24, 35], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logDebug' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 30,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logDebug" },
            "fix": { "range": [858, 867], "text": "" },
            "desc": "Remove unused variable 'logDebug'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logInfo' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 30,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logInfo" },
            "fix": { "range": [866, 875], "text": "" },
            "desc": "Remove unused variable 'logInfo'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logWarn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 30,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 30,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logWarn" },
            "fix": { "range": [875, 884], "text": "" },
            "desc": "Remove unused variable 'logWarn'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'selectedInspection' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 35,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 28,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "selectedInspection" },
            "fix": { "range": [1007, 1051], "text": "" },
            "desc": "Remove unused variable 'selectedInspection'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_dateString' is defined but never used.",
        "line": 396,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 396,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_dateString" },
            "fix": { "range": [12820, 12831], "text": "" },
            "desc": "Remove unused variable '_dateString'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'dateString' is not defined.",
        "line": 397,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 397,
        "endColumn": 31
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_dateString' is defined but never used.",
        "line": 400,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 400,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_dateString" },
            "fix": { "range": [12923, 12934], "text": "" },
            "desc": "Remove unused variable '_dateString'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'dateString' is not defined.",
        "line": 401,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 401,
        "endColumn": 31
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_' is defined but never used.",
        "line": 410,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 410,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_" },
            "fix": { "range": [13309, 13311], "text": "" },
            "desc": "Remove unused variable '_'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_i' is defined but never used.",
        "line": 410,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 410,
        "endColumn": 38,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_i" },
            "fix": { "range": [13310, 13314], "text": "" },
            "desc": "Remove unused variable '_i'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'i' is not defined.",
        "line": 411,
        "column": 25,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 411,
        "endColumn": 26
      }
    ],
    "suppressedMessages": [],
    "errorCount": 12,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport {\n  BeakerIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon,\n  XCircleIcon,\n  DocumentTextIcon,\n  ClipboardDocumentCheckIcon,\n  ChartBarIcon,\n  MagnifyingGlassIcon,\n  AdjustmentsHorizontalIcon,\n  CalendarDaysIcon,\n  TruckIcon,\n  CubeIcon,\n  UserGroupIcon,\n  FlagIcon,\n  ClockIcon,\n  ArrowPathIcon,\n  DocumentArrowDownIcon,\n  CameraIcon,\n  PlayIcon\n} from '@heroicons/react/24/outline';\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer,\n  BarChart, Bar, PieChart, Pie, Cell, ComposedChart, Area, AreaChart, ScatterChart, Scatter\n} from 'recharts';\nimport { useQuery } from '@tanstack/react-query';\nimport ChartErrorBoundary from '../components/charts/ChartErrorBoundary';\nimport QualityControlMonitor from '../components/quality/QualityControlMonitor';\nimport { logDebug, logInfo, logWarn, logError } from '../utils/logger';\n\n\nconst Quality = () => {\n  const [activeTab, setActiveTab] = useState('realtime');\n  const [selectedInspection] = useState(null);\n  const [timeRange, setTimeRange] = useState('week');\n  const [productFilter, setProductFilter] = useState('all');\n\n  // Fetch quality data with real-time updates\n  const { data: qualityData, isLoading, refetch } = useQuery({\n    queryKey: ['quality', timeRange, productFilter],\n    queryFn: async () => {\n      try {\n        const response = await fetch(`/api/quality/overview?timeRange=${timeRange}&productFilter=${productFilter}`, {\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' }\n        });\n        if (response.ok) {\n          return await response.json();\n        }\n      } catch (error) {\n        logError('Quality API error:', error);\n      }\n      return mockQualityData;\n    },\n    staleTime: 2 * 60 * 1000,\n    refetchInterval: 30000\n  });\n\n  // Fetch personnel data\n  const { data: personnel } = useQuery({\n    queryKey: ['personnel-quality-control'],\n    queryFn: async () => {\n      try {\n        const response = await fetch('/api/personnel/for-task/quality_control');\n        if (response.ok) {\n          const result = await response.json();\n          return result.data || [];\n        }\n      } catch (error) {\n        logError('Error fetching personnel:', error);\n      }\n      return [];\n    },\n    staleTime: 5 * 60 * 1000\n  });\n\n  // Helper function to get real personnel name or fallback\n  const getInspectorName = (index = 0) => {\n    if (personnel && personnel.length > 0) {\n      const person = personnel[index % personnel.length];\n      return person.display_name || person.full_name || `${person.first_name} ${person.last_name}`;\n    }\n    return 'Quality Inspector';\n  };\n\n  const mockQualityData = {\n    overview: {\n      totalInspections: 1247,\n      passedInspections: 1197,\n      failedInspections: 35,\n      pendingInspections: 15,\n      overallPassRate: 95.98,\n      defectRate: 2.81,\n      scrapRate: 1.24,\n      reworkRate: 3.45,\n      firstPassYield: 96.02,\n      inspectionBacklog: 8,\n      criticalIssues: 2,\n      averageInspectionTime: 12.5\n    },\n    qualityTrends: [\n      { date: '2025-09-01', passRate: 94.2, defectRate: 3.1, firstPassYield: 95.8 },\n      { date: '2025-09-02', passRate: 95.1, defectRate: 2.9, firstPassYield: 96.1 },\n      { date: '2025-09-03', passRate: 96.3, defectRate: 2.4, firstPassYield: 96.8 },\n      { date: '2025-09-04', passRate: 94.8, defectRate: 3.2, firstPassYield: 95.4 },\n      { date: '2025-09-05', passRate: 97.1, defectRate: 1.9, firstPassYield: 97.3 },\n      { date: '2025-09-06', passRate: 95.6, defectRate: 2.7, firstPassYield: 96.1 },\n      { date: '2025-09-07', passRate: 96.0, defectRate: 2.8, firstPassYield: 96.0 },\n      { date: '2025-09-08', passRate: 95.98, defectRate: 2.81, firstPassYield: 96.02 }\n    ],\n    inspectionsByProduct: [\n      {\n        product: 'Sentia Red 500ml',\n        sku: 'SENT-RED-500',\n        totalInspected: 456,\n        passed: 439,\n        failed: 12,\n        pending: 5,\n        passRate: 96.3,\n        criticalDefects: 1,\n        minorDefects: 11,\n        avgInspectionTime: 11.2,\n        lastInspection: '2025-09-08T14:30:00Z'\n      },\n      {\n        product: 'Sentia Gold 500ml',\n        sku: 'SENT-GOLD-500',\n        totalInspected: 328,\n        passed: 312,\n        failed: 9,\n        pending: 7,\n        passRate: 95.1,\n        criticalDefects: 0,\n        minorDefects: 9,\n        avgInspectionTime: 13.8,\n        lastInspection: '2025-09-08T13:15:00Z'\n      },\n      {\n        product: 'Sentia White 500ml',\n        sku: 'SENT-WHITE-500',\n        totalInspected: 234,\n        passed: 223,\n        failed: 8,\n        pending: 3,\n        passRate: 95.3,\n        criticalDefects: 1,\n        minorDefects: 7,\n        avgInspectionTime: 14.2,\n        lastInspection: '2025-09-08T12:45:00Z'\n      },\n      {\n        product: 'Limited Edition',\n        sku: 'SENT-LTD-500',\n        totalInspected: 229,\n        passed: 223,\n        failed: 6,\n        pending: 0,\n        passRate: 97.4,\n        criticalDefects: 0,\n        minorDefects: 6,\n        avgInspectionTime: 16.5,\n        lastInspection: '2025-09-08T11:20:00Z'\n      }\n    ],\n    defectCategories: [\n      { category: 'Labeling Issues', count: 18, percentage: 28.1, severity: 'Minor', trend: 'decreasing' },\n      { category: 'Fill Volume Variance', count: 14, percentage: 21.9, severity: 'Major', trend: 'stable' },\n      { category: 'Cap Alignment', count: 12, percentage: 18.8, severity: 'Minor', trend: 'increasing' },\n      { category: 'Package Integrity', count: 8, percentage: 12.5, severity: 'Critical', trend: 'decreasing' },\n      { category: 'Color Consistency', count: 6, percentage: 9.4, severity: 'Minor', trend: 'stable' },\n      { category: 'Contamination', count: 3, percentage: 4.7, severity: 'Critical', trend: 'stable' },\n      { category: 'Other', count: 3, percentage: 4.7, severity: 'Minor', trend: 'stable' }\n    ],\n    qualityTests: [\n      {\n        id: 'QT001',\n        testName: 'Alcohol Content Verification',\n        type: 'Chemical',\n        product: 'Sentia Red 500ml',\n        batchNumber: 'SR-2025-089',\n        status: 'completed',\n        result: 'Pass',\n        targetValue: '0.5%',\n        actualValue: '0.51%',\n        tolerance: '±0.05%',\n        inspector: getInspectorName(0),\n        completedAt: '2025-09-08T14:30:00Z',\n        duration: 45,\n        notes: 'Within acceptable range'\n      },\n      {\n        id: 'QT002',\n        testName: 'Microbiological Safety',\n        type: 'Microbiological',\n        product: 'Sentia Gold 500ml',\n        batchNumber: 'SG-2025-034',\n        status: 'in_progress',\n        result: null,\n        targetValue: '<10 CFU/ml',\n        actualValue: 'Testing...',\n        tolerance: 'Zero tolerance',\n        inspector: getInspectorName(1),\n        completedAt: null,\n        duration: null,\n        notes: '48-hour incubation in progress'\n      },\n      {\n        id: 'QT003',\n        testName: 'Sensory Evaluation',\n        type: 'Sensory',\n        product: 'Sentia White 500ml',\n        batchNumber: 'SW-2025-045',\n        status: 'completed',\n        result: 'Pass',\n        targetValue: '≥4.0/5.0',\n        actualValue: '4.2/5.0',\n        tolerance: 'Subjective',\n        inspector: 'Quality Panel',\n        completedAt: '2025-09-08T12:15:00Z',\n        duration: 30,\n        notes: 'All sensory attributes within specification'\n      },\n      {\n        id: 'QT004',\n        testName: 'Package Seal Integrity',\n        type: 'Physical',\n        product: 'Limited Edition',\n        batchNumber: 'LE-2025-012',\n        status: 'failed',\n        result: 'Fail',\n        targetValue: '100% seal integrity',\n        actualValue: '94% pass rate',\n        tolerance: '≥98%',\n        inspector: getInspectorName(2),\n        completedAt: '2025-09-08T11:45:00Z',\n        duration: 20,\n        notes: '6% of samples showed minor seal defects. Batch quarantined.'\n      },\n      {\n        id: 'QT005',\n        testName: 'Label Adhesion Test',\n        type: 'Physical',\n        product: 'Sentia Red 500ml',\n        batchNumber: 'SR-2025-087',\n        status: 'pending',\n        result: null,\n        targetValue: '24-hour adhesion',\n        actualValue: 'Pending...',\n        tolerance: 'Pass/Fail',\n        inspector: getInspectorName(3),\n        completedAt: null,\n        duration: null,\n        notes: 'Scheduled for tomorrow morning'\n      }\n    ],\n    correctiveActions: [\n      {\n        id: 'CA001',\n        issue: 'Increased cap misalignment on Sentia Gold',\n        severity: 'Medium',\n        status: 'Open',\n        assignedTo: 'Production Team Lead',\n        createdDate: '2025-09-07T09:00:00Z',\n        dueDate: '2025-09-10T17:00:00Z',\n        rootCause: 'Capping machine calibration drift',\n        proposedAction: 'Recalibrate capping station and implement daily checks',\n        verificationMethod: 'Monitor alignment rate for 3 production runs',\n        progress: 45\n      },\n      {\n        id: 'CA002',\n        issue: 'Package seal integrity failures - Limited Edition',\n        severity: 'High',\n        status: 'In Progress',\n        assignedTo: 'Quality Manager',\n        createdDate: '2025-09-08T11:45:00Z',\n        dueDate: '2025-09-09T12:00:00Z',\n        rootCause: 'Investigation ongoing',\n        proposedAction: 'Full batch quarantine and seal integrity testing',\n        verificationMethod: 'Re-test 100% of affected batch',\n        progress: 25\n      },\n      {\n        id: 'CA003',\n        issue: 'Color consistency variation in White variant',\n        severity: 'Low',\n        status: 'Closed',\n        assignedTo: 'R&D Team',\n        createdDate: '2025-09-05T14:20:00Z',\n        dueDate: '2025-09-08T17:00:00Z',\n        rootCause: 'Raw material batch variation',\n        proposedAction: 'Updated supplier specification and incoming inspection',\n        verificationMethod: 'Color measurement verification completed',\n        progress: 100\n      }\n    ],\n    inspectionSchedule: [\n      {\n        id: 'IS001',\n        inspectionType: 'Incoming Material',\n        product: 'GABA Extract Premium',\n        scheduledTime: '2025-09-09T08:00:00Z',\n        inspector: getInspectorName(0),\n        status: 'Scheduled',\n        estimatedDuration: 60,\n        priority: 'High'\n      },\n      {\n        id: 'IS002',\n        inspectionType: 'In-Process Check',\n        product: 'Sentia Red Production Line',\n        scheduledTime: '2025-09-09T10:30:00Z',\n        inspector: getInspectorName(1),\n        status: 'Scheduled',\n        estimatedDuration: 30,\n        priority: 'Medium'\n      },\n      {\n        id: 'IS003',\n        inspectionType: 'Final Product',\n        product: 'Sentia Gold Batch SG-2025-035',\n        scheduledTime: '2025-09-09T14:00:00Z',\n        inspector: getInspectorName(0),\n        status: 'Scheduled',\n        estimatedDuration: 120,\n        priority: 'High'\n      }\n    ],\n    complianceMetrics: {\n      auditScore: 94.8,\n      certificationsActive: 6,\n      certificationsExpiring: 1,\n      regulatoryCompliance: 98.2,\n      documentationComplete: 96.5,\n      trainingCompliance: 91.3,\n      lastAudit: '2025-08-15T00:00:00Z',\n      nextAudit: '2025-11-15T00:00:00Z'\n    }\n  };\n\n  const getStatusIcon = (status) => {\n    switch (status) {\n      case 'completed':\n      case 'Pass':\n        return <CheckCircleIcon className=\"h-5 w-5 text-green-500\" />;\n      case 'failed':\n      case 'Fail':\n        return <XCircleIcon className=\"h-5 w-5 text-red-500\" />;\n      case 'in_progress':\n        return <ClockIcon className=\"h-5 w-5 text-yellow-500\" />;\n      case 'pending':\n        return <ClockIcon className=\"h-5 w-5 text-gray-500\" />;\n      default:\n        return <DocumentTextIcon className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusColor = (status) => {\n    switch (status) {\n      case 'completed':\n      case 'Pass':\n      case 'Closed':\n        return 'bg-green-100 text-green-800 border-green-200';\n      case 'failed':\n      case 'Fail':\n      case 'Open':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'in_progress':\n      case 'In Progress':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'pending':\n      case 'Scheduled':\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n      default:\n        return 'bg-blue-100 text-blue-800 border-blue-200';\n    }\n  };\n\n  const getSeverityColor = (severity) => {\n    switch (severity) {\n      case 'Critical':\n      case 'High':\n        return 'bg-red-100 text-red-800 border-red-200';\n      case 'Major':\n      case 'Medium':\n        return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'Minor':\n      case 'Low':\n        return 'bg-green-100 text-green-800 border-green-200';\n      default:\n        return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const formatDateTime = (_dateString) => {\n    return new Date(dateString).toLocaleString('en-GB');\n  };\n\n  const formatDate = (_dateString) => {\n    return new Date(dateString).toLocaleDateString('en-GB');\n  };\n\n  if (isLoading && !qualityData) {\n    return (\n      <div className=\"max-w-7xl mx-auto p-6\">\n        <div className=\"animate-pulse\">\n          <div className=\"h-8 bg-gray-300 rounded w-1/3 mb-6\"></div>\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            {[...Array(8)].map((_, _i) => (\n              <div key={i} className=\"h-32 bg-gray-300 rounded\"></div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const data = qualityData || mockQualityData;\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n            Quality Control & Assurance\n          </h1>\n          <p className=\"mt-1 text-sm text-gray-500 dark:text-gray-400\">\n            Comprehensive quality management and testing oversight\n          </p>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <select\n            value={timeRange}\n            onChange={(e) => setTimeRange(e.target.value)}\n            className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n          >\n            <option value=\"today\">Today</option>\n            <option value=\"week\">This Week</option>\n            <option value=\"month\">This Month</option>\n            <option value=\"quarter\">This Quarter</option>\n          </select>\n          <button \n            onClick={() => refetch()}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2\"\n          >\n            <ArrowPathIcon className=\"h-4 w-4\" />\n            <span>Refresh</span>\n          </button>\n          <button className=\"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors flex items-center space-x-2\">\n            <DocumentArrowDownIcon className=\"h-4 w-4\" />\n            <span>Export Report</span>\n          </button>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-6 gap-6\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Pass Rate</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.overview.overallPassRate.toFixed(1)}%\n              </p>\n              <p className=\"text-sm text-green-600\">Target: ≥95%</p>\n            </div>\n            <CheckCircleIcon className=\"h-8 w-8 text-green-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Defect Rate</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.overview.defectRate.toFixed(2)}%\n              </p>\n              <p className=\"text-sm text-yellow-600\">Target: &lt;2.0%</p>\n            </div>\n            <ExclamationTriangleIcon className=\"h-8 w-8 text-yellow-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">First Pass Yield</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.overview.firstPassYield.toFixed(1)}%\n              </p>\n              <p className=\"text-sm text-green-600\">Excellent performance</p>\n            </div>\n            <BeakerIcon className=\"h-8 w-8 text-blue-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Critical Issues</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.overview.criticalIssues}\n              </p>\n              <p className=\"text-sm text-red-600\">Require immediate attention</p>\n            </div>\n            <FlagIcon className=\"h-8 w-8 text-red-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Inspections</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.overview.totalInspections}\n              </p>\n              <p className=\"text-sm text-blue-600\">This period</p>\n            </div>\n            <ClipboardDocumentCheckIcon className=\"h-8 w-8 text-purple-600\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Avg Test Time</p>\n              <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                {data.overview.averageInspectionTime}m\n              </p>\n              <p className=\"text-sm text-green-600\">Within SLA</p>\n            </div>\n            <ClockIcon className=\"h-8 w-8 text-orange-600\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Tabs */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow\">\n        <div className=\"border-b border-gray-200 dark:border-gray-700\">\n          <nav className=\"-mb-px flex space-x-8 px-6\">\n            {[\n              { id: 'realtime', label: 'Live Monitor', icon: BeakerIcon },\n              { id: 'dashboard', label: 'Quality Dashboard', icon: ChartBarIcon },\n              { id: 'inspections', label: 'Product Inspections', icon: ClipboardDocumentCheckIcon },\n              { id: 'tests', label: 'Quality Tests', icon: DocumentTextIcon },\n              { id: 'defects', label: 'Defect Analysis', icon: ExclamationTriangleIcon },\n              { id: 'actions', label: 'Corrective Actions', icon: AdjustmentsHorizontalIcon },\n              { id: 'compliance', label: 'Compliance', icon: FlagIcon }\n            ].map((tab) => (\n              <button\n                key={tab.id}\n                onClick={() => setActiveTab(tab.id)}\n                className={`py-4 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${\n                  activeTab === tab.id\n                    ? 'border-blue-500 text-blue-600'\n                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                }`}\n              >\n                <tab.icon className=\"h-4 w-4\" />\n                <span>{tab.label}</span>\n              </button>\n            ))}\n          </nav>\n        </div>\n\n        <div className=\"p-6\">\n          {activeTab === 'realtime' && (\n            <QualityControlMonitor />\n          )}\n\n          {activeTab === 'dashboard' && (\n            <div className=\"space-y-6\">\n              {/* Quality Trends Chart */}\n              <div>\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white mb-4\">\n                  Quality Performance Trends\n                </h3>\n                <div className=\"h-80\">\n                  <ChartErrorBoundary>\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <ComposedChart data={data.qualityTrends}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"date\" tickFormatter={(date) => new Date(date).toLocaleDateString('en-GB', { month: 'short', day: 'numeric' })} />\n                        <YAxis />\n                        <Tooltip labelFormatter={(date) => new Date(date).toLocaleDateString('en-GB')} />\n                        <Area\n                          type=\"monotone\"\n                          dataKey=\"passRate\"\n                          fill=\"#10B981\"\n                          fillOpacity={0.3}\n                          stroke=\"#10B981\"\n                          strokeWidth={2}\n                          name=\"Pass Rate %\"\n                        />\n                        <Line\n                          type=\"monotone\"\n                          dataKey=\"firstPassYield\"\n                          stroke=\"#3B82F6\"\n                          strokeWidth={2}\n                          name=\"First Pass Yield %\"\n                        />\n                        <Line\n                          type=\"monotone\"\n                          dataKey=\"defectRate\"\n                          stroke=\"#EF4444\"\n                          strokeWidth={2}\n                          name=\"Defect Rate %\"\n                        />\n                      </ComposedChart>\n                    </ResponsiveContainer>\n                  </ChartErrorBoundary>\n                </div>\n              </div>\n\n              {/* Defect Categories and Compliance Status */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Defect Categories Distribution\n                  </h4>\n                  <div className=\"h-64\">\n                    <ChartErrorBoundary>\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <PieChart>\n                          <Pie\n                            data={data.defectCategories}\n                            cx=\"50%\"\n                            cy=\"50%\"\n                            outerRadius={80}\n                            dataKey=\"count\"\n                            label={({ category, percentage }) => `${category}: ${percentage}%`}\n                          >\n                            {data.defectCategories.map((entry, index) => (\n                              <Cell key={`cell-${index}`} fill={\n                                entry.severity === 'Critical' ? '#EF4444' :\n                                entry.severity === 'Major' ? '#F59E0B' : '#10B981'\n                              } />\n                            ))}\n                          </Pie>\n                          <Tooltip />\n                        </PieChart>\n                      </ResponsiveContainer>\n                    </ChartErrorBoundary>\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Compliance Metrics\n                  </h4>\n                  <div className=\"space-y-4\">\n                    {[\n                      { metric: 'Audit Score', value: data.complianceMetrics.auditScore, target: 95.0, unit: '%' },\n                      { metric: 'Regulatory Compliance', value: data.complianceMetrics.regulatoryCompliance, target: 100.0, unit: '%' },\n                      { metric: 'Documentation Complete', value: data.complianceMetrics.documentationComplete, target: 100.0, unit: '%' },\n                      { metric: 'Training Compliance', value: data.complianceMetrics.trainingCompliance, target: 95.0, unit: '%' }\n                    ].map((item, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">)\n                        <div>\n                          <div className=\"font-medium text-gray-900 dark:text-white\">{item.metric}</div>\n                          <div className=\"text-sm text-gray-500\">Target: {item.target}{item.unit}</div>\n                        </div>\n                        <div className=\"flex items-center space-x-3\">\n                          <div className=\"w-32 bg-gray-200 rounded-full h-2\">\n                            <div\n                              className={`h-2 rounded-full ${\n                                item.value >= item.target ? 'bg-green-600' : 'bg-yellow-600'\n                              }`}\n                              style={{ width: `${(item.value / 100) * 100}%` }}\n                            />\n                          </div>\n                          <span className=\"font-medium text-gray-900 dark:text-white min-w-[3rem]\">\n                            {item.value}{item.unit}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'inspections' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                  Product Inspection Summary\n                </h3>\n                <select\n                  value={productFilter}\n                  onChange={(e) => setProductFilter(e.target.value)}\n                  className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white\"\n                >\n                  <option value=\"all\">All Products</option>\n                  <option value=\"SENT-RED-500\">Sentia Red 500ml</option>\n                  <option value=\"SENT-GOLD-500\">Sentia Gold 500ml</option>\n                  <option value=\"SENT-WHITE-500\">Sentia White 500ml</option>\n                  <option value=\"SENT-LTD-500\">Limited Edition</option>\n                </select>\n              </div>\n\n              <div className=\"overflow-x-auto\">\n                <table className=\"min-w-full divide-y divide-gray-200 dark:divide-gray-700\">\n                  <thead className=\"bg-gray-50 dark:bg-gray-700\">\n                    <tr>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Product\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Total Inspected\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Pass Rate\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Defects\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Avg Test Time\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Last Inspection\n                      </th>\n                      <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider\">\n                        Status\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody className=\"bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700\">\n                    {data.inspectionsByProduct.map((product) => (\n                      <tr key={product.sku} className=\"hover:bg-gray-50 dark:hover:bg-gray-700\">\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div>\n                            <div className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                              {product.product}\n                            </div>\n                            <div className=\"text-sm text-gray-500\">{product.sku}</div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                          {product.totalInspected.toLocaleString()}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"flex items-center\">\n                            <div className={`text-sm font-medium ${\n                              product.passRate >= 95 ? 'text-green-600' : 'text-yellow-600'\n                            }`}>\n                              {product.passRate}%\n                            </div>\n                            <div className=\"ml-2 w-16 bg-gray-200 rounded-full h-2\">\n                              <div\n                                className={`h-2 rounded-full ${\n                                  product.passRate >= 95 ? 'bg-green-600' : 'bg-yellow-600'\n                                }`}\n                                style={{ width: `${product.passRate}%` }}\n                              />\n                            </div>\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <div className=\"text-sm text-gray-900 dark:text-white\">\n                            Critical: {product.criticalDefects}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            Minor: {product.minorDefects}\n                          </div>\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                          {product.avgInspectionTime.toFixed(1)}min\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-white\">\n                          {formatDateTime(product.lastInspection)}\n                        </td>\n                        <td className=\"px-6 py-4 whitespace-nowrap\">\n                          <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${\n                            product.pending > 0 ? 'bg-yellow-100 text-yellow-800 border-yellow-200' :\n                            product.passRate >= 95 ? 'bg-green-100 text-green-800 border-green-200' :\n                            'bg-red-100 text-red-800 border-red-200'\n                          }`}>\n                            {product.pending > 0 ? `${product.pending} Pending` :\n                             product.passRate >= 95 ? 'Good' : 'Attention Required'}\n                          </span>\n                        </td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'tests' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                Quality Test Results\n              </h3>\n\n              <div className=\"grid grid-cols-1 gap-4\">\n                {data.qualityTests.map((test) => (\n                  <div key={test.id} className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-6\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-3\">\n                          {getStatusIcon(test.status)}\n                          <h4 className=\"font-medium text-gray-900 dark:text-white\">{test.testName}</h4>\n                          <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor(test.status)}`}>\n                            {test.status.replace('', ' ')}\n                          </span>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-4\">\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Test Type</div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{test.type}</div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Product</div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{test.product}</div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Batch</div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{test.batchNumber}</div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Inspector</div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{test.inspector}</div>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Target Value</div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{test.targetValue}</div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Actual Value</div>\n                            <div className={`font-medium ${\n                              test.result === 'Pass' ? 'text-green-600' :\n                              test.result === 'Fail' ? 'text-red-600' :\n                              'text-gray-900 dark:text-white'\n                            }`}>\n                              {test.actualValue}\n                            </div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Tolerance</div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{test.tolerance}</div>\n                          </div>\n                        </div>\n\n                        {test.notes && (\n                          <div className=\"mb-4\">\n                            <div className=\"text-sm text-gray-500\">Notes</div>\n                            <div className=\"text-sm text-gray-900 dark:text-white\">{test.notes}</div>\n                          </div>\n                        )}\n\n                        <div className=\"flex items-center space-x-4 text-sm text-gray-500\">\n                          {test.completedAt && (\n                            <div>Completed: {formatDateTime(test.completedAt)}</div>\n                          )}\n                          {test.duration && (\n                            <div>Duration: {test.duration} minutes</div>\n                          )}\n                        </div>\n                      </div>\n\n                      {test.result && (\n                        <div className={`px-3 py-1 rounded-lg text-sm font-medium ${\n                          test.result === 'Pass' ? 'bg-green-100 text-green-800' :\n                          'bg-red-100 text-red-800'\n                        }`}>\n                          {test.result}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'defects' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                Defect Analysis & Trends\n              </h3>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Defect Categories\n                  </h4>\n                  <div className=\"space-y-3\">\n                    {data.defectCategories.map((defect, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg\">\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{defect.category}</div>\n                            <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${getSeverityColor(defect.severity)}`}>\n                              {defect.severity}\n                            </span>\n                          </div>\n                          <div className=\"flex items-center justify-between mt-2\">\n                            <div className=\"text-sm text-gray-500\">\n                              {defect.count} occurrences ({defect.percentage}%)\n                            </div>\n                            <div className={`text-sm ${\n                              defect.trend === 'increasing' ? 'text-red-600' :\n                              defect.trend === 'decreasing' ? 'text-green-600' : 'text-gray-600'\n                            }`}>\n                              {defect.trend === 'increasing' ? '↗' :\n                               defect.trend === 'decreasing' ? '↘' : '→'} {defect.trend}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n\n                <div>\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Defect Trend Analysis\n                  </h4>\n                  <div className=\"h-64\">\n                    <ChartErrorBoundary>\n                      <ResponsiveContainer width=\"100%\" height=\"100%\">\n                        <BarChart data={data.defectCategories.slice(0, 5)}>\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis \n                            dataKey=\"category\" \n                            angle={-45}\n                            textAnchor=\"end\"\n                            height={60}\n                          />\n                          <YAxis />\n                          <Tooltip />\n                          <Bar dataKey=\"count\" fill=\"#EF4444\" name=\"Defect Count\" />\n                        </BarChart>\n                      </ResponsiveContainer>\n                    </ChartErrorBoundary>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'actions' && (\n            <div className=\"space-y-6\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                  Corrective Actions Management\n                </h3>\n                <button className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2\">\n                  <PlayIcon className=\"h-4 w-4\" />\n                  <span>Create New Action</span>\n                </button>\n              </div>\n\n              <div className=\"grid grid-cols-1 gap-6\">\n                {data.correctiveActions.map((action) => (\n                  <div key={action.id} className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-6\">\n                    <div className=\"flex items-start justify-between mb-4\">\n                      <div className=\"flex-1\">\n                        <div className=\"flex items-center space-x-3 mb-2\">\n                          <h4 className=\"font-medium text-gray-900 dark:text-white\">{action.issue}</h4>\n                          <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${getSeverityColor(action.severity)}`}>\n                            {action.severity} Severity\n                          </span>\n                          <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${getStatusColor(action.status)}`}>\n                            {action.status}\n                          </span>\n                        </div>\n                        \n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-4\">\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Assigned To</div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{action.assignedTo}</div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Created</div>\n                            <div className=\"font-medium text-gray-900 dark:text-white\">{formatDate(action.createdDate)}</div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Due Date</div>\n                            <div className={`font-medium ${\n                              new Date(action.dueDate) < new Date() ? 'text-red-600' : 'text-gray-900 dark:text-white'\n                            }`}>\n                              {formatDate(action.dueDate)}\n                            </div>\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-3 mb-4\">\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Root Cause</div>\n                            <div className=\"text-sm text-gray-900 dark:text-white\">{action.rootCause}</div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Proposed Action</div>\n                            <div className=\"text-sm text-gray-900 dark:text-white\">{action.proposedAction}</div>\n                          </div>\n                          <div>\n                            <div className=\"text-sm text-gray-500\">Verification Method</div>\n                            <div className=\"text-sm text-gray-900 dark:text-white\">{action.verificationMethod}</div>\n                          </div>\n                        </div>\n\n                        <div>\n                          <div className=\"flex justify-between text-sm mb-1\">\n                            <span className=\"text-gray-500\">Progress</span>\n                            <span className=\"font-medium text-gray-900 dark:text-white\">{action.progress}%</span>\n                          </div>\n                          <div className=\"w-full bg-gray-200 rounded-full h-2\">\n                            <div\n                              className={`h-2 rounded-full ${\n                                action.status === 'Closed' ? 'bg-green-600' :\n                                action.status === 'In Progress' ? 'bg-blue-600' :\n                                'bg-gray-400'\n                              }`}\n                              style={{ width: `${action.progress}%` }}\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {activeTab === 'compliance' && (\n            <div className=\"space-y-6\">\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-white\">\n                Compliance & Certification Management\n              </h3>\n\n              <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {data.complianceMetrics.auditScore}%\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Audit Score</div>\n                  <div className=\"text-xs text-green-600 mt-1\">Excellent performance</div>\n                </div>\n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {data.complianceMetrics.certificationsActive}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Active Certifications</div>\n                  <div className=\"text-xs text-blue-600 mt-1\">All current</div>\n                </div>\n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {data.complianceMetrics.certificationsExpiring}\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Expiring Soon</div>\n                  <div className=\"text-xs text-yellow-600 mt-1\">Renewal required</div>\n                </div>\n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-4 text-center\">\n                  <div className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                    {data.complianceMetrics.trainingCompliance}%\n                  </div>\n                  <div className=\"text-sm text-gray-500\">Training Compliance</div>\n                  <div className=\"text-xs text-green-600 mt-1\">Above target</div>\n                </div>\n              </div>\n\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-6\">\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Audit Schedule\n                  </h4>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center p-3 bg-white dark:bg-gray-800 rounded-lg\">\n                      <div>\n                        <div className=\"font-medium text-gray-900 dark:text-white\">Last Audit</div>\n                        <div className=\"text-sm text-gray-500\">{formatDate(data.complianceMetrics.lastAudit)}</div>\n                      </div>\n                      <span className=\"inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 border border-green-200\">\n                        Completed\n                      </span>\n                    </div>\n                    <div className=\"flex justify-between items-center p-3 bg-white dark:bg-gray-800 rounded-lg\">\n                      <div>\n                        <div className=\"font-medium text-gray-900 dark:text-white\">Next Audit</div>\n                        <div className=\"text-sm text-gray-500\">{formatDate(data.complianceMetrics.nextAudit)}</div>\n                      </div>\n                      <span className=\"inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 border border-blue-200\">\n                        Scheduled\n                      </span>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-gray-50 dark:bg-gray-700 rounded-lg p-6\">\n                  <h4 className=\"text-md font-medium text-gray-900 dark:text-white mb-4\">\n                    Upcoming Inspections\n                  </h4>\n                  <div className=\"space-y-3\">\n                    {data.inspectionSchedule.map((inspection) => (\n                      <div key={inspection.id} className=\"flex justify-between items-center p-3 bg-white dark:bg-gray-800 rounded-lg\">\n                        <div className=\"flex-1\">\n                          <div className=\"font-medium text-gray-900 dark:text-white text-sm\">\n                            {inspection.inspectionType}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {inspection.product}\n                          </div>\n                          <div className=\"text-xs text-gray-400\">\n                            {formatDateTime(inspection.scheduledTime)} • {inspection.inspector}\n                          </div>\n                        </div>\n                        <div className=\"text-right\">\n                          <span className={`inline-flex px-2.5 py-0.5 rounded-full text-xs font-medium border ${\n                            inspection.priority === 'High' ? 'bg-red-100 text-red-800 border-red-200' :\n                            inspection.priority === 'Medium' ? 'bg-yellow-100 text-yellow-800 border-yellow-200' :\n                            'bg-blue-100 text-blue-800 border-blue-200'\n                          }`}>\n                            {inspection.priority}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Quality;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\RealTimeAnalytics.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useEffect' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useEffect" },
            "fix": { "range": [24, 35], "text": "" },
            "desc": "Remove unused variable 'useEffect'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'selectedMetrics' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 45,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 45,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "selectedMetrics" },
            "fix": { "range": [839, 910], "text": "" },
            "desc": "Remove unused variable 'selectedMetrics'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'_timeRange' is not defined.",
        "line": 50,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 50,
        "endColumn": 44
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'_timeRange' is not defined.",
        "line": 61,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 61,
        "endColumn": 47
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'_timeRange' is not defined.",
        "line": 72,
        "column": 37,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 72,
        "endColumn": 47
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'_timeRange' is not defined.",
        "line": 83,
        "column": 34,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 83,
        "endColumn": 44
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport { useQuery } from '@tanstack/react-query';\nimport { \n  ChartBarIcon,\n  CurrencyDollarIcon,\n  ShoppingCartIcon,\n  UserGroupIcon,\n  ArrowTrendingUpIcon,\n  ArrowTrendingDownIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n  ClockIcon,\n  ArrowPathIcon,\n  ArrowDownTrayIcon,\n  FunnelIcon\n} from '@heroicons/react/24/outline';\nimport { Line, Bar, Doughnut } from 'react-chartjs-2';\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement,\n} from 'chart.js';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n  ArcElement\n);\n\nconst RealTimeAnalytics = () => {\n  const [timeRange, setTimeRange] = useState('24h');\n  const [selectedMetrics] = useState(['revenue', 'orders', 'inventory']);\n  const [autoRefresh, setAutoRefresh] = useState(true);\n\n  // Fetch real-time data from all integrations\n  const { data: amazonData, isLoading: amazonLoading, refetch: refetchAmazon } = useQuery({\n    queryKey: ['amazon-metrics', _timeRange],\n    queryFn: async () => {\n      const response = await fetch(`/api/integrations/amazon?endpoint=metrics&range=${timeRange}`);\n      if (!response.ok) throw new Error('Failed to fetch Amazon data');\n      return response.json();\n    },\n    refetchInterval: autoRefresh ? 60000 : false, // Refresh every minute\n    retry: 3\n  });\n\n  const { data: shopifyData, isLoading: shopifyLoading, refetch: refetchShopify } = useQuery({\n    queryKey: ['shopify-analytics', _timeRange],\n    queryFn: async () => {\n      const response = await fetch(`/api/integrations/shopify?endpoint=analytics&period=${timeRange === '24h' ? '1' : timeRange === '7d' ? '7' : '30'}`);\n      if (!response.ok) throw new Error('Failed to fetch Shopify data');\n      return response.json();\n    },\n    refetchInterval: autoRefresh ? 60000 : false,\n    retry: 3\n  });\n\n  const { data: unleashedData, isLoading: unleashedLoading, refetch: refetchUnleashed } = useQuery({\n    queryKey: ['unleashed-summary', _timeRange],\n    queryFn: async () => {\n      const response = await fetch(`/api/integrations/unleashed?endpoint=summary`);\n      if (!response.ok) throw new Error('Failed to fetch Unleashed data');\n      return response.json();\n    },\n    refetchInterval: autoRefresh ? 60000 : false,\n    retry: 3\n  });\n\n  const { data: xeroData, isLoading: xeroLoading, refetch: refetchXero } = useQuery({\n    queryKey: ['xero-financial', _timeRange],\n    queryFn: async () => {\n      const response = await fetch(`/api/integrations/xero?endpoint=financial-summary&period=${timeRange === '24h' ? '1' : timeRange === '7d' ? '7' : '30'}`);\n      if (!response.ok) throw new Error('Failed to fetch Xero data');\n      return response.json();\n    },\n    refetchInterval: autoRefresh ? 60000 : false,\n    retry: 3\n  });\n\n  // Auto-refresh all data\n  const refreshAllData = () => {\n    refetchAmazon();\n    refetchShopify();\n    refetchUnleashed();\n    refetchXero();\n  };\n\n  // Calculate combined metrics\n  const combinedMetrics = React.useMemo(() => {\n    if (!amazonData?.data || !shopifyData?.data || !xeroData?.data || !unleashedData?.data) {\n      return null;\n    }\n\n    const totalRevenue = (amazonData.data.totalRevenue || 0) + (shopifyData.data.summary?.totalSales || 0);\n    const totalOrders = (amazonData.data.totalOrders || 0) + (shopifyData.data.summary?.totalOrders || 0);\n    const averageOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;\n\n    return {\n      totalRevenue,\n      totalOrders,\n      averageOrderValue,\n      totalInventoryValue: unleashedData.data.totalValue || 0,\n      totalCustomers: shopifyData.data.summary?.totalCustomers || 0,\n      overdueAmount: xeroData.data.invoices?.due || 0,\n      lastUpdated: new Date().toISOString()\n    };\n  }, [amazonData, shopifyData, xeroData, unleashedData]);\n\n  // Prepare chart data\n  const revenueChartData = React.useMemo(() => {\n    if (!shopifyData?.data?.analytics) return null;\n\n    const labels = shopifyData.data.analytics.map(day => \n      new Date(day.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' })\n    );\n    \n    return {\n      labels,\n      datasets: [\n        {\n          label: 'Daily Revenue',\n          data: shopifyData.data.analytics.map(day => day.total_sales || 0),\n          borderColor: 'rgb(59, 130, 246)',\n          backgroundColor: 'rgba(59, 130, 246, 0.1)',\n          tension: 0.4,\n          fill: true\n        }\n      ]\n    };\n  }, [shopifyData]);\n\n  const inventoryChartData = React.useMemo(() => {\n    if (!unleashedData?.data) return null;\n\n    return {\n      labels: ['Available', 'Low Stock', 'Out of Stock'],\n      datasets: [{\n        data: [\n          unleashedData.data.totalItems - unleashedData.data.lowStockItems - unleashedData.data.outOfStockItems,\n          unleashedData.data.lowStockItems,\n          unleashedData.data.outOfStockItems\n        ],\n        backgroundColor: ['#10B981', '#F59E0B', '#EF4444'],\n        borderColor: ['#059669', '#D97706', '#DC2626'],\n        borderWidth: 2\n      }]\n    };\n  }, [unleashedData]);\n\n  const isLoading = amazonLoading || shopifyLoading || unleashedLoading || xeroLoading;\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      {/* Header */}\n      <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n            Real-Time Analytics\n          </h1>\n          <p className=\"text-gray-600 dark:text-gray-400 mt-1\">\n            Live data from Amazon, Shopify, Unleashed ERP, and Xero\n          </p>\n        </div>\n\n        <div className=\"flex items-center gap-3\">\n          {/* Time Range Selector */}\n          <select\n            value={timeRange}\n            onChange={(e) => setTimeRange(e.target.value)}\n            className=\"px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:text-white\"\n          >\n            <option value=\"24h\">Last 24 Hours</option>\n            <option value=\"7d\">Last 7 Days</option>\n            <option value=\"30d\">Last 30 Days</option>\n          </select>\n\n          {/* Auto Refresh Toggle */}\n          <button\n            onClick={() => setAutoRefresh(!autoRefresh)}\n            className={`px-3 py-2 text-sm rounded-lg transition-colors ${\n              autoRefresh\n                ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n                : 'bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200'\n            }`}\n          >\n            <ClockIcon className=\"w-4 h-4 inline mr-1\" />\n            Auto Refresh\n          </button>\n\n          {/* Manual Refresh */}\n          <button\n            onClick={refreshAllData}\n            disabled={isLoading}\n            className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors\"\n          >\n            <ArrowPathIcon className={`w-4 h-4 inline mr-1 ${isLoading ? 'animate-spin' : ''}`} />\n            Refresh\n          </button>\n        </div>\n      </div>\n\n      {/* Real-Time Status Indicators */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Amazon SP-API</p>\n              <div className=\"flex items-center mt-1\">\n                <div className={`w-2 h-2 rounded-full mr-2 ${amazonData ? 'bg-green-500' : 'bg-red-500'}`} />\n                <span className=\"text-sm font-medium\">{amazonData ? 'Connected' : 'Disconnected'}</span>\n              </div>\n            </div>\n            <ShoppingCartIcon className=\"w-8 h-8 text-orange-500\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Shopify</p>\n              <div className=\"flex items-center mt-1\">\n                <div className={`w-2 h-2 rounded-full mr-2 ${shopifyData ? 'bg-green-500' : 'bg-red-500'}`} />\n                <span className=\"text-sm font-medium\">{shopifyData ? 'Connected' : 'Disconnected'}</span>\n              </div>\n            </div>\n            <div className=\"w-8 h-8 bg-green-500 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">S</span>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Unleashed ERP</p>\n              <div className=\"flex items-center mt-1\">\n                <div className={`w-2 h-2 rounded-full mr-2 ${unleashedData ? 'bg-green-500' : 'bg-red-500'}`} />\n                <span className=\"text-sm font-medium\">{unleashedData ? 'Connected' : 'Disconnected'}</span>\n              </div>\n            </div>\n            <ChartBarIcon className=\"w-8 h-8 text-blue-500\" />\n          </div>\n        </div>\n\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-700\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm text-gray-600 dark:text-gray-400\">Xero Accounting</p>\n              <div className=\"flex items-center mt-1\">\n                <div className={`w-2 h-2 rounded-full mr-2 ${xeroData ? 'bg-green-500' : 'bg-red-500'}`} />\n                <span className=\"text-sm font-medium\">{xeroData ? 'Connected' : 'Disconnected'}</span>\n              </div>\n            </div>\n            <CurrencyDollarIcon className=\"w-8 h-8 text-green-500\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Key Metrics */}\n      {combinedMetrics && (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 dark:bg-green-900 rounded-lg\">\n                <CurrencyDollarIcon className=\"w-6 h-6 text-green-600 dark:text-green-400\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Revenue</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  ${combinedMetrics.totalRevenue.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 dark:bg-blue-900 rounded-lg\">\n                <ShoppingCartIcon className=\"w-6 h-6 text-blue-600 dark:text-blue-400\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Total Orders</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  {combinedMetrics.totalOrders.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-purple-100 dark:bg-purple-900 rounded-lg\">\n                <ArrowTrendingUpIcon className=\"w-6 h-6 text-purple-600 dark:text-purple-400\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Avg Order Value</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  ${combinedMetrics.averageOrderValue.toFixed(2)}\n                </p>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-yellow-100 dark:bg-yellow-900 rounded-lg\">\n                <ExclamationTriangleIcon className=\"w-6 h-6 text-yellow-600 dark:text-yellow-400\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">Overdue Amount</p>\n                <p className=\"text-2xl font-bold text-gray-900 dark:text-white\">\n                  ${combinedMetrics.overdueAmount.toLocaleString()}\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Revenue Chart */}\n        {revenueChartData && (\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Revenue Trend</h3>\n              <button className=\"text-sm text-blue-600 hover:text-blue-700\">\n                <ArrowDownTrayIcon className=\"w-4 h-4 inline mr-1\" />\n                Export\n              </button>\n            </div>\n            <div className=\"h-64\">\n              <Line\n                data={revenueChartData}\n                options={{\n                  responsive: true,\n                  maintainAspectRatio: false,\n                  plugins: {\n                    legend: {\n                      display: false\n                    }\n                  },\n                  scales: {\n                    y: {\n                      beginAtZero: true,\n                      ticks: {\n                        callback: function(value) {\n                          return '$' + value.toLocaleString();\n                        }\n                      }\n                    }\n                  }\n                }}\n              />\n            </div>\n          </div>\n        )}\n\n        {/* Inventory Chart */}\n        {inventoryChartData && (\n          <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 border border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center justify-between mb-4\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Inventory Status</h3>\n              <button className=\"text-sm text-blue-600 hover:text-blue-700\">\n                <ArrowDownTrayIcon className=\"w-4 h-4 inline mr-1\" />\n                Export\n              </button>\n            </div>\n            <div className=\"h-64\">\n              <Doughnut\n                data={inventoryChartData}\n                options={{\n                  responsive: true,\n                  maintainAspectRatio: false,\n                  plugins: {\n                    legend: {\n                      position: 'bottom'\n                    }\n                  }\n                }}\n              />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Data Tables Preview */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        {/* Recent Orders */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\n          <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n            <div className=\"flex items-center justify-between\">\n              <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">Recent Orders</h3>\n              <button className=\"text-sm text-blue-600 hover:text-blue-700\">\n                View All\n              </button>\n            </div>\n          </div>\n          <div className=\"p-6\">\n            {shopifyData?.data?.summary ? (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between py-2\">\n                  <div>\n                    <p className=\"font-medium text-gray-900 dark:text-white\">Shopify Orders</p>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-400\">Last {timeRange}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"font-bold text-gray-900 dark:text-white\">\n                      {shopifyData.data.summary.totalOrders}\n                    </p>\n                    <p className=\"text-sm text-green-600\">\n                      ${shopifyData.data.summary.totalSales?.toLocaleString()}\n                    </p>\n                  </div>\n                </div>\n\n                {amazonData?.data && (\n                  <div className=\"flex items-center justify-between py-2 border-t border-gray-200 dark:border-gray-700\">\n                    <div>\n                      <p className=\"font-medium text-gray-900 dark:text-white\">Amazon Orders</p>\n                      <p className=\"text-sm text-gray-600 dark:text-gray-400\">Last {timeRange}</p>\n                    </div>\n                    <div className=\"text-right\">\n                      <p className=\"font-bold text-gray-900 dark:text-white\">\n                        {amazonData.data.totalOrders}\n                      </p>\n                      <p className=\"text-sm text-green-600\">\n                        ${amazonData.data.totalRevenue?.toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ) : (\n              <div className=\"flex items-center justify-center h-24 text-gray-500\">\n                Loading order data...\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* System Alerts */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700\">\n          <div className=\"p-6 border-b border-gray-200 dark:border-gray-700\">\n            <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">System Alerts</h3>\n          </div>\n          <div className=\"p-6 space-y-4\">\n            {unleashedData?.data?.lowStockItems > 0 && (\n              <div className=\"flex items-start gap-3 p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\n                <ExclamationTriangleIcon className=\"w-5 h-5 text-yellow-600 dark:text-yellow-400 mt-0.5\" />\n                <div>\n                  <p className=\"text-sm font-medium text-yellow-800 dark:text-yellow-200\">\n                    Low Stock Alert\n                  </p>\n                  <p className=\"text-xs text-yellow-700 dark:text-yellow-300\">\n                    {unleashedData.data.lowStockItems} items have low inventory levels\n                  </p>\n                </div>\n              </div>\n            )}\n\n            {combinedMetrics?.overdueAmount > 0 && (\n              <div className=\"flex items-start gap-3 p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\n                <ExclamationTriangleIcon className=\"w-5 h-5 text-red-600 dark:text-red-400 mt-0.5\" />\n                <div>\n                  <p className=\"text-sm font-medium text-red-800 dark:text-red-200\">\n                    Overdue Invoices\n                  </p>\n                  <p className=\"text-xs text-red-700 dark:text-red-300\">\n                    ${combinedMetrics.overdueAmount.toLocaleString()} in overdue payments\n                  </p>\n                </div>\n              </div>\n            )}\n\n            <div className=\"flex items-start gap-3 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\n              <CheckCircleIcon className=\"w-5 h-5 text-green-600 dark:text-green-400 mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-medium text-green-800 dark:text-green-200\">\n                  All Systems Online\n                </p>\n                <p className=\"text-xs text-green-700 dark:text-green-300\">\n                  Data synchronization is running smoothly\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RealTimeAnalytics;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\Settings.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\SignUp.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\UserPreferences.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logDebug' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 35,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logDebug" },
            "fix": { "range": [1000, 1009], "text": "" },
            "desc": "Remove unused variable 'logDebug'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logInfo' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 35,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logInfo" },
            "fix": { "range": [1008, 1017], "text": "" },
            "desc": "Remove unused variable 'logInfo'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logWarn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 35,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logWarn" },
            "fix": { "range": [1017, 1026], "text": "" },
            "desc": "Remove unused variable 'logWarn'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'setActiveTab' is not defined.",
        "line": 220,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 220,
        "endColumn": 58
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import React, { useState, useEffect } from 'react';\nimport { useUser } from '@clerk/clerk-react';\nimport {\n  UserIcon,\n  BellIcon,\n  PaintBrushIcon,\n  GlobeAltIcon,\n  ShieldCheckIcon,\n  KeyIcon,\n  DevicePhoneMobileIcon,\n  ComputerDesktopIcon,\n  MoonIcon,\n  SunIcon,\n  ChartBarIcon,\n  ClockIcon,\n  DocumentTextIcon,\n  CheckCircleIcon,\n  ExclamationTriangleIcon\n} from '@heroicons/react/24/outline';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Switch } from '@/components/ui/switch';\nimport { Label } from '@/components/ui/label';\nimport { Input } from '@/components/ui/input';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { logDebug, logInfo, logWarn, logError } from '../utils/logger';\n\nconst UserPreferences = () => {\n  const { user, isLoaded } = useUser();\n  const [activeTab] = useState('profile');\n  const [unsavedChanges, setUnsavedChanges] = useState(false);\n  const [saveSuccess, setSaveSuccess] = useState(false);\n\n  // User preferences state\n  const [preferences, setPreferences] = useState({\n    // Profile\n    displayName: '',\n    email: '',\n    phone: '',\n    department: 'production',\n    jobTitle: '',\n\n    // Notifications\n    emailNotifications: true,\n    pushNotifications: true,\n    smsAlerts: false,\n    dailyDigest: true,\n    weeklyReports: true,\n    alertTypes: {\n      qualityIssues: true,\n      machineDowntime: true,\n      inventoryLow: true,\n      maintenanceDue: true,\n      orderDelays: false\n    },\n\n    // Display\n    theme: 'system',\n    language: 'en',\n    dateFormat: 'MM/DD/YYYY',\n    timeFormat: '12h',\n    numberFormat: 'comma',\n    defaultView: 'dashboard',\n    compactMode: false,\n    showTooltips: true,\n    animations: true,\n\n    // Dashboard\n    refreshInterval: '30',\n    defaultTimeRange: '7d',\n    showMetricLabels: true,\n    gridColumns: 12,\n    widgetDensity: 'normal',\n    chartType: 'line',\n\n    // Privacy & Security\n    twoFactorAuth: false,\n    sessionTimeout: '30',\n    dataSharing: false,\n    analyticsTracking: true,\n    showActivityLog: true,\n    requirePasswordChange: false\n  });\n\n  // Load user preferences\n  useEffect(() => {\n    if (isLoaded && user) {\n      setPreferences(prev => ({\n        ...prev,\n        displayName: user.fullName || user.firstName || '',\n        email: user.emailAddresses?.[0]?.emailAddress || ''\n      }));\n\n      // Load saved preferences from localStorage\n      const savedPrefs = localStorage.getItem('userPreferences');\n      if (savedPrefs) {\n        try {\n          const parsed = JSON.parse(savedPrefs);\n          setPreferences(prev => ({ ...prev, ...parsed }));\n        } catch (e) {\n          logError('Failed to load preferences:', e);\n        }\n      }\n    }\n  }, [isLoaded, user]);\n\n  // Handle preference changes\n  const handlePreferenceChange = (category, field, value) => {\n    setPreferences(prev => {\n      if (category) {\n        return {\n          ...prev,\n          [category]: {\n            ...prev[category],\n            [field]: value\n          }\n        };\n      }\n      return {\n        ...prev,\n        [field]: value\n      };\n    });\n    setUnsavedChanges(true);\n  };\n\n  // Save preferences\n  const savePreferences = () => {\n    localStorage.setItem('userPreferences', JSON.stringify(preferences));\n    setUnsavedChanges(false);\n    setSaveSuccess(true);\n    setTimeout(() => setSaveSuccess(false), 3000);\n  };\n\n  // Reset preferences\n  const resetPreferences = () => {\n    if (window.confirm('Are you sure you want to reset all preferences to defaults?')) {\n      localStorage.removeItem('userPreferences');\n      window.location.reload();\n    }\n  };\n\n  const departments = [\n    { value: 'production', label: 'Production' },\n    { value: 'quality', label: 'Quality Control' },\n    { value: 'maintenance', label: 'Maintenance' },\n    { value: 'logistics', label: 'Logistics' },\n    { value: 'management', label: 'Management' }\n  ];\n\n  const languages = [\n    { value: 'en', label: 'English' },\n    { value: 'es', label: 'Spanish' },\n    { value: 'fr', label: 'French' },\n    { value: 'de', label: 'German' },\n    { value: 'zh', label: 'Chinese' }\n  ];\n\n  const timeRanges = [\n    { value: '1h', label: 'Last Hour' },\n    { value: '24h', label: 'Last 24 Hours' },\n    { value: '7d', label: 'Last 7 Days' },\n    { value: '30d', label: 'Last 30 Days' },\n    { value: '90d', label: 'Last 90 Days' }\n  ];\n\n  return (\n    <div className=\"space-y-6 p-6\">\n      {/* Header */}\n      <div className=\"flex flex-col md:flex-row md:items-center md:justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-slate-900 dark:text-white\">User Preferences</h1>\n          <p className=\"text-slate-600 dark:text-slate-400 mt-1\">\n            Customize your dashboard experience and notification settings\n          </p>\n        </div>\n        <div className=\"flex items-center gap-3 mt-4 md:mt-0\">\n          {unsavedChanges && (\n            <Badge variant=\"warning\" className=\"flex items-center gap-1\">\n              <ExclamationTriangleIcon className=\"w-3 h-3\" />\n              Unsaved Changes\n            </Badge>\n          )}\n          {saveSuccess && (\n            <Badge variant=\"success\" className=\"flex items-center gap-1\">\n              <CheckCircleIcon className=\"w-3 h-3\" />\n              Saved Successfully\n            </Badge>\n          )}\n          <Button variant=\"outline\" onClick={resetPreferences}>\n            Reset to Defaults\n          </Button>\n          <Button onClick={savePreferences} disabled={!unsavedChanges}>\n            Save Changes\n          </Button>\n        </div>\n      </div>\n\n      {/* Alert for unsaved changes */}\n      {unsavedChanges && (\n        <Alert className=\"border-amber-200 bg-amber-50 dark:bg-amber-900/20\">\n          <ExclamationTriangleIcon className=\"h-4 w-4 text-amber-600\" />\n          <AlertTitle>You have unsaved changes</AlertTitle>\n          <AlertDescription>\n            Don't forget to save your preferences before leaving this page.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      {/* Preferences Tabs */}\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n        <TabsList className=\"grid w-full grid-cols-5 lg:w-auto lg:inline-grid\">\n          <TabsTrigger value=\"profile\">Profile</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n          <TabsTrigger value=\"display\">Display</TabsTrigger>\n          <TabsTrigger value=\"dashboard\">Dashboard</TabsTrigger>\n          <TabsTrigger value=\"security\">Security</TabsTrigger>\n        </TabsList>\n\n        {/* Profile Tab */}\n        <TabsContent value=\"profile\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <UserIcon className=\"w-5 h-5 mr-2\" />\n                Profile Information\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"displayName\">Display Name</Label>\n                  <Input\n                    id=\"displayName\"\n                    value={preferences.displayName}\n                    onChange={(e) => handlePreferenceChange(null, 'displayName', e.target.value)}\n                    placeholder=\"Enter your display name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email Address</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={preferences.email}\n                    onChange={(e) => handlePreferenceChange(null, 'email', e.target.value)}\n                    placeholder=\"your.email@example.com\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    type=\"tel\"\n                    value={preferences.phone}\n                    onChange={(e) => handlePreferenceChange(null, 'phone', e.target.value)}\n                    placeholder=\"+1 (555) 123-4567\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"department\">Department</Label>\n                  <Select\n                    value={preferences.department}\n                    onValueChange={(value) => handlePreferenceChange(null, 'department', value)}\n                  >\n                    <SelectTrigger id=\"department\">\n                      <SelectValue placeholder=\"Select department\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {departments.map(dept => (\n                        <SelectItem key={dept.value} value={dept.value}>\n                          {dept.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                <div className=\"space-y-2 md:col-span-2\">\n                  <Label htmlFor=\"jobTitle\">Job Title</Label>\n                  <Input\n                    id=\"jobTitle\"\n                    value={preferences.jobTitle}\n                    onChange={(e) => handlePreferenceChange(null, 'jobTitle', e.target.value)}\n                    placeholder=\"e.g., Production Manager\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Notifications Tab */}\n        <TabsContent value=\"notifications\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <BellIcon className=\"w-5 h-5 mr-2\" />\n                Notification Preferences\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Notification Channels */}\n              <div>\n                <h3 className=\"text-sm font-semibold mb-4\">Notification Channels</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <ComputerDesktopIcon className=\"w-5 h-5 text-gray-500\" />\n                      <Label htmlFor=\"email-notif\">Email Notifications</Label>\n                    </div>\n                    <Switch\n                      id=\"email-notif\"\n                      checked={preferences.emailNotifications}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'emailNotifications', checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <BellIcon className=\"w-5 h-5 text-gray-500\" />\n                      <Label htmlFor=\"push-notif\">Push Notifications</Label>\n                    </div>\n                    <Switch\n                      id=\"push-notif\"\n                      checked={preferences.pushNotifications}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'pushNotifications', checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <DevicePhoneMobileIcon className=\"w-5 h-5 text-gray-500\" />\n                      <Label htmlFor=\"sms-alerts\">SMS Alerts</Label>\n                    </div>\n                    <Switch\n                      id=\"sms-alerts\"\n                      checked={preferences.smsAlerts}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'smsAlerts', checked)}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Alert Types */}\n              <div>\n                <h3 className=\"text-sm font-semibold mb-4\">Alert Types</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"quality-issues\">Quality Issues</Label>\n                    <Switch\n                      id=\"quality-issues\"\n                      checked={preferences.alertTypes.qualityIssues}\n                      onCheckedChange={(checked) => handlePreferenceChange('alertTypes', 'qualityIssues', checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"machine-downtime\">Machine Downtime</Label>\n                    <Switch\n                      id=\"machine-downtime\"\n                      checked={preferences.alertTypes.machineDowntime}\n                      onCheckedChange={(checked) => handlePreferenceChange('alertTypes', 'machineDowntime', checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"inventory-low\">Low Inventory</Label>\n                    <Switch\n                      id=\"inventory-low\"\n                      checked={preferences.alertTypes.inventoryLow}\n                      onCheckedChange={(checked) => handlePreferenceChange('alertTypes', 'inventoryLow', checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"maintenance-due\">Maintenance Due</Label>\n                    <Switch\n                      id=\"maintenance-due\"\n                      checked={preferences.alertTypes.maintenanceDue}\n                      onCheckedChange={(checked) => handlePreferenceChange('alertTypes', 'maintenanceDue', checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"order-delays\">Order Delays</Label>\n                    <Switch\n                      id=\"order-delays\"\n                      checked={preferences.alertTypes.orderDelays}\n                      onCheckedChange={(checked) => handlePreferenceChange('alertTypes', 'orderDelays', checked)}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Reports */}\n              <div>\n                <h3 className=\"text-sm font-semibold mb-4\">Scheduled Reports</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <ClockIcon className=\"w-5 h-5 text-gray-500\" />\n                      <Label htmlFor=\"daily-digest\">Daily Digest</Label>\n                    </div>\n                    <Switch\n                      id=\"daily-digest\"\n                      checked={preferences.dailyDigest}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'dailyDigest', checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <DocumentTextIcon className=\"w-5 h-5 text-gray-500\" />\n                      <Label htmlFor=\"weekly-reports\">Weekly Reports</Label>\n                    </div>\n                    <Switch\n                      id=\"weekly-reports\"\n                      checked={preferences.weeklyReports}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'weeklyReports', checked)}\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Display Tab */}\n        <TabsContent value=\"display\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <PaintBrushIcon className=\"w-5 h-5 mr-2\" />\n                Display Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                {/* Theme */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"theme\">Theme</Label>\n                  <Select\n                    value={preferences.theme}\n                    onValueChange={(value) => handlePreferenceChange(null, 'theme', value)}\n                  >\n                    <SelectTrigger id=\"theme\">\n                      <SelectValue placeholder=\"Select theme\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"light\">\n                        <div className=\"flex items-center gap-2\">\n                          <SunIcon className=\"w-4 h-4\" />\n                          Light\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"dark\">\n                        <div className=\"flex items-center gap-2\">\n                          <MoonIcon className=\"w-4 h-4\" />\n                          Dark\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"system\">\n                        <div className=\"flex items-center gap-2\">\n                          <ComputerDesktopIcon className=\"w-4 h-4\" />\n                          System\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Language */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"language\">Language</Label>\n                  <Select\n                    value={preferences.language}\n                    onValueChange={(value) => handlePreferenceChange(null, 'language', value)}\n                  >\n                    <SelectTrigger id=\"language\">\n                      <SelectValue placeholder=\"Select language\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {languages.map(lang => (\n                        <SelectItem key={lang.value} value={lang.value}>\n                          {lang.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Date Format */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"dateFormat\">Date Format</Label>\n                  <Select\n                    value={preferences.dateFormat}\n                    onValueChange={(value) => handlePreferenceChange(null, 'dateFormat', value)}\n                  >\n                    <SelectTrigger id=\"dateFormat\">\n                      <SelectValue placeholder=\"Select date format\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"MM/DD/YYYY\">MM/DD/YYYY</SelectItem>\n                      <SelectItem value=\"DD/MM/YYYY\">DD/MM/YYYY</SelectItem>\n                      <SelectItem value=\"YYYY-MM-DD\">YYYY-MM-DD</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Time Format */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"timeFormat\">Time Format</Label>\n                  <Select\n                    value={preferences.timeFormat}\n                    onValueChange={(value) => handlePreferenceChange(null, 'timeFormat', value)}\n                  >\n                    <SelectTrigger id=\"timeFormat\">\n                      <SelectValue placeholder=\"Select time format\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"12h\">12-hour (AM/PM)</SelectItem>\n                      <SelectItem value=\"24h\">24-hour</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Display Options */}\n              <div>\n                <h3 className=\"text-sm font-semibold mb-4\">Display Options</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"compact-mode\">Compact Mode</Label>\n                    <Switch\n                      id=\"compact-mode\"\n                      checked={preferences.compactMode}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'compactMode', checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"show-tooltips\">Show Tooltips</Label>\n                    <Switch\n                      id=\"show-tooltips\"\n                      checked={preferences.showTooltips}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'showTooltips', checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"animations\">Enable Animations</Label>\n                    <Switch\n                      id=\"animations\"\n                      checked={preferences.animations}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'animations', checked)}\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Dashboard Tab */}\n        <TabsContent value=\"dashboard\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <ChartBarIcon className=\"w-5 h-5 mr-2\" />\n                Dashboard Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                {/* Refresh Interval */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"refreshInterval\">Auto-Refresh Interval</Label>\n                  <Select\n                    value={preferences.refreshInterval}\n                    onValueChange={(value) => handlePreferenceChange(null, 'refreshInterval', value)}\n                  >\n                    <SelectTrigger id=\"refreshInterval\">\n                      <SelectValue placeholder=\"Select interval\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"off\">Off</SelectItem>\n                      <SelectItem value=\"10\">10 seconds</SelectItem>\n                      <SelectItem value=\"30\">30 seconds</SelectItem>\n                      <SelectItem value=\"60\">1 minute</SelectItem>\n                      <SelectItem value=\"300\">5 minutes</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Default Time Range */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"defaultTimeRange\">Default Time Range</Label>\n                  <Select\n                    value={preferences.defaultTimeRange}\n                    onValueChange={(value) => handlePreferenceChange(null, 'defaultTimeRange', value)}\n                  >\n                    <SelectTrigger id=\"defaultTimeRange\">\n                      <SelectValue placeholder=\"Select time range\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {timeRanges.map(range => (\n                        <SelectItem key={range.value} value={range.value}>\n                          {range.label}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Default View */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"defaultView\">Default View</Label>\n                  <Select\n                    value={preferences.defaultView}\n                    onValueChange={(value) => handlePreferenceChange(null, 'defaultView', value)}\n                  >\n                    <SelectTrigger id=\"defaultView\">\n                      <SelectValue placeholder=\"Select default view\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"dashboard\">Dashboard</SelectItem>\n                      <SelectItem value=\"production\">Production</SelectItem>\n                      <SelectItem value=\"quality\">Quality</SelectItem>\n                      <SelectItem value=\"inventory\">Inventory</SelectItem>\n                      <SelectItem value=\"analytics\">Analytics</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Chart Type */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"chartType\">Preferred Chart Type</Label>\n                  <Select\n                    value={preferences.chartType}\n                    onValueChange={(value) => handlePreferenceChange(null, 'chartType', value)}\n                  >\n                    <SelectTrigger id=\"chartType\">\n                      <SelectValue placeholder=\"Select chart type\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"line\">Line Chart</SelectItem>\n                      <SelectItem value=\"bar\">Bar Chart</SelectItem>\n                      <SelectItem value=\"area\">Area Chart</SelectItem>\n                      <SelectItem value=\"pie\">Pie Chart</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              {/* Widget Settings */}\n              <div>\n                <h3 className=\"text-sm font-semibold mb-4\">Widget Settings</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"metric-labels\">Show Metric Labels</Label>\n                    <Switch\n                      id=\"metric-labels\"\n                      checked={preferences.showMetricLabels}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'showMetricLabels', checked)}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"widgetDensity\">Widget Density</Label>\n                    <Select\n                      value={preferences.widgetDensity}\n                      onValueChange={(value) => handlePreferenceChange(null, 'widgetDensity', value)}\n                    >\n                      <SelectTrigger id=\"widgetDensity\">\n                        <SelectValue placeholder=\"Select density\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"compact\">Compact</SelectItem>\n                        <SelectItem value=\"normal\">Normal</SelectItem>\n                        <SelectItem value=\"comfortable\">Comfortable</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Security Tab */}\n        <TabsContent value=\"security\" className=\"space-y-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <ShieldCheckIcon className=\"w-5 h-5 mr-2\" />\n                Security & Privacy\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {/* Security Options */}\n              <div>\n                <h3 className=\"text-sm font-semibold mb-4\">Security Options</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <KeyIcon className=\"w-5 h-5 text-gray-500\" />\n                      <Label htmlFor=\"two-factor\">Two-Factor Authentication</Label>\n                    </div>\n                    <Switch\n                      id=\"two-factor\"\n                      checked={preferences.twoFactorAuth}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'twoFactorAuth', checked)}\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"sessionTimeout\">Session Timeout</Label>\n                    <Select\n                      value={preferences.sessionTimeout}\n                      onValueChange={(value) => handlePreferenceChange(null, 'sessionTimeout', value)}\n                    >\n                      <SelectTrigger id=\"sessionTimeout\">\n                        <SelectValue placeholder=\"Select timeout\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"15\">15 minutes</SelectItem>\n                        <SelectItem value=\"30\">30 minutes</SelectItem>\n                        <SelectItem value=\"60\">1 hour</SelectItem>\n                        <SelectItem value=\"240\">4 hours</SelectItem>\n                        <SelectItem value=\"never\">Never</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"password-change\">Require Password Change Every 90 Days</Label>\n                    <Switch\n                      id=\"password-change\"\n                      checked={preferences.requirePasswordChange}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'requirePasswordChange', checked)}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Privacy Options */}\n              <div>\n                <h3 className=\"text-sm font-semibold mb-4\">Privacy Options</h3>\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"data-sharing\">Allow Data Sharing for Analytics</Label>\n                    <Switch\n                      id=\"data-sharing\"\n                      checked={preferences.dataSharing}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'dataSharing', checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"analytics-tracking\">Analytics Tracking</Label>\n                    <Switch\n                      id=\"analytics-tracking\"\n                      checked={preferences.analyticsTracking}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'analyticsTracking', checked)}\n                    />\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <Label htmlFor=\"activity-log\">Show Activity Log</Label>\n                    <Switch\n                      id=\"activity-log\"\n                      checked={preferences.showActivityLog}\n                      onCheckedChange={(checked) => handlePreferenceChange(null, 'showActivityLog', checked)}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              {/* Recent Activity */}\n              <div>\n                <h3 className=\"text-sm font-semibold mb-4\">Recent Activity</h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between p-2 rounded bg-gray-50 dark:bg-gray-800\">\n                    <span>Last login</span>\n                    <span className=\"text-gray-600 dark:text-gray-400\">Today at 9:00 AM</span>\n                  </div>\n                  <div className=\"flex justify-between p-2 rounded bg-gray-50 dark:bg-gray-800\">\n                    <span>Password changed</span>\n                    <span className=\"text-gray-600 dark:text-gray-400\">30 days ago</span>\n                  </div>\n                  <div className=\"flex justify-between p-2 rounded bg-gray-50 dark:bg-gray-800\">\n                    <span>Preferences updated</span>\n                    <span className=\"text-gray-600 dark:text-gray-400\">Just now</span>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n};\n\nexport default UserPreferences;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\WhatIf.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\WorkingCapital.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Icon' is defined but never used.",
        "line": 53,
        "column": 52,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 53,
        "endColumn": 56,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [1199, 1211], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "﻿import { useState, useMemo } from 'react'\nimport {\n  ArrowPathIcon,\n  BanknotesIcon,\n  ArrowTrendingDownIcon,\n  ArrowTrendingUpIcon,\n  ChartPieIcon,\n  ExclamationTriangleIcon,\n} from '@heroicons/react/24/outline'\nimport { useWorkingCapitalData } from '../hooks/useWorkingCapitalData'\n\nfunction formatCurrency(value) {\n  if (value === null || value === undefined) {\n    return '--'\n  }\n\n  return new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n    maximumFractionDigits: 0,\n  }).format(value)\n}\n\nfunction formatNumber(value, digits = 1) {\n  if (value === null || value === undefined) {\n    return '--'\n  }\n\n  return Number(value).toFixed(digits)\n}\n\nfunction TrendBadge({ value }) {\n  if (value === null || value === undefined) {\n    return null\n  }\n\n  const isPositive = value >= 0\n\n  return (\n    <span\n      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${\n        isPositive\n          ? 'bg-emerald-100 text-emerald-700'\n          : 'bg-rose-100 text-rose-700'\n      }`}\n    >\n      {isPositive ? '▲' : '▼'} {Math.abs(value).toFixed(1)}%\n    </span>\n  )\n}\n\nfunction SummaryCard({ title, value, change, icon: Icon, description }) {\n  return (\n    <div className=\"rounded-lg border border-slate-200 bg-white p-5 shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <p className=\"text-sm font-medium text-slate-500 dark:text-slate-400\">{title}</p>\n          <p className=\"mt-2 text-3xl font-semibold text-slate-900 dark:text-white\">{value}</p>\n        </div>\n        <div className=\"rounded-full bg-blue-50 p-3 text-blue-600 dark:bg-blue-900/20 dark:text-blue-300\">\n          <Icon className=\"h-6 w-6\" aria-hidden=\"true\" />\n        </div>\n      </div>\n      <div className=\"mt-4 flex items-center justify-between\">\n        <TrendBadge value={change} />\n        {description && <p className=\"text-xs text-slate-500 dark:text-slate-400\">{description}</p>}\n      </div>\n    </div>\n  )\n}\n\nfunction AlertPanel({ alerts }) {\n  if (!alerts || alerts.length === 0) {\n    return null\n  }\n\n  return (\n    <section className=\"space-y-3\">\n      {alerts.map((alert) => (\n        <article\n          key={alert.id}\n          className={`flex items-start gap-3 rounded-lg border p-4 shadow-sm ${\n            alert.severity === 'critical'\n              ? 'border-rose-200 bg-rose-50 dark:border-rose-900/40 dark:bg-rose-950/40'\n              : alert.severity === 'warning'\n              ? 'border-amber-200 bg-amber-50 dark:border-amber-900/40 dark:bg-amber-950/40'\n              : 'border-blue-200 bg-blue-50 dark:border-blue-900/40 dark:bg-blue-950/40'\n          }`}\n        >\n          <ExclamationTriangleIcon className=\"h-5 w-5 flex-shrink-0 text-amber-500\" aria-hidden=\"true\" />\n          <div>\n            <h3 className=\"text-sm font-semibold text-slate-900 dark:text-white\">{alert.title}</h3>\n            <p className=\"mt-1 text-sm text-slate-600 dark:text-slate-300\">{alert.description}</p>\n            {alert.action && (\n              <p className=\"mt-2 text-xs font-medium text-blue-600 dark:text-blue-300\">{alert.action}</p>\n            )}\n          </div>\n        </article>\n      ))}\n    </section>\n  )\n}\n\nfunction DataBlock({ label, value, help }) {\n  return (\n    <div className=\"rounded-lg border border-slate-200 bg-white p-4 shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n      <p className=\"text-xs uppercase tracking-wide text-slate-500 dark:text-slate-400\">{label}</p>\n      <p className=\"mt-2 text-xl font-semibold text-slate-900 dark:text-white\">{value}</p>\n      {help && <p className=\"mt-1 text-xs text-slate-500 dark:text-slate-400\">{help}</p>}\n    </div>\n  )\n}\n\nfunction CashFlowTable({ insight }) {\n  if (!insight || insight.series.length === 0) {\n    return (\n      <div className=\"rounded-lg border border-slate-200 bg-white p-6 text-sm text-slate-500 shadow-sm dark:border-slate-800 dark:bg-slate-900 dark:text-slate-300\">\n        No cash flow entries are available for the selected period.\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"overflow-hidden rounded-lg border border-slate-200 bg-white shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n      <div className=\"overflow-x-auto\">\n        <table className=\"min-w-full divide-y divide-slate-200 text-sm dark:divide-slate-800\">\n          <thead className=\"bg-slate-50 dark:bg-slate-800\">\n            <tr>\n              <th scope=\"col\" className=\"px-4 py-2 text-left font-semibold text-slate-600 dark:text-slate-300\">Date</th>\n              <th scope=\"col\" className=\"px-4 py-2 text-right font-semibold text-slate-600 dark:text-slate-300\">Operating</th>\n              <th scope=\"col\" className=\"px-4 py-2 text-right font-semibold text-slate-600 dark:text-slate-300\">Investing</th>\n              <th scope=\"col\" className=\"px-4 py-2 text-right font-semibold text-slate-600 dark:text-slate-300\">Financing</th>\n              <th scope=\"col\" className=\"px-4 py-2 text-right font-semibold text-slate-600 dark:text-slate-300\">Net</th>\n            </tr>\n          </thead>\n          <tbody className=\"divide-y divide-slate-100 dark:divide-slate-800\">\n            {insight.series.slice(-30).map((row) => (\n              <tr key={row.date}>\n                <td className=\"px-4 py-2 text-slate-600 dark:text-slate-300\">\n                  {new Date(row.date).toLocaleDateString()}\n                </td>\n                <td className=\"px-4 py-2 text-right text-emerald-600 dark:text-emerald-400\">{formatCurrency(row.operating)}</td>\n                <td className=\"px-4 py-2 text-right text-amber-600 dark:text-amber-400\">{formatCurrency(row.investing)}</td>\n                <td className=\"px-4 py-2 text-right text-blue-600 dark:text-blue-400\">{formatCurrency(row.financing)}</td>\n                <td\n                  className={`px-4 py-2 text-right ${\n                    row.net >= 0 ? 'text-emerald-600 dark:text-emerald-400' : 'text-rose-600 dark:text-rose-400'\n                  }`}\n                >\n                  {formatCurrency(row.net)}\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  )\n}\n\nconst PERIOD_OPTIONS = [\n  { value: 'current', label: 'Current snapshot' },\n  { value: 'mtd', label: 'Month to date' },\n  { value: 'qtd', label: 'Quarter to date' },\n  { value: 'ytd', label: 'Year to date' },\n]\n\nexport default function WorkingCapitalPage() {\n  const [period, setPeriod] = useState('current')\n  const { loading, error, data, refetch } = useWorkingCapitalData(period)\n\n  const totals = useMemo(() => {\n    if (!data?.cashFlow?.totals) {\n      return null\n    }\n\n    return {\n      operating: data.cashFlow.totals.operating,\n      investing: data.cashFlow.totals.investing,\n      financing: data.cashFlow.totals.financing,\n      net: data.cashFlow.totals.net,\n    }\n  }, [data])\n\n  return (\n    <div className=\"min-h-screen bg-slate-100 py-8 dark:bg-slate-950\">\n      <div className=\"mx-auto max-w-7xl px-4 sm:px-6 lg:px-8\">\n        <header className=\"flex flex-col gap-4 border-b border-slate-200 pb-6 dark:border-slate-800\">\n          <div className=\"flex flex-wrap items-center justify-between gap-4\">\n            <div>\n              <h1 className=\"text-3xl font-semibold text-slate-900 dark:text-white\">Working Capital Command Centre</h1>\n              <p className=\"mt-2 text-sm text-slate-600 dark:text-slate-400\">\n                Real-time visibility across cash conversion, liquidity runway, and cash flow operations.\n              </p>\n            </div>\n            <div className=\"flex items-center gap-3\">\n              <select\n                value={period}\n                onChange={(event) => setPeriod(event.target.value)}\n                className=\"rounded-md border border-slate-300 bg-white px-3 py-2 text-sm font-medium text-slate-700 shadow-sm focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-slate-700 dark:bg-slate-900 dark:text-slate-200\"\n              >\n                {PERIOD_OPTIONS.map((option) => (\n                  <option key={option.value} value={option.value}>\n                    {option.label}\n                  </option>\n                ))}\n              </select>\n              <button\n                type=\"button\"\n                onClick={refetch}\n                className=\"inline-flex items-center gap-2 rounded-md border border-blue-500 px-3 py-2 text-sm font-medium text-blue-600 hover:bg-blue-50 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:border-blue-400 dark:text-blue-300 dark:hover:bg-blue-400/10\"\n              >\n                <ArrowPathIcon className=\"h-4 w-4\" aria-hidden=\"true\" />\n                Refresh\n              </button>\n            </div>\n          </div>\n          {data?.dataSource && (\n            <div className=\"text-xs text-slate-500 dark:text-slate-400\">\n              Data sources: working capital ({data.dataSource.workingCapital}), cash flow ({data.dataSource.cashFlow}).\n            </div>\n          )}\n        </header>\n\n        {loading && (\n          <div className=\"mt-12 rounded-lg border border-slate-200 bg-white p-6 text-center shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n            <ArrowPathIcon className=\"mx-auto h-6 w-6 animate-spin text-blue-600\" aria-hidden=\"true\" />\n            <p className=\"mt-3 text-sm text-slate-600 dark:text-slate-300\">Loading live working capital metrics…</p>\n          </div>\n        )}\n\n        {error && (\n          <div className=\"mt-12 rounded-lg border border-rose-200 bg-rose-50 p-6 shadow-sm dark:border-rose-900/40 dark:bg-rose-950/40\">\n            <h2 className=\"text-base font-semibold text-rose-700 dark:text-rose-300\">Unable to load working capital data</h2>\n            <p className=\"mt-2 text-sm text-rose-600 dark:text-rose-300\">{error.message}</p>\n          </div>\n        )}\n\n        {!loading && !error && data && (\n          <div className=\"mt-10 space-y-10\">\n            <section>\n              <h2 className=\"text-lg font-semibold text-slate-900 dark:text-white\">Liquidity headline metrics</h2>\n              <p className=\"text-sm text-slate-500 dark:text-slate-400\">Comparison vs previous period where available.</p>\n              <div className=\"mt-4 grid gap-5 md:grid-cols-2 xl:grid-cols-4\">\n                <SummaryCard\n                  title=\"Working capital\"\n                  value={formatCurrency(data.summary?.workingCapital)}\n                  change={data.summary?.workingCapitalChange}\n                  icon={BanknotesIcon}\n                />\n                <SummaryCard\n                  title=\"Cash conversion cycle\"\n                  value={data.summary?.cashConversionCycle !== null ? `${Math.round(data.summary.cashConversionCycle)} days` : '--'}\n                  change={data.summary?.cccChange}\n                  icon={ChartPieIcon}\n                  description=\"DSO + DIO – DPO\"\n                />\n                <SummaryCard\n                  title=\"Current ratio\"\n                  value={formatNumber(data.summary?.currentRatio, 2)}\n                  change={data.summary?.currentRatioChange}\n                  icon={ArrowTrendingUpIcon}\n                />\n                <SummaryCard\n                  title=\"Quick ratio\"\n                  value={formatNumber(data.summary?.quickRatio, 2)}\n                  change={data.summary?.quickRatioChange}\n                  icon={ArrowTrendingDownIcon}\n                />\n              </div>\n            </section>\n\n            <section className=\"grid gap-6 lg:grid-cols-2\">\n              <div>\n                <h3 className=\"text-base font-semibold text-slate-900 dark:text-white\">Active alerts</h3>\n                <AlertPanel alerts={data.alerts} />\n                {(!data.alerts || data.alerts.length === 0) && (\n                  <div className=\"mt-3 rounded-lg border border-slate-200 bg-white p-4 text-sm text-slate-500 shadow-sm dark:border-slate-800 dark:bg-slate-900 dark:text-slate-300\">\n                    No material risk indicators detected for the selected period.\n                  </div>\n                )}\n              </div>\n\n              <div className=\"grid gap-4\">\n                <DataBlock\n                  label=\"Accounts receivable\"\n                  value={formatCurrency(data.receivables.total)}\n                  help={data.receivables.dso ? `DSO ${Math.round(data.receivables.dso)} days` : undefined}\n                />\n                <DataBlock\n                  label=\"Accounts payable\"\n                  value={formatCurrency(data.payables.total)}\n                  help={data.payables.dpo ? `DPO ${Math.round(data.payables.dpo)} days` : undefined}\n                />\n                <DataBlock\n                  label=\"Inventory on hand\"\n                  value={formatCurrency(data.inventory.total)}\n                  help={data.inventory.dio ? `DIO ${Math.round(data.inventory.dio)} days` : undefined}\n                />\n              </div>\n            </section>\n\n            <section className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <h3 className=\"text-base font-semibold text-slate-900 dark:text-white\">Cash flow history</h3>\n                  <p className=\"text-sm text-slate-500 dark:text-slate-400\">Detailed operating, investing, and financing movements.</p>\n                </div>\n                {totals && (\n                  <div className=\"flex flex-wrap items-center gap-4 text-sm\">\n                    <span className=\"font-medium text-emerald-600 dark:text-emerald-400\">Operating {formatCurrency(totals.operating)}</span>\n                    <span className=\"font-medium text-amber-600 dark:text-amber-400\">Investing {formatCurrency(totals.investing)}</span>\n                    <span className=\"font-medium text-blue-600 dark:text-blue-400\">Financing {formatCurrency(totals.financing)}</span>\n                    <span\n                      className={`font-semibold ${\n                        totals.net >= 0 ? 'text-emerald-600 dark:text-emerald-400' : 'text-rose-600 dark:text-rose-400'\n                      }`}\n                    >\n                      Net {formatCurrency(totals.net)}\n                    </span>\n                  </div>\n                )}\n              </div>\n              <CashFlowTable insight={data.cashFlow} />\n            </section>\n\n            <section>\n              <h3 className=\"text-base font-semibold text-slate-900 dark:text-white\">Working capital ledger</h3>\n              <div className=\"mt-3 overflow-hidden rounded-lg border border-slate-200 bg-white shadow-sm dark:border-slate-800 dark:bg-slate-900\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"min-w-full divide-y divide-slate-200 text-sm dark:divide-slate-800\">\n                    <thead className=\"bg-slate-50 dark:bg-slate-800\">\n                      <tr>\n                        <th className=\"px-4 py-2 text-left font-semibold text-slate-600 dark:text-slate-300\">Date</th>\n                        <th className=\"px-4 py-2 text-right font-semibold text-slate-600 dark:text-slate-300\">Current assets</th>\n                        <th className=\"px-4 py-2 text-right font-semibold text-slate-600 dark:text-slate-300\">Current liabilities</th>\n                        <th className=\"px-4 py-2 text-right font-semibold text-slate-600 dark:text-slate-300\">Working capital</th>\n                        <th className=\"px-4 py-2 text-right font-semibold text-slate-600 dark:text-slate-300\">CCC</th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-slate-100 dark:divide-slate-800\">\n                      {data.history.slice(0, 12).map((entry) => {\n                        const workingCapital = (entry.currentAssets ?? 0) - (entry.currentLiabilities ?? 0)\n                        return (\n                          <tr key={entry.id}>\n                            <td className=\"px-4 py-2 text-slate-600 dark:text-slate-300\">\n                              {new Date(entry.date).toLocaleDateString()}\n                            </td>\n                            <td className=\"px-4 py-2 text-right text-slate-700 dark:text-slate-200\">{formatCurrency(entry.currentAssets ?? null)}</td>\n                            <td className=\"px-4 py-2 text-right text-slate-700 dark:text-slate-200\">{formatCurrency(entry.currentLiabilities ?? null)}</td>\n                            <td className=\"px-4 py-2 text-right font-medium text-slate-900 dark:text-white\">{formatCurrency(workingCapital)}</td>\n                            <td className=\"px-4 py-2 text-right text-slate-600 dark:text-slate-300\">\n                              {entry.cashConversionCycle !== null && entry.cashConversionCycle !== undefined\n                                ? `${Math.round(entry.cashConversionCycle)} days`\n                                : '--'}\n                            </td>\n                          </tr>\n                        )\n                      })}\n                    </tbody>\n                  </table>\n                </div>\n              </div>\n            </section>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\WorkingCapitalDashboard.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'user' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 66,
        "column": 23,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 66,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "user" },
            "fix": { "range": [1484, 1490], "text": "" },
            "desc": "Remove unused variable 'user'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'clerkUser' is assigned a value but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 67,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 67,
        "endColumn": 26,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "clerkUser" },
            "fix": { "range": [1508, 1546], "text": "" },
            "desc": "Remove unused variable 'clerkUser'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * ENTERPRISE WORKING CAPITAL DASHBOARD\n * \n * World-class working capital and cash flow management dashboard\n * Integrates real data from P&L, Sales forecasts, and MCP server\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useAuth, useUser } from '@clerk/clerk-react';\nimport {\n  ChartBarIcon,\n  CubeIcon,\n  CogIcon,\n  BanknotesIcon,\n  TruckIcon,\n  BeakerIcon,\n  ChartPieIcon,\n  DocumentChartBarIcon,\n  Cog6ToothIcon,\n  UserGroupIcon,\n  ArrowUpIcon,\n  ArrowDownIcon,\n  ExclamationTriangleIcon,\n  CheckCircleIcon,\n} from '@heroicons/react/24/outline';\n\n// REAL BUSINESS DATA from P&L and Sales Forecasts\nconst REAL_FINANCIAL_DATA = {\n  workingCapital: {\n    current: 170300, // £170.3K from working capital sheet\n    target: 200000,\n    trend: 'increasing',\n    components: {\n      inventory: 85000,\n      receivables: 125000,\n      payables: -39700,\n    }\n  },\n  cashFlow: {\n    operating: 45000,\n    investing: -12000,\n    financing: -8000,\n    net: 25000,\n  },\n  revenue: {\n    fy2024: 1563000, // £1.563M from P&L\n    fy2025: 3170000, // £3.17M from P&L\n    growth: 102.6,\n    monthly: 264167, // £3.17M / 12\n  },\n  kpis: {\n    dso: 45, // Days Sales Outstanding\n    dpo: 30, // Days Payable Outstanding\n    dio: 60, // Days Inventory Outstanding\n    ccc: 75, // Cash Conversion Cycle\n  },\n  forecasts: {\n    q1_2026: 850000,\n    q2_2026: 920000,\n    q3_2026: 980000,\n    q4_2026: 1050000,\n  }\n};\n\nconst WorkingCapitalDashboard = () => {\n  const { isSignedIn, user } = useAuth();\n  const { user: clerkUser } = useUser();\n  const [currentPage, setCurrentPage] = useState('working-capital');\n  const [realTimeData, setRealTimeData] = useState(REAL_FINANCIAL_DATA);\n\n  // Simulate real-time data updates\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setRealTimeData(prev => ({\n        ...prev,\n        workingCapital: {\n          ...prev.workingCapital,\n          current: prev.workingCapital.current + Math.floor(Math.random() * 1000 - 500),\n        },\n        cashFlow: {\n          ...prev.cashFlow,\n          net: prev.cashFlow.net + Math.floor(Math.random() * 2000 - 1000),\n        }\n      }));\n    }, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Navigation items matching the exact sidebar design\n  const navigationItems = [\n    { id: 'executive', name: 'Executive Dashboard', icon: ChartBarIcon, section: 'OVERVIEW' },\n    { id: 'forecasting', name: 'Demand Forecasting', icon: ChartPieIcon, section: 'PLANNING & ANALYTICS' },\n    { id: 'inventory', name: 'Inventory Management', icon: CubeIcon, section: 'PLANNING & ANALYTICS' },\n    { id: 'production', name: 'Production Tracking', icon: TruckIcon, section: 'PLANNING & ANALYTICS' },\n    { id: 'quality', name: 'Quality Control', icon: BeakerIcon, section: 'PLANNING & ANALYTICS' },\n    { id: 'working-capital', name: 'Working Capital', icon: BanknotesIcon, section: 'FINANCIAL MANAGEMENT' },\n    { id: 'what-if', name: 'What-If Analysis', icon: DocumentChartBarIcon, section: 'FINANCIAL MANAGEMENT' },\n    { id: 'financial', name: 'Financial Reports', icon: ChartBarIcon, section: 'FINANCIAL MANAGEMENT' },\n    { id: 'data-import', name: 'Data Import', icon: DocumentChartBarIcon, section: 'OPERATIONS' },\n    { id: 'admin', name: 'Admin Panel', icon: Cog6ToothIcon, section: 'OPERATIONS' },\n  ];\n\n  const renderWorkingCapitalPage = () => (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">Working Capital Management</h1>\n            <p className=\"text-gray-600 mt-1\">Real-time cash flow analysis and optimization</p>\n          </div>\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-3 h-3 bg-green-500 rounded-full animate-pulse\"></div>\n              <span className=\"text-sm text-gray-600\">Live Data Connected</span>\n            </div>\n            <div className=\"text-right\">\n              <p className=\"text-sm text-gray-500\">Last Updated</p>\n              <p className=\"text-sm font-medium\">{new Date().toLocaleTimeString()}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Key Working Capital Metrics */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Current Working Capital</p>\n              <p className=\"text-3xl font-bold text-gray-900\">\n                £{(realTimeData.workingCapital.current / 1000).toFixed(1)}K\n              </p>\n            </div>\n            <div className=\"flex items-center text-green-600\">\n              <ArrowUpIcon className=\"w-4 h-4 mr-1\" />\n              <span className=\"text-sm font-medium\">+8.5%</span>\n            </div>\n          </div>\n          <div className=\"mt-4\">\n            <div className=\"w-full bg-gray-200 rounded-full h-2\">\n              <div \n                className=\"bg-green-500 h-2 rounded-full\" \n                style={{ width: `${(realTimeData.workingCapital.current / realTimeData.workingCapital.target) * 100}%` }}\n              ></div>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-1\">Target: £{(realTimeData.workingCapital.target / 1000).toFixed(0)}K</p>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Net Cash Flow</p>\n              <p className=\"text-3xl font-bold text-gray-900\">\n                £{(realTimeData.cashFlow.net / 1000).toFixed(1)}K\n              </p>\n            </div>\n            <div className=\"flex items-center text-blue-600\">\n              <ArrowUpIcon className=\"w-4 h-4 mr-1\" />\n              <span className=\"text-sm font-medium\">+12.3%</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-4\">Monthly average</p>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Cash Conversion Cycle</p>\n              <p className=\"text-3xl font-bold text-gray-900\">{realTimeData.kpis.ccc} days</p>\n            </div>\n            <div className=\"flex items-center text-orange-600\">\n              <ExclamationTriangleIcon className=\"w-4 h-4 mr-1\" />\n              <span className=\"text-sm font-medium\">Optimize</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-4\">Industry avg: 65 days</p>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Revenue Growth</p>\n              <p className=\"text-3xl font-bold text-gray-900\">+{realTimeData.revenue.growth.toFixed(1)}%</p>\n            </div>\n            <div className=\"flex items-center text-green-600\">\n              <CheckCircleIcon className=\"w-4 h-4 mr-1\" />\n              <span className=\"text-sm font-medium\">Excellent</span>\n            </div>\n          </div>\n          <p className=\"text-xs text-gray-500 mt-4\">FY2025 vs FY2024</p>\n        </div>\n      </div>\n\n      {/* Working Capital Components */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Working Capital Components</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between p-4 bg-green-50 rounded-lg\">\n              <div>\n                <p className=\"font-medium text-green-800\">Inventory</p>\n                <p className=\"text-sm text-green-600\">Current stock value</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-xl font-bold text-green-900\">\n                  £{(realTimeData.workingCapital.components.inventory / 1000).toFixed(0)}K\n                </p>\n                <p className=\"text-sm text-green-600\">+5.2%</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-blue-50 rounded-lg\">\n              <div>\n                <p className=\"font-medium text-blue-800\">Accounts Receivable</p>\n                <p className=\"text-sm text-blue-600\">Outstanding invoices</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-xl font-bold text-blue-900\">\n                  £{(realTimeData.workingCapital.components.receivables / 1000).toFixed(0)}K\n                </p>\n                <p className=\"text-sm text-blue-600\">+8.1%</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between p-4 bg-red-50 rounded-lg\">\n              <div>\n                <p className=\"font-medium text-red-800\">Accounts Payable</p>\n                <p className=\"text-sm text-red-600\">Outstanding payments</p>\n              </div>\n              <div className=\"text-right\">\n                <p className=\"text-xl font-bold text-red-900\">\n                  £{Math.abs(realTimeData.workingCapital.components.payables / 1000).toFixed(1)}K\n                </p>\n                <p className=\"text-sm text-red-600\">-2.3%</p>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Cash Flow Analysis</h3>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Operating Cash Flow</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-3\">\n                  <div className=\"bg-green-500 h-2 rounded-full\" style={{ width: '75%' }}></div>\n                </div>\n                <span className=\"text-sm font-medium\">£{(realTimeData.cashFlow.operating / 1000).toFixed(0)}K</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Investing Cash Flow</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-3\">\n                  <div className=\"bg-red-500 h-2 rounded-full\" style={{ width: '25%' }}></div>\n                </div>\n                <span className=\"text-sm font-medium\">£{(realTimeData.cashFlow.investing / 1000).toFixed(0)}K</span>\n              </div>\n            </div>\n\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-sm text-gray-600\">Financing Cash Flow</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-3\">\n                  <div className=\"bg-yellow-500 h-2 rounded-full\" style={{ width: '20%' }}></div>\n                </div>\n                <span className=\"text-sm font-medium\">£{(realTimeData.cashFlow.financing / 1000).toFixed(0)}K</span>\n              </div>\n            </div>\n\n            <div className=\"border-t pt-4\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-base font-medium text-gray-900\">Net Cash Flow</span>\n                <span className=\"text-lg font-bold text-green-600\">\n                  £{(realTimeData.cashFlow.net / 1000).toFixed(0)}K\n                </span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Revenue Forecast Chart */}\n      <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Revenue Forecast 2026</h3>\n        <div className=\"h-64 flex items-end justify-center space-x-8\">\n          {Object.entries(realTimeData.forecasts).map(([quarter, value], index) => (\n            <div key={quarter} className=\"flex flex-col items-center\">\n              <div \n                className={`w-20 rounded-t ${\n                  index === 0 ? 'bg-blue-500' : \n                  index === 1 ? 'bg-green-500' : \n                  index === 2 ? 'bg-purple-500' : 'bg-orange-500'\n                }`}\n                style={{ height: `${(value / 1200000) * 200}px` }}\n              ></div>\n              <span className=\"text-sm text-gray-600 mt-2\">{quarter.replace('_', ' ').toUpperCase()}</span>\n              <span className=\"text-xs text-gray-500\">£{(value / 1000).toFixed(0)}K</span>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Key Performance Indicators */}\n      <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Key Performance Indicators</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-blue-600\">{realTimeData.kpis.dso}</p>\n            <p className=\"text-sm text-gray-600\">Days Sales Outstanding</p>\n            <p className=\"text-xs text-gray-500 mt-1\">Target: 30 days</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-green-600\">{realTimeData.kpis.dpo}</p>\n            <p className=\"text-sm text-gray-600\">Days Payable Outstanding</p>\n            <p className=\"text-xs text-gray-500 mt-1\">Target: 45 days</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-orange-600\">{realTimeData.kpis.dio}</p>\n            <p className=\"text-sm text-gray-600\">Days Inventory Outstanding</p>\n            <p className=\"text-xs text-gray-500 mt-1\">Target: 45 days</p>\n          </div>\n          <div className=\"text-center\">\n            <p className=\"text-2xl font-bold text-purple-600\">{realTimeData.kpis.ccc}</p>\n            <p className=\"text-sm text-gray-600\">Cash Conversion Cycle</p>\n            <p className=\"text-xs text-gray-500 mt-1\">Target: 60 days</p>\n          </div>\n        </div>\n      </div>\n\n      {/* Action Items */}\n      <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n        <h3 className=\"text-lg font-semibold text-gray-900 mb-4\">Recommended Actions</h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div className=\"p-4 bg-yellow-50 rounded-lg border border-yellow-200\">\n            <div className=\"flex items-center mb-2\">\n              <ExclamationTriangleIcon className=\"w-5 h-5 text-yellow-600 mr-2\" />\n              <h4 className=\"font-medium text-yellow-800\">Optimize Inventory</h4>\n            </div>\n            <p className=\"text-sm text-yellow-700\">Reduce inventory levels by 15% to improve cash flow</p>\n            <button className=\"mt-2 text-xs bg-yellow-600 text-white px-3 py-1 rounded hover:bg-yellow-700\">\n              View Details\n            </button>\n          </div>\n\n          <div className=\"p-4 bg-blue-50 rounded-lg border border-blue-200\">\n            <div className=\"flex items-center mb-2\">\n              <ChartBarIcon className=\"w-5 h-5 text-blue-600 mr-2\" />\n              <h4 className=\"font-medium text-blue-800\">Accelerate Collections</h4>\n            </div>\n            <p className=\"text-sm text-blue-700\">Implement automated payment reminders</p>\n            <button className=\"mt-2 text-xs bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700\">\n              Implement\n            </button>\n          </div>\n\n          <div className=\"p-4 bg-green-50 rounded-lg border border-green-200\">\n            <div className=\"flex items-center mb-2\">\n              <CheckCircleIcon className=\"w-5 h-5 text-green-600 mr-2\" />\n              <h4 className=\"font-medium text-green-800\">Extend Payment Terms</h4>\n            </div>\n            <p className=\"text-sm text-green-700\">Negotiate 60-day terms with key suppliers</p>\n            <button className=\"mt-2 text-xs bg-green-600 text-white px-3 py-1 rounded hover:bg-green-700\">\n              Schedule\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderCurrentPage = () => {\n    switch (currentPage) {\n      case 'working-capital':\n        return renderWorkingCapitalPage();\n      case 'executive':\n        return (\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">Executive Dashboard</h2>\n            <p className=\"text-gray-600\">Real-time manufacturing operations overview</p>\n          </div>\n        );\n      default:\n        return (\n          <div className=\"bg-white rounded-lg shadow-sm border p-6\">\n            <h2 className=\"text-xl font-bold text-gray-900 mb-4\">\n              {navigationItems.find(item => item.id === currentPage)?.name}\n            </h2>\n            <p className=\"text-gray-600\">This section is under development.</p>\n          </div>\n        );\n    }\n  };\n\n  if (!isSignedIn) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">Authentication Required</h1>\n          <p className=\"text-gray-600\">Please sign in to access the dashboard.</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Group navigation items by section\n  const groupedNavigation = navigationItems.reduce((acc, item) => {\n    if (!acc[item.section]) {\n      acc[item.section] = [];\n    }\n    acc[item.section].push(item);\n    return acc;\n  }, {});\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      {/* Sidebar - Exact match to the provided design */}\n      <div className=\"w-64 bg-gray-900 text-white flex flex-col\">\n        {/* Logo */}\n        <div className=\"p-6\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"w-8 h-8 bg-blue-600 rounded-lg flex items-center justify-center\">\n              <span className=\"text-white font-bold text-sm\">S</span>\n            </div>\n            <div>\n              <h1 className=\"text-lg font-bold\">Sentia</h1>\n              <p className=\"text-sm text-gray-400\">Manufacturing</p>\n              <p className=\"text-xs text-gray-500\">Enterprise Dashboard</p>\n            </div>\n          </div>\n        </div>\n\n        {/* Navigation */}\n        <nav className=\"flex-1 px-4\">\n          <div className=\"space-y-1\">\n            {Object.entries(groupedNavigation).map(([section, items]) => (\n              <div key={section}>\n                <div className=\"text-xs font-semibold text-gray-400 uppercase tracking-wider mb-3 mt-6 first:mt-0\">\n                  {section}\n                </div>\n                {items.map((item) => (\n                  <button\n                    key={item.id}\n                    onClick={() => setCurrentPage(item.id)}\n                    className={`w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors ${\n                      currentPage === item.id \n                        ? 'bg-blue-600 text-white' \n                        : 'text-gray-300 hover:bg-gray-800 hover:text-white'\n                    }`}\n                  >\n                    <item.icon className=\"w-5 h-5 mr-3\" />\n                    {item.name}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </nav>\n      </div>\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col\">\n        <main className=\"flex-1 p-6\">\n          {renderCurrentPage()}\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default WorkingCapitalDashboard;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\WorkingCapitalEnterprise.jsx",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'useMutation' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 8,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 8,
        "endColumn": 31,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "useMutation" },
            "fix": { "range": [234, 247], "text": "" },
            "desc": "Remove unused variable 'useMutation'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'subDays' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 28,
        "column": 18,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 25,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "subDays" },
            "fix": { "range": [784, 793], "text": "" },
            "desc": "Remove unused variable 'subDays'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'addDays' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 28,
        "column": 27,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 34,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "addDays" },
            "fix": { "range": [793, 802], "text": "" },
            "desc": "Remove unused variable 'addDays'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'startOfMonth' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 28,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 48,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "startOfMonth" },
            "fix": { "range": [802, 816], "text": "" },
            "desc": "Remove unused variable 'startOfMonth'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'endOfMonth' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 28,
        "column": 50,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 28,
        "endColumn": 60,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "endOfMonth" },
            "fix": { "range": [816, 828], "text": "" },
            "desc": "Remove unused variable 'endOfMonth'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'Icon' is defined but never used.",
        "line": 114,
        "column": 58,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 114,
        "endColumn": 62,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "Icon" },
            "fix": { "range": [3363, 3375], "text": "" },
            "desc": "Remove unused variable 'Icon'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Enterprise Working Capital Dashboard\n * Real-time cash flow management with live API data\n * NO MOCK DATA - Production-ready with real financial metrics\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport {\n  BanknotesIcon,\n  TrendingUpIcon,\n  TrendingDownIcon,\n  ExclamationTriangleIcon,\n  ArrowPathIcon,\n  ChartBarIcon,\n  CalculatorIcon,\n  DocumentTextIcon,\n  CurrencyDollarIcon,\n  ClockIcon,\n  CheckCircleIcon,\n  XCircleIcon\n} from '@heroicons/react/24/outline';\nimport {\n  LineChart, Line, BarChart, Bar, AreaChart, Area, PieChart, Pie,\n  Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer,\n  RadialBarChart, RadialBar, ComposedChart, Scatter\n} from 'recharts';\nimport { format, subDays, addDays, startOfMonth, endOfMonth } from 'date-fns';\n\n// API Service for real data\nconst apiService = {\n  // Fetch real working capital metrics from MCP server\n  getWorkingCapitalMetrics: async () => {\n    const response = await fetch('/api/working-capital/metrics', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    if (!response.ok) throw new Error('Failed to fetch metrics');\n    return response.json();\n  },\n\n  // Get cash flow data from Xero integration\n  getCashFlowData: async (period = '30d') => {\n    const response = await fetch(`/api/xero/cashflow?period=${period}`, {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n      }\n    });\n    if (!response.ok) throw new Error('Failed to fetch cash flow data');\n    return response.json();\n  },\n\n  // Get accounts receivable/payable from live systems\n  getARAPData: async () => {\n    const response = await fetch('/api/finance/ar-ap', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n      }\n    });\n    if (!response.ok) throw new Error('Failed to fetch AR/AP data');\n    return response.json();\n  },\n\n  // Get inventory turnover metrics\n  getInventoryMetrics: async () => {\n    const response = await fetch('/api/inventory/turnover', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n      }\n    });\n    if (!response.ok) throw new Error('Failed to fetch inventory metrics');\n    return response.json();\n  },\n\n  // Get AI-driven forecasts from MCP server\n  getAIForecasts: async () => {\n    const response = await fetch('/api/mcp/forecasts/cashflow', {\n      headers: {\n        'Authorization': `Bearer ${localStorage.getItem('auth_token')}`\n      }\n    });\n    if (!response.ok) throw new Error('Failed to fetch AI forecasts');\n    return response.json();\n  }\n};\n\n// Real-time WebSocket connection for live updates\nconst useRealtimeData = (channel) => {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const ws = new WebSocket(`wss://${window.location.host}/ws`);\n\n    ws.onopen = () => {\n      ws.send(JSON.stringify({ subscribe: channel }));\n    };\n\n    ws.onmessage = (event) => {\n      const message = JSON.parse(event.data);\n      if (message.channel === channel) {\n        setData(message.data);\n      }\n    };\n\n    return () => ws.close();\n  }, [channel]);\n\n  return data;\n};\n\n// Key Metric Card Component\nconst MetricCard = ({ title, value, change, trend, icon: Icon, status, details }) => {\n  const getTrendColor = () => {\n    if (status === 'critical') return 'text-red-500';\n    if (status === 'warning') return 'text-yellow-500';\n    if (trend === 'up') return 'text-green-500';\n    if (trend === 'down') return 'text-red-500';\n    return 'text-gray-500';\n  };\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg border border-gray-200 dark:border-gray-700\">\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm font-medium text-gray-600 dark:text-gray-400\">{title}</p>\n          <p className=\"mt-2 text-3xl font-bold text-gray-900 dark:text-white\">{value}</p>\n          <div className=\"mt-2 flex items-center space-x-2\">\n            <span className={`text-sm font-medium ${getTrendColor()}`}>\n              {trend === 'up' ? <TrendingUpIcon className=\"h-4 w-4 inline\" /> : <TrendingDownIcon className=\"h-4 w-4 inline\" />}\n              {change}\n            </span>\n            {details && <span className=\"text-xs text-gray-500\">{details}</span>}\n          </div>\n        </div>\n        <div className={`p-3 rounded-lg ${\n          status === 'critical' ? 'bg-red-100 dark:bg-red-900/20' :\n          status === 'warning' ? 'bg-yellow-100 dark:bg-yellow-900/20' :\n          'bg-blue-100 dark:bg-blue-900/20'\n        }`}>\n          <Icon className={`h-6 w-6 ${\n            status === 'critical' ? 'text-red-600' :\n            status === 'warning' ? 'text-yellow-600' :\n            'text-blue-600'\n          }`} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Cash Conversion Cycle Component\nconst CashConversionCycle = ({ data }) => {\n  if (!data) return <div>Loading CCC data...</div>;\n\n  const { daysInventory, daysReceivables, daysPayables, ccc } = data;\n\n  const cycleData = [\n    { name: 'Days Inventory', value: daysInventory, fill: '#3b82f6' },\n    { name: 'Days Receivables', value: daysReceivables, fill: '#10b981' },\n    { name: 'Days Payables', value: -daysPayables, fill: '#ef4444' },\n  ];\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n        Cash Conversion Cycle: {ccc} Days\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <ComposedChart data={cycleData}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n          <XAxis dataKey=\"name\" tick={{ fontSize: 12 }} />\n          <YAxis tick={{ fontSize: 12 }} />\n          <Tooltip />\n          <Bar dataKey=\"value\" />\n        </ComposedChart>\n      </ResponsiveContainer>\n      <div className=\"mt-4 grid grid-cols-3 gap-4\">\n        <div>\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">Inventory</p>\n          <p className=\"text-lg font-bold text-blue-600\">{daysInventory} days</p>\n        </div>\n        <div>\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">Receivables</p>\n          <p className=\"text-lg font-bold text-green-600\">{daysReceivables} days</p>\n        </div>\n        <div>\n          <p className=\"text-xs text-gray-500 dark:text-gray-400\">Payables</p>\n          <p className=\"text-lg font-bold text-red-600\">{daysPayables} days</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// Cash Flow Forecast Component\nconst CashFlowForecast = ({ historical, forecast }) => {\n  if (!historical || !forecast) return <div>Loading forecast data...</div>;\n\n  const combinedData = [\n    ...historical.map(d => ({ ...d, type: 'actual' })),\n    ...forecast.map(d => ({ ...d, type: 'forecast' }))\n  ];\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white\">\n          90-Day Cash Flow Forecast\n        </h3>\n        <div className=\"flex items-center space-x-4 text-sm\">\n          <span className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-blue-500 rounded-full mr-1\"></div>\n            Actual\n          </span>\n          <span className=\"flex items-center\">\n            <div className=\"w-3 h-3 bg-purple-500 rounded-full mr-1\"></div>\n            Forecast\n          </span>\n        </div>\n      </div>\n      <ResponsiveContainer width=\"100%\" height={350}>\n        <AreaChart data={combinedData}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n          <XAxis\n            dataKey=\"date\"\n            tickFormatter={(date) => format(new Date(date), 'MMM dd')}\n            tick={{ fontSize: 12 }}\n          />\n          <YAxis\n            tickFormatter={(value) => `$${(value / 1000000).toFixed(1)}M`}\n            tick={{ fontSize: 12 }}\n          />\n          <Tooltip\n            formatter={(value) => `$${(value / 1000000).toFixed(2)}M`}\n            labelFormatter={(date) => format(new Date(date), 'MMM dd, yyyy')}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"cashBalance\"\n            stroke=\"#3b82f6\"\n            fill=\"#3b82f6\"\n            fillOpacity={0.3}\n          />\n          <Area\n            type=\"monotone\"\n            dataKey=\"forecastBalance\"\n            stroke=\"#8b5cf6\"\n            fill=\"#8b5cf6\"\n            fillOpacity={0.3}\n            strokeDasharray=\"5 5\"\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\n// Working Capital Breakdown\nconst WorkingCapitalBreakdown = ({ data }) => {\n  if (!data) return <div>Loading breakdown...</div>;\n\n  const pieData = [\n    { name: 'Inventory', value: data.inventory, fill: '#3b82f6' },\n    { name: 'Receivables', value: data.receivables, fill: '#10b981' },\n    { name: 'Cash', value: data.cash, fill: '#f59e0b' },\n    { name: 'Other Current', value: data.otherCurrent, fill: '#8b5cf6' }\n  ];\n\n  return (\n    <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\n      <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n        Working Capital Composition\n      </h3>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <PieChart>\n          <Pie\n            data={pieData}\n            cx=\"50%\"\n            cy=\"50%\"\n            labelLine={false}\n            label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n            outerRadius={100}\n            dataKey=\"value\"\n          >\n            {pieData.map((entry, index) => (\n              <Cell key={`cell-${index}`} fill={entry.fill} />\n            ))}\n          </Pie>\n          <Tooltip formatter={(value) => `$${(value / 1000000).toFixed(2)}M`} />\n        </PieChart>\n      </ResponsiveContainer>\n      <div className=\"mt-4 space-y-2\">\n        {pieData.map((item) => (\n          <div key={item.name} className=\"flex justify-between items-center\">\n            <div className=\"flex items-center\">\n              <div className={`w-3 h-3 rounded-full mr-2`} style={{ backgroundColor: item.fill }}></div>\n              <span className=\"text-sm text-gray-600 dark:text-gray-400\">{item.name}</span>\n            </div>\n            <span className=\"text-sm font-semibold text-gray-900 dark:text-white\">\n              ${(item.value / 1000000).toFixed(2)}M\n            </span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Main Enterprise Working Capital Dashboard\nexport default function WorkingCapitalEnterprise() {\n  const [selectedPeriod, setPeriod] = useState('30d');\n  const [selectedRegion, setRegion] = useState('all');\n\n  // Fetch real data using React Query\n  const { data: metrics, isLoading: metricsLoading } = useQuery({\n    queryKey: ['workingCapitalMetrics'],\n    queryFn: apiService.getWorkingCapitalMetrics,\n    refetchInterval: 30000 // Refresh every 30 seconds\n  });\n\n  const { data: cashFlow } = useQuery({\n    queryKey: ['cashFlow', selectedPeriod],\n    queryFn: () => apiService.getCashFlowData(selectedPeriod),\n    refetchInterval: 60000\n  });\n\n  const { data: arapData } = useQuery({\n    queryKey: ['arap'],\n    queryFn: apiService.getARAPData,\n    refetchInterval: 60000\n  });\n\n  const { data: inventoryData } = useQuery({\n    queryKey: ['inventory'],\n    queryFn: apiService.getInventoryMetrics,\n    refetchInterval: 120000\n  });\n\n  const { data: aiForecasts } = useQuery({\n    queryKey: ['aiForecasts'],\n    queryFn: apiService.getAIForecasts,\n    refetchInterval: 300000 // Refresh every 5 minutes\n  });\n\n  // Real-time updates\n  const realtimeAlerts = useRealtimeData('cashflow-alerts');\n  const realtimeMetrics = useRealtimeData('working-capital-metrics');\n\n  // Merge real-time data with fetched data\n  const currentMetrics = realtimeMetrics || metrics;\n\n  if (metricsLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <ArrowPathIcon className=\"h-12 w-12 animate-spin text-blue-600 mx-auto\" />\n          <p className=\"mt-4 text-gray-600\">Loading real financial data...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 p-6\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900 dark:text-white\">\n          Working Capital Command Center\n        </h1>\n        <p className=\"text-gray-600 dark:text-gray-400 mt-2\">\n          Real-time cash flow management and liquidity monitoring across all regions\n        </p>\n      </div>\n\n      {/* Controls */}\n      <div className=\"mb-6 flex flex-wrap gap-4\">\n        <select\n          value={selectedPeriod}\n          onChange={(e) => setPeriod(e.target.value)}\n          className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-600\"\n        >\n          <option value=\"7d\">Last 7 Days</option>\n          <option value=\"30d\">Last 30 Days</option>\n          <option value=\"90d\">Last 90 Days</option>\n          <option value=\"1y\">Last Year</option>\n        </select>\n\n        <select\n          value={selectedRegion}\n          onChange={(e) => setRegion(e.target.value)}\n          className=\"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 dark:bg-gray-800 dark:border-gray-600\"\n        >\n          <option value=\"all\">All Regions</option>\n          <option value=\"uk\">United Kingdom</option>\n          <option value=\"us\">United States</option>\n          <option value=\"eu\">Europe</option>\n          <option value=\"apac\">Asia Pacific</option>\n        </select>\n\n        <button className=\"px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\">\n          Export Report\n        </button>\n      </div>\n\n      {/* Key Metrics Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        <MetricCard\n          title=\"Current Cash Position\"\n          value={currentMetrics?.cashPosition ? `$${(currentMetrics.cashPosition / 1000000).toFixed(2)}M` : 'Loading...'}\n          change={currentMetrics?.cashChange || '+12.5%'}\n          trend=\"up\"\n          icon={BanknotesIcon}\n          status={currentMetrics?.cashStatus || 'healthy'}\n          details=\"vs last month\"\n        />\n\n        <MetricCard\n          title=\"Cash Runway\"\n          value={currentMetrics?.cashRunway ? `${currentMetrics.cashRunway} days` : 'Loading...'}\n          change={currentMetrics?.runwayChange || '-5 days'}\n          trend=\"down\"\n          icon={ClockIcon}\n          status={currentMetrics?.runwayStatus || 'warning'}\n          details=\"at current burn rate\"\n        />\n\n        <MetricCard\n          title=\"Working Capital Ratio\"\n          value={currentMetrics?.wcRatio || '1.42'}\n          change={currentMetrics?.wcChange || '+0.08'}\n          trend=\"up\"\n          icon={ChartBarIcon}\n          status={currentMetrics?.wcStatus || 'healthy'}\n          details=\"target: >1.30\"\n        />\n\n        <MetricCard\n          title=\"Quick Ratio\"\n          value={currentMetrics?.quickRatio || '0.95'}\n          change={currentMetrics?.quickChange || '-0.03'}\n          trend=\"down\"\n          icon={CalculatorIcon}\n          status={currentMetrics?.quickStatus || 'warning'}\n          details=\"target: >1.00\"\n        />\n      </div>\n\n      {/* Main Charts Grid */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        <CashFlowForecast\n          historical={cashFlow?.historical}\n          forecast={aiForecasts?.cashflow}\n        />\n\n        <CashConversionCycle\n          data={{\n            daysInventory: inventoryData?.daysInventory || 45,\n            daysReceivables: arapData?.daysReceivables || 38,\n            daysPayables: arapData?.daysPayables || 42,\n            ccc: (inventoryData?.daysInventory || 45) + (arapData?.daysReceivables || 38) - (arapData?.daysPayables || 42)\n          }}\n        />\n      </div>\n\n      {/* Secondary Charts */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8\">\n        <WorkingCapitalBreakdown\n          data={{\n            inventory: inventoryData?.value || 8500000,\n            receivables: arapData?.receivables || 12300000,\n            cash: currentMetrics?.cashPosition || 5600000,\n            otherCurrent: 2100000\n          }}\n        />\n\n        {/* AR Aging Analysis */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n            Receivables Aging\n          </h3>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">Current</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-2\">\n                  <div className=\"bg-green-500 h-2 rounded-full\" style={{ width: '65%' }}></div>\n                </div>\n                <span className=\"text-sm font-semibold\">$8.0M</span>\n              </div>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">30-60 days</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-2\">\n                  <div className=\"bg-yellow-500 h-2 rounded-full\" style={{ width: '25%' }}></div>\n                </div>\n                <span className=\"text-sm font-semibold\">$3.1M</span>\n              </div>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">60-90 days</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-2\">\n                  <div className=\"bg-orange-500 h-2 rounded-full\" style={{ width: '8%' }}></div>\n                </div>\n                <span className=\"text-sm font-semibold\">$1.0M</span>\n              </div>\n            </div>\n            <div className=\"flex justify-between items-center\">\n              <span className=\"text-sm text-gray-600\">&gt;90 days</span>\n              <div className=\"flex items-center\">\n                <div className=\"w-32 bg-gray-200 rounded-full h-2 mr-2\">\n                  <div className=\"bg-red-500 h-2 rounded-full\" style={{ width: '2%' }}></div>\n                </div>\n                <span className=\"text-sm font-semibold\">$0.2M</span>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Critical Alerts */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\n          <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n            Critical Alerts\n          </h3>\n          <div className=\"space-y-3\">\n            {realtimeAlerts?.alerts?.map((alert, idx) => (\n              <div key={idx} className={`p-3 rounded-lg ${\n                alert.severity === 'critical' ? 'bg-red-50 dark:bg-red-900/20 border border-red-200' :\n                alert.severity === 'warning' ? 'bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200' :\n                'bg-blue-50 dark:bg-blue-900/20 border border-blue-200'\n              }`}>\n                <div className=\"flex items-start\">\n                  {alert.severity === 'critical' ?\n                    <XCircleIcon className=\"h-5 w-5 text-red-500 mr-2\" /> :\n                    alert.severity === 'warning' ?\n                    <ExclamationTriangleIcon className=\"h-5 w-5 text-yellow-500 mr-2\" /> :\n                    <CheckCircleIcon className=\"h-5 w-5 text-blue-500 mr-2\" />\n                  }\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      {alert.title}\n                    </p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">\n                      {alert.description}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )) || [\n              {\n                severity: 'warning',\n                title: 'Cash runway below 90 days',\n                description: 'Current burn rate projects 87 days of runway'\n              },\n              {\n                severity: 'info',\n                title: 'Large payment received',\n                description: '$2.3M from Customer ABC cleared today'\n              }\n            ].map((alert, idx) => (\n              <div key={idx} className={`p-3 rounded-lg ${\n                alert.severity === 'critical' ? 'bg-red-50 dark:bg-red-900/20 border border-red-200' :\n                alert.severity === 'warning' ? 'bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200' :\n                'bg-blue-50 dark:bg-blue-900/20 border border-blue-200'\n              }`}>\n                <div className=\"flex items-start\">\n                  {alert.severity === 'critical' ?\n                    <XCircleIcon className=\"h-5 w-5 text-red-500 mr-2\" /> :\n                    alert.severity === 'warning' ?\n                    <ExclamationTriangleIcon className=\"h-5 w-5 text-yellow-500 mr-2\" /> :\n                    <CheckCircleIcon className=\"h-5 w-5 text-blue-500 mr-2\" />\n                  }\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900 dark:text-white\">\n                      {alert.title}\n                    </p>\n                    <p className=\"text-xs text-gray-600 dark:text-gray-400 mt-1\">\n                      {alert.description}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Action Items */}\n      <div className=\"bg-white dark:bg-gray-800 rounded-xl p-6 shadow-lg\">\n        <h3 className=\"text-lg font-semibold text-gray-900 dark:text-white mb-4\">\n          Recommended Actions\n        </h3>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n          {aiForecasts?.recommendations?.map((rec, idx) => (\n            <div key={idx} className=\"p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className={`px-2 py-1 text-xs rounded-full ${\n                  rec.priority === 'high' ? 'bg-red-100 text-red-800' :\n                  rec.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                  'bg-green-100 text-green-800'\n                }`}>\n                  {rec.priority} priority\n                </span>\n                <span className=\"text-xs text-gray-500\">\n                  Impact: ${(rec.impact / 1000000).toFixed(1)}M\n                </span>\n              </div>\n              <p className=\"text-sm font-medium text-gray-900 dark:text-white mb-1\">\n                {rec.title}\n              </p>\n              <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                {rec.description}\n              </p>\n              <button className=\"mt-3 text-xs text-blue-600 hover:text-blue-700 font-medium\">\n                View Details →\n              </button>\n            </div>\n          )) || [\n            {\n              priority: 'high',\n              impact: 2500000,\n              title: 'Accelerate collections',\n              description: 'Focus on top 5 overdue accounts totaling $2.5M'\n            },\n            {\n              priority: 'medium',\n              impact: 1800000,\n              title: 'Negotiate payment terms',\n              description: 'Extend AP terms with 3 suppliers by 15 days'\n            },\n            {\n              priority: 'low',\n              impact: 500000,\n              title: 'Optimize inventory',\n              description: 'Reduce slow-moving SKUs to free up $500K'\n            }\n          ].map((rec, idx) => (\n            <div key={idx} className=\"p-4 border border-gray-200 dark:border-gray-700 rounded-lg\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <span className={`px-2 py-1 text-xs rounded-full ${\n                  rec.priority === 'high' ? 'bg-red-100 text-red-800' :\n                  rec.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :\n                  'bg-green-100 text-green-800'\n                }`}>\n                  {rec.priority} priority\n                </span>\n                <span className=\"text-xs text-gray-500\">\n                  Impact: ${(rec.impact / 1000000).toFixed(1)}M\n                </span>\n              </div>\n              <p className=\"text-sm font-medium text-gray-900 dark:text-white mb-1\">\n                {rec.title}\n              </p>\n              <p className=\"text-xs text-gray-600 dark:text-gray-400\">\n                {rec.description}\n              </p>\n              <button className=\"mt-3 text-xs text-blue-600 hover:text-blue-700 font-medium\">\n                View Details →\n              </button>\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\pages\\auth\\SignUpPage.jsx",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\providers\\AuthProvider.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 145,
        "column": 17,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 145,
        "endColumn": 31
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "﻿import {\n  ClerkLoaded,\n  ClerkProvider,\n  RedirectToSignIn,\n  SignedIn,\n  SignedOut,\n  useAuth as useClerkAuth,\n  useUser,\n} from '@clerk/clerk-react'\nimport { createContext, useCallback, useContext, useMemo } from 'react'\n\nimport { logError, logWarn } from '../utils/logger.js'\n\nconst AuthContext = createContext(null)\n\nconst redirectToLogin = () => {\n  if (typeof window !== 'undefined' && typeof window.location !== 'undefined') {\n    window.location.assign('/login')\n  } else {\n    logWarn('Attempted to redirect to /login outside of a browser environment')\n  }\n}\n\nfunction mapClerkUser(user) {\n  if (!user) {\n    return null\n  }\n\n  const primaryEmail = user.primaryEmailAddress?.emailAddress ?? ''\n  const role = user.publicMetadata?.role\n\n  return {\n    id: user.id,\n    firstName: user.firstName ?? user.username ?? 'Sentia',\n    lastName: user.lastName ?? '',\n    email: primaryEmail,\n    role: typeof role === 'string' ? role : 'viewer',\n  }\n}\n\nfunction ClerkSessionProvider({ children }) {\n  const { isLoaded, isSignedIn, user } = useUser()\n  const clerkAuth = useClerkAuth()\n\n  const signOut = useCallback(async () => {\n    await clerkAuth.signOut()\n  }, [clerkAuth])\n\n  const signIn = useCallback(() => {\n    redirectToLogin()\n    return Promise.resolve()\n  }, [])\n\n  const value = useMemo(\n    () => ({\n      mode: 'clerk',\n      isAuthenticated: isSignedIn,\n      user: mapClerkUser(user),\n      signIn,\n      signOut,\n    }),\n    [isSignedIn, signIn, signOut, user]\n  )\n\n  if (!isLoaded) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-gray-100 flex items-center justify-center p-4\">\n        <div className=\"text-center\">\n          <div className=\"w-16 h-16 bg-gradient-to-br from-blue-600 to-blue-800 rounded-lg flex items-center justify-center mx-auto mb-4\">\n            <span className=\"text-white font-bold text-2xl\">S</span>\n          </div>\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">Sentia Manufacturing</h2>\n          <p className=\"text-gray-600\">Authenticating with production Clerk...</p>\n          <div className=\"mt-4\">\n            <div className=\"inline-flex items-center space-x-2\">\n              <div className=\"w-2 h-2 bg-blue-600 rounded-full animate-pulse\"></div>\n              <div className=\"w-2 h-2 bg-blue-600 rounded-full animate-pulse delay-75\"></div>\n              <div className=\"w-2 h-2 bg-blue-600 rounded-full animate-pulse delay-150\"></div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>\n}\n\nconst signedOutValue = {\n  mode: 'clerk',\n  isAuthenticated: false,\n  user: null,\n  signIn: () => {\n    redirectToLogin()\n    return Promise.resolve()\n  },\n  signOut: () => Promise.resolve(),\n}\n\nfunction MissingClerkConfiguration() {\n  logError('Clerk publishable key not found. Authentication cannot be initialized.')\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n      <div className=\"max-w-md w-full bg-white shadow-lg rounded-xl p-8 text-center\">\n        <h1 className=\"text-2xl font-semibold text-gray-900 mb-3\">Authentication Misconfigured</h1>\n        <p className=\"text-gray-600 mb-6\">\n          Clerk environment keys are required for this application. Set `VITE_CLERK_PUBLISHABLE_KEY` and reload the page.\n        </p>\n        <button\n          type=\"button\"\n          onClick={() => window.location.reload()}\n          className=\"w-full rounded-lg bg-blue-600 px-4 py-2 font-semibold text-white hover:bg-blue-700 transition\"\n        >\n          Reload after configuring Clerk\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport function AuthProvider({ children }) {\n  const publishableKey = import.meta.env?.VITE_CLERK_PUBLISHABLE_KEY\n\n  if (!publishableKey) {\n    return <MissingClerkConfiguration />\n  }\n\n  return (\n    <ClerkProvider publishableKey={publishableKey} afterSignOutUrl=\"/login\">\n      <SignedIn>\n        <ClerkLoaded>\n          <ClerkSessionProvider>{children}</ClerkSessionProvider>\n        </ClerkLoaded>\n      </SignedIn>\n      <SignedOut>\n        <AuthContext.Provider value={signedOutValue}>\n          <RedirectToSignIn />\n        </AuthContext.Provider>\n      </SignedOut>\n    </ClerkProvider>\n  )\n}\n\nexport function useAuthContext() {\n  const context = useContext(AuthContext)\n\n  if (!context) {\n    throw new Error('useAuthContext must be used within an AuthProvider')\n  }\n\n  return context\n}\n\nexport { AuthContext }\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\providers\\ClerkAuthProvider-fixed.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 121,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 121,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * CLEAN CLERK AUTHENTICATION PROVIDER\n * \n * Professional, production-ready Clerk authentication system\n * with NO fallbacks, NO mock auth, and NO guest mode.\n */\n\nimport React, { createContext, useContext } from 'react';\nimport { ClerkProvider, useAuth, useUser } from '@clerk/clerk-react';\nimport { dark } from '@clerk/themes';\n\n// Get Clerk publishable key from environment\nconst CLERK_PUBLISHABLE_KEY = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY;\n\n// Validate Clerk configuration\nif (!CLERK_PUBLISHABLE_KEY) {\n  throw new Error(\n    'Missing VITE_CLERK_PUBLISHABLE_KEY environment variable. ' +\n    'Please add your Clerk publishable key to the environment variables.'\n  );\n}\n\n// Clerk configuration\nconst clerkConfig = {\n  publishableKey: CLERK_PUBLISHABLE_KEY,\n  appearance: {\n    baseTheme: dark,\n    variables: {\n      colorPrimary: '#667eea',\n      colorBackground: '#1a1a1a',\n      colorInputBackground: '#2d2d2d',\n      colorInputText: '#ffffff',\n      colorText: '#ffffff',\n      colorTextSecondary: '#a0a0a0',\n      borderRadius: '8px',\n    },\n    elements: {\n      formButtonPrimary: {\n        backgroundColor: '#667eea',\n        '&:hover': {\n          backgroundColor: '#5a6fd8',\n        },\n      },\n      card: {\n        backgroundColor: '#1a1a1a',\n        border: '1px solid #333',\n      },\n      headerTitle: {\n        color: '#ffffff',\n      },\n      headerSubtitle: {\n        color: '#a0a0a0',\n      },\n    },\n  },\n  afterSignInUrl: '/dashboard',\n  afterSignUpUrl: '/dashboard',\n  signInUrl: '/sign-in',\n  signUpUrl: '/sign-up',\n};\n\n// Auth Context for additional functionality\nconst AuthContext = createContext(null);\n\n// Enhanced auth hook that combines Clerk hooks\nconst useEnhancedAuth = () => {\n  const { isLoaded, isSignedIn, userId } = useAuth();\n  const { user } = useUser();\n  \n  // Map Clerk user to our application user format\n  const mappedUser = user ? {\n    id: user.id,\n    firstName: user.firstName || 'User',\n    lastName: user.lastName || '',\n    email: user.primaryEmailAddress?.emailAddress || '',\n    role: user.publicMetadata?.role || 'user',\n    avatar: user.imageUrl,\n    fullName: user.fullName || `${user.firstName || 'User'} ${user.lastName || ''}`.trim(),\n  } : null;\n\n  return {\n    // Clerk native properties\n    isLoaded,\n    isSignedIn,\n    userId,\n    user: mappedUser,\n    \n    // Convenience properties\n    isAuthenticated: isSignedIn,\n    isLoading: !isLoaded,\n    \n    // User role checking\n    hasRole: (role) => mappedUser?.role === role,\n    hasAnyRole: (roles) => roles.includes(mappedUser?.role),\n  };\n};\n\n// Auth Context Provider (internal)\nconst AuthContextProvider = ({ children }) => {\n  const authData = useEnhancedAuth();\n  \n  return (\n    <AuthContext.Provider value={authData}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Main Clerk Auth Provider\nexport const ClerkAuthProvider = ({ children }) => {\n  return (\n    <ClerkProvider {...clerkConfig}>\n      <AuthContextProvider>\n        {children}\n      </AuthContextProvider>\n    </ClerkProvider>\n  );\n};\n\n// Hook to use auth context\nexport const useAuthContext = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuthContext must be used within ClerkAuthProvider');\n  }\n  return context;\n};\n\n// Export Clerk components for direct use\nexport {\n  SignedIn,\n  SignedOut,\n  SignInButton,\n  SignUpButton,\n  UserButton,\n  SignIn,\n  SignUp,\n} from '@clerk/clerk-react';\n\nexport default ClerkAuthProvider;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\providers\\ClerkAuthProvider.jsx",
    "messages": [
      {
        "ruleId": "react-refresh/only-export-components",
        "severity": 1,
        "message": "Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.",
        "line": 121,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "namedExport",
        "endLine": 121,
        "endColumn": 28
      }
    ],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 1,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * CLEAN CLERK AUTHENTICATION PROVIDER\n * \n * Professional, production-ready Clerk authentication system\n * with NO fallbacks, NO mock auth, and NO guest mode.\n */\n\nimport React, { createContext, useContext } from 'react';\nimport { ClerkProvider, useAuth, useUser } from '@clerk/clerk-react';\nimport { dark } from '@clerk/themes';\n\n// Get Clerk publishable key from environment\nconst CLERK_PUBLISHABLE_KEY = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY;\n\n// Validate Clerk configuration\nif (!CLERK_PUBLISHABLE_KEY) {\n  throw new Error(\n    'Missing VITE_CLERK_PUBLISHABLE_KEY environment variable. ' +\n    'Please add your Clerk publishable key to the environment variables.'\n  );\n}\n\n// Clerk configuration\nconst clerkConfig = {\n  publishableKey: CLERK_PUBLISHABLE_KEY,\n  appearance: {\n    baseTheme: dark,\n    variables: {\n      colorPrimary: '#667eea',\n      colorBackground: '#1a1a1a',\n      colorInputBackground: '#2d2d2d',\n      colorInputText: '#ffffff',\n      colorText: '#ffffff',\n      colorTextSecondary: '#a0a0a0',\n      borderRadius: '8px',\n    },\n    elements: {\n      formButtonPrimary: {\n        backgroundColor: '#667eea',\n        '&:hover': {\n          backgroundColor: '#5a6fd8',\n        },\n      },\n      card: {\n        backgroundColor: '#1a1a1a',\n        border: '1px solid #333',\n      },\n      headerTitle: {\n        color: '#ffffff',\n      },\n      headerSubtitle: {\n        color: '#a0a0a0',\n      },\n    },\n  },\n  afterSignInUrl: '/dashboard',\n  afterSignUpUrl: '/dashboard',\n  signInUrl: '/sign-in',\n  signUpUrl: '/sign-up',\n};\n\n// Auth Context for additional functionality\nconst AuthContext = createContext(null);\n\n// Enhanced auth hook that combines Clerk hooks\nconst useEnhancedAuth = () => {\n  const { isLoaded, isSignedIn, userId } = useAuth();\n  const { user } = useUser();\n  \n  // Map Clerk user to our application user format\n  const mappedUser = user ? {\n    id: user.id,\n    firstName: user.firstName || 'User',\n    lastName: user.lastName || '',\n    email: user.primaryEmailAddress?.emailAddress || '',\n    role: user.publicMetadata?.role || 'user',\n    avatar: user.imageUrl,\n    fullName: user.fullName || `${user.firstName || 'User'} ${user.lastName || ''}`.trim(),\n  } : null;\n\n  return {\n    // Clerk native properties\n    isLoaded,\n    isSignedIn,\n    userId,\n    user: mappedUser,\n    \n    // Convenience properties\n    isAuthenticated: isSignedIn,\n    isLoading: !isLoaded,\n    \n    // User role checking\n    hasRole: (role) => mappedUser?.role === role,\n    hasAnyRole: (roles) => roles.includes(mappedUser?.role),\n  };\n};\n\n// Auth Context Provider (internal)\nconst AuthContextProvider = ({ children }) => {\n  const authData = useEnhancedAuth();\n  \n  return (\n    <AuthContext.Provider value={authData}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Main Clerk Auth Provider\nexport const ClerkAuthProvider = ({ children }) => {\n  return (\n    <ClerkProvider {...clerkConfig}>\n      <AuthContextProvider>\n        {children}\n      </AuthContextProvider>\n    </ClerkProvider>\n  );\n};\n\n// Hook to use auth context\nexport const useAuthContext = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuthContext must be used within ClerkAuthProvider');\n  }\n  return context;\n};\n\n// Export Clerk components for direct use\nexport {\n  SignedIn,\n  SignedOut,\n  SignInButton,\n  SignUpButton,\n  UserButton,\n  SignIn,\n  SignUp,\n} from '@clerk/clerk-react';\n\nexport default ClerkAuthProvider;\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\services\\ManufacturingAnalyticsService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logDebug' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logDebug" },
            "fix": { "range": [9, 18], "text": "" },
            "desc": "Remove unused variable 'logDebug'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logInfo' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logInfo" },
            "fix": { "range": [17, 26], "text": "" },
            "desc": "Remove unused variable 'logInfo'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logWarn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logWarn" },
            "fix": { "range": [26, 35], "text": "" },
            "desc": "Remove unused variable 'logWarn'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'granularity' is defined but never used.",
        "line": 531,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 531,
        "endColumn": 40,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "granularity" },
            "fix": { "range": [13917, 13930], "text": "" },
            "desc": "Remove unused variable 'granularity'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { logDebug, logInfo, logWarn, logError } from '../utils/logger';\n\n/**\n * Manufacturing Analytics Service\n * Provides comprehensive manufacturing analytics, KPIs, trends, and anomaly detection\n */\n\nclass ManufacturingAnalyticsService {\n  constructor() {\n    this.baseUrl = import.meta.env.VITE_API_BASE_URL || '/api';\n    this.cache = new Map();\n    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes\n  }\n\n  /**\n   * Get key performance indicators for manufacturing operations\n   */\n  async getKPIs(timeframe = '7d') {\n    const cacheKey = `kpis-${timeframe}`;\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n\n    try {\n      // In production, this would fetch from API\n      // For now, return realistic mock data\n      const kpis = {\n        oee: {\n          value: 78.5,\n          target: 85,\n          trend: 'up',\n          change: 2.3,\n          components: {\n            availability: 92.1,\n            performance: 88.4,\n            quality: 96.2\n          }\n        },\n        production: {\n          totalOutput: 15234,\n          plannedOutput: 16000,\n          efficiency: 95.2,\n          utilization: 87.3\n        },\n        quality: {\n          defectRate: 2.3,\n          firstPassYield: 94.5,\n          reworkRate: 3.2,\n          scrapRate: 1.8\n        },\n        inventory: {\n          turnoverRatio: 12.5,\n          stockoutRate: 0.8,\n          carryingCost: 125000,\n          daysOnHand: 28\n        },\n        delivery: {\n          onTimeDelivery: 96.7,\n          orderFulfillment: 98.2,\n          leadTime: 4.2,\n          cycleTime: 2.8\n        },\n        cost: {\n          unitCost: 45.23,\n          laborCost: 28.5,\n          materialCost: 62.3,\n          overheadCost: 9.2\n        }\n      };\n\n      this.setCache(cacheKey, kpis);\n      return kpis;\n    } catch (error) {\n      logError('Error fetching KPIs:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get production trends over time\n   */\n  async getProductionTrends(period = '30d', granularity = 'daily') {\n    const cacheKey = `trends-${period}-${granularity}`;\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n\n    try {\n      // Generate trend data based on period\n      const dataPoints = this.generateTrendData(period, granularity);\n\n      const trends = {\n        production: dataPoints.map(dp => ({\n          date: dp.date,\n          volume: dp.production,\n          efficiency: dp.efficiency,\n          quality: dp.quality\n        })),\n        oee: dataPoints.map(dp => ({\n          date: dp.date,\n          overall: dp.oee,\n          availability: dp.availability,\n          performance: dp.performance,\n          quality: dp.quality\n        })),\n        costs: dataPoints.map(dp => ({\n          date: dp.date,\n          total: dp.totalCost,\n          labor: dp.laborCost,\n          material: dp.materialCost,\n          overhead: dp.overheadCost\n        }))\n      };\n\n      this.setCache(cacheKey, trends);\n      return trends;\n    } catch (error) {\n      logError('Error fetching production trends:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Detect anomalies in manufacturing data\n   */\n  async detectAnomalies(metrics = ['all']) {\n    const cacheKey = `anomalies-${metrics.join('-')}`;\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n\n    try {\n      const anomalies = [\n        {\n          id: 'ANO-001',\n          timestamp: new Date().toISOString(),\n          metric: 'Machine Efficiency',\n          severity: 'high',\n          description: 'Machine L2-04 efficiency dropped to 45% (normal: 85-90%)',\n          impact: 'Production delay of 2 hours expected',\n          recommendation: 'Immediate maintenance inspection required'\n        },\n        {\n          id: 'ANO-002',\n          timestamp: new Date(Date.now() - 2 * 3600000).toISOString(),\n          metric: 'Quality Defect Rate',\n          severity: 'medium',\n          description: 'Defect rate increased to 4.2% on Product Line A',\n          impact: 'Additional QC resources needed',\n          recommendation: 'Review recent process changes and material batch'\n        },\n        {\n          id: 'ANO-003',\n          timestamp: new Date(Date.now() - 4 * 3600000).toISOString(),\n          metric: 'Material Consumption',\n          severity: 'low',\n          description: 'Raw material usage 8% higher than forecast',\n          impact: 'Potential inventory shortage in 5 days',\n          recommendation: 'Adjust procurement schedule'\n        }\n      ];\n\n      this.setCache(cacheKey, anomalies);\n      return anomalies;\n    } catch (error) {\n      logError('Error detecting anomalies:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get predictive maintenance insights\n   */\n  async getPredictiveMaintenance() {\n    const cacheKey = 'predictive-maintenance';\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n\n    try {\n      const maintenance = {\n        alerts: [\n          {\n            machineId: 'MCH-001',\n            name: 'CNC Machine A',\n            predictedFailure: '2025-10-05',\n            confidence: 87,\n            component: 'Spindle Bearing',\n            hoursToFailure: 168,\n            recommendation: 'Schedule maintenance within 5 days'\n          },\n          {\n            machineId: 'MCH-005',\n            name: 'Assembly Robot 2',\n            predictedFailure: '2025-10-12',\n            confidence: 72,\n            component: 'Servo Motor',\n            hoursToFailure: 336,\n            recommendation: 'Monitor closely, plan maintenance'\n          }\n        ],\n        maintenanceSchedule: [\n          {\n            date: '2025-09-28',\n            machines: ['MCH-002', 'MCH-007'],\n            type: 'Preventive',\n            duration: 4\n          },\n          {\n            date: '2025-10-02',\n            machines: ['MCH-001'],\n            type: 'Predictive',\n            duration: 6\n          }\n        ],\n        healthScores: {\n          'MCH-001': 65,\n          'MCH-002': 88,\n          'MCH-003': 92,\n          'MCH-004': 76,\n          'MCH-005': 71\n        }\n      };\n\n      this.setCache(cacheKey, maintenance);\n      return maintenance;\n    } catch (error) {\n      logError('Error fetching predictive maintenance:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get production line performance metrics\n   */\n  async getLinePerformance(lineId = 'all') {\n    const cacheKey = `line-performance-${lineId}`;\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n\n    try {\n      const lines = [\n        {\n          id: 'LINE-01',\n          name: 'Assembly Line A',\n          status: 'running',\n          oee: 82.3,\n          currentSpeed: 120,\n          targetSpeed: 150,\n          unitsProduced: 4523,\n          targetUnits: 5000,\n          efficiency: 90.5,\n          downtime: 12,\n          qualityRate: 98.2\n        },\n        {\n          id: 'LINE-02',\n          name: 'Packaging Line B',\n          status: 'running',\n          oee: 76.8,\n          currentSpeed: 200,\n          targetSpeed: 220,\n          unitsProduced: 8234,\n          targetUnits: 9000,\n          efficiency: 91.5,\n          downtime: 8,\n          qualityRate: 97.5\n        },\n        {\n          id: 'LINE-03',\n          name: 'Processing Line C',\n          status: 'maintenance',\n          oee: 0,\n          currentSpeed: 0,\n          targetSpeed: 180,\n          unitsProduced: 0,\n          targetUnits: 0,\n          efficiency: 0,\n          downtime: 120,\n          qualityRate: 0\n        }\n      ];\n\n      const performance = lineId === 'all' ? lines : lines.filter(l => l.id === lineId);\n\n      this.setCache(cacheKey, performance);\n      return performance;\n    } catch (error) {\n      logError('Error fetching line performance:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get shift performance analysis\n   */\n  async getShiftAnalysis(date = new Date()) {\n    const cacheKey = `shift-analysis-${date.toISOString().split('T')[0]}`;\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n\n    try {\n      const shifts = {\n        morning: {\n          shift: 'Morning (6AM - 2PM)',\n          production: 5234,\n          efficiency: 88.5,\n          quality: 97.2,\n          downtime: 25,\n          incidents: 1,\n          oee: 81.3\n        },\n        afternoon: {\n          shift: 'Afternoon (2PM - 10PM)',\n          production: 4892,\n          efficiency: 84.2,\n          quality: 96.8,\n          downtime: 35,\n          incidents: 2,\n          oee: 77.8\n        },\n        night: {\n          shift: 'Night (10PM - 6AM)',\n          production: 4123,\n          efficiency: 79.5,\n          quality: 95.5,\n          downtime: 45,\n          incidents: 0,\n          oee: 72.4\n        },\n        comparison: {\n          bestShift: 'morning',\n          worstShift: 'night',\n          avgOEE: 77.2,\n          totalProduction: 14249,\n          totalDowntime: 105\n        }\n      };\n\n      this.setCache(cacheKey, shifts);\n      return shifts;\n    } catch (error) {\n      logError('Error fetching shift analysis:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get energy consumption analytics\n   */\n  async getEnergyAnalytics(period = '7d') {\n    const cacheKey = `energy-${period}`;\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n\n    try {\n      const energy = {\n        total: {\n          consumption: 45678,\n          cost: 12345,\n          efficiency: 82.3,\n          trend: 'down',\n          change: -5.2\n        },\n        byLine: [\n          { line: 'LINE-01', consumption: 15234, cost: 4123 },\n          { line: 'LINE-02', consumption: 18456, cost: 4987 },\n          { line: 'LINE-03', consumption: 11988, cost: 3235 }\n        ],\n        byTime: this.generateEnergyData(period),\n        recommendations: [\n          'Optimize Line 2 scheduling to avoid peak rates',\n          'Consider upgrading Line 1 motors to high-efficiency models',\n          'Implement automated shutdown during idle periods'\n        ]\n      };\n\n      this.setCache(cacheKey, energy);\n      return energy;\n    } catch (error) {\n      logError('Error fetching energy analytics:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get waste and scrap analysis\n   */\n  async getWasteAnalysis(period = '30d') {\n    const cacheKey = `waste-${period}`;\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n\n    try {\n      const waste = {\n        summary: {\n          totalWaste: 2345,\n          wasteRate: 3.2,\n          recycled: 1876,\n          recycleRate: 80,\n          costImpact: 34567\n        },\n        byCategory: [\n          { category: 'Material Defects', amount: 890, percentage: 38 },\n          { category: 'Process Waste', amount: 567, percentage: 24 },\n          { category: 'Setup Scrap', amount: 445, percentage: 19 },\n          { category: 'Overproduction', amount: 234, percentage: 10 },\n          { category: 'Other', amount: 209, percentage: 9 }\n        ],\n        byProduct: [\n          { product: 'Product A', wasteRate: 2.8, amount: 678 },\n          { product: 'Product B', wasteRate: 3.5, amount: 892 },\n          { product: 'Product C', wasteRate: 3.1, amount: 775 }\n        ],\n        trends: this.generateWasteTrends(period)\n      };\n\n      this.setCache(cacheKey, waste);\n      return waste;\n    } catch (error) {\n      logError('Error fetching waste analysis:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get supply chain analytics\n   */\n  async getSupplyChainAnalytics() {\n    const cacheKey = 'supply-chain';\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n\n    try {\n      const supplyChain = {\n        suppliers: {\n          total: 24,\n          onTime: 21,\n          delayed: 3,\n          performance: 87.5\n        },\n        inventory: {\n          rawMaterials: 456789,\n          wip: 123456,\n          finished: 234567,\n          turnover: 12.5\n        },\n        leadTimes: {\n          average: 4.2,\n          min: 2,\n          max: 8,\n          trend: 'improving'\n        },\n        risks: [\n          {\n            supplier: 'Supplier A',\n            risk: 'Delivery delays',\n            impact: 'medium',\n            mitigation: 'Secondary supplier identified'\n          },\n          {\n            supplier: 'Supplier C',\n            risk: 'Quality issues',\n            impact: 'low',\n            mitigation: 'Enhanced QC implemented'\n          }\n        ]\n      };\n\n      this.setCache(cacheKey, supplyChain);\n      return supplyChain;\n    } catch (error) {\n      logError('Error fetching supply chain analytics:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Get workforce analytics\n   */\n  async getWorkforceAnalytics() {\n    const cacheKey = 'workforce';\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n\n    try {\n      const workforce = {\n        summary: {\n          totalWorkers: 156,\n          present: 148,\n          absent: 8,\n          productivity: 92.3\n        },\n        byDepartment: [\n          { department: 'Production', workers: 89, productivity: 94.2 },\n          { department: 'Quality', workers: 23, productivity: 91.5 },\n          { department: 'Maintenance', workers: 18, productivity: 88.7 },\n          { department: 'Logistics', workers: 26, productivity: 90.1 }\n        ],\n        skills: {\n          certified: 134,\n          trainingNeeded: 22,\n          crossTrained: 67\n        },\n        safety: {\n          daysWithoutIncident: 45,\n          nearMisses: 3,\n          safetyScore: 94.5\n        }\n      };\n\n      this.setCache(cacheKey, workforce);\n      return workforce;\n    } catch (error) {\n      logError('Error fetching workforce analytics:', error);\n      throw error;\n    }\n  }\n\n  // Helper methods\n\n  /**\n   * Generate trend data for specified period\n   */\n  generateTrendData(period, granularity) {\n    const dataPoints = [];\n    const numPoints = period === '7d' ? 7 : period === '30d' ? 30 : 90;\n\n    for (let i = 0; i < numPoints; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - (numPoints - i - 1));\n\n      dataPoints.push({\n        date: date.toISOString().split('T')[0],\n        production: 4500 + Math.random() * 1000,\n        efficiency: 85 + Math.random() * 10,\n        quality: 95 + Math.random() * 4,\n        oee: 75 + Math.random() * 15,\n        availability: 90 + Math.random() * 8,\n        performance: 85 + Math.random() * 10,\n        totalCost: 45000 + Math.random() * 10000,\n        laborCost: 15000 + Math.random() * 3000,\n        materialCost: 25000 + Math.random() * 5000,\n        overheadCost: 5000 + Math.random() * 2000\n      });\n    }\n\n    return dataPoints;\n  }\n\n  /**\n   * Generate energy consumption data\n   */\n  generateEnergyData(period) {\n    const numPoints = period === '7d' ? 7 : period === '30d' ? 30 : 90;\n    const data = [];\n\n    for (let i = 0; i < numPoints; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - (numPoints - i - 1));\n\n      data.push({\n        date: date.toISOString().split('T')[0],\n        consumption: 6000 + Math.random() * 2000,\n        cost: 1500 + Math.random() * 500,\n        peakDemand: 800 + Math.random() * 200\n      });\n    }\n\n    return data;\n  }\n\n  /**\n   * Generate waste trend data\n   */\n  generateWasteTrends(period) {\n    const numPoints = period === '7d' ? 7 : period === '30d' ? 30 : 90;\n    const trends = [];\n\n    for (let i = 0; i < numPoints; i++) {\n      const date = new Date();\n      date.setDate(date.getDate() - (numPoints - i - 1));\n\n      trends.push({\n        date: date.toISOString().split('T')[0],\n        waste: 70 + Math.random() * 30,\n        recycled: 50 + Math.random() * 25,\n        rate: 2.5 + Math.random() * 1.5\n      });\n    }\n\n    return trends;\n  }\n\n  /**\n   * Cache management\n   */\n  isCacheValid(key) {\n    const cached = this.cache.get(key);\n    if (!cached) return false;\n\n    return Date.now() - cached.timestamp < this.cacheTimeout;\n  }\n\n  setCache(key, data) {\n    this.cache.set(key, {\n      data,\n      timestamp: Date.now()\n    });\n  }\n\n  clearCache() {\n    this.cache.clear();\n  }\n}\n\n// Export singleton instance\nexport const manufacturingAnalyticsService = new ManufacturingAnalyticsService();\n\n// Export class for testing\nexport default ManufacturingAnalyticsService;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\services\\api.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 64,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 64,
        "endColumn": 19
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 74,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 74,
        "endColumn": 19
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 83,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 83,
        "endColumn": 19
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 93,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 93,
        "endColumn": 19
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 102,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 102,
        "endColumn": 19
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 111,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 111,
        "endColumn": 19
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 121,
        "column": 14,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 121,
        "endColumn": 19
      }
    ],
    "suppressedMessages": [],
    "errorCount": 7,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "// API Service for Real Data Integration\n// Connects to MCP Server and external APIs\n\nconst MCP_SERVER_URL = 'https://mcp-server-tkyu.onrender.com';\nconst API_BASE_URL = import.meta.env.VITE_API_BASE_URL || '/api';\n\nclass APIService {\n  constructor() {\n    this.mcpServerUrl = MCP_SERVER_URL;\n    this.apiBaseUrl = API_BASE_URL;\n  }\n\n  // Helper method for API calls\n  async fetchWithAuth(url, options = {}) {\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status} ${response.statusText}`);\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('API Call Failed:', error);\n      throw error;\n    }\n  }\n\n  // MCP Server Methods\n  async getMCPStatus() {\n    return this.fetchWithAuth(`${this.mcpServerUrl}/health`);\n  }\n\n  async getAIInsights(query) {\n    return this.fetchWithAuth(`${this.mcpServerUrl}/api/ai/insights`, {\n      method: 'POST',\n      body: JSON.stringify({ query }),\n    });\n  }\n\n  async getDemandForecast(params) {\n    return this.fetchWithAuth(`${this.mcpServerUrl}/api/ai/forecast`, {\n      method: 'POST',\n      body: JSON.stringify(params),\n    });\n  }\n\n  async getInventoryOptimization() {\n    return this.fetchWithAuth(`${this.mcpServerUrl}/api/ai/inventory-optimization`);\n  }\n\n  // Financial Data Methods\n  async getWorkingCapital() {\n    try {\n      // Try MCP server first\n      const data = await this.fetchWithAuth(`${this.mcpServerUrl}/api/financial/working-capital`);\n      return data;\n    } catch (error) {\n      // Fallback to local API\n      return this.fetchWithAuth(`${this.apiBaseUrl}/financial/working-capital`);\n    }\n  }\n\n  async getCashFlow() {\n    try {\n      const data = await this.fetchWithAuth(`${this.mcpServerUrl}/api/financial/cash-flow`);\n      return data;\n    } catch (error) {\n      return this.fetchWithAuth(`${this.apiBaseUrl}/financial/cash-flow`);\n    }\n  }\n\n  async getFinancialMetrics() {\n    try {\n      const data = await this.fetchWithAuth(`${this.mcpServerUrl}/api/financial/metrics`);\n      return data;\n    } catch (error) {\n      return this.fetchWithAuth(`${this.apiBaseUrl}/financial/metrics`);\n    }\n  }\n\n  // Production Data Methods\n  async getProductionMetrics() {\n    try {\n      const data = await this.fetchWithAuth(`${this.mcpServerUrl}/api/production/metrics`);\n      return data;\n    } catch (error) {\n      return this.fetchWithAuth(`${this.apiBaseUrl}/production/metrics`);\n    }\n  }\n\n  async getInventoryData() {\n    try {\n      const data = await this.fetchWithAuth(`${this.mcpServerUrl}/api/inventory/current`);\n      return data;\n    } catch (error) {\n      return this.fetchWithAuth(`${this.apiBaseUrl}/inventory/current`);\n    }\n  }\n\n  async getQualityMetrics() {\n    try {\n      const data = await this.fetchWithAuth(`${this.mcpServerUrl}/api/quality/metrics`);\n      return data;\n    } catch (error) {\n      return this.fetchWithAuth(`${this.apiBaseUrl}/quality/metrics`);\n    }\n  }\n\n  // Dashboard Data\n  async getDashboardSummary() {\n    try {\n      const data = await this.fetchWithAuth(`${this.mcpServerUrl}/api/dashboard/summary`);\n      return data;\n    } catch (error) {\n      return this.fetchWithAuth(`${this.apiBaseUrl}/dashboard/summary`);\n    }\n  }\n\n  // External API Integrations\n  async getXeroData() {\n    return this.fetchWithAuth(`${this.apiBaseUrl}/integrations/xero/data`);\n  }\n\n  async getShopifyData() {\n    return this.fetchWithAuth(`${this.apiBaseUrl}/integrations/shopify/data`);\n  }\n\n  async getAmazonData() {\n    return this.fetchWithAuth(`${this.apiBaseUrl}/integrations/amazon/data`);\n  }\n\n  // What-If Analysis\n  async runWhatIfScenario(scenario) {\n    return this.fetchWithAuth(`${this.mcpServerUrl}/api/ai/what-if`, {\n      method: 'POST',\n      body: JSON.stringify(scenario),\n    });\n  }\n\n  // Real-time SSE connection for live data\n  connectToLiveData(onMessage, onError) {\n    const eventSource = new EventSource(`${this.mcpServerUrl}/api/sse/stream`);\n\n    eventSource.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        onMessage(data);\n      } catch (error) {\n        console.error('SSE Parse Error:', error);\n      }\n    };\n\n    eventSource.onerror = (error) => {\n      console.error('SSE Connection Error:', error);\n      if (onError) onError(error);\n    };\n\n    return eventSource;\n  }\n}\n\n// Create singleton instance\nconst apiService = new APIService();\n\nexport default apiService;\nexport { APIService };",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\services\\api\\baseApi.js",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'API_BASE_URL' is not defined.",
        "line": 21,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 21,
        "endColumn": 32
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "﻿/**\n * Base API Service\n * Enterprise-grade API client with error handling, retries, and interceptors\n */\n\nconst APIBASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:5000/api'\nconst MAX_RETRIES = 3\nconst RETRY_DELAY = 1000\n\nclass ApiError extends Error {\n  constructor(message, status, data) {\n    super(message)\n    this.name = 'ApiError'\n    this.status = status\n    this.data = data\n  }\n}\n\nclass BaseApi {\n  constructor() {\n    this.baseURL = API_BASE_URL\n    this.defaultHeaders = {\n      'Content-Type': 'application/json'\n    }\n  }\n\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`\n    const config = {\n      ...options,\n      headers: {\n        ...this.defaultHeaders,\n        ...options.headers\n      }\n    }\n\n    // Add auth token if available\n    const token = this.getAuthToken()\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n\n    let lastError\n    for (let i = 0; i < MAX_RETRIES; i++) {\n      try {\n        const response = await fetch(url, config)\n\n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({}))\n          throw new ApiError(\n            errorData.message || `HTTP ${response.status}`,\n            response.status,\n            errorData\n          )\n        }\n\n        return await response.json()\n      } catch (error) {\n        lastError = error\n\n        // Don't retry on client errors (4xx)\n        if (error instanceof ApiError && error.status >= 400 && error.status < 500) {\n          throw error\n        }\n\n        // Wait before retry\n        if (i < MAX_RETRIES - 1) {\n          await this.sleep(RETRY_DELAY * Math.pow(2, i))\n        }\n      }\n    }\n\n    throw lastError\n  }\n\n  async get(endpoint, params = {}) {\n    const queryString = new URLSearchParams(params).toString()\n    const url = queryString ? `${endpoint}?${queryString}` : endpoint\n\n    return this.request(url, {\n      method: 'GET'\n    })\n  }\n\n  async post(endpoint, data = {}) {\n    return this.request(endpoint, {\n      method: 'POST',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async put(endpoint, data = {}) {\n    return this.request(endpoint, {\n      method: 'PUT',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async patch(endpoint, data = {}) {\n    return this.request(endpoint, {\n      method: 'PATCH',\n      body: JSON.stringify(data)\n    })\n  }\n\n  async delete(endpoint) {\n    return this.request(endpoint, {\n      method: 'DELETE'\n    })\n  }\n\n  getAuthToken() {\n    // Get token from Clerk or localStorage\n    const clerkToken = window.Clerk?.session?.getToken()\n    if (clerkToken) return clerkToken\n\n    return localStorage.getItem('authToken')\n  }\n\n  sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms))\n  }\n}\n\nexport const api = new BaseApi()\nexport { ApiError }\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\services\\api\\dashboardApi.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\services\\api\\mcpService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logInfo' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 7,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logInfo" },
            "fix": { "range": [169, 177], "text": "" },
            "desc": "Remove unused variable 'logInfo'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logWarn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 7,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logWarn" },
            "fix": { "range": [186, 195], "text": "" },
            "desc": "Remove unused variable 'logWarn'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logDebug' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 7,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logDebug" },
            "fix": { "range": [195, 205], "text": "" },
            "desc": "Remove unused variable 'logDebug'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'devLog' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 7,
        "column": 48,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "devLog" },
            "fix": { "range": [205, 213], "text": "" },
            "desc": "Remove unused variable 'devLog'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'MCP_BASE_URL' is not defined.",
        "line": 15,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 15,
        "endColumn": 24
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'MCP_BASE_URL' is not defined.",
        "line": 159,
        "column": 44,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 159,
        "endColumn": 56
      }
    ],
    "suppressedMessages": [],
    "errorCount": 6,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * MCP (Model Context Protocol) Service Integration\n * Connects to the MCP server for AI-powered manufacturing intelligence\n */\n\nimport axios from 'axios';\nimport { logInfo, logError, logWarn, logDebug, devLog } from '../../utils/structuredLogger.js';\n\n// MCP Server configuration\nconst MCPBASE_URL = import.meta.env.VITE_MCP_URL || 'http://localhost:9000/mcp';\nconst APIBASE_URL = import.meta.env.VITE_API_BASE_URL || 'http://localhost:10000/api';\n\n// Create axios instance with default config\nconst mcpClient = axios.create({\n  baseURL: MCP_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  }\n});\n\n// Add auth token to requests\nmcpClient.interceptors.request.use((config) => {\n  const token = localStorage.getItem('auth_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// MCP Service API\nexport const mcpService = {\n  // Health check\n  async checkHealth() {\n    try {\n      const response = await mcpClient.get('/health');\n      return response.data;\n    } catch (error) {\n      logError('MCP health check failed', error);\n      return { status: 'offline', message: error.message };\n    }\n  },\n\n  // Get AI insights\n  async getAIInsights(context) {\n    try {\n      const response = await mcpClient.post('/ai/insights', { context });\n      return response.data;\n    } catch (error) {\n      logError('Failed to get AI insights', error);\n      throw error;\n    }\n  },\n\n  // Manufacturing optimization\n  async optimizeManufacturing(parameters) {\n    try {\n      const response = await mcpClient.post('/tools/optimize-manufacturing', parameters);\n      return response.data;\n    } catch (error) {\n      logError('Manufacturing optimization failed', error);\n      throw error;\n    }\n  },\n\n  // Demand forecasting\n  async forecastDemand(data) {\n    try {\n      const response = await mcpClient.post('/tools/forecast-demand', data);\n      return response.data;\n    } catch (error) {\n      logError('Demand forecasting failed', error);\n      throw error;\n    }\n  },\n\n  // Inventory optimization\n  async optimizeInventory(data) {\n    try {\n      const response = await mcpClient.post('/tools/optimize-inventory', data);\n      return response.data;\n    } catch (error) {\n      logError('Inventory optimization failed', error);\n      throw error;\n    }\n  },\n\n  // Quality analysis\n  async analyzeQuality(metrics) {\n    try {\n      const response = await mcpClient.post('/tools/analyze-quality', metrics);\n      return response.data;\n    } catch (error) {\n      logError('Quality analysis failed', error);\n      throw error;\n    }\n  },\n\n  // Working capital optimization\n  async optimizeWorkingCapital(financials) {\n    try {\n      const response = await mcpClient.post('/tools/optimize-working-capital', financials);\n      return response.data;\n    } catch (error) {\n      logError('Working capital optimization failed', error);\n      throw error;\n    }\n  },\n\n  // Get Xero data through MCP\n  async getXeroData(endpoint) {\n    try {\n      const response = await mcpClient.get(`/xero/${endpoint}`);\n      return response.data;\n    } catch (error) {\n      logError('Failed to get Xero data', error);\n      throw error;\n    }\n  },\n\n  // Get Shopify data through MCP\n  async getShopifyData(endpoint) {\n    try {\n      const response = await mcpClient.get(`/shopify/${endpoint}`);\n      return response.data;\n    } catch (error) {\n      logError('Failed to get Shopify data', error);\n      throw error;\n    }\n  },\n\n  // Execute MCP tool\n  async executeTool(toolName, params) {\n    try {\n      const response = await mcpClient.post('/tools/execute', {\n        tool: toolName,\n        params\n      });\n      return response.data;\n    } catch (error) {\n      logError('Failed to execute tool', { toolName, error });\n      throw error;\n    }\n  },\n\n  // Get AI recommendations\n  async getRecommendations(context) {\n    try {\n      const response = await mcpClient.post('/ai/recommendations', { context });\n      return response.data;\n    } catch (error) {\n      logError('Failed to get recommendations', error);\n      throw error;\n    }\n  },\n\n  // Stream AI responses (for real-time updates)\n  streamAIResponse(prompt, onMessage, onError, onComplete) {\n    const eventSource = new EventSource(`${MCP_BASE_URL}/ai/stream?prompt=${encodeURIComponent(prompt)}`);\n\n    eventSource.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      onMessage(data);\n    };\n\n    eventSource.onerror = (error) => {\n      onError(error);\n      eventSource.close();\n    };\n\n    eventSource.addEventListener('complete', () => {\n      onComplete();\n      eventSource.close();\n    });\n\n    return eventSource;\n  },\n\n  // Get system status\n  async getSystemStatus() {\n    try {\n      const response = await mcpClient.get('/status');\n      return response.data;\n    } catch (error) {\n      logError('Failed to get system status', error);\n      return {\n        mcp: 'offline',\n        ai: 'unknown',\n        integrations: {},\n        error: error.message\n      };\n    }\n  }\n};\n\n// Hook for React components\nexport const useMCPService = () => {\n  return mcpService;\n};\n\nexport default mcpService;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\services\\api\\workingCapitalApi.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\services\\cache\\redisCacheService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'devLog' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 7,
        "column": 48,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 7,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "devLog" },
            "fix": { "range": [209, 217], "text": "" },
            "desc": "Remove unused variable 'devLog'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 36,
        "column": 11,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 36,
        "endColumn": 18
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 38,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 38,
        "endColumn": 23
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'_index' is defined but never used.",
        "line": 254,
        "column": 36,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 254,
        "endColumn": 42,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "_index" },
            "fix": { "range": [6758, 6766], "text": "" },
            "desc": "Remove unused variable '_index'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'index' is not defined.",
        "line": 255,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 255,
        "endColumn": 37
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Enterprise Redis Caching Service\n * High-performance caching layer with TTL, compression, and fallback strategies\n */\n\nimport { createClient } from 'redis';\nimport { logInfo, logError, logWarn, logDebug, devLog } from '../../utils/structuredLogger.js';\n\nclass RedisCacheService {\n  constructor() {\n    this.client = null;\n    this.isConnected = false;\n    this.fallbackCache = new Map(); // Memory fallback\n    this.compressionThreshold = 1024; // Compress data larger than 1KB\n\n    // Default TTL values (in seconds)\n    this.defaultTTL = {\n      dashboard: 300,      // 5 minutes\n      metrics: 180,        // 3 minutes\n      workingCapital: 240, // 4 minutes\n      inventory: 120,      // 2 minutes\n      production: 60,      // 1 minute\n      executive: 300,      // 5 minutes\n      ai: 600,            // 10 minutes\n      static: 3600,       // 1 hour\n      user: 1800,         // 30 minutes\n      health: 30          // 30 seconds\n    };\n  }\n\n  /**\n   * Initialize Redis connection\n   */\n  async initialize() {\n    try {\n      if (process.env.REDIS_URL) {\n        this.client = createClient({\n          url: process.env.REDIS_URL,\n          socket: {\n            connectTimeout: 10000,\n            lazyConnect: true,\n            reconnectStrategy: (retries) => {\n              logInfo('Redis reconnection attempt', { retries });\n              // Exponential backoff with max 3 seconds\n              return Math.min(retries * 100, 3000);\n            }\n          },\n          // Connection pooling for performance\n          pool: {\n            min: 2,\n            max: 10,\n            acquireTimeoutMillis: 30000,\n            createRetryIntervalMillis: 2000\n          }\n        });\n\n        // Event handlers\n        this.client.on('connect', () => {\n          logInfo('Redis connection established');\n        });\n\n        this.client.on('ready', () => {\n          this.isConnected = true;\n          logInfo('Redis client ready');\n        });\n\n        this.client.on('error', (err) => {\n          logError('Redis connection error', { error: err.message });\n          this.isConnected = false;\n        });\n\n        this.client.on('end', () => {\n          logInfo('Redis connection closed');\n          this.isConnected = false;\n        });\n\n        // Connect to Redis\n        await this.client.connect();\n\n        // Test connection\n        await this.client.ping();\n        logInfo('Redis Cache Service initialized');\n\n        // Set up periodic cleanup\n        this.startPeriodicCleanup();\n\n        return true;\n      } else {\n        logWarn('Redis URL not configured, using memory fallback');\n        return false;\n      }\n    } catch (error) {\n      logError('Failed to initialize Redis cache', error);\n      this.isConnected = false;\n      return false;\n    }\n  }\n\n  /**\n   * Get cached value\n   */\n  async get(key, options = {}) {\n    const fullKey = this.buildKey(key, options.namespace);\n\n    try {\n      if (this.isConnected && this.client) {\n        const cached = await this.client.get(fullKey);\n        if (cached) {\n          const data = this.deserializeData(cached);\n          this.recordCacheHit(key);\n          return data;\n        }\n      } else {\n        // Fallback to memory cache\n        const cached = this.fallbackCache.get(fullKey);\n        if (cached && cached.expires > Date.now()) {\n          this.recordCacheHit(key);\n          return cached.data;\n        } else if (cached) {\n          this.fallbackCache.delete(fullKey);\n        }\n      }\n\n      this.recordCacheMiss(key);\n      return null;\n    } catch (error) {\n      logError('Cache GET error', { key: fullKey, error });\n      return null;\n    }\n  }\n\n  /**\n   * Set cached value with TTL\n   */\n  async set(key, value, ttl = null, options = {}) {\n    const fullKey = this.buildKey(key, options.namespace);\n    const resolvedTTL = ttl || this.getTTLForKey(key);\n\n    try {\n      const serializedData = this.serializeData(value);\n\n      if (this.isConnected && this.client) {\n        await this.client.setEx(fullKey, resolvedTTL, serializedData);\n\n        // Set tags for efficient invalidation\n        if (options.tags) {\n          await this.setTags(fullKey, options.tags);\n        }\n      } else {\n        // Fallback to memory cache\n        this.fallbackCache.set(fullKey, {\n          data: value,\n          expires: Date.now() + (resolvedTTL * 1000)\n        });\n\n        // Prevent memory cache from growing too large\n        if (this.fallbackCache.size > 1000) {\n          this.cleanupMemoryCache();\n        }\n      }\n\n      return true;\n    } catch (error) {\n      logError('Cache SET error', { key: fullKey, error });\n      return false;\n    }\n  }\n\n  /**\n   * Delete cached value\n   */\n  async delete(key, options = {}) {\n    const fullKey = this.buildKey(key, options.namespace);\n\n    try {\n      if (this.isConnected && this.client) {\n        await this.client.del(fullKey);\n        await this.deleteTags(fullKey);\n      } else {\n        this.fallbackCache.delete(fullKey);\n      }\n      return true;\n    } catch (error) {\n      logError('Cache DELETE error', { key: fullKey, error });\n      return false;\n    }\n  }\n\n  /**\n   * Cache-aside pattern wrapper\n   */\n  async getOrSet(key, fetchFunction, ttl = null, options = {}) {\n    // Try to get from cache first\n    let data = await this.get(key, options);\n\n    if (data !== null) {\n      return data;\n    }\n\n    // Not in cache, fetch data\n    try {\n      const startTime = performance.now();\n      data = await fetchFunction();\n      const fetchTime = performance.now() - startTime;\n\n      // Cache the result\n      if (data !== null && data !== undefined) {\n        await this.set(key, data, ttl, options);\n      }\n\n      // Record performance metrics\n      this.recordFetchTime(key, fetchTime);\n\n      return data;\n    } catch (error) {\n      logError('Error in getOrSet', { key, error });\n      throw error;\n    }\n  }\n\n  /**\n   * Invalidate by tag\n   */\n  async invalidateByTag(tag) {\n    if (!this.isConnected || !this.client) return;\n\n    try {\n      const tagKey = `tag:${tag}`;\n      const keys = await this.client.sMembers(tagKey);\n\n      if (keys.length > 0) {\n        await this.client.del(...keys);\n        await this.client.del(tagKey);\n        logInfo('Invalidated keys for tag', { tag, count: keys.length });\n      }\n    } catch (error) {\n      logError('Error invalidating tag', { tag, error });\n    }\n  }\n\n  /**\n   * Multi-get operation\n   */\n  async mget(keys, options = {}) {\n    if (!Array.isArray(keys) || keys.length === 0) return {};\n\n    const fullKeys = keys.map(key => this.buildKey(key, options.namespace));\n    const result = {};\n\n    try {\n      if (this.isConnected && this.client) {\n        const values = await this.client.mGet(fullKeys);\n\n        keys.forEach((originalKey, _index) => {\n          const value = values[index];\n          if (value !== null) {\n            result[originalKey] = this.deserializeData(value);\n            this.recordCacheHit(originalKey);\n          } else {\n            this.recordCacheMiss(originalKey);\n          }\n        });\n      } else {\n        // Fallback to memory cache\n        keys.forEach(key => {\n          const fullKey = this.buildKey(key, options.namespace);\n          const cached = this.fallbackCache.get(fullKey);\n          if (cached && cached.expires > Date.now()) {\n            result[key] = cached.data;\n            this.recordCacheHit(key);\n          } else {\n            this.recordCacheMiss(key);\n          }\n        });\n      }\n\n      return result;\n    } catch (error) {\n      logError('Multi-get error', error);\n      return {};\n    }\n  }\n\n  /**\n   * Build cache key with namespace\n   */\n  buildKey(key, namespace = 'default') {\n    return `sentia:${namespace}:${key}`;\n  }\n\n  /**\n   * Get TTL for specific key type\n   */\n  getTTLForKey(key) {\n    for (const [type, ttl] of Object.entries(this.defaultTTL)) {\n      if (key.includes(type)) {\n        return ttl;\n      }\n    }\n    return this.defaultTTL.dashboard; // Default fallback\n  }\n\n  /**\n   * Serialize data with optional compression\n   */\n  serializeData(data) {\n    const jsonString = JSON.stringify(data);\n\n    // TODO: Add compression for large data\n    if (jsonString.length > this.compressionThreshold) {\n      // Would implement compression here if needed\n      logDebug('Large cache entry detected', { size: `${jsonString.length} bytes`, preview: jsonString.substring(0, 100) + '...' });\n    }\n\n    return jsonString;\n  }\n\n  /**\n   * Deserialize data\n   */\n  deserializeData(serialized) {\n    try {\n      return JSON.parse(serialized);\n    } catch (error) {\n      logError('Failed to deserialize cached data', error);\n      return null;\n    }\n  }\n\n  /**\n   * Set cache tags for invalidation\n   */\n  async setTags(key, tags) {\n    if (!this.isConnected || !this.client || !Array.isArray(tags)) return;\n\n    try {\n      for (const tag of tags) {\n        const tagKey = `tag:${tag}`;\n        await this.client.sAdd(tagKey, key);\n        await this.client.expire(tagKey, 86400); // Tags expire after 24 hours\n      }\n    } catch (error) {\n      logError('Error setting cache tags', error);\n    }\n  }\n\n  /**\n   * Delete cache tags\n   */\n  async deleteTags(key) {\n    if (!this.isConnected || !this.client) return;\n\n    try {\n      const tagKeys = await this.client.keys('tag:*');\n      for (const tagKey of tagKeys) {\n        await this.client.sRem(tagKey, key);\n      }\n    } catch (error) {\n      logError('Error deleting cache tags', error);\n    }\n  }\n\n  /**\n   * Clean up expired entries from memory cache\n   */\n  cleanupMemoryCache() {\n    const now = Date.now();\n    for (const [key, value] of this.fallbackCache) {\n      if (value.expires <= now) {\n        this.fallbackCache.delete(key);\n      }\n    }\n\n    // If still too large, remove oldest entries\n    if (this.fallbackCache.size > 800) {\n      const entries = Array.from(this.fallbackCache.entries())\n        .sort((a, b) => a[1].expires - b[1].expires);\n\n      for (let i = 0; i < 200; i++) {\n        if (entries[i]) {\n          this.fallbackCache.delete(entries[i][0]);\n        }\n      }\n    }\n  }\n\n  /**\n   * Start periodic cleanup\n   */\n  startPeriodicCleanup() {\n    setInterval(() => {\n      if (!this.isConnected) {\n        this.cleanupMemoryCache();\n      }\n    }, 60000); // Every minute\n  }\n\n  /**\n   * Record cache metrics\n   */\n  recordCacheHit(key) {\n    // Could send to monitoring service\n    logDebug('Cache HIT', { key });\n  }\n\n  recordCacheMiss(key) {\n    // Could send to monitoring service\n    logDebug('Cache MISS', { key });\n  }\n\n  recordFetchTime(key, time) {\n    // Could send to monitoring service\n    logDebug('Fetch time recorded', { key, time: `${time.toFixed(2)}ms` });\n  }\n\n  /**\n   * Get cache statistics\n   */\n  async getStats() {\n    const stats = {\n      connected: this.isConnected,\n      fallbackEntries: this.fallbackCache.size,\n      redisInfo: null\n    };\n\n    if (this.isConnected && this.client) {\n      try {\n        const info = await this.client.info('memory');\n        stats.redisInfo = info;\n      } catch (error) {\n        logError('Error getting Redis stats', error);\n      }\n    }\n\n    return stats;\n  }\n\n  /**\n   * Clear all cache\n   */\n  async clear(pattern = '*') {\n    try {\n      if (this.isConnected && this.client) {\n        const keys = await this.client.keys(`sentia:${pattern}`);\n        if (keys.length > 0) {\n          await this.client.del(...keys);\n          logInfo('Cleared cache entries', { count: keys.length });\n        }\n      } else {\n        this.fallbackCache.clear();\n        logInfo('Cleared memory cache');\n      }\n    } catch (error) {\n      logError('Error clearing cache', error);\n    }\n  }\n\n  /**\n   * Shutdown cache service\n   */\n  async shutdown() {\n    try {\n      if (this.client) {\n        await this.client.quit();\n      }\n      this.fallbackCache.clear();\n      logInfo('Redis cache service shutdown complete');\n    } catch (error) {\n      logError('Error shutting down cache', error);\n    }\n  }\n}\n\n// Export singleton instance\nexport const cacheService = new RedisCacheService();\n\n// Export cache decorators for common patterns\nexport const withCache = (key, ttl, options = {}) => {\n  return (target, propertyName, descriptor) => {\n    const method = descriptor.value;\n\n    descriptor.value = async function(...args) {\n      const cacheKey = typeof key === 'function' ? key(...args) : key;\n\n      return cacheService.getOrSet(\n        cacheKey,\n        () => method.apply(this, args),\n        ttl,\n        options\n      );\n    };\n\n    return descriptor;\n  };\n};\n\nexport default RedisCacheService;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\services\\dashboardService.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logInfo' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 17,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logInfo" },
            "fix": { "range": [9, 17], "text": "" },
            "desc": "Remove unused variable 'logInfo'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logError' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 19,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logError" },
            "fix": { "range": [16, 26], "text": "" },
            "desc": "Remove unused variable 'logError'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logDebug' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logDebug" },
            "fix": { "range": [35, 45], "text": "" },
            "desc": "Remove unused variable 'logDebug'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'devLog' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 48,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "devLog" },
            "fix": { "range": [45, 53], "text": "" },
            "desc": "Remove unused variable 'devLog'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'error' is defined but never used.",
        "line": 35,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 35,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 5,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { logInfo, logError, logWarn, logDebug, devLog } from '../utils/structuredLogger.js';\n\nconst DEFAULT_MCP_BASE_URL = 'https://mcp-server-tkyu.onrender.com'\nconst DASHBOARD_SUMMARY_PATH = '/v1/dashboard/summary'\n\nconst MOCK_DASHBOARD_SUMMARY = {\n  generatedAt: new Date().toISOString(),\n  metrics: {\n    throughput: { value: 94.7, unit: '%', trend: 1.8 },\n    forecastAccuracy: { value: 86.3, unit: '%', trend: 0.9 },\n    cashRunway: { value: 137, unit: 'days', trend: 6 },\n    queueDepth: { value: 12, unit: 'jobs', trend: -3 },\n  },\n  alerts: [\n    {\n      id: 'line-7-maintenance',\n      severity: 'warning',\n      message: 'Line 7 scheduled maintenance window in 2 hours',\n    },\n    {\n      id: 'supply-risk',\n      severity: 'info',\n      message: 'Supplier lead time extended 3 days for EU spirits batch',\n    },\n  ],\n}\n\nfunction resolveBaseUrl() {\n  return import.meta.env?.VITE_MCP_BASE_URL ?? DEFAULT_MCP_BASE_URL\n}\n\nasync function safeJson(response) {\n  try {\n    return await response.json()\n  } catch (error) {\n    return null\n  }\n}\n\nexport async function fetchDashboardSummary({ signal } = {}) {\n  const controller = !signal ? new AbortController() : null\n  const timeout = controller ? setTimeout(() => controller.abort(), 5000) : null\n\n  const requestSignal = signal ?? controller?.signal\n  const baseUrl = resolveBaseUrl()\n  const url = `${baseUrl}${DASHBOARD_SUMMARY_PATH}`\n\n  try {\n    const response = await fetch(url, {\n      method: 'GET',\n      headers: {\n        'content-type': 'application/json',\n      },\n      signal: requestSignal,\n    })\n\n    if (!response.ok) {\n      throw new Error(`MCP responded with ${response.status}`)\n    }\n\n    const payload = await safeJson(response)\n    if (!payload) {\n      throw new Error('MCP response missing JSON body')\n    }\n\n    return {\n      source: 'mcp',\n      payload,\n    }\n  } catch (error) {\n    logWarn('Dashboard service falling back to mock summary', error)\n    return {\n      source: 'mock',\n      payload: MOCK_DASHBOARD_SUMMARY,\n    }\n  } finally {\n    if (timeout) {\n      clearTimeout(timeout)\n    }\n  }\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\services\\logger\\enterprise-logger.js",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 10,
        "column": 74,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 10,
        "endColumn": 81
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 11,
        "column": 118,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 11,
        "endColumn": 125
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'e' is defined but never used.",
        "line": 84,
        "column": 16,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 84,
        "endColumn": 17
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Enterprise Logging System - Browser Compatible\n * Structured logging for React application\n * Replaces all console.log/error/warn statements\n */\n\n// Environment configuration\n// Check if we're in a browser (Vite) or Node.js environment\nconst isBrowser = typeof window !== 'undefined';\nconst NODE_ENV = isBrowser ? (import.meta.env?.MODE || 'development') : (process.env.NODE_ENV || 'development');\nconst LOG_LEVEL = isBrowser ? (import.meta.env?.VITE_LOG_LEVEL || (NODE_ENV === 'production' ? 'info' : 'debug')) : (process.env.LOG_LEVEL || (NODE_ENV === 'production' ? 'info' : 'debug'));\n\n// Log levels\nconst LOG_LEVELS = {\n  trace: 0,\n  debug: 1,\n  info: 2,\n  warn: 3,\n  error: 4,\n  fatal: 5\n};\n\n// Check if we should show debug logs\nconst shouldDebug = LOG_LEVEL === 'debug' || LOG_LEVEL === 'trace';\n\n/**\n * Structured logger for browser environment\n */\nclass EnterpriseLogger {\n  constructor() {\n    this.context = {\n      environment: NODE_ENV,\n      timestamp: new Date().toISOString(),\n      browser: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown'\n    };\n  }\n\n  shouldLog(level) {\n    return LOG_LEVELS[level] >= LOG_LEVELS[LOG_LEVEL] || 0;\n  }\n\n  formatLog(level, message, data = {}) {\n    return {\n      ...this.context,\n      level,\n      timestamp: new Date().toISOString(),\n      message,\n      ...data\n    };\n  }\n\n  log(level, message, data) {\n    if (!this.shouldLog(level)) return;\n\n    const logData = this.formatLog(level, message, data);\n\n    // In browser, use console methods\n    switch (level) {\n      case 'trace':\n      case 'debug':\n        console.debug('[DEBUG]', message, data || '');\n        break;\n      case 'info':\n        console.info('[INFO]', message, data || '');\n        break;\n      case 'warn':\n        console.warn('[WARN]', message, data || '');\n        break;\n      case 'error':\n      case 'fatal':\n        console.error('[ERROR]', message, data || '');\n        break;\n      default:\n        console.log('[LOG]', message, data || '');\n    }\n\n    // Store in localStorage for debugging (limited to last 100 logs)\n    if (NODE_ENV === 'development') {\n      try {\n        const logs = JSON.parse(localStorage.getItem('app_logs') || '[]');\n        logs.push(logData);\n        if (logs.length > 100) logs.shift();\n        localStorage.setItem('app_logs', JSON.stringify(logs));\n      } catch (e) {\n        // Ignore localStorage errors\n      }\n    }\n  }\n\n  trace(message, data) {\n    this.log('trace', message, data);\n  }\n\n  debug(message, data) {\n    this.log('debug', message, data);\n  }\n\n  info(message, data) {\n    this.log('info', message, data);\n  }\n\n  warn(message, data) {\n    this.log('warn', message, data);\n  }\n\n  error(message, data) {\n    this.log('error', message, data);\n  }\n\n  fatal(message, data) {\n    this.log('fatal', message, data);\n  }\n}\n\n// Create singleton instance\nconst logger = new EnterpriseLogger();\n\n// Export convenience functions\nexport const logTrace = (message, data) => logger.trace(message, data);\nexport const logDebug = (message, data) => logger.debug(message, data);\nexport const logInfo = (message, data) => logger.info(message, data);\nexport const logWarn = (message, data) => logger.warn(message, data);\nexport const logError = (message, data) => logger.error(message, data);\nexport const logFatal = (message, data) => logger.fatal(message, data);\n\n// Development-only console helpers (for backwards compatibility)\nexport const devLog = {\n  log: (...args) => {\n    if (shouldDebug) console.log(...args);\n  },\n  warn: (...args) => {\n    if (shouldDebug) console.warn(...args);\n  },\n  error: (...args) => {\n    if (shouldDebug) console.error(...args);\n  },\n  info: (...args) => {\n    if (shouldDebug) console.info(...args);\n  }\n};\n\n// Create logger function for compatibility\nexport const createLogger = (name) => {\n  // Return a namespaced version of the logger\n  return {\n    trace: (msg, data) => logger.trace(`[${name}] ${msg}`, data),\n    debug: (msg, data) => logger.debug(`[${name}] ${msg}`, data),\n    info: (msg, data) => logger.info(`[${name}] ${msg}`, data),\n    warn: (msg, data) => logger.warn(`[${name}] ${msg}`, data),\n    error: (msg, data) => logger.error(`[${name}] ${msg}`, data),\n    fatal: (msg, data) => logger.fatal(`[${name}] ${msg}`, data)\n  };\n};\n\n// Express middleware for logging\nexport const loggingMiddleware = (req, res, next) => {\n  const start = Date.now();\n\n  // Log request\n  logger.info(`${req.method} ${req.path}`, {\n    method: req.method,\n    path: req.path,\n    query: req.query,\n    ip: req.ip\n  });\n\n  // Capture response\n  const originalSend = res.send;\n  res.send = function(data) {\n    const duration = Date.now() - start;\n    logger.info(`Response sent: ${req.method} ${req.path}`, {\n      statusCode: res.statusCode,\n      duration: `${duration}ms`\n    });\n    return originalSend.call(this, data);\n  };\n\n  next();\n};\n\n// Default export\nexport default logger;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\services\\monitoring\\healthMonitor.test.js",
    "messages": [
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'global' is not defined.",
        "line": 184,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 184,
        "endColumn": 13
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'global' is not defined.",
        "line": 185,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 185,
        "endColumn": 13
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Health Monitor Test Suite\n * Comprehensive tests for system health monitoring functionality\n */\n\nimport { describe, it, expect, vi, beforeEach, afterEach } from 'vitest'\nimport { HealthMonitor } from './healthMonitor'\n\n// Mock global APIs\nglobalThis.fetch = vi.fn()\nglobalThis.performance = {\n  now: vi.fn(() => Date.now()),\n  getEntriesByType: vi.fn(() => []),\n  memory: {\n    usedJSHeapSize: 1024 * 1024 * 50, // 50MB\n    totalJSHeapSize: 1024 * 1024 * 100, // 100MB\n    jsHeapSizeLimit: 1024 * 1024 * 200 // 200MB\n  }\n}\n\ndescribe('HealthMonitor', () => {\n  let monitor\n\n  beforeEach(() => {\n    vi.clearAllMocks()\n    monitor = new HealthMonitor({\n      checkInterval: 1000, // 1 second for testing\n      criticalThreshold: 2000,\n      warningThreshold: 1000\n    })\n  })\n\n  afterEach(() => {\n    if (monitor.isMonitoring) {\n      monitor.stop()\n    }\n  })\n\n  describe('Initialization', () => {\n    it('should create health monitor with default config', () => {\n      const defaultMonitor = new HealthMonitor()\n      expect(defaultMonitor.config.checkInterval).toBe(30000)\n      expect(defaultMonitor.config.criticalThreshold).toBe(2000)\n      expect(defaultMonitor.isMonitoring).toBe(false)\n    })\n\n    it('should create health monitor with custom config', () => {\n      expect(monitor.config.checkInterval).toBe(1000)\n      expect(monitor.config.criticalThreshold).toBe(2000)\n      expect(monitor.healthChecks.size).toBe(0)\n    })\n  })\n\n  describe('Health Check Registration', () => {\n    it('should register a health check', () => {\n      const checkFunction = vi.fn(() => ({ healthy: true }))\n\n      monitor.registerHealthCheck('test-check', checkFunction, {\n        timeout: 3000,\n        critical: true\n      })\n\n      expect(monitor.healthChecks.size).toBe(1)\n      expect(monitor.healthChecks.has('test-check')).toBe(true)\n    })\n\n    it('should unregister a health check', () => {\n      const checkFunction = vi.fn(() => ({ healthy: true }))\n\n      monitor.registerHealthCheck('test-check', checkFunction)\n      expect(monitor.healthChecks.size).toBe(1)\n\n      monitor.unregisterHealthCheck('test-check')\n      expect(monitor.healthChecks.size).toBe(0)\n    })\n\n    it('should register core health checks on start', () => {\n      monitor.start()\n\n      // Should register database, api, memory, external_services, performance checks\n      expect(monitor.healthChecks.size).toBeGreaterThanOrEqual(5)\n      expect(monitor.healthChecks.has('database')).toBe(true)\n      expect(monitor.healthChecks.has('api')).toBe(true)\n      expect(monitor.healthChecks.has('memory')).toBe(true)\n    })\n  })\n\n  describe('Health Check Execution', () => {\n    it('should execute a successful health check', async () => {\n      const checkFunction = vi.fn(() => Promise.resolve({\n        healthy: true,\n        status: 'good',\n        responseTime: 150\n      }))\n\n      monitor.registerHealthCheck('test-check', checkFunction)\n\n      const check = monitor.healthChecks.get('test-check')\n      const result = await monitor.executeHealthCheck('test-check', check)\n\n      expect(result.healthy).toBe(true)\n      expect(result.name).toBe('test-check')\n      expect(result.status).toBe('good')\n      expect(checkFunction).toHaveBeenCalledTimes(1)\n    })\n\n    it('should handle failed health check', async () => {\n      const checkFunction = vi.fn(() => Promise.reject(new Error('Check failed')))\n\n      monitor.registerHealthCheck('test-check', checkFunction)\n\n      const check = monitor.healthChecks.get('test-check')\n      const result = await monitor.executeHealthCheck('test-check', check)\n\n      expect(result.healthy).toBe(false)\n      expect(result.error).toBe('Check failed')\n      expect(result.status).toBe('error')\n    })\n\n    it('should handle health check timeout', async () => {\n      const checkFunction = vi.fn(() => new Promise(resolve => {\n        setTimeout(() => resolve({ healthy: true }), 10000) // 10 seconds\n      }))\n\n      monitor.registerHealthCheck('test-check', checkFunction, { timeout: 100 })\n\n      const check = monitor.healthChecks.get('test-check')\n      const result = await monitor.executeHealthCheck('test-check', check)\n\n      expect(result.healthy).toBe(false)\n      expect(result.error).toBe('Health check timeout')\n    })\n  })\n\n  describe('Database Health Check', () => {\n    it('should check database connectivity successfully', async () => {\n      fetch.mockResolvedValueOnce({\n        ok: true,\n        status: 200\n      })\n\n      monitor.start()\n      const dbCheck = monitor.healthChecks.get('database')\n      const result = await dbCheck.checkFunction()\n\n      expect(result.healthy).toBe(true)\n      expect(result.status).toBe('connected')\n      expect(result.responseTime).toBeDefined()\n      expect(fetch).toHaveBeenCalledWith('/api/health/database', {\n        method: 'GET',\n        timeout: 3000\n      })\n    })\n\n    it('should handle database connectivity failure', async () => {\n      fetch.mockRejectedValueOnce(new Error('Connection failed'))\n\n      monitor.start()\n      const dbCheck = monitor.healthChecks.get('database')\n      const result = await dbCheck.checkFunction()\n\n      expect(result.healthy).toBe(false)\n      expect(result.status).toBe('error')\n      expect(result.error).toBe('Connection failed')\n    })\n  })\n\n  describe('Memory Health Check', () => {\n    it('should check memory usage successfully', async () => {\n      monitor.start()\n      const memoryCheck = monitor.healthChecks.get('memory')\n      const result = await memoryCheck.checkFunction()\n\n      expect(result.healthy).toBe(true)\n      expect(result.usage).toBeDefined()\n      expect(result.usage.used).toBe(50) // 50MB\n      expect(result.usage.limit).toBe(200) // 200MB\n      expect(result.usage.percentage).toBe(25) // 25%\n      expect(result.status).toBe('good')\n    })\n\n    it('should alert on high memory usage', async () => {\n      // Mock high memory usage\n      global.performance.memory.usedJSHeapSize = 1024 * 1024 * 180 // 180MB\n      global.performance.memory.jsHeapSizeLimit = 1024 * 1024 * 200 // 200MB\n\n      monitor.start()\n      const memoryCheck = monitor.healthChecks.get('memory')\n      const result = await memoryCheck.checkFunction()\n\n      expect(result.healthy).toBe(false) // Over 85% threshold\n      expect(result.usage.percentage).toBe(90)\n      expect(result.status).toBe('critical')\n    })\n  })\n\n  describe('External Services Health Check', () => {\n    it('should check external services successfully', async () => {\n      // Mock successful responses\n      fetch\n        .mockResolvedValueOnce({ ok: true, status: 200 }) // Xero\n        .mockResolvedValueOnce({ ok: true, status: 200 }) // MCP Server\n        .mockResolvedValueOnce({ ok: true, status: 200 }) // Clerk\n\n      monitor.start()\n      const servicesCheck = monitor.healthChecks.get('external_services')\n      const result = await servicesCheck.checkFunction()\n\n      expect(result.healthy).toBe(true)\n      expect(result.services).toHaveLength(3)\n      expect(result.summary.healthy).toBe(3)\n      expect(result.summary.total).toBe(3)\n      expect(result.status).toBe('all_healthy')\n    })\n\n    it('should handle partial service failures', async () => {\n      // Mock mixed responses\n      fetch\n        .mockResolvedValueOnce({ ok: true, status: 200 }) // Xero - success\n        .mockResolvedValueOnce({ ok: false, status: 500 }) // MCP Server - failure\n        .mockResolvedValueOnce({ ok: true, status: 200 }) // Clerk - success\n\n      monitor.start()\n      const servicesCheck = monitor.healthChecks.get('external_services')\n      const result = await servicesCheck.checkFunction()\n\n      expect(result.healthy).toBe(true) // 70% threshold met\n      expect(result.summary.healthy).toBe(2)\n      expect(result.summary.total).toBe(3)\n      expect(result.status).toBe('mostly_healthy')\n    })\n\n    it('should fail when too many services are down', async () => {\n      // Mock all failures\n      fetch\n        .mockResolvedValueOnce({ ok: false, status: 500 })\n        .mockResolvedValueOnce({ ok: false, status: 500 })\n        .mockResolvedValueOnce({ ok: false, status: 500 })\n\n      monitor.start()\n      const servicesCheck = monitor.healthChecks.get('external_services')\n      const result = await servicesCheck.checkFunction()\n\n      expect(result.healthy).toBe(false)\n      expect(result.summary.healthy).toBe(0)\n      expect(result.status).toBe('degraded')\n    })\n  })\n\n  describe('System Metrics', () => {\n    it('should calculate system health metrics', async () => {\n      // Register test checks\n      monitor.registerHealthCheck('test1', () => ({ healthy: true }), { critical: true })\n      monitor.registerHealthCheck('test2', () => ({ healthy: false }))\n      monitor.registerHealthCheck('test3', () => ({ healthy: true }), { critical: true })\n\n      const results = new Map([\n        ['test1', { healthy: true, name: 'test1' }],\n        ['test2', { healthy: false, name: 'test2' }],\n        ['test3', { healthy: true, name: 'test3' }]\n      ])\n\n      monitor.updateSystemMetrics(results)\n\n      const systemHealth = monitor.getSystemHealth()\n      expect(systemHealth.overall.percentage).toBe(67) // 2/3 healthy\n      expect(systemHealth.checks.total).toBe(3)\n      expect(systemHealth.checks.healthy).toBe(2)\n      expect(systemHealth.checks.critical).toBe(2)\n      expect(systemHealth.checks.criticalHealthy).toBe(2)\n      expect(systemHealth.overall.healthy).toBe(true) // All critical checks healthy\n    })\n\n    it('should fail system health when critical checks fail', async () => {\n      monitor.registerHealthCheck('critical1', () => ({ healthy: false }), { critical: true })\n      monitor.registerHealthCheck('normal1', () => ({ healthy: true }))\n\n      const results = new Map([\n        ['critical1', { healthy: false, name: 'critical1' }],\n        ['normal1', { healthy: true, name: 'normal1' }]\n      ])\n\n      monitor.updateSystemMetrics(results)\n\n      const systemHealth = monitor.getSystemHealth()\n      expect(systemHealth.overall.healthy).toBe(false) // Critical check failed\n    })\n  })\n\n  describe('Alert Handling', () => {\n    it('should trigger alert for failed critical check', () => {\n      const alertHandler = vi.fn()\n      monitor.onAlert(alertHandler)\n\n      const results = new Map([\n        ['critical-test', { healthy: false, error: 'Test failure' }]\n      ])\n\n      monitor.healthChecks.set('critical-test', {\n        options: { critical: true },\n        lastResult: { healthy: false, error: 'Test failure' }\n      })\n\n      monitor.processAlerts(results)\n\n      expect(alertHandler).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'health_check_failed',\n          severity: 'critical',\n          source: 'critical-test'\n        })\n      )\n    })\n\n    it('should trigger performance alert for slow responses', () => {\n      const alertHandler = vi.fn()\n      monitor.onAlert(alertHandler)\n\n      const results = new Map([\n        ['slow-check', { healthy: true, responseTime: 5000 }]\n      ])\n\n      monitor.processAlerts(results)\n\n      expect(alertHandler).toHaveBeenCalledWith(\n        expect.objectContaining({\n          type: 'performance_degradation',\n          severity: 'warning'\n        })\n      )\n    })\n\n    it('should manage alert handlers correctly', () => {\n      const handler1 = vi.fn()\n      const handler2 = vi.fn()\n\n      monitor.onAlert(handler1)\n      monitor.onAlert(handler2)\n      expect(monitor.alertHandlers.size).toBe(2)\n\n      monitor.offAlert(handler1)\n      expect(monitor.alertHandlers.size).toBe(1)\n    })\n  })\n\n  describe('Monitoring Lifecycle', () => {\n    it('should start and stop monitoring correctly', () => {\n      expect(monitor.isMonitoring).toBe(false)\n      expect(monitor.monitoringInterval).toBeNull()\n\n      monitor.start()\n      expect(monitor.isMonitoring).toBe(true)\n      expect(monitor.monitoringInterval).not.toBeNull()\n\n      monitor.stop()\n      expect(monitor.isMonitoring).toBe(false)\n      expect(monitor.monitoringInterval).toBeNull()\n    })\n\n    it('should not start monitoring twice', () => {\n      const consoleSpy = vi.spyOn(console, 'warn').mockImplementation(() => {})\n\n      monitor.start()\n      monitor.start() // Second start should warn\n\n      expect(consoleSpy).toHaveBeenCalledWith('Health monitor is already running')\n      consoleSpy.mockRestore()\n    })\n\n    it('should handle stop when not running', () => {\n      expect(() => monitor.stop()).not.toThrow()\n    })\n  })\n\n  describe('Metrics Management', () => {\n    it('should add and retrieve metrics correctly', () => {\n      const testMetric = { timestamp: Date.now(), value: 100 }\n\n      monitor.addMetric('test', 'cpu_usage', testMetric)\n\n      const metrics = monitor.getMetrics('test', 'cpu_usage')\n      expect(metrics).toHaveLength(1)\n      expect(metrics[0]).toEqual({ timestamp: testMetric.timestamp, value: testMetric })\n    })\n\n    it('should limit metric buffer size', () => {\n      // Set small buffer for testing\n      monitor.config.maxMetricsBuffer = 3\n\n      for (let i = 0; i < 5; i++) {\n        monitor.addMetric('test', 'counter', { value: i })\n      }\n\n      const metrics = monitor.getMetrics('test', 'counter')\n      expect(metrics).toHaveLength(3)\n      expect(metrics[0].value.value).toBe(2) // Should keep last 3\n      expect(metrics[2].value.value).toBe(4)\n    })\n\n    it('should export health data correctly', () => {\n      monitor.addMetric('system', 'test', { value: 'test-data' })\n\n      const exportData = monitor.exportHealthData()\n\n      expect(exportData.timestamp).toBeDefined()\n      expect(exportData.uptime).toBeGreaterThan(0)\n      expect(exportData.version).toBe('1.0')\n      expect(exportData.systemHealth).toBeDefined()\n      expect(exportData.metrics).toBeDefined()\n    })\n\n    it('should clear old metrics', () => {\n      const now = Date.now()\n      const oldTimestamp = now - (25 * 60 * 60 * 1000) // 25 hours ago\n      const recentTimestamp = now - (1 * 60 * 60 * 1000) // 1 hour ago\n\n      // Add old and recent metrics\n      monitor.metrics.set('test', new Map([\n        ['old_metric', [{ timestamp: oldTimestamp, value: 'old' }]],\n        ['recent_metric', [{ timestamp: recentTimestamp, value: 'recent' }]]\n      ]))\n\n      monitor.clearMetrics('test', 24 * 60 * 60 * 1000) // 24 hours\n\n      const oldMetrics = monitor.getMetrics('test', 'old_metric')\n      const recentMetrics = monitor.getMetrics('test', 'recent_metric')\n\n      expect(oldMetrics).toHaveLength(0)\n      expect(recentMetrics).toHaveLength(1)\n    })\n  })\n})",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\services\\realtime\\sseClient.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logWarn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 6,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logWarn" },
            "fix": { "range": [109, 118], "text": "" },
            "desc": "Remove unused variable 'logWarn'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logDebug' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 6,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 46,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logDebug" },
            "fix": { "range": [118, 128], "text": "" },
            "desc": "Remove unused variable 'logDebug'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'devLog' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 6,
        "column": 48,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 54,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "devLog" },
            "fix": { "range": [128, 136], "text": "" },
            "desc": "Remove unused variable 'devLog'."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Server-Sent Events Client\n * Handles real-time updates from the server\n */\n\nimport { logInfo, logError, logWarn, logDebug, devLog } from '../../utils/structuredLogger.js';\n\nconst SSE_URL = import.meta.env.VITE_API_BASE_URL?.replace('/api', '/events') || 'http://localhost:5000/events'\n\nclass SSEClient {\n  constructor() {\n    this.eventSource = null\n    this.listeners = new Map()\n    this.reconnectAttempts = 0\n    this.maxReconnectAttempts = 5\n    this.reconnectDelay = 1000\n    this.isConnected = false\n  }\n\n  connect() {\n    if (this.eventSource && this.eventSource.readyState !== EventSource.CLOSED) {\n      return\n    }\n\n    try {\n      this.eventSource = new EventSource(SSE_URL, {\n        withCredentials: true\n      })\n\n      this.eventSource.onopen = () => {\n        logInfo('SSE connection established')\n        this.isConnected = true\n        this.reconnectAttempts = 0\n        this.notifyListeners('connection', { status: 'connected' })\n      }\n\n      this.eventSource.onerror = (error) => {\n        logError('SSE connection error', error)\n        this.isConnected = false\n        this.notifyListeners('connection', { status: 'error', error })\n\n        if (this.eventSource.readyState === EventSource.CLOSED) {\n          this.reconnect()\n        }\n      }\n\n      this.eventSource.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data)\n          this.notifyListeners('message', data)\n        } catch (error) {\n          logError('Error parsing SSE message', error)\n        }\n      }\n\n      // Register specific event types\n      this.registerEventTypes()\n    } catch (error) {\n      logError('Failed to create SSE connection', error)\n      this.reconnect()\n    }\n  }\n\n  registerEventTypes() {\n    const eventTypes = [\n      'metrics-update',\n      'alert',\n      'production-status',\n      'inventory-change',\n      'order-update',\n      'system-status',\n      'forecast-update',\n      'cash-flow-update'\n    ]\n\n    eventTypes.forEach(type => {\n      this.eventSource.addEventListener(type, (event) => {\n        try {\n          const data = JSON.parse(event.data)\n          this.notifyListeners(type, data)\n        } catch (error) {\n          logError('Error parsing event', { type, error })\n        }\n      })\n    })\n  }\n\n  reconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      logError('Max reconnection attempts reached')\n      this.notifyListeners('connection', { status: 'failed' })\n      return\n    }\n\n    this.reconnectAttempts++\n    const delay = this.reconnectDelay * Math.pow(2, this.reconnectAttempts - 1)\n\n    logInfo('Reconnecting SSE', { delay: `${delay}ms`, attempt: this.reconnectAttempts })\n\n    setTimeout(() => {\n      this.connect()\n    }, delay)\n  }\n\n  subscribe(eventType, callback) {\n    if (!this.listeners.has(eventType)) {\n      this.listeners.set(eventType, new Set())\n    }\n    this.listeners.get(eventType).add(callback)\n\n    // Return unsubscribe function\n    return () => {\n      const callbacks = this.listeners.get(eventType)\n      if (callbacks) {\n        callbacks.delete(callback)\n      }\n    }\n  }\n\n  notifyListeners(eventType, data) {\n    const callbacks = this.listeners.get(eventType)\n    if (callbacks) {\n      callbacks.forEach(callback => {\n        try {\n          callback(data)\n        } catch (error) {\n          logError('Error in SSE listener callback', error)\n        }\n      })\n    }\n\n    // Also notify wildcard listeners\n    const wildcardCallbacks = this.listeners.get('*')\n    if (wildcardCallbacks) {\n      wildcardCallbacks.forEach(callback => {\n        try {\n          callback({ type: eventType, data })\n        } catch (error) {\n          logError('Error in wildcard SSE listener', error)\n        }\n      })\n    }\n  }\n\n  disconnect() {\n    if (this.eventSource) {\n      this.eventSource.close()\n      this.eventSource = null\n      this.isConnected = false\n      this.notifyListeners('connection', { status: 'disconnected' })\n    }\n  }\n\n  getConnectionStatus() {\n    return {\n      isConnected: this.isConnected,\n      readyState: this.eventSource?.readyState,\n      reconnectAttempts: this.reconnectAttempts\n    }\n  }\n}\n\nexport const sseClient = new SSEClient()",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\services\\validationEngine.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logError' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 6,
        "column": 10,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 6,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logError" },
            "fix": { "range": [146, 155], "text": "" },
            "desc": "Remove unused variable 'logError'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'context' is defined but never used.",
        "line": 340,
        "column": 68,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 340,
        "endColumn": 75,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "context" },
            "fix": { "range": [8828, 8837], "text": "" },
            "desc": "Remove unused variable 'context'."
          }
        ]
      },
      {
        "ruleId": "no-useless-escape",
        "severity": 2,
        "message": "Unnecessary escape character: \\-.",
        "line": 804,
        "column": 40,
        "nodeType": "Literal",
        "messageId": "unnecessaryEscape",
        "endLine": 804,
        "endColumn": 41,
        "suggestions": [
          {
            "messageId": "removeEscape",
            "fix": { "range": [23324, 23325], "text": "" },
            "desc": "Remove the `\\`. This maintains the current functionality."
          },
          {
            "messageId": "escapeBackslash",
            "fix": { "range": [23324, 23324], "text": "\\" },
            "desc": "Replace the `\\` with `\\\\` to include the actual backslash character."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 3,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "/**\n * Data Validation Engine\n * Implements comprehensive validation rules based on context/business-logic/data_validation_rules.md\n */\n\nimport { logError, logWarn, logInfo } from '../../services/logger.js';\n\nclass ValidationEngine {\n  constructor() {\n    this.validationRules = this.initializeRules();\n  }\n\n  initializeRules() {\n    return {\n      // Product Data Validation\n      products: {\n        sku: {\n          required: true,\n          type: 'string',\n          format: /^[A-Z0-9\\-_]{3,50}$/,\n          unique: true,\n          description: 'Format: [PRODUCT]-[REGION]-[VARIANT] (e.g., \"GABA-RED-UK-001\")'\n        },\n        name: {\n          required: true,\n          type: 'string',\n          minLength: 1,\n          maxLength: 255\n        },\n        weight_kg: {\n          required: true,\n          type: 'number',\n          min: 0.001,\n          max: 50.000,\n          precision: 3\n        },\n        dimensions_cm: {\n          required: true,\n          type: 'string',\n          format: /^\\d+(.\\d+)?x\\d+(.\\d+)?x\\d+(.\\d+)?$/,\n          description: 'Format: \"LxWxH\" (e.g., \"10.5x5.2x15.0\")'\n        },\n        unit_cost: {\n          required: true,\n          type: 'number',\n          min: 0.01,\n          max: 10000.00,\n          precision: 2\n        },\n        selling_price: {\n          required: true,\n          type: 'number',\n          min: 0.01,\n          max: 10000.00,\n          precision: 2,\n          businessRule: 'selling_price > unit_cost'\n        },\n        production_time_hours: {\n          required: false,\n          type: 'number',\n          min: 0.1,\n          max: 72.0,\n          precision: 2\n        },\n        batch_size_min: {\n          required: false,\n          type: 'integer',\n          min: 1,\n          max: 10000\n        },\n        batch_size_max: {\n          required: false,\n          type: 'integer',\n          min: 1,\n          max: 100000,\n          businessRule: 'batch_size_max >= batch_size_min'\n        }\n      },\n\n      // Sales Data Validation\n      historical_sales: {\n        sku: {\n          required: true,\n          type: 'string',\n          format: /^[A-Z0-9\\-_]{3,50}$/,\n          foreignKey: 'products.sku'\n        },\n        sale_date: {\n          required: true,\n          type: 'date',\n          format: 'YYYY-MM-DD',\n          min: '2020-01-01',\n          maxDaysFromNow: 7\n        },\n        quantity_sold: {\n          required: true,\n          type: 'integer',\n          min: 1,\n          max: 10000\n        },\n        unit_price: {\n          required: true,\n          type: 'number',\n          min: 0.01,\n          max: 1000.00,\n          precision: 2\n        },\n        currency: {\n          required: true,\n          type: 'string',\n          enum: ['GBP', 'EUR', 'USD'],\n          description: 'ISO 4217 currency codes'\n        },\n        gross_revenue: {\n          required: false,\n          type: 'number',\n          businessRule: 'grossrevenue = quantity_sold * unit_price'\n        },\n        net_revenue: {\n          required: false,\n          type: 'number',\n          businessRule: 'net_revenue = gross_revenue - discounts',\n          min: 0\n        },\n        discounts: {\n          required: false,\n          type: 'number',\n          min: 0,\n          businessRule: 'discounts <= gross_revenue'\n        },\n        shipping_country: {\n          required: false,\n          type: 'string',\n          format: /^[A-Z]{2}$/,\n          enum: ['GB', 'US', 'DE', 'FR', 'ES', 'IT', 'NL', 'BE', 'AT', 'DK', 'SE', 'NO', 'FI'],\n          description: 'ISO 3166-1 alpha-2 country codes'\n        }\n      },\n\n      // Inventory Data Validation\n      inventory_levels: {\n        sku: {\n          required: true,\n          type: 'string',\n          format: /^[A-Z0-9\\-_]{3,50}$/,\n          foreignKey: 'products.sku'\n        },\n        warehouse_location: {\n          required: true,\n          type: 'string',\n          minLength: 2,\n          maxLength: 100\n        },\n        quantity_on_hand: {\n          required: true,\n          type: 'integer',\n          min: 0\n        },\n        reserved_quantity: {\n          required: false,\n          type: 'integer',\n          min: 0,\n          businessRule: 'reserved_quantity <= quantity_on_hand'\n        },\n        available_quantity: {\n          required: false,\n          type: 'integer',\n          businessRule: 'available_quantity = quantity_on_hand - reserved_quantity'\n        },\n        reorder_point: {\n          required: false,\n          type: 'integer',\n          min: 0\n        },\n        max_stock_level: {\n          required: false,\n          type: 'integer',\n          min: 0,\n          businessRule: 'max_stock_level >= reorder_point'\n        }\n      },\n\n      // Manufacturing Data Validation\n      manufacturing_data: {\n        job_number: {\n          required: true,\n          type: 'string',\n          minLength: 3,\n          maxLength: 50,\n          unique: true\n        },\n        product_sku: {\n          required: true,\n          type: 'string',\n          format: /^[A-Z0-9\\-_]{3,50}$/,\n          foreignKey: 'products.sku'\n        },\n        batch_number: {\n          required: true,\n          type: 'string',\n          minLength: 3,\n          maxLength: 50,\n          unique: true\n        },\n        quantity_produced: {\n          required: true,\n          type: 'integer',\n          min: 1\n        },\n        production_date: {\n          required: true,\n          type: 'date',\n          format: 'YYYY-MM-DD',\n          maxDaysFromNow: 0\n        },\n        quality_score: {\n          required: false,\n          type: 'number',\n          min: 0,\n          max: 100,\n          precision: 2\n        },\n        defect_rate: {\n          required: false,\n          type: 'number',\n          min: 0,\n          max: 100,\n          precision: 2,\n          warning: { threshold: 10, message: 'High defect rate detected' }\n        },\n        yield_percentage: {\n          required: false,\n          type: 'number',\n          min: 70,\n          max: 100,\n          precision: 2,\n          warning: { threshold: 85, message: 'Low yield rate detected' }\n        }\n      },\n\n      // Financial Data Validation\n      financial_data: {\n        transaction_date: {\n          required: true,\n          type: 'date',\n          format: 'YYYY-MM-DD',\n          min: '2020-01-01',\n          maxDaysFromNow: 0\n        },\n        transaction_type: {\n          required: true,\n          type: 'string',\n          enum: ['revenue', 'cost', 'expense', 'tax', 'fee', 'adjustment']\n        },\n        amount: {\n          required: true,\n          type: 'number',\n          precision: 2\n        },\n        currency: {\n          required: true,\n          type: 'string',\n          enum: ['GBP', 'EUR', 'USD']\n        },\n        account_code: {\n          required: false,\n          type: 'string',\n          format: /^\\d{4}-\\d{2}$/,\n          description: 'Format: XXXX-XX'\n        }\n      }\n    };\n  }\n\n  /**\n   * Validate a single row of data\n   * @param {Object} data - Row data to validate\n   * @param {string} dataType - Type of data (products, historical_sales, etc.)\n   * @param {number} rowNumber - Row number for error reporting\n   * @param {Object} context - Additional context (existing data, etc.)\n   * @returns {Object} Validation result\n   */\n  async validateRow(data, dataType, rowNumber, context = {}) {\n    const result = {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      processedData: { ...data }\n    };\n\n    const rules = this.validationRules[dataType];\n    if (!rules) {\n      result.errors.push({\n        field: 'dataType',\n        message: `Unknown data type: ${dataType}`,\n        code: 'UNKNOWN_DATA_TYPE'\n      });\n      result.isValid = false;\n      return result;\n    }\n\n    // Validate each field\n    for (const [fieldName, fieldRules] of Object.entries(rules)) {\n      const fieldResult = await this.validateField(\n        data[fieldName], \n        fieldName, \n        fieldRules, \n        data, \n        rowNumber, \n        context\n      );\n      \n      if (!fieldResult.isValid) {\n        result.isValid = false;\n        result.errors.push(...fieldResult.errors);\n      }\n      \n      result.warnings.push(...fieldResult.warnings);\n      \n      // Use processed value if different\n      if (fieldResult.processedValue !== undefined) {\n        result.processedData[fieldName] = fieldResult.processedValue;\n      }\n    }\n\n    // Validate business rules\n    const businessRuleResult = this.validateBusinessRules(result.processedData, dataType, rowNumber);\n    if (!businessRuleResult.isValid) {\n      result.isValid = false;\n      result.errors.push(...businessRuleResult.errors);\n    }\n    result.warnings.push(...businessRuleResult.warnings);\n\n    return result;\n  }\n\n  /**\n   * Validate a single field\n   */\n  async validateField(value, fieldName, rules, rowData, rowNumber, context) {\n    const result = {\n      isValid: true,\n      errors: [],\n      warnings: [],\n      processedValue: value\n    };\n\n    // Required field validation\n    if (rules.required && (value === null || value === undefined || value === '')) {\n      result.errors.push({\n        field: fieldName,\n        message: `Required field '${fieldName}' is missing`,\n        code: 'REQUIRED_FIELD_MISSING',\n        rowNumber\n      });\n      result.isValid = false;\n      return result;\n    }\n\n    // Skip other validations if value is empty and not required\n    if (!rules.required && (value === null || value === undefined || value === '')) {\n      return result;\n    }\n\n    // Type validation and conversion\n    const typeResult = this.validateType(value, rules.type, fieldName, rowNumber);\n    if (!typeResult.isValid) {\n      result.errors.push(...typeResult.errors);\n      result.isValid = false;\n    } else {\n      result.processedValue = typeResult.processedValue;\n      value = typeResult.processedValue;\n    }\n\n    // Format validation\n    if (rules.format && typeof value === 'string') {\n      if (!rules.format.test(value)) {\n        result.errors.push({\n          field: fieldName,\n          message: `Invalid format for '${fieldName}'. ${rules.description || ''}`,\n          code: 'INVALID_FORMAT',\n          rowNumber\n        });\n        result.isValid = false;\n      }\n    }\n\n    // Range validation\n    if (typeof value === 'number') {\n      if (rules.min !== undefined && value < rules.min) {\n        result.errors.push({\n          field: fieldName,\n          message: `Value ${value} is below minimum ${rules.min} for '${fieldName}'`,\n          code: 'VALUE_BELOW_MINIMUM',\n          rowNumber\n        });\n        result.isValid = false;\n      }\n      \n      if (rules.max !== undefined && value > rules.max) {\n        result.errors.push({\n          field: fieldName,\n          message: `Value ${value} exceeds maximum ${rules.max} for '${fieldName}'`,\n          code: 'VALUE_ABOVE_MAXIMUM',\n          rowNumber\n        });\n        result.isValid = false;\n      }\n    }\n\n    // String length validation\n    if (typeof value === 'string') {\n      if (rules.minLength && value.length < rules.minLength) {\n        result.errors.push({\n          field: fieldName,\n          message: `Text too short for '${fieldName}' (minimum ${rules.minLength} characters)`,\n          code: 'TEXT_TOO_SHORT',\n          rowNumber\n        });\n        result.isValid = false;\n      }\n      \n      if (rules.maxLength && value.length > rules.maxLength) {\n        result.errors.push({\n          field: fieldName,\n          message: `Text too long for '${fieldName}' (maximum ${rules.maxLength} characters)`,\n          code: 'TEXT_TOO_LONG',\n          rowNumber\n        });\n        result.isValid = false;\n      }\n    }\n\n    // Enum validation\n    if (rules.enum && !rules.enum.includes(value)) {\n      result.errors.push({\n        field: fieldName,\n        message: `Invalid value '${value}' for '${fieldName}'. Allowed values: ${rules.enum.join(', ')}`,\n        code: 'INVALID_ENUM_VALUE',\n        rowNumber\n      });\n      result.isValid = false;\n    }\n\n    // Precision validation for numbers\n    if (rules.precision && typeof value === 'number') {\n      const decimalPlaces = (value.toString().split('.')[1] || '').length;\n      if (decimalPlaces > rules.precision) {\n        result.warnings.push({\n          field: fieldName,\n          message: `Value ${value} has more than ${rules.precision} decimal places`,\n          code: 'PRECISION_WARNING',\n          rowNumber\n        });\n        // Round to specified precision\n        result.processedValue = parseFloat(value.toFixed(rules.precision));\n      }\n    }\n\n    // Warning thresholds\n    if (rules.warning && typeof value === 'number') {\n      if (value < rules.warning.threshold) {\n        result.warnings.push({\n          field: fieldName,\n          message: rules.warning.message || `Value ${value} is below warning threshold`,\n          code: 'WARNING_THRESHOLD',\n          rowNumber\n        });\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate and convert data types\n   */\n  validateType(value, expectedType, fieldName, rowNumber) {\n    const result = {\n      isValid: true,\n      errors: [],\n      processedValue: value\n    };\n\n    try {\n      switch (expectedType) {\n        case 'string':\n          result.processedValue = String(value);\n          break;\n\n        case 'number':\n          if (typeof value === 'string') {\n            // Remove common currency symbols and whitespace\n            const cleanValue = value.replace(/[$£€,\\s]/g, '');\n            const parsed = parseFloat(cleanValue);\n            if (isNaN(parsed)) {\n              throw new Error(`Cannot convert '${value}' to number`);\n            }\n            result.processedValue = parsed;\n          } else if (typeof value !== 'number') {\n            throw new Error(`Expected number, got ${typeof value}`);\n          }\n          break;\n\n        case 'integer':\n          if (typeof value === 'string') {\n            const parsed = parseInt(value.replace(/[,\\s]/g, ''), 10);\n            if (isNaN(parsed)) {\n              throw new Error(`Cannot convert '${value}' to integer`);\n            }\n            result.processedValue = parsed;\n          } else if (typeof value === 'number') {\n            result.processedValue = Math.floor(value);\n          } else {\n            throw new Error(`Expected integer, got ${typeof value}`);\n          }\n          break;\n\n        case 'date':\n          if (typeof value === 'string') {\n            const date = new Date(value);\n            if (isNaN(date.getTime())) {\n              throw new Error(`Invalid date format: ${value}`);\n            }\n            result.processedValue = date.toISOString().split('T')[0]; // YYYY-MM-DD\n          } else if (value instanceof Date) {\n            result.processedValue = value.toISOString().split('T')[0];\n          } else {\n            throw new Error(`Expected date, got ${typeof value}`);\n          }\n          break;\n\n        case 'boolean':\n          if (typeof value === 'string') {\n            const lowerValue = value.toLowerCase();\n            if (['true', '1', 'yes', 'y'].includes(lowerValue)) {\n              result.processedValue = true;\n            } else if (['false', '0', 'no', 'n'].includes(lowerValue)) {\n              result.processedValue = false;\n            } else {\n              throw new Error(`Cannot convert '${value}' to boolean`);\n            }\n          } else if (typeof value !== 'boolean') {\n            throw new Error(`Expected boolean, got ${typeof value}`);\n          }\n          break;\n\n        default:\n          // No conversion needed\n          break;\n      }\n    } catch (error) {\n      result.errors.push({\n        field: fieldName,\n        message: `Type validation failed: ${error.message}`,\n        code: 'TYPE_VALIDATION_ERROR',\n        rowNumber\n      });\n      result.isValid = false;\n    }\n\n    return result;\n  }\n\n  /**\n   * Validate business rules across fields\n   */\n  validateBusinessRules(data, dataType, rowNumber) {\n    const result = {\n      isValid: true,\n      errors: [],\n      warnings: []\n    };\n\n    const rules = this.validationRules[dataType];\n    if (!rules) return result;\n\n    // Check business rules defined in field definitions\n    for (const [fieldName, fieldRules] of Object.entries(rules)) {\n      if (fieldRules.businessRule) {\n        const ruleResult = this.evaluateBusinessRule(\n          fieldRules.businessRule, \n          data, \n          fieldName, \n          rowNumber\n        );\n        if (!ruleResult.isValid) {\n          result.errors.push(...ruleResult.errors);\n          result.isValid = false;\n        }\n        result.warnings.push(...ruleResult.warnings);\n      }\n    }\n\n    // Data type specific business rules\n    switch (dataType) {\n      case 'products':\n        if (data.selling_price && data.unit_cost && data.selling_price <= data.unit_cost) {\n          result.errors.push({\n            field: 'selling_price',\n            message: 'Selling price must be greater than unit cost',\n            code: 'BUSINESS_RULE_VIOLATION',\n            rowNumber\n          });\n          result.isValid = false;\n        }\n        break;\n\n      case 'historical_sales':\n        // Calculate gross revenue if not provided\n        if (data.quantity_sold && data.unit_price && !data.gross_revenue) {\n          data.grossrevenue = data.quantity_sold * data.unit_price;\n        }\n        \n        // Validate revenue calculations\n        if (data.gross_revenue && data.quantity_sold && data.unit_price) {\n          const expectedGross = data.quantity_sold * data.unit_price;\n          const tolerance = 0.01;\n          if (Math.abs(data.gross_revenue - expectedGross) > tolerance) {\n            result.warnings.push({\n              field: 'gross_revenue',\n              message: `Gross revenue ${data.gross_revenue} doesn't match quantity × price ${expectedGross}`,\n              code: 'CALCULATION_MISMATCH',\n              rowNumber\n            });\n          }\n        }\n        break;\n\n      case 'inventory_levels':\n        if (data.available_quantity && data.quantity_on_hand && data.reserved_quantity) {\n          const expectedAvailable = data.quantity_on_hand - data.reserved_quantity;\n          if (data.available_quantity !== expectedAvailable) {\n            result.warnings.push({\n              field: 'available_quantity',\n              message: `Available quantity should be ${expectedAvailable} (on_hand - reserved)`,\n              code: 'CALCULATION_MISMATCH',\n              rowNumber\n            });\n          }\n        }\n        break;\n    }\n\n    return result;\n  }\n\n  /**\n   * Evaluate a business rule string\n   */\n  evaluateBusinessRule(rule, data, fieldName, rowNumber) {\n    const result = {\n      isValid: true,\n      errors: [],\n      warnings: []\n    };\n\n    try {\n      // Simple rule evaluation - in production, use a proper expression parser\n      if (rule.includes('>')) {\n        const [left, right] = rule.split('>').map(s => s.trim());\n        const leftValue = this.getFieldValue(left, data);\n        const rightValue = this.getFieldValue(right, data);\n        \n        if (leftValue !== null && rightValue !== null && leftValue <= rightValue) {\n          result.errors.push({\n            field: fieldName,\n            message: `Business rule violation: ${rule}`,\n            code: 'BUSINESS_RULE_VIOLATION',\n            rowNumber\n          });\n          result.isValid = false;\n        }\n      } else if (rule.includes('>=')) {\n        const [left, right] = rule.split('>=').map(s => s.trim());\n        const leftValue = this.getFieldValue(left, data);\n        const rightValue = this.getFieldValue(right, data);\n        \n        if (leftValue !== null && rightValue !== null && leftValue < rightValue) {\n          result.errors.push({\n            field: fieldName,\n            message: `Business rule violation: ${rule}`,\n            code: 'BUSINESS_RULE_VIOLATION',\n            rowNumber\n          });\n          result.isValid = false;\n        }\n      } else if (rule.includes('=')) {\n        // Calculation rules - mark as warning if values don't match\n        const [left, right] = rule.split('=').map(s => s.trim());\n        const leftValue = this.getFieldValue(left, data);\n        const rightValue = this.evaluateExpression(right, data);\n        \n        if (leftValue !== null && rightValue !== null && Math.abs(leftValue - rightValue) > 0.01) {\n          result.warnings.push({\n            field: fieldName,\n            message: `Calculated value mismatch: ${rule}`,\n            code: 'CALCULATION_MISMATCH',\n            rowNumber\n          });\n        }\n      }\n    } catch (error) {\n      logWarn('Business rule evaluation failed', { rule, error: error.message });\n    }\n\n    return result;\n  }\n\n  /**\n   * Get field value from data object\n   */\n  getFieldValue(fieldName, data) {\n    return data[fieldName] !== undefined ? data[fieldName] : null;\n  }\n\n  /**\n   * Evaluate simple mathematical expressions safely\n   */\n  evaluateExpression(expression, data) {\n    try {\n      // Simple expression evaluator - replace field names with values\n      let expr = expression;\n      for (const [field, value] of Object.entries(data)) {\n        if (typeof value === 'number') {\n          expr = expr.replace(new RegExp(field, 'g'), value.toString());\n        }\n      }\n      \n      // Basic math operations only - use safe evaluation\n      if (/^[\\d+\\-*/.\\s()]+$/.test(expr)) {\n        return this.safeEvaluate(expr);\n      }\n    } catch (error) {\n      logWarn('Expression evaluation failed', { expression, error: error.message });\n    }\n    return null;\n  }\n\n  /**\n   * Safe mathematical expression evaluator without eval() or Function constructor\n   */\n  safeEvaluate(expression) {\n    // Remove whitespace\n    const expr = expression.replace(/\\s/g, '');\n    \n    // Simple calculator for basic operations using manual parsing\n    try {\n      // Only allow mathematical operations\n      if (!/^[\\d+\\-*/.()]+$/.test(expr)) {\n        throw new Error('Invalid characters in expression');\n      }\n      \n      // Use a simple recursive descent parser for safety\n      const result = this.parseExpression(expr);\n      \n      if (typeof result !== 'number' || !isFinite(result)) {\n        throw new Error('Invalid calculation result');\n      }\n      \n      return result;\n    } catch (error) {\n      logWarn('Safe evaluation failed', { expression, error: error.message });\n      return null;\n    }\n  }\n\n  /**\n   * Simple recursive descent parser for mathematical expressions\n   */\n  parseExpression(expr) {\n    let index = 0;\n    \n    const parseNumber = () => {\n      let num = '';\n      while (index < expr.length && /[\\d.]/.test(expr[index])) {\n        num += expr[index++];\n      }\n      return parseFloat(num);\n    };\n    \n    const parseFactor = () => {\n      if (expr[index] === '(') {\n        index++; // skip '('\n        const result = parseExpression();\n        index++; // skip ')'\n        return result;\n      }\n      return parseNumber();\n    };\n    \n    const parseTerm = () => {\n      let result = parseFactor();\n      while (index < expr.length && /[*/]/.test(expr[index])) {\n        const op = expr[index++];\n        const right = parseFactor();\n        result = op === '*' ? result * right : result / right;\n      }\n      return result;\n    };\n    \n    const parseExpression = () => {\n      let result = parseTerm();\n      while (index < expr.length && /[+\\-]/.test(expr[index])) {\n        const op = expr[index++];\n        const right = parseTerm();\n        result = op === '+' ? result + right : result - right;\n      }\n      return result;\n    };\n    \n    return parseExpression();\n  }\n\n  /**\n   * Validate an entire dataset\n   * @param {Array} rows - Array of data rows\n   * @param {string} dataType - Type of data\n   * @param {Object} context - Additional context\n   * @returns {Object} Validation summary\n   */\n  async validateDataset(rows, dataType, context = {}) {\n    logInfo('Starting dataset validation', { \n      dataType, \n      rowCount: rows.length \n    });\n\n    const results = {\n      isValid: true,\n      totalRows: rows.length,\n      validRows: 0,\n      errorRows: 0,\n      warningRows: 0,\n      results: [],\n      summary: {\n        errors: [],\n        warnings: [],\n        fieldStats: {}\n      }\n    };\n\n    for (let i = 0; i < rows.length; i++) {\n      const rowResult = await this.validateRow(rows[i], dataType, i + 1, context);\n      results.results.push({\n        rowNumber: i + 1,\n        ...rowResult\n      });\n\n      if (rowResult.isValid) {\n        results.validRows++;\n      } else {\n        results.errorRows++;\n        results.isValid = false;\n      }\n\n      if (rowResult.warnings.length > 0) {\n        results.warningRows++;\n      }\n\n      // Collect summary statistics\n      rowResult.errors.forEach(error => {\n        results.summary.errors.push(error);\n      });\n      \n      rowResult.warnings.forEach(warning => {\n        results.summary.warnings.push(warning);\n      });\n    }\n\n    // Calculate completion percentage\n    results.completionPercentage = results.totalRows > 0 \n      ? Math.round((results.validRows / results.totalRows) * 100) \n      : 0;\n\n    logInfo('Dataset validation completed', {\n      dataType,\n      totalRows: results.totalRows,\n      validRows: results.validRows,\n      errorRows: results.errorRows,\n      completionPercentage: results.completionPercentage\n    });\n\n    return results;\n  }\n}\n\nexport default ValidationEngine;",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\utils\\cn.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\utils\\env-validator.js",
    "messages": [
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logInfo' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 20,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 27,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logInfo" },
            "fix": { "range": [17, 26], "text": "" },
            "desc": "Remove unused variable 'logInfo'."
          }
        ]
      },
      {
        "ruleId": "no-unused-vars",
        "severity": 2,
        "message": "'logWarn' is defined but never used. Allowed unused vars must match /^[A-Z_]/u.",
        "line": 1,
        "column": 29,
        "nodeType": "Identifier",
        "messageId": "unusedVar",
        "endLine": 1,
        "endColumn": 36,
        "suggestions": [
          {
            "messageId": "removeVar",
            "data": { "varName": "logWarn" },
            "fix": { "range": [26, 35], "text": "" },
            "desc": "Remove unused variable 'logWarn'."
          }
        ]
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 30,
        "column": 13,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 30,
        "endColumn": 20
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 30,
        "column": 33,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 30,
        "endColumn": 40
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 40,
        "column": 22,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 40,
        "endColumn": 29
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 41,
        "column": 21,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 41,
        "endColumn": 28
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 45,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 45,
        "endColumn": 12
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 49,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 49,
        "endColumn": 14
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 49,
        "column": 40,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 49,
        "endColumn": 47
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 51,
        "column": 5,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 51,
        "endColumn": 12
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 62,
        "column": 9,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 62,
        "endColumn": 16
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 62,
        "column": 30,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 62,
        "endColumn": 37
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 64,
        "column": 7,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 64,
        "endColumn": 14
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 72,
        "column": 38,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 72,
        "endColumn": 45
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 73,
        "column": 46,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 73,
        "endColumn": 53
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 74,
        "column": 42,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 74,
        "endColumn": 49
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 75,
        "column": 45,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 75,
        "endColumn": 52
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 127,
        "column": 12,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 127,
        "endColumn": 19
      },
      {
        "ruleId": "no-undef",
        "severity": 2,
        "message": "'process' is not defined.",
        "line": 127,
        "column": 32,
        "nodeType": "Identifier",
        "messageId": "undef",
        "endLine": 127,
        "endColumn": 39
      }
    ],
    "suppressedMessages": [],
    "errorCount": 19,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { logDebug, logInfo, logWarn, logError } from 'logger';\n/**\n * Environment Variable Validator\n * Validates required environment variables on application startup\n * Implements TASK-002 from SpecKit specifications\n */\n\n// Required environment variables for backend\nconst requiredBackendEnvVars = [\n  'CLERK_SECRET_KEY',\n  'DATABASE_URL_DEVELOPMENT',\n  'DATABASE_URL_TESTING', \n  'DATABASE_URL_PRODUCTION'\n];\n\n// Required environment variables for frontend\nconst requiredFrontendEnvVars = [\n  'VITE_CLERK_PUBLISHABLE_KEY',\n  'VITE_CLERK_DOMAIN'\n];\n\n/**\n * Validates backend environment variables\n * Called from server startup\n */\nexport function validateBackendEnvironment() {\n  logDebug('🔍 Validating backend environment variables...');\n  \n  const missing = requiredBackendEnvVars.filter(\n    key => !process.env[key] || process.env[key].trim() === ''\n  );\n\n  if (missing.length > 0) {\n    logError('❌ CRITICAL: Missing required backend environment variables:');\n    missing.forEach(key => {\n      logError(`   - ${key}`);\n    });\n    logError('\\n📋 Required environment variables:');\n    requiredBackendEnvVars.forEach(key => {\n      const status = process.env[key] ? '✅' : '❌';\n      const value = process.env[key] ? '[SET]' : '[MISSING]';\n      logError(`   ${status} ${key}: ${value}`);\n    });\n    logError('\\n🔧 Please set these environment variables and restart the application.');\n    process.exit(1);\n  }\n\n  // Validate Clerk secret key format\n  if (process.env.CLERK_SECRET_KEY && !process.env.CLERK_SECRET_KEY.startsWith('sk_')) {\n    logError('❌ CRITICAL: CLERK_SECRET_KEY must start with \"sk_\"');\n    process.exit(1);\n  }\n\n  // Validate database URLs format\n  const dbUrls = [\n    'DATABASE_URL_DEVELOPMENT',\n    'DATABASE_URL_TESTING', \n    'DATABASE_URL_PRODUCTION'\n  ];\n\n  dbUrls.forEach(key => {\n    if (process.env[key] && !process.env[key].startsWith('postgresql://')) {\n      logError(`❌ CRITICAL: ${key} must be a valid PostgreSQL connection string`);\n      process.exit(1);\n    }\n  });\n\n  logDebug('✅ Backend environment validation passed');\n  \n  // Log configuration summary (without sensitive values)\n  logDebug('📋 Environment Configuration:');\n  logDebug(`   - CLERK_SECRET_KEY: ${process.env.CLERK_SECRET_KEY ? 'SET' : 'MISSING'}`);\n  logDebug(`   - DATABASE_URL_DEVELOPMENT: ${process.env.DATABASE_URL_DEVELOPMENT ? 'SET' : 'MISSING'}`);\n  logDebug(`   - DATABASE_URL_TESTING: ${process.env.DATABASE_URL_TESTING ? 'SET' : 'MISSING'}`);\n  logDebug(`   - DATABASE_URL_PRODUCTION: ${process.env.DATABASE_URL_PRODUCTION ? 'SET' : 'MISSING'}`);\n}\n\n/**\n * Validates frontend environment variables\n * Called from React app startup\n */\nexport function validateFrontendEnvironment() {\n  logDebug('🔍 Validating frontend environment variables...');\n  \n  const missing = requiredFrontendEnvVars.filter(\n    key => !import.meta.env[key] || import.meta.env[key].trim() === ''\n  );\n\n  if (missing.length > 0) {\n    logError('❌ CRITICAL: Missing required frontend environment variables:');\n    missing.forEach(key => {\n      logError(`   - ${key}`);\n    });\n    logError('\\n📋 Required environment variables:');\n    requiredFrontendEnvVars.forEach(key => {\n      const status = import.meta.env[key] ? '✅' : '❌';\n      const value = import.meta.env[key] ? '[SET]' : '[MISSING]';\n      logError(`   ${status} ${key}: ${value}`);\n    });\n    logError('\\n🔧 Please set these environment variables in .env.local and restart the application.');\n    \n    // For frontend, show user-friendly error instead of crashing\n    return false;\n  }\n\n  // Validate Clerk publishable key format\n  if (import.meta.env.VITE_CLERK_PUBLISHABLE_KEY && !import.meta.env.VITE_CLERK_PUBLISHABLE_KEY.startsWith('pk_')) {\n    logError('❌ CRITICAL: VITE_CLERK_PUBLISHABLE_KEY must start with \"pk_\"');\n    return false;\n  }\n\n  logDebug('✅ Frontend environment validation passed');\n  \n  // Log configuration summary (without sensitive values)\n  logDebug('📋 Frontend Environment Configuration:');\n  logDebug(`   - VITE_CLERK_PUBLISHABLE_KEY: ${import.meta.env.VITE_CLERK_PUBLISHABLE_KEY ? 'SET' : 'MISSING'}`);\n  logDebug(`   - VITE_CLERK_DOMAIN: ${import.meta.env.VITE_CLERK_DOMAIN ? 'SET' : 'MISSING'}`);\n  \n  return true;\n}\n\n/**\n * Get environment validation status for health checks\n */\nexport function getEnvironmentStatus() {\n  const backendStatus = requiredBackendEnvVars.every(\n    key => process.env[key] && process.env[key].trim() !== ''\n  );\n  \n  return {\n    backend: backendStatus,\n    timestamp: new Date().toISOString()\n  };\n}\n\n/**\n * Validate specific environment variable\n */\nexport function validateEnvVar(key, value, pattern = null) {\n  if (!value || value.trim() === '') {\n    return { valid: false, error: `${key} is required but not set` };\n  }\n  \n  if (pattern && !pattern.test(value)) {\n    return { valid: false, error: `${key} does not match required pattern` };\n  }\n  \n  return { valid: true };\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\utils\\logger.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\utils\\resilience.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "C:\\Projects\\Sentia Manufacturing Dashboard\\sentia-manufacturing-dashboard\\src\\utils\\structuredLogger.js",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
