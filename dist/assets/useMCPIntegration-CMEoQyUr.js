import{r as n}from"./vendor-BnoY360_.js";import{l as i,a as s,b as l}from"./structuredLogger-D1DJYsDB.js";const _=()=>{const[m,y]=n.useState(!1),[h,g]=n.useState("disconnected"),[v,S]=n.useState(null),[w,C]=n.useState([]),[p,k]=n.useState(null),c="https://sentia-manufacturing-mcp.onrender.com",u="sentia-mcp-secret",d=n.useCallback(async()=>{try{const e=await fetch(`${c}/health`,{method:"GET",headers:{"Content-Type":"application/json"}});if(e.ok){const t=await e.json();return S(t),g("connected"),y(!0),k(null),i("MCP server health check successful",{health:t}),t}else throw new Error(`Health check failed: ${e.status}`)}catch(e){return s("MCP server health check failed",e),g("disconnected"),y(!1),k(e.message),null}},[c]),f=n.useCallback(async()=>{try{const e=await fetch(`${c}/mcp/tools`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${u}`}});if(e.ok){const t=await e.json();return C(t.tools||[]),i("MCP tools retrieved successfully",{toolCount:t.tools?.length||0}),t.tools||[]}else throw new Error(`Failed to get tools: ${e.status}`)}catch(e){return s("Failed to get MCP tools",e),C([]),[]}},[c,u]),o=n.useCallback(async(e,t={})=>{try{i("Executing MCP tool",{toolName:e,parameters:t});const r=await fetch(`${c}/mcp/execute`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${u}`},body:JSON.stringify({tool:e,parameters:t})});if(r.ok){const a=await r.json();return i("MCP tool executed successfully",{toolName:e,result:a}),a}else{const a=await r.json();throw new Error(a.error||`Tool execution failed: ${r.status}`)}}catch(r){throw s("MCP tool execution failed",{toolName:e,error:r.message}),r}},[c,u]),b=n.useCallback(async(e={})=>{const t={horizon:30,confidence:.95,seasonality:!0,...e};try{return await o("demand_forecast",t)}catch(r){return l("Demand forecast failed, using fallback",r),{forecast:{predictions:Array.from({length:30},(a,I)=>({date:new Date(Date.now()+I*24*60*60*1e3).toISOString().split("T")[0],value:1e3+Math.random()*500,confidence:.85+Math.random()*.1})),accuracy:.87,trend:"increasing"},insights:[{type:"trend",message:"Demand showing upward trend with 87% confidence",impact:"positive"}]}}},[o]),P=n.useCallback(async(e={})=>{const t={timeHorizon:7,resourceConstraints:!0,qualityTargets:!0,...e};try{return await o("production_optimization",t)}catch(r){return l("Production optimization failed, using fallback",r),{optimization:{efficiency:.94,recommendations:[{action:"Increase Line 2 capacity",impact:"+12% throughput",cost:5e3},{action:"Optimize shift scheduling",impact:"+8% efficiency",cost:0}]},metrics:{currentEfficiency:.87,projectedEfficiency:.94,costSavings:15e3}}}},[o]),z=n.useCallback(async(e={})=>{const t={predictionHorizon:24,includeRiskFactors:!0,...e};try{return await o("quality_prediction",t)}catch(r){return l("Quality prediction failed, using fallback",r),{predictions:[{time:new Date().toISOString(),qualityScore:.92,riskLevel:"low",factors:["temperature","humidity","operator_experience"]}],riskFactors:[{factor:"Temperature variance",risk:.15,recommendation:"Maintain ±2°C control"},{factor:"Operator fatigue",risk:.08,recommendation:"Implement rotation schedule"}]}}},[o]),M=n.useCallback(async(e={})=>{const t={optimizationPeriod:30,includeCarryingCosts:!0,demandUncertainty:!0,...e};try{return await o("inventory_optimization",t)}catch(r){return l("Inventory optimization failed, using fallback",r),{optimization:{currentInventoryValue:18e5,optimalInventoryValue:165e4,savings:15e4,recommendations:[{sku:"SKU-001",currentStock:1e3,optimalStock:750,reason:"High carrying cost"},{sku:"SKU-002",currentStock:500,optimalStock:800,reason:"Demand increase predicted"}]},metrics:{turnoverImprovement:.12,carryingCostReduction:.18,stockoutRiskReduction:.25}}}},[o]),T=n.useCallback(e=>{if(!m)return l("Cannot subscribe to real-time data: MCP server not connected"),null;try{const t=new EventSource(`${c}/mcp/stream`);return t.onmessage=r=>{try{const a=JSON.parse(r.data);e(a)}catch(a){s("Failed to parse real-time data",a)}},t.onerror=r=>{s("Real-time data stream error",r),t.close()},t}catch(t){return s("Failed to establish real-time data stream",t),null}},[m,c]);n.useEffect(()=>{(async()=>{i("Initializing MCP server connection"),await d()&&await f();const r=setInterval(d,3e4);return()=>{clearInterval(r)}})()},[d,f]);const E=n.useCallback(()=>{switch(h){case"connected":return{status:"connected",color:"green",message:"MCP Server Connected",icon:"✓"};case"connecting":return{status:"connecting",color:"yellow",message:"Connecting to MCP Server...",icon:"⟳"};case"disconnected":default:return{status:"disconnected",color:"red",message:p||"MCP Server Disconnected",icon:"✗"}}},[h,p]);return{isConnected:m,connectionStatus:h,serverHealth:v,error:p,availableTools:w,checkServerHealth:d,getAvailableTools:f,executeTool:o,runDemandForecast:b,optimizeProduction:P,predictQuality:z,optimizeInventory:M,subscribeToRealTimeData:T,getConnectionStatusInfo:E}};export{_ as u};
