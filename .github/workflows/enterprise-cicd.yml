name: Enterprise CI/CD Pipeline - Sentia Manufacturing Dashboard

on:
  push:
    branches: [ development, test, production ]
  pull_request:
    branches: [ development, test, production ]
  schedule:
    # Run every 5 minutes for continuous deployment
    - cron: '*/5 * * * *'

env:
  NODE_VERSION: '20'
  DEPLOYMENT_TIMEOUT: 300000

jobs:
  quality-gates:
    name: Quality Gates & Security
    runs-on: ubuntu-latest
    outputs:
      quality-passed: ${{ steps.quality-check.outputs.passed }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --no-cache

    - name: Run ESLint
      id: lint
      run: |
        npm run lint
        echo "lint=passed" >> $GITHUB_OUTPUT
      continue-on-error: false

    - name: Run TypeScript check
      id: typecheck
      run: |
        npm run typecheck
        echo "typecheck=passed" >> $GITHUB_OUTPUT
      continue-on-error: false

    - name: Run Unit Tests
      id: tests
      run: |
        npm run test:run
        echo "tests=passed" >> $GITHUB_OUTPUT
      continue-on-error: false

    - name: Security Audit
      id: security
      run: |
        npm audit --audit-level=high
        echo "security=passed" >> $GITHUB_OUTPUT
      continue-on-error: false

    - name: Build Application
      id: build
      run: |
        npm run build
        echo "build=passed" >> $GITHUB_OUTPUT

    - name: Quality Gates Summary
      id: quality-check
      run: |
        echo "Quality Gates Results:"
        echo "- Lint: ${{ steps.lint.outputs.lint }}"
        echo "- TypeCheck: ${{ steps.typecheck.outputs.typecheck }}"
        echo "- Tests: ${{ steps.tests.outputs.tests }}"
        echo "- Security: ${{ steps.security.outputs.security }}"
        echo "- Build: ${{ steps.build.outputs.build }}"
        echo "passed=true" >> $GITHUB_OUTPUT

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: quality-gates
    if: github.ref == 'refs/heads/development' && needs.quality-gates.outputs.quality-passed == 'true'
    
    environment:
      name: development
      url: https://sentia-manufacturing-dashboard-development.up.railway.app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/

    - name: Deploy to Railway Development
      run: |
        npm install -g @railway/cli
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway link ${{ secrets.RAILWAY_PROJECT_ID }}
        railway up --environment development --detach
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    - name: Health Check
      run: |
        sleep 30
        curl -f https://sentia-manufacturing-dashboard-development.up.railway.app/api/health

    - name: Post-Deployment Tests
      run: |
        # Run smoke tests against deployed environment
        curl -f https://sentia-manufacturing-dashboard-development.up.railway.app/
        curl -f https://sentia-manufacturing-dashboard-development.up.railway.app/api/optimization/health

  deploy-testing:
    name: Deploy to Testing (UAT)
    runs-on: ubuntu-latest
    needs: [quality-gates, deploy-development]
    if: github.ref == 'refs/heads/test' && needs.quality-gates.outputs.quality-passed == 'true'
    
    environment:
      name: testing
      url: https://sentiatest.financeflo.ai

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/

    - name: Deploy to Railway Testing
      run: |
        npm install -g @railway/cli
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway link ${{ secrets.RAILWAY_PROJECT_ID }}
        railway up --environment testing --detach
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    - name: Extended Health Check
      run: |
        sleep 60
        for i in {1..10}; do
          curl -f https://sentiatest.financeflo.ai/api/health && break
          echo "Health check attempt $i failed, retrying..."
          sleep 15
        done

    - name: UAT Notification
      run: |
        echo "Testing environment deployed successfully!"
        echo "Ready for User Acceptance Testing at: https://sentiatest.financeflo.ai"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gates]
    if: github.ref == 'refs/heads/production' && needs.quality-gates.outputs.quality-passed == 'true'
    
    environment:
      name: production
      url: https://web-production-1f10.up.railway.app

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/

    - name: Create Pre-Deployment Snapshot
      run: |
        echo "Creating pre-deployment snapshot..."
        echo "{
          \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
          \"commit\": \"${{ github.sha }}\",
          \"branch\": \"${{ github.ref_name }}\",
          \"actor\": \"${{ github.actor }}\",
          \"workflow\": \"${{ github.run_id }}\"
        }" > pre-deployment-snapshot.json

    - name: Deploy to Railway Production
      run: |
        npm install -g @railway/cli
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway link ${{ secrets.RAILWAY_PROJECT_ID }}
        railway up --environment production --detach
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

    - name: Production Health Check
      run: |
        echo "Waiting for production deployment to stabilize..."
        sleep 120
        
        echo "Running comprehensive health checks..."
        for i in {1..20}; do
          if curl -f https://web-production-1f10.up.railway.app/api/health; then
            echo "Production health check passed on attempt $i"
            break
          else
            echo "Health check attempt $i failed, retrying..."
            sleep 15
          fi
        done

    - name: Production Smoke Tests
      run: |
        echo "Running production smoke tests..."
        curl -f https://web-production-1f10.up.railway.app/
        curl -f https://web-production-1f10.up.railway.app/api/optimization/health
        curl -f https://web-production-1f10.up.railway.app/api/forecasting/accuracy/trends

    - name: Production Deployment Success
      run: |
        echo "Production deployment completed successfully!"
        echo "Live at: https://web-production-1f10.up.railway.app"

  continuous-deployment:
    name: Continuous 5-Minute Deployment
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check for changes
      id: changes
      run: |
        # Check if there are recent changes
        RECENT_COMMITS=$(git log --since="5 minutes ago" --oneline | wc -l)
        if [ $RECENT_COMMITS -gt 0 ]; then
          echo "changes=true" >> $GITHUB_OUTPUT
          echo "Recent changes detected, triggering deployment"
        else
          echo "changes=false" >> $GITHUB_OUTPUT
          echo "No recent changes, skipping deployment"
        fi

    - name: Trigger Development Deployment
      if: steps.changes.outputs.changes == 'true'
      run: |
        echo "Triggering automated deployment pipeline..."
        # This would trigger the development deployment workflow
        gh workflow run enterprise-cicd.yml --ref development
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  monitoring-and-alerts:
    name: Monitoring & Alerts
    runs-on: ubuntu-latest
    if: always()
    needs: [deploy-development, deploy-testing, deploy-production]
    
    steps:
    - name: Monitor Deployments
      run: |
        echo "Monitoring deployment status..."
        echo "Development: ${{ needs.deploy-development.result }}"
        echo "Testing: ${{ needs.deploy-testing.result }}"
        echo "Production: ${{ needs.deploy-production.result }}"

    - name: Send Alerts
      if: failure()
      run: |
        echo "ALERT: Deployment pipeline failure detected!"
        echo "Failed jobs need investigation and resolution."
        # This would integrate with monitoring systems like Slack, PagerDuty, etc.

  cleanup:
    name: Cleanup & Maintenance
    runs-on: ubuntu-latest
    if: always()
    needs: [quality-gates, deploy-development, deploy-testing, deploy-production]
    
    steps:
    - name: Cleanup old artifacts
      run: |
        echo "Cleaning up old deployment artifacts..."
        # Clean up old build artifacts, logs, etc.
        
    - name: Update deployment metrics
      run: |
        echo "Updating deployment metrics and dashboards..."
        # Update internal metrics and monitoring dashboards