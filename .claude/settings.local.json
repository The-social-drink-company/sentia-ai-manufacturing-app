{
  "permissions": {
    "allow": [
      "Bash(git cherry-pick:*)",
      "Bash(git push:*)",
      "Bash(pnpm run:*)",
      "Bash(npx prisma generate:*)",
      "Bash(node:*)",
      "Bash(npm run quality:*)",
      "Bash(npx --yes @eslint/js@latest init)",
      "Bash(pnpm build:*)",
      "Bash(pnpm audit:*)",
      "Bash(find:*)",
      "Read(//c/Projects/**)",
      "Bash(echo:*)",
      "Bash(while read file)",
      "Bash(then echo \"=== $file ===\")",
      "Bash(head:*)",
      "Bash(pnpm add:*)",
      "Bash(pnpm list:*)",
      "Bash(git reset:*)",
      "Bash(gh pr create:*)",
      "Bash(git config:*)",
      "Bash(pnpm run lint:*)",
      "Bash(pnpm run build:*)",
      "Bash(git stash show:*)",
      "Bash(git branch:*)",
      "Bash(git show-branch:*)",
      "Bash(git rm:*)",
      "Bash(git merge:*)",
      "Bash(netstat:*)",
      "Bash(taskkill:*)",
      "Bash(npx babel:*)",
      "Bash(PORT=5001 pnpm run dev:server)",
      "Read(//c/Users/User/Downloads/**)",
      "Bash(pnpm install:*)",
      "Bash(pnpm start:*)",
      "Bash(set PORT=10000)",
      "Bash(python:*)",
      "WebSearch",
      "WebFetch(domain:clerk.com)",
      "Bash(xargs ls:*)",
      "Bash(set PORT=5001)",
      "Bash(git stash:*)",
      "Bash(git add:*)",
      "Bash(git commit:*)",
      "Bash(curl:*)",
      "WebFetch(domain:dashboard.render.com)",
      "Bash(TASKKILL /F /IM node.exe)",
      "Bash(Ctrl+C)",
      "Bash(findstr:*)",
      "Bash(git checkout:*)",
      "Bash(git pull:*)",
      "Bash(gh pr view:*)",
      "Bash(for file in src/pages/ClerkSignIn.jsx src/components/DashboardLayout.jsx src/components/widgets/DataTableWidget.jsx)",
      "Bash(do echo \"Checking $file\")",
      "Bash(done)",
      "Bash(git restore:*)",
      "Bash(gh pr list:*)",
      "WebFetch(domain:capliquify-frontend-prod.onrender.com)",
      "Bash(timeout:*)",
      "Bash(npm run build:*)",
      "Bash(npm run dev:*)",
      "Bash(cat:*)",
      "WebFetch(domain:sentia-manufacturing-dashboard-test.onrender.com)",
      "Bash(rm:*)",
      "WebFetch(domain:capliquify-frontend-prod.onrender.com)",
      "Bash(npm run lint:*)",
      "Bash(git fetch:*)",
      "Bash(npx bmad-method install)",
      "Bash(git clone:*)",
      "Bash(npx eslint:*)",
      "Bash(git mv:*)",
      "Bash(pnpm eslint:*)",
      "Bash(pnpm update:*)",
      "Bash(pnpm vitest run:*)",
      "Bash(rg:*)",
      "Bash(npx prisma validate:*)",
      "Bash(pwsh -Command:*)",
      "Bash(npx bmad:*)",
      "Bash(git remote:*)",
      "Bash(if not exist docs mkdir docs)",
      "Bash(npx bmad-method:*)",
      "Bash(git log:*)",
      "Bash(gh pr edit:*)",
      "Bash(git symbolic-ref:*)",
      "Bash(gh pr checkout:*)",
      "Bash(gh pr close:*)",
      "Bash(git ls-tree:*)",
      "Bash(gh repo edit:*)",
      "Bash(pnpm exec prisma migrate:*)",
      "Read(//c/**)",
      "Bash(git check-ignore:*)",
      "Bash(git describe:*)",
      "Bash(\"https://api.render.com/v1/services/srv-d3p77vripnbc739pc2n0\")",
      "Bash(for i in {1..10})",
      "Bash(do echo \"Check $i/10:\")",
      "Bash(do echo \"Attempt $i:\")",
      "Bash(for i in {1..5})",
      "Bash(do echo \"Check $i/5:\")",
      "Bash(while true)",
      "Bash(for i in {1..6})",
      "Bash(python3:*)",
      "Bash(for i in 1 2 3 4 5 6 7 8 9 10)",
      "Bash(do curl -s -w \"\\n[Check $i] HTTP %{http_code}\\n\" --max-time 5 https://capliquify-backend-prod.onrender.com/api/health)",
      "Bash(jobs:*)",
      "Bash(killall:*)",
      "Bash(npx prisma migrate dev:*)",
      "Bash(! -path \"*/node_modules/*\" )",
      "Bash(! -path \"*/.git/*\" )",
      "Bash(! -path \"*/dist/*\" )",
      "Bash(! -path \"*/build/*\" )",
      "Bash(! -path \"*/backups/*\" )",
      "Bash(git -C /tmp/bmad-latest log --oneline)",
      "Bash(git -C /tmp/bmad-latest branch -a)",
      "Bash(git -C /tmp/bmad-latest log --oneline v6-alpha)",
      "Bash(xargs -I {} bash -c \"echo -n ''''{}: '''' && find {} -type f | wc -l\")",
      "Bash(test:*)",
      "Bash(npm install)",
      "Bash(xargs:*)",
      "Bash(gh pr merge:*)"
    ],
    "deny": [],
    "ask": []
  }
}
