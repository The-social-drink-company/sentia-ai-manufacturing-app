*** Begin Patch
*** Update File: src/components/Enterprise10StageLoaderWithRealAuth.jsx
@@
-const Enterprise10StageLoaderWithRealAuth = ({
-  onComplete,
-  onAuthSuccess,
-  onError,
-  clerkPublishableKey
-}) => {
+const Enterprise10StageLoaderWithRealAuth = ({
+  onComplete,
+  onAuthSuccess,
+  onError,
+  onStageChange,
+  onStageProgress,
+  clerkPublishableKey
+}) => {
@@
-        } catch (error) {
-          setClerkInitialized(false);
-          setAuthCheckComplete(false);
-          logError('[Stage 2] Clerk initialization failed', error);
-
-          if (clerkPublishableKey && !clerkPublishableKey.startsWith('pk_')) {
-            throw new Error('Invalid Clerk publishable key format detected. Verify environment configuration.');
-          }
-
-          throw new Error(REAL Clerk auth failed: );
-        }
+        } catch (error) {
+          setClerkInitialized(false);
+          setAuthCheckComplete(false);
+          logError('[Stage 2] Clerk initialization failed', error);
+
+          let failureMessage = REAL Clerk auth failed: ;
+          let failureCode = error?.code || 'CLERK_INIT_FAILED';
+
+          if (clerkPublishableKey && !clerkPublishableKey.startsWith('pk_')) {
+            failureMessage = 'Invalid Clerk publishable key format detected. Verify environment configuration.';
+            failureCode = 'INVALID_CLERK_PUBLISHABLE_KEY';
+          }
+
+          const failure = new Error(failureMessage);
+          failure.code = failureCode;
+          failure.originalError = error;
+
+          throw failure;
+        }
@@
-        return;
-      }
-
-      
-      if (typeof onStageChange === 'function') {
-        onStageChange(stage.id, stage, { status: 'started' });
-      }
-
-      logDebug([Loader] Starting stage : );
+        return;
+      }
+
+      const stage = stages[currentStageIndex];
+      setCurrentStage(stage.id);
+
+      if (typeof onStageChange === 'function') {
+        onStageChange(stage.id, stage, { status: 'started' });
+      }
+
+      logDebug([Loader] Starting stage : );
@@
-      } catch (error) {
-        logError([Loader] Stage  failed:, error);
+      } catch (error) {
+        logError([Loader] Stage  failed:, error);
+
+        if (typeof onStageChange === 'function') {
+          onStageChange(stage.id, stage, { status: 'error', error });
+        }
 
         if (stage.critical) {
@@
-  }, [onComplete, onError]);
+  }, [onComplete, onError, onStageChange, onStageProgress]);
*** End Patch
