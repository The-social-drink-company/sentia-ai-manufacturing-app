import{r as e}from"./react-core-DlJGLw67.js";import{l as t,a,b as o}from"./index-DuY1VrEM.js";const n=()=>{const[n,r]=e.useState(!1),[c,i]=e.useState("disconnected"),[s,l]=e.useState(null),[u,d]=e.useState([]),[m,p]=e.useState(null),h="https://mcp-server-tkyu.onrender.com",y="sentia-mcp-secret",f=e.useCallback(async()=>{try{const e=await fetch(`${h}/health`,{method:"GET",headers:{"Content-Type":"application/json"}});if(e.ok){const a=await e.json();return l(a),i("connected"),r(!0),p(null),t("MCP server health check successful",{health:a}),a}throw new Error(`Health check failed: ${e.status}`)}catch(e){return a("MCP server health check failed",e),i("disconnected"),r(!1),p(e.message),null}},[h]),g=e.useCallback(async()=>{try{const e=await fetch(`${h}/mcp/tools`,{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${y}`}});if(e.ok){const a=await e.json();return d(a.tools||[]),t("MCP tools retrieved successfully",{toolCount:a.tools?.length||0}),a.tools||[]}throw new Error(`Failed to get tools: ${e.status}`)}catch(e){return a("Failed to get MCP tools",e),d([]),[]}},[h,y]),C=e.useCallback(async(e,o={})=>{try{t("Executing MCP tool",{toolName:e,parameters:o});const a=await fetch(`${h}/mcp/execute`,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${y}`},body:JSON.stringify({tool:e,parameters:o})});if(a.ok){const o=await a.json();return t("MCP tool executed successfully",{toolName:e,result:o}),o}{const e=await a.json();throw new Error(e.error||`Tool execution failed: ${a.status}`)}}catch(n){throw a("MCP tool execution failed",{toolName:e,error:n.message}),n}},[h,y]),k=e.useCallback(async(e={})=>{const t={horizon:30,confidence:.95,seasonality:!0,...e};try{return await C("demand_forecast",t)}catch(a){return o("Demand forecast failed, using fallback",a),{forecast:{predictions:Array.from({length:30},(e,t)=>({date:new Date(Date.now()+24*t*60*60*1e3).toISOString().split("T")[0],value:1e3+500*Math.random(),confidence:.85+.1*Math.random()})),accuracy:.87,trend:"increasing"},insights:[{type:"trend",message:"Demand showing upward trend with 87% confidence",impact:"positive"}]}}},[C]),w=e.useCallback(async(e={})=>{const t={timeHorizon:7,resourceConstraints:!0,qualityTargets:!0,...e};try{return await C("production_optimization",t)}catch(a){return o("Production optimization failed, using fallback",a),{optimization:{efficiency:.94,recommendations:[{action:"Increase Line 2 capacity",impact:"+12% throughput",cost:5e3},{action:"Optimize shift scheduling",impact:"+8% efficiency",cost:0}]},metrics:{currentEfficiency:.87,projectedEfficiency:.94,costSavings:15e3}}}},[C]),v=e.useCallback(async(e={})=>{const t={predictionHorizon:24,includeRiskFactors:!0,...e};try{return await C("quality_prediction",t)}catch(a){return o("Quality prediction failed, using fallback",a),{predictions:[{time:(new Date).toISOString(),qualityScore:.92,riskLevel:"low",factors:["temperature","humidity","operator_experience"]}],riskFactors:[{factor:"Temperature variance",risk:.15,recommendation:"Maintain ±2°C control"},{factor:"Operator fatigue",risk:.08,recommendation:"Implement rotation schedule"}]}}},[C]),S=e.useCallback(async(e={})=>{const t={optimizationPeriod:30,includeCarryingCosts:!0,demandUncertainty:!0,...e};try{return await C("inventory_optimization",t)}catch(a){return o("Inventory optimization failed, using fallback",a),{optimization:{currentInventoryValue:18e5,optimalInventoryValue:165e4,savings:15e4,recommendations:[{sku:"SKU-001",currentStock:1e3,optimalStock:750,reason:"High carrying cost"},{sku:"SKU-002",currentStock:500,optimalStock:800,reason:"Demand increase predicted"}]},metrics:{turnoverImprovement:.12,carryingCostReduction:.18,stockoutRiskReduction:.25}}}},[C]),b=e.useCallback(e=>{if(!n)return o("Cannot subscribe to real-time data: MCP server not connected"),null;try{const t=new EventSource(`${h}/mcp/stream`);return t.onmessage=t=>{try{const a=JSON.parse(t.data);e(a)}catch(o){a("Failed to parse real-time data",o)}},t.onerror=e=>{a("Real-time data stream error",e),t.close()},t}catch(t){return a("Failed to establish real-time data stream",t),null}},[n,h]);e.useEffect(()=>{(async()=>{t("Initializing MCP server connection");await f()&&await g();const e=setInterval(f,3e4)})()},[f,g]);const z=e.useCallback(()=>{switch(c){case"connected":return{status:"connected",color:"green",message:"MCP Server Connected",icon:"✓"};case"connecting":return{status:"connecting",color:"yellow",message:"Connecting to MCP Server...",icon:"⟳"};default:return{status:"disconnected",color:"red",message:m||"MCP Server Disconnected",icon:"✗"}}},[c,m]);return{isConnected:n,connectionStatus:c,serverHealth:s,error:m,availableTools:u,checkServerHealth:f,getAvailableTools:g,executeTool:C,runDemandForecast:k,optimizeProduction:w,predictQuality:v,optimizeInventory:S,subscribeToRealTimeData:b,getConnectionStatusInfo:z}};export{n as u};
