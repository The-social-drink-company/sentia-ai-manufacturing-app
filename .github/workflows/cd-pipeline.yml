name: Continuous Deployment Pipeline

on:
  push:
    branches:
      - development
      - test
      - production
  pull_request:
    branches:
      - development
      - test
      - production

env:
  NODE_VERSION: '18.x'
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}

jobs:
  # Quality checks that run on all branches
  quality-checks:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Check TypeScript
      run: npm run typecheck
      continue-on-error: true
    
    - name: Security audit
      run: npm audit --audit-level=high
      continue-on-error: true
    
    - name: Check formatting
      run: npm run format:check
      continue-on-error: true

  # Build and test
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: quality-checks
    
    strategy:
      matrix:
        test-type: [unit, integration, e2e]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Run automated test suite
      run: npm run test:suite
      continue-on-error: true
    
    - name: Run performance analysis
      run: npm run performance
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-${{ github.sha }}
        path: dist/
        retention-days: 30
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}-${{ github.sha }}
        path: |
          test-report.json
          test-results.xml
          performance-report.json
        retention-days: 30

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Deploy to development environment
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/development'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for development
      run: npm run build
    
    - name: Install Railway CLI
      run: npm install -g @railway/cli
    
    - name: Deploy to Railway Development
      run: |
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway environment development
        railway up --service ${{ secrets.RAILWAY_DEV_SERVICE_ID }}
    
    - name: Run post-deployment tests
      run: |
        sleep 30  # Wait for deployment
        TEST_URL=https://sentia-manufacturing-dashboard-development.up.railway.app npm run test:suite
      continue-on-error: true
    
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to testing environment
  deploy-testing:
    name: Deploy to Testing
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/test'
    environment: testing
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for testing
      run: npm run build
    
    - name: Install Railway CLI
      run: npm install -g @railway/cli
    
    - name: Deploy to Railway Testing
      run: |
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway environment testing
        railway up --service ${{ secrets.RAILWAY_TEST_SERVICE_ID }}
    
    - name: Run UAT tests
      run: |
        sleep 30  # Wait for deployment
        TEST_URL=https://sentiatest.financeflo.ai npm run test:suite
      continue-on-error: true
    
    - name: Create deployment notification
      uses: deployments/deployment-action@releases/v1
      with:
        token: ${{ github.token }}
        environment: testing
        state: success
        deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    
    - name: Notify QA team
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'Testing environment updated - Ready for UAT'
        channel: '#qa-testing'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to production (requires manual approval)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run pre-deployment checklist
      run: |
        echo "Running production deployment checklist..."
        npm run lint
        npm run test:run
        npm run performance
    
    - name: Build for production
      run: npm run build
      env:
        NODE_ENV: production
    
    - name: Install Railway CLI
      run: npm install -g @railway/cli
    
    - name: Deploy to Railway Production
      run: |
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway environment production
        railway up --service ${{ secrets.RAILWAY_PROD_SERVICE_ID }}
    
    - name: Run smoke tests
      run: |
        sleep 60  # Wait for deployment to stabilize
        TEST_URL=https://web-production-1f10.up.railway.app npm run test:suite
    
    - name: Create GitHub release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Production Release v${{ github.run_number }}
        body: |
          ## Production Deployment
          
          **Deployed:** ${{ github.sha }}
          **Environment:** Production
          **URL:** https://web-production-1f10.up.railway.app
          
          ### Changes
          ${{ github.event.head_commit.message }}
          
          ### Deployment Checklist
          - [x] Build successful
          - [x] Tests passing
          - [x] Security scan clean
          - [x] Performance validated
          - [x] Smoke tests passed
        draft: false
        prerelease: false
    
    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: '🎉 Production deployment successful!'
        channel: '#production-alerts'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Performance monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-testing, deploy-production]
    if: always() && (needs.deploy-development.result == 'success' || needs.deploy-testing.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://sentia-manufacturing-dashboard-development.up.railway.app
          https://sentiatest.financeflo.ai
          https://web-production-1f10.up.railway.app
        configPath: './.lighthouserc.json'
        uploadArtifacts: true
        temporaryPublicStorage: true
    
    - name: Run performance tests
      run: npm run performance
    
    - name: Upload performance reports
      uses: actions/upload-artifact@v4
      with:
        name: performance-reports-${{ github.sha }}
        path: performance-report.json

  # Cleanup old deployments
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-testing, deploy-production]
    if: always()
    
    steps:
    - name: Delete old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const oldArtifacts = artifacts.artifacts
            .filter(artifact => artifact.created_at < new Date(Date.now() - 7 * 24 * 60 * 60 * 1000))
            .slice(0, 50); // Limit to 50 to avoid rate limits
          
          for (const artifact of oldArtifacts) {
            try {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted artifact: ${artifact.name}`);
            } catch (error) {
              console.log(`Failed to delete artifact ${artifact.name}: ${error.message}`);
            }
          }