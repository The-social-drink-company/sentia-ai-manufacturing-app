
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  role: 'role',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WorkingCapitalScalarFieldEnum = {
  id: 'id',
  date: 'date',
  currentAssets: 'currentAssets',
  currentLiabilities: 'currentLiabilities',
  inventory: 'inventory',
  accountsReceivable: 'accountsReceivable',
  accountsPayable: 'accountsPayable',
  cash: 'cash',
  dso: 'dso',
  dpo: 'dpo',
  dio: 'dio',
  cashConversionCycle: 'cashConversionCycle',
  workingCapitalRatio: 'workingCapitalRatio',
  quickRatio: 'quickRatio',
  createdAt: 'createdAt'
};

exports.Prisma.CashRunwayScalarFieldEnum = {
  id: 'id',
  date: 'date',
  cashBalance: 'cashBalance',
  monthlyBurnRate: 'monthlyBurnRate',
  monthlyRevenue: 'monthlyRevenue',
  netBurnRate: 'netBurnRate',
  runwayMonths: 'runwayMonths',
  coverageDay30: 'coverageDay30',
  coverageDay60: 'coverageDay60',
  coverageDay90: 'coverageDay90',
  coverageDay120: 'coverageDay120',
  coverageDay180: 'coverageDay180',
  createdAt: 'createdAt'
};

exports.Prisma.ProductionScalarFieldEnum = {
  id: 'id',
  jobNumber: 'jobNumber',
  productName: 'productName',
  productSKU: 'productSKU',
  quantity: 'quantity',
  targetQuantity: 'targetQuantity',
  completedQuantity: 'completedQuantity',
  status: 'status',
  priority: 'priority',
  startDate: 'startDate',
  targetDate: 'targetDate',
  completionDate: 'completionDate',
  qualityScore: 'qualityScore',
  defectRate: 'defectRate',
  efficiency: 'efficiency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryScalarFieldEnum = {
  id: 'id',
  sku: 'sku',
  name: 'name',
  description: 'description',
  quantity: 'quantity',
  reorderPoint: 'reorderPoint',
  reorderQuantity: 'reorderQuantity',
  location: 'location',
  warehouse: 'warehouse',
  unitCost: 'unitCost',
  totalValue: 'totalValue',
  lastMovement: 'lastMovement',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InventoryMovementScalarFieldEnum = {
  id: 'id',
  inventoryId: 'inventoryId',
  type: 'type',
  quantity: 'quantity',
  reference: 'reference',
  reason: 'reason',
  performedBy: 'performedBy',
  createdAt: 'createdAt'
};

exports.Prisma.AIInsightScalarFieldEnum = {
  id: 'id',
  type: 'type',
  category: 'category',
  title: 'title',
  content: 'content',
  confidence: 'confidence',
  priority: 'priority',
  embedding: 'embedding',
  metadata: 'metadata',
  actionable: 'actionable',
  actioned: 'actioned',
  createdAt: 'createdAt'
};

exports.Prisma.DashboardScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  name: 'name',
  type: 'type',
  layout: 'layout',
  widgets: 'widgets',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  metric: 'metric',
  value: 'value',
  dimension: 'dimension',
  forecast: 'forecast',
  actual: 'actual',
  variance: 'variance',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.MCPRequestScalarFieldEnum = {
  id: 'id',
  tool: 'tool',
  request: 'request',
  response: 'response',
  status: 'status',
  processingTime: 'processingTime',
  error: 'error',
  createdAt: 'createdAt'
};

exports.Prisma.CashLedgerScalarFieldEnum = {
  id: 'id',
  date: 'date',
  description: 'description',
  category: 'category',
  subCategory: 'subCategory',
  amount: 'amount',
  balance: 'balance',
  source: 'source',
  sourceId: 'sourceId',
  reconciledStatus: 'reconciledStatus',
  tags: 'tags',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CashProjectionScalarFieldEnum = {
  id: 'id',
  projectionDate: 'projectionDate',
  projectedAmount: 'projectedAmount',
  actualAmount: 'actualAmount',
  variance: 'variance',
  confidenceLevel: 'confidenceLevel',
  scenarioType: 'scenarioType',
  assumptions: 'assumptions',
  projectionMethod: 'projectionMethod',
  dataSource: 'dataSource',
  isAdjusted: 'isAdjusted',
  adjustmentReason: 'adjustmentReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  date: 'date',
  vendor: 'vendor',
  category: 'category',
  subCategory: 'subCategory',
  amount: 'amount',
  currency: 'currency',
  paymentMethod: 'paymentMethod',
  invoiceNumber: 'invoiceNumber',
  approvedBy: 'approvedBy',
  department: 'department',
  project: 'project',
  isRecurring: 'isRecurring',
  recurringPeriod: 'recurringPeriod',
  taxAmount: 'taxAmount',
  tags: 'tags',
  attachments: 'attachments',
  notes: 'notes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExecutiveMetricScalarFieldEnum = {
  id: 'id',
  date: 'date',
  revenue: 'revenue',
  revenueTarget: 'revenueTarget',
  revenueTrend: 'revenueTrend',
  cashFlow: 'cashFlow',
  cashFlowTarget: 'cashFlowTarget',
  cashFlowTrend: 'cashFlowTrend',
  currentRatio: 'currentRatio',
  currentRatioTarget: 'currentRatioTarget',
  currentRatioTrend: 'currentRatioTrend',
  quickRatio: 'quickRatio',
  quickRatioTarget: 'quickRatioTarget',
  quickRatioTrend: 'quickRatioTrend',
  oee: 'oee',
  oeeTarget: 'oeeTarget',
  oeeTrend: 'oeeTrend',
  throughput: 'throughput',
  throughputTarget: 'throughputTarget',
  throughputTrend: 'throughputTrend',
  marketShare: 'marketShare',
  marketShareTarget: 'marketShareTarget',
  marketShareTrend: 'marketShareTrend',
  customerSatisfaction: 'customerSatisfaction',
  customerSatisfactionTarget: 'customerSatisfactionTarget',
  customerSatisfactionTrend: 'customerSatisfactionTrend',
  currentAssets: 'currentAssets',
  currentLiabilities: 'currentLiabilities',
  inventory: 'inventory',
  daysInventory: 'daysInventory',
  daysReceivables: 'daysReceivables',
  daysPayables: 'daysPayables',
  cashUnlock: 'cashUnlock',
  isActual: 'isActual',
  confidence: 'confidence',
  dataSource: 'dataSource',
  notes: 'notes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExecutiveAlertScalarFieldEnum = {
  id: 'id',
  severity: 'severity',
  type: 'type',
  category: 'category',
  title: 'title',
  description: 'description',
  impact: 'impact',
  action: 'action',
  source: 'source',
  metrics: 'metrics',
  isActive: 'isActive',
  isDismissed: 'isDismissed',
  dismissedBy: 'dismissedBy',
  dismissedAt: 'dismissedAt',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnterpriseCashCoverageScalarFieldEnum = {
  id: 'id',
  period: 'period',
  startingCash: 'startingCash',
  endingCash: 'endingCash',
  salesRevenue: 'salesRevenue',
  subscriptionRevenue: 'subscriptionRevenue',
  serviceRevenue: 'serviceRevenue',
  otherRevenue: 'otherRevenue',
  totalRevenue: 'totalRevenue',
  payrollExpenses: 'payrollExpenses',
  rentExpenses: 'rentExpenses',
  utilitiesExpenses: 'utilitiesExpenses',
  marketingExpenses: 'marketingExpenses',
  suppliesExpenses: 'suppliesExpenses',
  maintenanceExpenses: 'maintenanceExpenses',
  insuranceExpenses: 'insuranceExpenses',
  professionalFees: 'professionalFees',
  otherOperatingExpenses: 'otherOperatingExpenses',
  totalOperatingExpenses: 'totalOperatingExpenses',
  capitalExpenses: 'capitalExpenses',
  loanPayments: 'loanPayments',
  taxPayments: 'taxPayments',
  dividendPayments: 'dividendPayments',
  otherNonOperatingExpenses: 'otherNonOperatingExpenses',
  netCashFlow: 'netCashFlow',
  operatingCashFlow: 'operatingCashFlow',
  financingCashFlow: 'financingCashFlow',
  investingCashFlow: 'investingCashFlow',
  cashCoverageRatio: 'cashCoverageRatio',
  quickRatio: 'quickRatio',
  currentRatio: 'currentRatio',
  debtServiceCoverageRatio: 'debtServiceCoverageRatio',
  accountsReceivable: 'accountsReceivable',
  accountsPayable: 'accountsPayable',
  inventory: 'inventory',
  prepaidExpenses: 'prepaidExpenses',
  accruedLiabilities: 'accruedLiabilities',
  daysOfCashOnHand: 'daysOfCashOnHand',
  burnRate: 'burnRate',
  runwayMonths: 'runwayMonths',
  isActual: 'isActual',
  isForecast: 'isForecast',
  confidenceScore: 'confidenceScore',
  dataSource: 'dataSource',
  importedFrom: 'importedFrom',
  notes: 'notes',
  adjustments: 'adjustments',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.XeroAccountScalarFieldEnum = {
  id: 'id',
  xeroId: 'xeroId',
  code: 'code',
  name: 'name',
  type: 'type',
  bankAccountNumber: 'bankAccountNumber',
  status: 'status',
  description: 'description',
  class: 'class',
  systemAccount: 'systemAccount',
  enablePaymentsToAccount: 'enablePaymentsToAccount',
  showInExpenseClaims: 'showInExpenseClaims',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.XeroContactScalarFieldEnum = {
  id: 'id',
  xeroId: 'xeroId',
  name: 'name',
  firstName: 'firstName',
  lastName: 'lastName',
  emailAddress: 'emailAddress',
  contactStatus: 'contactStatus',
  isSupplier: 'isSupplier',
  isCustomer: 'isCustomer',
  defaultCurrency: 'defaultCurrency',
  accountNumber: 'accountNumber',
  companyNumber: 'companyNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.XeroInvoiceScalarFieldEnum = {
  id: 'id',
  xeroId: 'xeroId',
  invoiceNumber: 'invoiceNumber',
  reference: 'reference',
  type: 'type',
  contactId: 'contactId',
  date: 'date',
  dueDate: 'dueDate',
  status: 'status',
  lineAmountTypes: 'lineAmountTypes',
  subTotal: 'subTotal',
  totalTax: 'totalTax',
  total: 'total',
  amountDue: 'amountDue',
  amountPaid: 'amountPaid',
  amountCredited: 'amountCredited',
  currencyCode: 'currencyCode',
  fullyPaidOnDate: 'fullyPaidOnDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.XeroBillScalarFieldEnum = {
  id: 'id',
  xeroId: 'xeroId',
  billNumber: 'billNumber',
  reference: 'reference',
  type: 'type',
  contactId: 'contactId',
  date: 'date',
  dueDate: 'dueDate',
  status: 'status',
  lineAmountTypes: 'lineAmountTypes',
  subTotal: 'subTotal',
  totalTax: 'totalTax',
  total: 'total',
  amountDue: 'amountDue',
  amountPaid: 'amountPaid',
  amountCredited: 'amountCredited',
  currencyCode: 'currencyCode',
  fullyPaidOnDate: 'fullyPaidOnDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.XeroPaymentScalarFieldEnum = {
  id: 'id',
  xeroId: 'xeroId',
  date: 'date',
  amount: 'amount',
  currencyCode: 'currencyCode',
  paymentType: 'paymentType',
  status: 'status',
  isReconciled: 'isReconciled',
  reference: 'reference',
  batchPaymentId: 'batchPaymentId',
  contactId: 'contactId',
  invoiceId: 'invoiceId',
  billId: 'billId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.XeroBankTransactionScalarFieldEnum = {
  id: 'id',
  xeroId: 'xeroId',
  bankAccountId: 'bankAccountId',
  type: 'type',
  date: 'date',
  reference: 'reference',
  amount: 'amount',
  currencyCode: 'currencyCode',
  status: 'status',
  isReconciled: 'isReconciled',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.XeroItemScalarFieldEnum = {
  id: 'id',
  xeroId: 'xeroId',
  code: 'code',
  name: 'name',
  description: 'description',
  salesDetails: 'salesDetails',
  purchaseDetails: 'purchaseDetails',
  isTrackedAsInventory: 'isTrackedAsInventory',
  isSold: 'isSold',
  isPurchased: 'isPurchased',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AmazonOrderScalarFieldEnum = {
  id: 'id',
  amazonOrderId: 'amazonOrderId',
  marketplace: 'marketplace',
  orderStatus: 'orderStatus',
  fulfillmentChannel: 'fulfillmentChannel',
  salesChannel: 'salesChannel',
  orderType: 'orderType',
  purchaseDate: 'purchaseDate',
  lastUpdateDate: 'lastUpdateDate',
  orderTotal: 'orderTotal',
  currency: 'currency',
  numberOfItemsShipped: 'numberOfItemsShipped',
  numberOfItemsUnshipped: 'numberOfItemsUnshipped',
  buyerEmail: 'buyerEmail',
  isBusinessOrder: 'isBusinessOrder',
  isPrime: 'isPrime',
  isGlobalExpressEnabled: 'isGlobalExpressEnabled',
  isReplacementOrder: 'isReplacementOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AmazonOrderItemScalarFieldEnum = {
  id: 'id',
  orderItemId: 'orderItemId',
  amazonOrderId: 'amazonOrderId',
  asin: 'asin',
  sellerSKU: 'sellerSKU',
  title: 'title',
  quantityOrdered: 'quantityOrdered',
  quantityShipped: 'quantityShipped',
  itemPrice: 'itemPrice',
  itemTax: 'itemTax',
  shippingPrice: 'shippingPrice',
  shippingTax: 'shippingTax',
  giftWrapPrice: 'giftWrapPrice',
  giftWrapTax: 'giftWrapTax',
  itemPromotionDiscount: 'itemPromotionDiscount',
  shipPromotionDiscount: 'shipPromotionDiscount',
  currency: 'currency',
  conditionNote: 'conditionNote',
  conditionId: 'conditionId',
  conditionSubtypeId: 'conditionSubtypeId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AmazonInventoryScalarFieldEnum = {
  id: 'id',
  sellerSKU: 'sellerSKU',
  asin: 'asin',
  fnSKU: 'fnSKU',
  productName: 'productName',
  condition: 'condition',
  totalQuantity: 'totalQuantity',
  inStockQuantity: 'inStockQuantity',
  availableQuantity: 'availableQuantity',
  fulfillableQuantity: 'fulfillableQuantity',
  inboundWorkingQuantity: 'inboundWorkingQuantity',
  inboundShippedQuantity: 'inboundShippedQuantity',
  inboundReceivingQuantity: 'inboundReceivingQuantity',
  reservedQuantity: 'reservedQuantity',
  unfulfillableQuantity: 'unfulfillableQuantity',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShopifyOrderScalarFieldEnum = {
  id: 'id',
  shopifyOrderId: 'shopifyOrderId',
  orderNumber: 'orderNumber',
  email: 'email',
  phone: 'phone',
  name: 'name',
  financialStatus: 'financialStatus',
  fulfillmentStatus: 'fulfillmentStatus',
  tags: 'tags',
  totalPrice: 'totalPrice',
  totalTax: 'totalTax',
  totalDiscounts: 'totalDiscounts',
  totalWeight: 'totalWeight',
  currency: 'currency',
  processedAt: 'processedAt',
  closedAt: 'closedAt',
  cancelledAt: 'cancelledAt',
  test: 'test',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShopifyLineItemScalarFieldEnum = {
  id: 'id',
  lineItemId: 'lineItemId',
  shopifyOrderId: 'shopifyOrderId',
  productId: 'productId',
  variantId: 'variantId',
  title: 'title',
  variantTitle: 'variantTitle',
  sku: 'sku',
  vendor: 'vendor',
  quantity: 'quantity',
  price: 'price',
  totalDiscount: 'totalDiscount',
  grams: 'grams',
  requiresShipping: 'requiresShipping',
  taxable: 'taxable',
  fulfillmentService: 'fulfillmentService',
  fulfillmentStatus: 'fulfillmentStatus',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShopifyProductScalarFieldEnum = {
  id: 'id',
  shopifyProductId: 'shopifyProductId',
  title: 'title',
  handle: 'handle',
  vendor: 'vendor',
  productType: 'productType',
  tags: 'tags',
  status: 'status',
  description: 'description',
  publishedAt: 'publishedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ShopifyVariantScalarFieldEnum = {
  id: 'id',
  shopifyVariantId: 'shopifyVariantId',
  shopifyProductId: 'shopifyProductId',
  title: 'title',
  price: 'price',
  compareAtPrice: 'compareAtPrice',
  sku: 'sku',
  barcode: 'barcode',
  grams: 'grams',
  weight: 'weight',
  weightUnit: 'weightUnit',
  inventoryQuantity: 'inventoryQuantity',
  inventoryPolicy: 'inventoryPolicy',
  inventoryTracking: 'inventoryTracking',
  requiresShipping: 'requiresShipping',
  taxable: 'taxable',
  fulfillmentService: 'fulfillmentService',
  position: 'position',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MachineScalarFieldEnum = {
  id: 'id',
  machineId: 'machineId',
  name: 'name',
  type: 'type',
  location: 'location',
  manufacturer: 'manufacturer',
  model: 'model',
  serialNumber: 'serialNumber',
  installDate: 'installDate',
  status: 'status',
  isActive: 'isActive',
  configuration: 'configuration',
  specifications: 'specifications',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MachineSensorScalarFieldEnum = {
  id: 'id',
  machineId: 'machineId',
  sensorType: 'sensorType',
  sensorName: 'sensorName',
  value: 'value',
  unit: 'unit',
  threshold: 'threshold',
  minValue: 'minValue',
  maxValue: 'maxValue',
  status: 'status',
  timestamp: 'timestamp',
  createdAt: 'createdAt'
};

exports.Prisma.MachineAlertScalarFieldEnum = {
  id: 'id',
  machineId: 'machineId',
  severity: 'severity',
  type: 'type',
  title: 'title',
  description: 'description',
  acknowledged: 'acknowledged',
  acknowledgedBy: 'acknowledgedBy',
  acknowledgedAt: 'acknowledgedAt',
  resolvedAt: 'resolvedAt',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.MachineMaintenanceRecordScalarFieldEnum = {
  id: 'id',
  machineId: 'machineId',
  type: 'type',
  description: 'description',
  performedBy: 'performedBy',
  scheduledDate: 'scheduledDate',
  completedDate: 'completedDate',
  duration: 'duration',
  cost: 'cost',
  status: 'status',
  notes: 'notes',
  attachments: 'attachments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QualityCheckScalarFieldEnum = {
  id: 'id',
  productionId: 'productionId',
  checkType: 'checkType',
  checkDate: 'checkDate',
  inspector: 'inspector',
  passed: 'passed',
  score: 'score',
  defectCount: 'defectCount',
  sampleSize: 'sampleSize',
  notes: 'notes',
  corrective: 'corrective',
  attachments: 'attachments',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ProductionOrderScalarFieldEnum = {
  id: 'id',
  orderNumber: 'orderNumber',
  productSKU: 'productSKU',
  quantity: 'quantity',
  priority: 'priority',
  status: 'status',
  scheduledStart: 'scheduledStart',
  scheduledEnd: 'scheduledEnd',
  actualStart: 'actualStart',
  actualEnd: 'actualEnd',
  assignedMachine: 'assignedMachine',
  assignedOperator: 'assignedOperator',
  batchNumber: 'batchNumber',
  qualityGrade: 'qualityGrade',
  yield: 'yield',
  efficiency: 'efficiency',
  notes: 'notes',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  MANAGER: 'MANAGER',
  OPERATOR: 'OPERATOR',
  VIEWER: 'VIEWER'
};

exports.ProductionStatus = exports.$Enums.ProductionStatus = {
  PENDING: 'PENDING',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED',
  DELAYED: 'DELAYED',
  CANCELLED: 'CANCELLED'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.MovementType = exports.$Enums.MovementType = {
  IN: 'IN',
  OUT: 'OUT',
  ADJUSTMENT: 'ADJUSTMENT',
  TRANSFER: 'TRANSFER'
};

exports.Prisma.ModelName = {
  User: 'User',
  WorkingCapital: 'WorkingCapital',
  CashRunway: 'CashRunway',
  Production: 'Production',
  Inventory: 'Inventory',
  InventoryMovement: 'InventoryMovement',
  AIInsight: 'AIInsight',
  Dashboard: 'Dashboard',
  Analytics: 'Analytics',
  MCPRequest: 'MCPRequest',
  CashLedger: 'CashLedger',
  CashProjection: 'CashProjection',
  Expense: 'Expense',
  ExecutiveMetric: 'ExecutiveMetric',
  ExecutiveAlert: 'ExecutiveAlert',
  EnterpriseCashCoverage: 'EnterpriseCashCoverage',
  XeroAccount: 'XeroAccount',
  XeroContact: 'XeroContact',
  XeroInvoice: 'XeroInvoice',
  XeroBill: 'XeroBill',
  XeroPayment: 'XeroPayment',
  XeroBankTransaction: 'XeroBankTransaction',
  XeroItem: 'XeroItem',
  AmazonOrder: 'AmazonOrder',
  AmazonOrderItem: 'AmazonOrderItem',
  AmazonInventory: 'AmazonInventory',
  ShopifyOrder: 'ShopifyOrder',
  ShopifyLineItem: 'ShopifyLineItem',
  ShopifyProduct: 'ShopifyProduct',
  ShopifyVariant: 'ShopifyVariant',
  Machine: 'Machine',
  MachineSensor: 'MachineSensor',
  MachineAlert: 'MachineAlert',
  MachineMaintenanceRecord: 'MachineMaintenanceRecord',
  QualityCheck: 'QualityCheck',
  ProductionOrder: 'ProductionOrder'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
