# Compliance and Regulatory Checking Workflow
# Automated compliance validation for SOC2, GDPR, HIPAA, ISO27001 and industry regulations

name: üìã Compliance & Regulatory Check

on:
  push:
    branches: [development, testing, production]
  pull_request:
    branches: [development, testing, production]
  schedule:
    # Monthly compliance audit on the 1st at 2 AM UTC
    - cron: '0 2 1 * *'
  workflow_dispatch:
    inputs:
      compliance_framework:
        description: 'Compliance framework to validate'
        required: true
        type: choice
        default: 'all'
        options:
          - all
          - soc2
          - gdpr
          - hipaa
          - iso27001
          - pci-dss
          - manufacturing
      audit_depth:
        description: 'Audit depth level'
        required: true
        type: choice
        default: 'standard'
        options:
          - basic
          - standard
          - comprehensive
          - certification-ready
      generate_report:
        description: 'Generate compliance report'
        required: false
        type: boolean
        default: true

env:
  NODE_VERSION: '18'
  
  # Compliance thresholds
  SECURITY_SCORE_THRESHOLD: '90'
  PRIVACY_SCORE_THRESHOLD: '95'
  DATA_PROTECTION_THRESHOLD: '98'
  ACCESS_CONTROL_THRESHOLD: '95'

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

concurrency:
  group: compliance-check-${{ github.ref }}-${{ github.event.inputs.compliance_framework || 'all' }}
  cancel-in-progress: false

jobs:
  # Job 1: Compliance Framework Detection
  compliance-framework-analysis:
    name: üìä Compliance Framework Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      frameworks: ${{ steps.detect-frameworks.outputs.frameworks }}
      data-classification: ${{ steps.data-analysis.outputs.classification }}
      requires-certification: ${{ steps.certification-check.outputs.required }}
      
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üîç Detect applicable compliance frameworks
        id: detect-frameworks
        run: |
          echo "Detecting applicable compliance frameworks..."
          
          FRAMEWORKS=()
          
          # Check for SOC2 indicators
          if grep -r -i "soc2\|soc 2\|service organization control" . --include="*.md" --include="*.txt" > /dev/null 2>&1; then
            FRAMEWORKS+=("soc2")
            echo "‚úÖ SOC2 compliance detected"
          fi
          
          # Check for GDPR indicators
          if grep -r -i "gdpr\|general data protection\|personal data" . --include="*.md" --include="*.txt" --include="*.js" --include="*.jsx" > /dev/null 2>&1; then
            FRAMEWORKS+=("gdpr")
            echo "‚úÖ GDPR compliance detected"
          fi
          
          # Check for HIPAA indicators
          if grep -r -i "hipaa\|health insurance\|phi\|protected health" . --include="*.md" --include="*.txt" > /dev/null 2>&1; then
            FRAMEWORKS+=("hipaa")
            echo "‚úÖ HIPAA compliance detected"
          fi
          
          # Check for ISO27001 indicators
          if grep -r -i "iso27001\|iso 27001\|information security management" . --include="*.md" --include="*.txt" > /dev/null 2>&1; then
            FRAMEWORKS+=("iso27001")
            echo "‚úÖ ISO27001 compliance detected"
          fi
          
          # Check for PCI-DSS indicators
          if grep -r -i "pci\|payment card\|credit card" . --include="*.md" --include="*.txt" --include="*.js" --include="*.jsx" > /dev/null 2>&1; then
            FRAMEWORKS+=("pci-dss")
            echo "‚úÖ PCI-DSS compliance detected"
          fi
          
          # Manufacturing compliance (FDA, ISO, etc.)
          if grep -r -i "manufacturing\|fda\|iso 9001\|quality management" . --include="*.md" --include="*.txt" > /dev/null 2>&1; then
            FRAMEWORKS+=("manufacturing")
            echo "‚úÖ Manufacturing compliance detected"
          fi
          
          # Override with manual input if specified
          if [ "${{ github.event.inputs.compliance_framework }}" != "all" ] && [ "${{ github.event.inputs.compliance_framework }}" != "" ]; then
            FRAMEWORKS=("${{ github.event.inputs.compliance_framework }}")
            echo "Manual framework override: ${{ github.event.inputs.compliance_framework }}"
          fi
          
          # Default to basic compliance if none detected
          if [ ${#FRAMEWORKS[@]} -eq 0 ]; then
            FRAMEWORKS=("basic")
            echo "No specific frameworks detected, using basic compliance"
          fi
          
          # Convert array to JSON
          FRAMEWORKS_JSON=$(printf '%s\n' "${FRAMEWORKS[@]}" | jq -R . | jq -s .)
          echo "frameworks=$FRAMEWORKS_JSON" >> $GITHUB_OUTPUT
          
          echo "Applicable frameworks: ${FRAMEWORKS[*]}"
      
      - name: üìä Data classification analysis
        id: data-analysis
        run: |
          echo "Analyzing data classification requirements..."
          
          # Scan for sensitive data patterns
          SENSITIVE_PATTERNS=(
            "ssn\|social security"
            "credit card\|payment"
            "email\|personal.*data"
            "password\|secret\|token"
            "health.*record\|medical"
            "financial.*data\|bank"
          )
          
          DATA_TYPES=()
          
          for pattern in "${SENSITIVE_PATTERNS[@]}"; do
            if grep -r -i "$pattern" . --include="*.js" --include="*.jsx" --include="*.md" > /dev/null 2>&1; then
              case "$pattern" in
                *"ssn"*) DATA_TYPES+=("pii") ;;
                *"credit"*) DATA_TYPES+=("financial") ;;
                *"email"*) DATA_TYPES+=("personal") ;;
                *"password"*) DATA_TYPES+=("credentials") ;;
                *"health"*) DATA_TYPES+=("health") ;;
                *"financial"*) DATA_TYPES+=("financial") ;;
              esac
            fi
          done
          
          # Remove duplicates and classify
          UNIQUE_TYPES=($(echo "${DATA_TYPES[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
          
          if [[ " ${UNIQUE_TYPES[*]} " =~ " health " ]]; then
            CLASSIFICATION="highly-sensitive"
          elif [[ " ${UNIQUE_TYPES[*]} " =~ " financial " ]] || [[ " ${UNIQUE_TYPES[*]} " =~ " pii " ]]; then
            CLASSIFICATION="sensitive"
          elif [[ " ${UNIQUE_TYPES[*]} " =~ " personal " ]]; then
            CLASSIFICATION="personal"
          else
            CLASSIFICATION="internal"
          fi
          
          echo "classification=$CLASSIFICATION" >> $GITHUB_OUTPUT
          echo "Data classification: $CLASSIFICATION"
          echo "Data types found: ${UNIQUE_TYPES[*]}"
      
      - name: üéØ Certification requirements check
        id: certification-check
        run: |
          CLASSIFICATION="${{ steps.data-analysis.outputs.classification }}"
          AUDIT_DEPTH="${{ github.event.inputs.audit_depth || 'standard' }}"
          
          REQUIRES_CERT=false
          
          if [ "$CLASSIFICATION" = "highly-sensitive" ] || [ "$AUDIT_DEPTH" = "certification-ready" ]; then
            REQUIRES_CERT=true
            echo "‚úÖ Certification-level compliance required"
          else
            echo "‚ÑπÔ∏è Standard compliance validation sufficient"
          fi
          
          echo "required=$REQUIRES_CERT" >> $GITHUB_OUTPUT

  # Job 2: SOC2 Compliance Check
  soc2-compliance:
    name: üîí SOC2 Compliance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: compliance-framework-analysis
    if: contains(fromJson(needs.compliance-framework-analysis.outputs.frameworks), 'soc2') || contains(fromJson(needs.compliance-framework-analysis.outputs.frameworks), 'all')
    
    outputs:
      security-score: ${{ steps.security-controls.outputs.score }}
      availability-score: ${{ steps.availability-controls.outputs.score }}
      
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: üîí Security Controls Assessment (CC6.1)
        id: security-controls
        run: |
          echo "Assessing SOC2 Security Controls..."
          
          SCORE=0
          MAX_SCORE=100
          
          # CC6.1 - Logical and Physical Access Controls
          echo "Checking access controls..."
          
          # Check for authentication implementation
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "authentication\|login\|jwt" > /dev/null; then
            echo "‚úÖ Authentication system detected"
            SCORE=$((SCORE + 20))
          else
            echo "‚ùå No authentication system found"
          fi
          
          # Check for authorization/RBAC
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "authorization\|role\|permission" > /dev/null; then
            echo "‚úÖ Authorization system detected"
            SCORE=$((SCORE + 20))
          else
            echo "‚ùå No authorization system found"
          fi
          
          # Check for session management
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "session\|token.*expire" > /dev/null; then
            echo "‚úÖ Session management detected"
            SCORE=$((SCORE + 15))
          else
            echo "‚ùå No session management found"
          fi
          
          # Check for password policies
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "password.*policy\|password.*strength" > /dev/null; then
            echo "‚úÖ Password policies detected"
            SCORE=$((SCORE + 15))
          else
            echo "‚ùå No password policies found"
          fi
          
          # Check for encryption
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "encrypt\|crypto\|bcrypt" > /dev/null; then
            echo "‚úÖ Encryption implementation detected"
            SCORE=$((SCORE + 15))
          else
            echo "‚ùå No encryption implementation found"
          fi
          
          # Check for audit logging
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "audit\|log.*user\|log.*access" > /dev/null; then
            echo "‚úÖ Audit logging detected"
            SCORE=$((SCORE + 15))
          else
            echo "‚ùå No audit logging found"
          fi
          
          echo "Security Controls Score: $SCORE/$MAX_SCORE"
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          
          if [ $SCORE -lt ${{ env.SECURITY_SCORE_THRESHOLD }} ]; then
            echo "‚ùå Security controls score ($SCORE) below threshold (${{ env.SECURITY_SCORE_THRESHOLD }})"
            exit 1
          fi
      
      - name: üîÑ Availability Controls Assessment (CC7.2)
        id: availability-controls
        run: |
          echo "Assessing SOC2 Availability Controls..."
          
          SCORE=0
          MAX_SCORE=100
          
          # Check for health monitoring
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "health\|heartbeat\|ping" > /dev/null; then
            echo "‚úÖ Health monitoring detected"
            SCORE=$((SCORE + 25))
          else
            echo "‚ùå No health monitoring found"
          fi
          
          # Check for error handling
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "try.*catch\|error.*handling" > /dev/null; then
            echo "‚úÖ Error handling detected"
            SCORE=$((SCORE + 20))
          else
            echo "‚ùå No comprehensive error handling found"
          fi
          
          # Check for backup procedures
          if find . -name "*.md" -o -name "*.txt" | xargs grep -l "backup\|disaster.*recovery" > /dev/null; then
            echo "‚úÖ Backup procedures documented"
            SCORE=$((SCORE + 25))
          else
            echo "‚ùå No backup procedures found"
          fi
          
          # Check for performance monitoring
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "performance\|metrics\|monitoring" > /dev/null; then
            echo "‚úÖ Performance monitoring detected"
            SCORE=$((SCORE + 15))
          else
            echo "‚ùå No performance monitoring found"
          fi
          
          # Check for rate limiting
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "rate.*limit\|throttle" > /dev/null; then
            echo "‚úÖ Rate limiting detected"
            SCORE=$((SCORE + 15))
          else
            echo "‚ùå No rate limiting found"
          fi
          
          echo "Availability Controls Score: $SCORE/$MAX_SCORE"
          echo "score=$SCORE" >> $GITHUB_OUTPUT

  # Job 3: GDPR Compliance Check
  gdpr-compliance:
    name: üá™üá∫ GDPR Compliance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: compliance-framework-analysis
    if: contains(fromJson(needs.compliance-framework-analysis.outputs.frameworks), 'gdpr') || contains(fromJson(needs.compliance-framework-analysis.outputs.frameworks), 'all')
    
    outputs:
      privacy-score: ${{ steps.privacy-assessment.outputs.score }}
      data-protection-score: ${{ steps.data-protection.outputs.score }}
      
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: üîí Data Protection Assessment (Art. 32)
        id: data-protection
        run: |
          echo "Assessing GDPR Data Protection measures..."
          
          SCORE=0
          MAX_SCORE=100
          
          # Check for data encryption
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "encrypt\|crypto\|hash" > /dev/null; then
            echo "‚úÖ Data encryption detected"
            SCORE=$((SCORE + 25))
          else
            echo "‚ùå No data encryption found"
          fi
          
          # Check for data anonymization/pseudonymization
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "anonymize\|pseudonymize\|mask.*data" > /dev/null; then
            echo "‚úÖ Data anonymization detected"
            SCORE=$((SCORE + 20))
          else
            echo "‚ùå No data anonymization found"
          fi
          
          # Check for access logging
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "access.*log\|audit.*trail" > /dev/null; then
            echo "‚úÖ Access logging detected"
            SCORE=$((SCORE + 20))
          else
            echo "‚ùå No access logging found"
          fi
          
          # Check for data retention policies
          if find . -name "*.md" -o -name "*.txt" | xargs grep -l "retention\|data.*lifecycle" > /dev/null; then
            echo "‚úÖ Data retention policies documented"
            SCORE=$((SCORE + 15))
          else
            echo "‚ùå No data retention policies found"
          fi
          
          # Check for secure transmission
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "https\|tls\|ssl" > /dev/null; then
            echo "‚úÖ Secure transmission protocols detected"
            SCORE=$((SCORE + 20))
          else
            echo "‚ùå No secure transmission protocols found"
          fi
          
          echo "Data Protection Score: $SCORE/$MAX_SCORE"
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          
          if [ $SCORE -lt ${{ env.DATA_PROTECTION_THRESHOLD }} ]; then
            echo "‚ùå Data protection score ($SCORE) below threshold (${{ env.DATA_PROTECTION_THRESHOLD }})"
            exit 1
          fi
      
      - name: üë§ Privacy Rights Assessment (Art. 15-22)
        id: privacy-assessment
        run: |
          echo "Assessing GDPR Privacy Rights implementation..."
          
          SCORE=0
          MAX_SCORE=100
          
          # Check for data portability (Art. 20)
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "export.*data\|download.*data" > /dev/null; then
            echo "‚úÖ Data portability features detected"
            SCORE=$((SCORE + 20))
          else
            echo "‚ùå No data portability features found"
          fi
          
          # Check for data deletion (Art. 17)
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "delete.*user\|remove.*data" > /dev/null; then
            echo "‚úÖ Data deletion capabilities detected"
            SCORE=$((SCORE + 25))
          else
            echo "‚ùå No data deletion capabilities found"
          fi
          
          # Check for consent management (Art. 7)
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "consent\|opt.*in\|cookie.*banner" > /dev/null; then
            echo "‚úÖ Consent management detected"
            SCORE=$((SCORE + 25))
          else
            echo "‚ùå No consent management found"
          fi
          
          # Check for privacy notices (Art. 13-14)
          if find . -name "*.md" -o -name "*.txt" -o -name "*.html" | xargs grep -l "privacy.*policy\|privacy.*notice" > /dev/null; then
            echo "‚úÖ Privacy notices detected"
            SCORE=$((SCORE + 15))
          else
            echo "‚ùå No privacy notices found"
          fi
          
          # Check for data subject access (Art. 15)
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "profile\|account.*settings\|personal.*data" > /dev/null; then
            echo "‚úÖ Data subject access features detected"
            SCORE=$((SCORE + 15))
          else
            echo "‚ùå No data subject access features found"
          fi
          
          echo "Privacy Rights Score: $SCORE/$MAX_SCORE"
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          
          if [ $SCORE -lt ${{ env.PRIVACY_SCORE_THRESHOLD }} ]; then
            echo "‚ùå Privacy rights score ($SCORE) below threshold (${{ env.PRIVACY_SCORE_THRESHOLD }})"
            exit 1
          fi

  # Job 4: Access Control Compliance
  access-control-compliance:
    name: üö™ Access Control Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: compliance-framework-analysis
    
    outputs:
      access-control-score: ${{ steps.access-control-assessment.outputs.score }}
      
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: üö™ Access Control Assessment
        id: access-control-assessment
        run: |
          echo "Assessing Access Control implementation..."
          
          SCORE=0
          MAX_SCORE=100
          
          # Check for role-based access control
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "role\|permission\|rbac" > /dev/null; then
            echo "‚úÖ Role-based access control detected"
            SCORE=$((SCORE + 25))
          else
            echo "‚ùå No RBAC implementation found"
          fi
          
          # Check for principle of least privilege
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "permission.*check\|authorize" > /dev/null; then
            echo "‚úÖ Permission checking detected"
            SCORE=$((SCORE + 20))
          else
            echo "‚ùå No permission checking found"
          fi
          
          # Check for multi-factor authentication
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "mfa\|2fa\|multi.*factor\|totp" > /dev/null; then
            echo "‚úÖ Multi-factor authentication detected"
            SCORE=$((SCORE + 20))
          else
            echo "‚ùå No MFA implementation found"
          fi
          
          # Check for session management
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "session.*timeout\|token.*expiry" > /dev/null; then
            echo "‚úÖ Session management detected"
            SCORE=$((SCORE + 15))
          else
            echo "‚ùå No proper session management found"
          fi
          
          # Check for administrative controls
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "admin\|superuser" > /dev/null; then
            echo "‚úÖ Administrative controls detected"
            SCORE=$((SCORE + 10))
          else
            echo "‚ùå No administrative controls found"
          fi
          
          # Check for audit trails
          if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "audit\|access.*log" > /dev/null; then
            echo "‚úÖ Access audit trails detected"
            SCORE=$((SCORE + 10))
          else
            echo "‚ùå No access audit trails found"
          fi
          
          echo "Access Control Score: $SCORE/$MAX_SCORE"
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          
          if [ $SCORE -lt ${{ env.ACCESS_CONTROL_THRESHOLD }} ]; then
            echo "‚ùå Access control score ($SCORE) below threshold (${{ env.ACCESS_CONTROL_THRESHOLD }})"
            exit 1
          fi

  # Job 5: Code Compliance Scanning
  code-compliance-scan:
    name: üîç Code Compliance Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: compliance-framework-analysis
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üü¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: üì¶ Install dependencies
        run: npm ci --legacy-peer-deps
      
      - name: üîç PII/Sensitive Data Detection
        run: |
          echo "Scanning for PII and sensitive data patterns..."
          
          # Define sensitive data patterns
          declare -A PATTERNS=(
            ["ssn"]="[0-9]{3}-[0-9]{2}-[0-9]{4}|[0-9]{9}"
            ["email"]="[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
            ["credit_card"]="[0-9]{4}[[:space:]-]?[0-9]{4}[[:space:]-]?[0-9]{4}[[:space:]-]?[0-9]{4}"
            ["api_key"]="[Aa]pi[_-]?[Kk]ey|[Aa]ccess[_-]?[Tt]oken"
            ["password"]="[Pp]assword[[:space:]]*=[[:space:]]*['\"][^'\"]+['\"]"
          )
          
          VIOLATIONS_FOUND=false
          
          for pattern_name in "${!PATTERNS[@]}"; do
            pattern="${PATTERNS[$pattern_name]}"
            echo "Checking for $pattern_name patterns..."
            
            if grep -r -E "$pattern" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . > /dev/null 2>&1; then
              echo "‚ö†Ô∏è Potential $pattern_name found in code"
              grep -r -E "$pattern" --include="*.js" --include="*.jsx" --include="*.ts" --include="*.tsx" . | head -5
              VIOLATIONS_FOUND=true
            else
              echo "‚úÖ No $pattern_name patterns found"
            fi
          done
          
          if [ "$VIOLATIONS_FOUND" = true ]; then
            echo "‚ùå Sensitive data patterns found in code - review required"
            exit 1
          fi
      
      - name: üîí Security Headers Check
        run: |
          echo "Checking for security headers implementation..."
          
          HEADERS_FOUND=0
          REQUIRED_HEADERS=(
            "X-Frame-Options"
            "X-Content-Type-Options"
            "X-XSS-Protection"
            "Content-Security-Policy"
            "Strict-Transport-Security"
          )
          
          for header in "${REQUIRED_HEADERS[@]}"; do
            if find . -name "*.js" -o -name "*.jsx" | xargs grep -l "$header" > /dev/null; then
              echo "‚úÖ $header implementation found"
              HEADERS_FOUND=$((HEADERS_FOUND + 1))
            else
              echo "‚ùå $header implementation not found"
            fi
          done
          
          HEADER_SCORE=$((HEADERS_FOUND * 100 / ${#REQUIRED_HEADERS[@]}))
          echo "Security Headers Score: $HEADER_SCORE% ($HEADERS_FOUND/${#REQUIRED_HEADERS[@]})"
          
          if [ $HEADER_SCORE -lt 80 ]; then
            echo "‚ùå Security headers score ($HEADER_SCORE%) below 80% threshold"
            exit 1
          fi
      
      - name: üìù Compliance Documentation Check
        run: |
          echo "Checking for compliance documentation..."
          
          DOCS_FOUND=0
          REQUIRED_DOCS=(
            "privacy.*policy"
            "terms.*service"
            "data.*processing"
            "security.*policy"
            "incident.*response"
          )
          
          for doc_pattern in "${REQUIRED_DOCS[@]}"; do
            if find . -name "*.md" -o -name "*.txt" | xargs grep -l -i "$doc_pattern" > /dev/null; then
              echo "‚úÖ $doc_pattern documentation found"
              DOCS_FOUND=$((DOCS_FOUND + 1))
            else
              echo "‚ùå $doc_pattern documentation not found"
            fi
          done
          
          DOCS_SCORE=$((DOCS_FOUND * 100 / ${#REQUIRED_DOCS[@]}))
          echo "Documentation Score: $DOCS_SCORE% ($DOCS_FOUND/${#REQUIRED_DOCS[@]})"

  # Job 6: Compliance Report Generation
  compliance-report:
    name: üìã Compliance Report Generation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [compliance-framework-analysis, soc2-compliance, gdpr-compliance, access-control-compliance, code-compliance-scan]
    if: always() && github.event.inputs.generate_report != 'false'
    
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4
      
      - name: üìä Generate comprehensive compliance report
        run: |
          cat << 'EOF' > compliance-report.md
          # üìã Compliance & Regulatory Audit Report
          
          **Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Branch**: ${{ github.ref_name }}
          **Commit**: ${{ github.sha }}
          **Audit Depth**: ${{ github.event.inputs.audit_depth || 'standard' }}
          **Data Classification**: ${{ needs.compliance-framework-analysis.outputs.data-classification }}
          **Certification Required**: ${{ needs.compliance-framework-analysis.outputs.requires-certification }}
          
          ## Executive Summary
          
          This report provides a comprehensive assessment of compliance with applicable regulatory frameworks and industry standards.
          
          ## Compliance Framework Analysis
          
          **Applicable Frameworks**: ${{ needs.compliance-framework-analysis.outputs.frameworks }}
          
          ## Compliance Scores
          
          | Framework | Component | Score | Status | Threshold |
          |-----------|-----------|-------|--------|-----------|
          | SOC2 | Security Controls | ${{ needs.soc2-compliance.outputs.security-score || 'N/A' }}/100 | ${{ needs.soc2-compliance.result || 'Skipped' }} | 90/100 |
          | SOC2 | Availability Controls | ${{ needs.soc2-compliance.outputs.availability-score || 'N/A' }}/100 | ${{ needs.soc2-compliance.result || 'Skipped' }} | 90/100 |
          | GDPR | Data Protection | ${{ needs.gdpr-compliance.outputs.data-protection-score || 'N/A' }}/100 | ${{ needs.gdpr-compliance.result || 'Skipped' }} | 98/100 |
          | GDPR | Privacy Rights | ${{ needs.gdpr-compliance.outputs.privacy-score || 'N/A' }}/100 | ${{ needs.gdpr-compliance.result || 'Skipped' }} | 95/100 |
          | General | Access Control | ${{ needs.access-control-compliance.outputs.access-control-score || 'N/A' }}/100 | ${{ needs.access-control-compliance.result || 'Skipped' }} | 95/100 |
          | General | Code Compliance | N/A | ${{ needs.code-compliance-scan.result || 'Skipped' }} | N/A |
          
          EOF
          
          # Add framework-specific sections based on results
          if [ "${{ needs.soc2-compliance.result }}" = "success" ]; then
            cat << 'EOF' >> compliance-report.md
          ## SOC2 Compliance Details
          
          ### Security Controls (Trust Service Criteria CC6.1)
          - **Score**: ${{ needs.soc2-compliance.outputs.security-score }}/100
          - **Status**: ‚úÖ Compliant
          - **Key Controls**: Authentication, Authorization, Encryption, Audit Logging
          
          ### Availability Controls (Trust Service Criteria CC7.2)
          - **Score**: ${{ needs.soc2-compliance.outputs.availability-score }}/100
          - **Status**: ‚úÖ Compliant
          - **Key Controls**: Health Monitoring, Error Handling, Performance Monitoring
          
          EOF
          fi
          
          if [ "${{ needs.gdpr-compliance.result }}" = "success" ]; then
            cat << 'EOF' >> compliance-report.md
          ## GDPR Compliance Details
          
          ### Data Protection Measures (Article 32)
          - **Score**: ${{ needs.gdpr-compliance.outputs.data-protection-score }}/100
          - **Status**: ‚úÖ Compliant
          - **Key Measures**: Encryption, Access Logging, Secure Transmission
          
          ### Privacy Rights Implementation (Articles 15-22)
          - **Score**: ${{ needs.gdpr-compliance.outputs.privacy-score }}/100
          - **Status**: ‚úÖ Compliant
          - **Key Rights**: Data Portability, Right to Erasure, Consent Management
          
          EOF
          fi
          
          cat << 'EOF' >> compliance-report.md
          
          ## Risk Assessment
          
          EOF
          
          # Risk assessment based on scores and requirements
          if [ "${{ needs.compliance-framework-analysis.outputs.data-classification }}" = "highly-sensitive" ]; then
            cat << 'EOF' >> compliance-report.md
          üî¥ **HIGH RISK**: Highly sensitive data detected
          - Enhanced security controls required
          - Regular compliance audits recommended
          - Immediate attention to any non-compliance issues
          
          EOF
          elif [ "${{ needs.compliance-framework-analysis.outputs.data-classification }}" = "sensitive" ]; then
            cat << 'EOF' >> compliance-report.md
          üü° **MEDIUM RISK**: Sensitive data detected
          - Standard security controls required
          - Regular monitoring and updates needed
          - Quarterly compliance reviews recommended
          
          EOF
          else
            cat << 'EOF' >> compliance-report.md
          üü¢ **LOW RISK**: Standard data classification
          - Basic security controls sufficient
          - Annual compliance reviews adequate
          
          EOF
          fi
          
          cat << 'EOF' >> compliance-report.md
          
          ## Recommendations
          
          ### Immediate Actions Required
          - [ ] Address any failed compliance checks
          - [ ] Review and update security policies
          - [ ] Implement missing security controls
          - [ ] Update privacy documentation
          
          ### Short-term Improvements (30 days)
          - [ ] Enhance monitoring and logging
          - [ ] Implement additional access controls
          - [ ] Conduct security awareness training
          - [ ] Review data retention policies
          
          ### Long-term Strategic Initiatives (90+ days)
          - [ ] Formal compliance certification process
          - [ ] Third-party security assessment
          - [ ] Automated compliance monitoring
          - [ ] Business continuity planning
          
          ## Compliance Checklist
          
          ### Technical Controls
          - [ ] Multi-factor authentication implemented
          - [ ] Data encryption at rest and in transit
          - [ ] Access logging and monitoring
          - [ ] Security headers implemented
          - [ ] Regular security updates
          
          ### Administrative Controls
          - [ ] Privacy policy published and current
          - [ ] Security policies documented
          - [ ] Incident response procedures defined
          - [ ] Employee training completed
          - [ ] Vendor management processes
          
          ### Physical Controls
          - [ ] Secure hosting environment
          - [ ] Access controls to infrastructure
          - [ ] Environmental monitoring
          - [ ] Backup and recovery procedures
          
          ## Certification Readiness
          
          EOF
          
          if [ "${{ needs.compliance-framework-analysis.outputs.requires-certification }}" = "true" ]; then
            cat << 'EOF' >> compliance-report.md
          **Status**: Ready for certification audit
          **Next Steps**: 
          1. Schedule formal audit with certified assessor
          2. Prepare documentation package
          3. Conduct internal readiness assessment
          4. Address any remaining gaps
          
          EOF
          else
            cat << 'EOF' >> compliance-report.md
          **Status**: Self-assessment complete
          **Next Steps**:
          1. Continue regular compliance monitoring
          2. Address identified improvement areas
          3. Consider formal certification when business requires it
          
          EOF
          fi
          
          cat << 'EOF' >> compliance-report.md
          
          ## Appendix
          
          ### Applicable Regulations
          - SOC2 Type II (Security, Availability)
          - GDPR (General Data Protection Regulation)
          - ISO 27001 (Information Security Management)
          - Industry-specific requirements
          
          ### Assessment Methodology
          - Automated code scanning
          - Configuration analysis
          - Documentation review
          - Control testing
          
          ### Limitations
          - This is an automated assessment
          - Manual verification may be required
          - External audit recommended for certification
          - Results valid as of assessment date
          
          ---
          
          *Generated by Sentia Manufacturing Compliance Pipeline*
          EOF
          
          echo "Compliance report generated"
          cat compliance-report.md
      
      - name: üìã Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-audit-report
          path: compliance-report.md
          retention-days: 365
      
      - name: üí¨ Comment compliance report on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('compliance-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## üìã Compliance Audit Results\n\n${report.substring(0, 50000)}${report.length > 50000 ? '\n\n*Report truncated - see full report in artifacts*' : ''}`
            });

  # Job 7: Compliance Notifications
  compliance-notifications:
    name: üì¢ Compliance Notifications
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [compliance-framework-analysis, soc2-compliance, gdpr-compliance, access-control-compliance, code-compliance-scan, compliance-report]
    if: always()
    
    steps:
      - name: üìä Evaluate compliance status
        id: compliance-status
        run: |
          FAILED_JOBS=()
          
          if [ "${{ needs.soc2-compliance.result }}" = "failure" ]; then
            FAILED_JOBS+=("SOC2")
          fi
          
          if [ "${{ needs.gdpr-compliance.result }}" = "failure" ]; then
            FAILED_JOBS+=("GDPR")
          fi
          
          if [ "${{ needs.access-control-compliance.result }}" = "failure" ]; then
            FAILED_JOBS+=("Access Control")
          fi
          
          if [ "${{ needs.code-compliance-scan.result }}" = "failure" ]; then
            FAILED_JOBS+=("Code Compliance")
          fi
          
          if [ ${#FAILED_JOBS[@]} -gt 0 ]; then
            STATUS="failed"
            MESSAGE="Compliance violations detected: ${FAILED_JOBS[*]}"
            COLOR="danger"
          else
            STATUS="passed"
            MESSAGE="All compliance checks passed"
            COLOR="good"
          fi
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          echo "message=$MESSAGE" >> $GITHUB_OUTPUT
          echo "color=$COLOR" >> $GITHUB_OUTPUT
      
      - name: üì± Slack compliance notification
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: custom
          custom_payload: |
            {
              "text": "${{ steps.compliance-status.outputs.message }}",
              "color": "${{ steps.compliance-status.outputs.color }}",
              "fields": [
                {
                  "title": "Repository",
                  "value": "${{ github.repository }}",
                  "short": true
                },
                {
                  "title": "Branch",
                  "value": "${{ github.ref_name }}",
                  "short": true
                },
                {
                  "title": "Data Classification",
                  "value": "${{ needs.compliance-framework-analysis.outputs.data-classification }}",
                  "short": true
                },
                {
                  "title": "Frameworks",
                  "value": "${{ needs.compliance-framework-analysis.outputs.frameworks }}",
                  "short": true
                },
                {
                  "title": "Certification Required",
                  "value": "${{ needs.compliance-framework-analysis.outputs.requires-certification }}",
                  "short": true
                },
                {
                  "title": "View Report",
                  "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|Click here>",
                  "short": false
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      
      - name: üìß Email notification for compliance failures
        if: steps.compliance-status.outputs.status == 'failed'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: üö® Compliance Violations Detected - ${{ github.repository }}
          body: |
            Compliance violations have been detected in the Sentia Manufacturing Dashboard.
            
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Failed Compliance Checks:
            ${{ steps.compliance-status.outputs.message }}
            
            Data Classification: ${{ needs.compliance-framework-analysis.outputs.data-classification }}
            Applicable Frameworks: ${{ needs.compliance-framework-analysis.outputs.frameworks }}
            
            Immediate action is required to address these compliance violations.
            
            View detailed report: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          to: ${{ secrets.COMPLIANCE_EMAIL }}
          from: ${{ secrets.EMAIL_USERNAME }}