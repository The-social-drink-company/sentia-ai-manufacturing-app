# CI/CD Testing Pipeline for Sentia Manufacturing Dashboard
# Automated testing on push and pull requests with comprehensive test coverage

name: CI/CD Testing Pipeline

on:
  push:
    branches: [ development, test, production ]
  pull_request:
    branches: [ development, test, production ]
  schedule:
    # Run nightly tests at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '18'
  POSTGRES_VERSION: '15'

jobs:
  # Lint and Code Quality Checks
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          pip install -r requirements.txt
          
      - name: Run Black formatter check
        run: black --check --diff .
        
      - name: Run isort import sorting check
        run: isort --check-only --diff .
        
      - name: Run flake8 linting
        run: flake8 app/ tests/ --max-line-length=88 --extend-ignore=E203,W503
        
      - name: Run mypy type checking
        run: mypy app/ --ignore-missing-imports
        
      - name: Run Bandit security linting
        run: bandit -r app/ -f json -o bandit-report.json
        
      - name: Run Safety dependency check
        run: safety check --json --output safety-report.json
        
      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: sentia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-xdist pytest-mock
          pip install -r requirements.txt
          
      - name: Set up environment variables
        run: |
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/sentia_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "TESTING=True" >> $GITHUB_ENV
          
      - name: Run database migrations
        run: |
          python -m flask db upgrade
          
      - name: Run unit tests with coverage
        run: |
          pytest tests/unit/ \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --junitxml=unit-test-results.xml \
            -v --tb=short
            
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results
          path: |
            unit-test-results.xml
            htmlcov/
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: sentia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-xdist pytest-mock
          pip install -r requirements.txt
          
      - name: Set up environment variables
        run: |
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/sentia_test" >> $GITHUB_ENV
          echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "TESTING=True" >> $GITHUB_ENV
          
      - name: Run database migrations
        run: |
          python -m flask db upgrade
          
      - name: Run integration tests
        run: |
          pytest tests/integration/ \
            --junitxml=integration-test-results.xml \
            -v --tb=short \
            --maxfail=5
            
      - name: Upload integration test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results
          path: integration-test-results.xml

  # API Tests
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: sentia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests pytest-mock
          pip install -r requirements.txt
          
      - name: Set up environment variables
        run: |
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/sentia_test" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          echo "TESTING=True" >> $GITHUB_ENV
          
      - name: Start Flask application
        run: |
          python -m flask db upgrade
          python run.py &
          sleep 10
          
      - name: Wait for application to be ready
        run: |
          timeout 30s bash -c 'until curl -f http://localhost:5000/health; do sleep 1; done'
          
      - name: Run API tests
        run: |
          pytest tests/unit/test_api_routes.py \
            --junitxml=api-test-results.xml \
            -v --tb=short
            
      - name: Upload API test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: api-test-results
          path: api-test-results.xml

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && contains(github.ref, 'refs/heads/')
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: sentia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install locust pytest-benchmark
          pip install -r requirements.txt
          
      - name: Set up environment variables
        run: |
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/sentia_test" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          
      - name: Start Flask application
        run: |
          python -m flask db upgrade
          python run.py &
          sleep 10
          
      - name: Run performance tests
        run: |
          pytest tests/performance/ \
            --benchmark-json=performance-results.json \
            --junitxml=performance-test-results.xml \
            -v --tb=short
            
      - name: Upload performance test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: |
            performance-test-results.xml
            performance-results.json

  # Security Tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install security testing tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety semgrep
          pip install -r requirements.txt
          
      - name: Run Bandit security analysis
        run: |
          bandit -r app/ -f json -o bandit-security-report.json
          
      - name: Run Safety vulnerability scan
        run: |
          safety check --json --output safety-vulnerability-report.json
          
      - name: Run Semgrep SAST scan
        run: |
          semgrep --config=auto --json --output=semgrep-report.json app/
          
      - name: Upload security test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-test-results
          path: |
            bandit-security-report.json
            safety-vulnerability-report.json
            semgrep-report.json

  # Database Tests
  database-tests:
    name: Database Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    
    strategy:
      matrix:
        postgres-version: [13, 14, 15]
        
    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: sentia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-postgresql
          pip install -r requirements.txt
          
      - name: Set up environment variables
        run: |
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/sentia_test" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          
      - name: Test database migrations
        run: |
          python -m flask db upgrade
          python -m flask db downgrade base
          python -m flask db upgrade
          
      - name: Run database-specific tests
        run: |
          pytest tests/integration/test_database_integration.py \
            --junitxml=database-test-results-pg${{ matrix.postgres-version }}.xml \
            -v --tb=short
            
      - name: Upload database test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: database-test-results-pg${{ matrix.postgres-version }}
          path: database-test-results-pg${{ matrix.postgres-version }}.xml

  # Browser Tests (E2E)
  browser-tests:
    name: Browser Tests (E2E)
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push'
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: sentia_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install selenium pytest-selenium
          pip install -r requirements.txt
          
      - name: Install Playwright
        run: |
          npm install playwright
          npx playwright install --with-deps
          
      - name: Set up environment variables
        run: |
          echo "FLASK_ENV=testing" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://testuser:testpass@localhost:5432/sentia_test" >> $GITHUB_ENV
          echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
          
      - name: Start Flask application
        run: |
          python -m flask db upgrade
          python run.py &
          sleep 15
          
      - name: Run browser tests
        run: |
          pytest tests/e2e/ \
            --junitxml=browser-test-results.xml \
            -v --tb=short \
            --browser=chromium
            
      - name: Upload browser test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: browser-test-results
          path: |
            browser-test-results.xml
            screenshots/

  # Test Summary and Reporting
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, security-tests, database-tests]
    if: always()
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all test artifacts
        uses: actions/download-artifact@v3
        
      - name: Create test summary
        run: |
          echo "# Test Results Summary" > test_summary.md
          echo "" >> test_summary.md
          echo "## Test Status" >> test_summary.md
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> test_summary.md
          echo "- Integration Tests: ${{ needs.integration-tests.result }}" >> test_summary.md
          echo "- API Tests: ${{ needs.api-tests.result }}" >> test_summary.md
          echo "- Security Tests: ${{ needs.security-tests.result }}" >> test_summary.md
          echo "- Database Tests: ${{ needs.database-tests.result }}" >> test_summary.md
          echo "" >> test_summary.md
          echo "Generated on: $(date)" >> test_summary.md
          
      - name: Upload test summary
        uses: actions/upload-artifact@v3
        with:
          name: test-summary
          path: test_summary.md

  # Deployment to Test Environment
  deploy-test:
    name: Deploy to Test Environment
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests]
    if: github.ref == 'refs/heads/test' && github.event_name == 'push'
    environment: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Railway (Test)
        run: |
          echo "Deploying to test environment..."
          # Railway deployment would be configured here
          
      - name: Run post-deployment tests
        run: |
          echo "Running post-deployment smoke tests..."
          # Add smoke tests for the deployed environment

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, api-tests, security-tests, performance-tests]
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Railway (Production)
        run: |
          echo "Deploying to production environment..."
          # Railway deployment would be configured here
          
      - name: Run production smoke tests
        run: |
          echo "Running production smoke tests..."
          # Add production smoke tests