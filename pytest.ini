[tool:pytest]
# Pytest configuration for Sentia Manufacturing Dashboard

# Test discovery
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add options that will be used by default
addopts = 
    -v
    --strict-markers
    --strict-config
    --tb=short
    --durations=10
    --cov=app
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=80
    --junitxml=test-results.xml

# Markers for test categorization
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    performance: Performance tests
    security: Security tests
    slow: Tests that take significant time to run
    auth: Authentication related tests
    api: API endpoint tests
    database: Database related tests
    external: Tests that require external services
    business: Business logic tests
    ui: User interface tests
    uat: User acceptance tests

# Test environment
env =
    FLASK_ENV = testing
    TESTING = True
    SECRET_KEY = test-secret-key-for-pytest
    DATABASE_URL = sqlite:///:memory:
    WTF_CSRF_ENABLED = False

# Warnings configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:flask_sqlalchemy.*
    ignore::sqlalchemy.exc.SADeprecationWarning

# Test collection customization
collect_ignore = [
    "setup.py",
    "temp-tests/",
    "migrations/",
    "instance/",
    "static/",
    "temp_uploads/"
]

# Coverage configuration
[coverage:run]
source = app
omit = 
    */tests/*
    */venv/*
    */migrations/*
    */instance/*
    app/__init__.py
    app/cli.py
branch = True

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod