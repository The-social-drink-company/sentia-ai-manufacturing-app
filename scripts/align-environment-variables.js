#!/usr/bin/env node

/**
 * Environment Variable Alignment Script
 * Ensures all Render deployments have the correct environment variables
 */

import fs from 'fs';
import path from 'path';
import yaml from 'js-yaml';
import { fileURLToPath } from 'url';

const _filename = fileURLToPath(import.meta.url);
const _dirname = path.dirname(__filename);

// Critical environment variables that must be aligned
const CRITICALENV_VARS = {
  // Clerk Authentication - Use Production Keys for ALL environments
  VITE_CLERK_PUBLISHABLE_KEY: 'pk_live_REDACTED',
  CLERK_SECRET_KEY: 'sk_live_REDACTED',
  NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: 'pk_live_REDACTED',
  CLERK_WEBHOOK_SECRET: 'whsec_REDACTED',
  CLERK_ENVIRONMENT: 'production',
  VITE_CLERK_DOMAIN: 'clerk.financeflo.ai',
  VITE_CLERK_SIGN_IN_URL: '/sign-in',
  VITE_CLERK_SIGN_UP_URL: '/sign-up',
  VITE_CLERK_AFTER_SIGN_IN_URL: '/dashboard',
  VITE_CLERK_AFTER_SIGN_UP_URL: '/dashboard',

  // Startup Configuration
  SKIP_ENTERPRISE_INIT: 'true',
  INIT_TIMEOUT_MS: '8000',

  // Required for server startup
  BYPASS_AUTH: 'false', // Ensure auth is enabled in production
};

// Additional environment-specific variables
const ENVSPECIFIC = {
  development: {
    NODE_ENV: 'development',
    CORS_ORIGINS: 'https://sentia-manufacturing-development.onrender.com',
    VITE_API_BASE_URL: 'https://sentia-manufacturing-development.onrender.com/api',
    ENABLE_AUTONOMOUS_TESTING: 'true',
    AUTO_FIX_ENABLED: 'true',
    AUTO_DEPLOY_ENABLED: 'false',
  },
  testing: {
    NODE_ENV: 'test',
    CORS_ORIGINS: 'https://sentia-manufacturing-testing.onrender.com',
    VITE_API_BASE_URL: 'https://sentia-manufacturing-testing.onrender.com/api',
    VITE_APP_TITLE: 'Sentia Manufacturing Dashboard (UAT)',
    ENABLE_AUTONOMOUS_TESTING: 'true',
    AUTO_FIX_ENABLED: 'false',
    AUTO_DEPLOY_ENABLED: 'false',
  },
  production: {
    NODE_ENV: 'production',
    CORS_ORIGINS: 'https://sentia-manufacturing-production.onrender.com',
    VITE_API_BASE_URL: 'https://sentia-manufacturing-production.onrender.com/api',
    VITE_APP_TITLE: 'Sentia Manufacturing Dashboard',
    ENABLE_AUTONOMOUS_TESTING: 'false',
    AUTO_FIX_ENABLED: 'false',
    AUTO_DEPLOY_ENABLED: 'false',
    LOG_LEVEL: 'error',
  }
};

// Load and update render.yaml
function updateRenderYaml() {
  const renderYamlPath = path.join(__dirname, '..', 'render.yaml');
  const yamlContent = fs.readFileSync(renderYamlPath, 'utf8');
  let renderConfig = yaml.load(yamlContent);

  // Update each service
  renderConfig.services.forEach(service => {
    if (service.name === 'sentia-manufacturing-development') {
      updateServiceEnvVars(service, 'development');
    } else if (service.name === 'sentia-manufacturing-testing') {
      updateServiceEnvVars(service, 'testing');
    } else if (service.name === 'sentia-manufacturing-production') {
      updateServiceEnvVars(service, 'production');
    }
  });

  // Write updated YAML
  const updatedYaml = yaml.dump(renderConfig, { indent: 2, lineWidth: -1 });
  fs.writeFileSync(renderYamlPath, updatedYaml);
  console.log('✅ render.yaml updated with aligned environment variables');
}

// Update service environment variables
function updateServiceEnvVars(service, environment) {
  console.log(`\nUpdating ${service.name} (${environment})...`);

  // Ensure envVars array exists
  if (!service.envVars) {
    service.envVars = [];
  }

  // Create a map of existing vars for easy lookup
  const existingVars = new Map();
  service.envVars.forEach(envVar => {
    if (envVar.key) {
      existingVars.set(envVar.key, envVar);
    }
  });

  // Update critical variables
  Object.entries(CRITICAL_ENV_VARS).forEach(_([key, _value]) => {
    if (existingVars.has(key)) {
      existingVars.get(key).value = value;
      console.log(`  ✅ Updated ${key}`);
    } else {
      service.envVars.push({ key, value });
      console.log(`  ➕ Added ${key}`);
    }
  });

  // Update environment-specific variables
  if (ENV_SPECIFIC[environment]) {
    Object.entries(ENV_SPECIFIC[environment]).forEach(_([key, _value]) => {
      if (existingVars.has(key)) {
        existingVars.get(key).value = value;
        console.log(`  ✅ Updated ${key} (env-specific)`);
      } else {
        service.envVars.push({ key, value });
        console.log(`  ➕ Added ${key} (env-specific)`);
      }
    });
  }
}

// Create environment files for local reference
function createEnvFiles() {
  const environments = ['development', 'testing', 'production'];

  environments.forEach(env => {
    const envFile = path.join(__dirname, '..', `.env.${env}`);
    let content = `# Environment: ${env.toUpperCase()}\n`;
    content += `# Generated by align-environment-variables.js\n\n`;

    // Add critical vars
    Object.entries(CRITICAL_ENV_VARS).forEach(_([key, _value]) => {
      content += `${key}=${value}\n`;
    });

    content += '\n# Environment-specific\n';

    // Add environment-specific vars
    if (ENV_SPECIFIC[env]) {
      Object.entries(ENV_SPECIFIC[env]).forEach(_([key, _value]) => {
        content += `${key}=${value}\n`;
      });
    }

    fs.writeFileSync(envFile, content);
    console.log(`\n✅ Created .env.${env} for reference`);
  });
}

// Main execution
function main() {
  console.log('='.repeat(70));
  console.log('ENVIRONMENT VARIABLE ALIGNMENT');
  console.log('='.repeat(70));

  try {
    updateRenderYaml();
    createEnvFiles();

    console.log('\n' + '='.repeat(70));
    console.log('✅ ALIGNMENT COMPLETE');
    console.log('='.repeat(70));
    console.log('\nNext steps:');
    console.log('1. Review the updated render.yaml');
    console.log('2. Commit and push changes to trigger deployments');
    console.log('3. Verify all three environments are working');

  } catch (error) {
    console.error('\n❌ Error aligning environment variables:', error);
    process.exit(1);
  }
}

// Run main function
main();


