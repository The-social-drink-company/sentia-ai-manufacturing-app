name: Documentation CI/CD

on:
  push:
    branches:
      - development
      - main
    paths:
      - 'docs/**'
      - '.github/workflows/docs.yml'
  pull_request:
    paths:
      - 'docs/**'
  schedule:
    # Nightly API docs generation
    - cron: '0 2 * * *'
  workflow_dispatch:

env:
  NODE_VERSION: '20'

jobs:
  build:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # For git history

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: docs/package-lock.json

      - name: Install dependencies
        working-directory: ./docs
        run: npm ci

      - name: Build documentation
        working-directory: ./docs
        run: npm run build
        env:
          DOCS_BASE_URL: /

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docs-build
          path: docs/.next/
          retention-days: 7

  lint:
    name: Lint & Validate
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Vale
        run: |
          wget https://github.com/errata-ai/vale/releases/download/v2.29.0/vale_2.29.0_Linux_64-bit.tar.gz
          tar -xzf vale_2.29.0_Linux_64-bit.tar.gz
          sudo mv vale /usr/local/bin/

      - name: Create Vale config
        run: |
          cat > .vale.ini << EOF
          StylesPath = .vale/styles
          MinAlertLevel = warning
          
          [*.{md,mdx}]
          BasedOnStyles = Microsoft, write-good
          
          # Ignore code blocks
          BlockIgnores = (?s) *(\`\`\`.*?\`\`\`), \
                        (?s) *(\`.*?\`)
          EOF

      - name: Run Vale
        working-directory: ./docs
        run: vale --no-exit .
        continue-on-error: true

      - name: Check Markdown formatting
        run: |
          npm install -g markdownlint-cli
          markdownlint 'docs/**/*.md' --ignore node_modules --ignore .next

  linkcheck:
    name: Check Links
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install markdown-link-check
        run: npm install -g markdown-link-check

      - name: Create link check config
        run: |
          cat > .markdown-link-check.json << EOF
          {
            "ignorePatterns": [
              { "pattern": "^http://localhost" },
              { "pattern": "^https://localhost" }
            ],
            "replacementPatterns": [
              {
                "pattern": "^/",
                "replacement": "https://docs.sentia.com/"
              }
            ],
            "timeout": "20s",
            "retryOn429": true,
            "retryCount": 5,
            "aliveStatusCodes": [200, 206, 301, 302, 303, 307, 308]
          }
          EOF

      - name: Check links
        run: |
          find docs -name "*.md" -o -name "*.mdx" | \
          xargs -I {} markdown-link-check {} --config .markdown-link-check.json

      - name: Report broken links
        if: failure()
        run: echo "::error::Broken links found in documentation"

  search-index:
    name: Build Search Index
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./docs
        run: npm ci

      - name: Generate search index
        working-directory: ./docs
        run: |
          mkdir -p .search
          npm run search:index || node scripts/generate-search-index.js

      - name: Upload search index
        uses: actions/upload-artifact@v4
        with:
          name: search-index
          path: docs/.search/index.json

  api-docs:
    name: Generate API Documentation
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          cd docs && npm ci

      - name: Generate API docs
        working-directory: ./docs
        run: node scripts/generate-api-docs.js

      - name: Check for changes
        id: changes
        run: |
          git diff --quiet docs/developer/api-reference.mdx || echo "changed=true" >> $GITHUB_OUTPUT

      - name: Commit API docs
        if: steps.changes.outputs.changed == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/developer/api-reference.mdx docs/public/api/openapi.json
          git commit -m "chore: update API documentation [skip ci]"

      - name: Push changes
        if: steps.changes.outputs.changed == 'true'
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}

  governance:
    name: Documentation Governance
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v40
        with:
          files: |
            docs/**/*.md
            docs/**/*.mdx

      - name: Check frontmatter
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "Checking $file"
            
            # Check for required frontmatter fields
            if ! grep -q "^owner:" "$file"; then
              echo "::error file=$file::Missing 'owner' in frontmatter"
              exit 1
            fi
            
            if ! grep -q "^lastReviewed:" "$file"; then
              echo "::error file=$file::Missing 'lastReviewed' in frontmatter"
              exit 1
            fi
            
            if ! grep -q "^role:" "$file"; then
              echo "::warning file=$file::Missing 'role' in frontmatter"
            fi
            
            if ! grep -q "^stage:" "$file"; then
              echo "::warning file=$file::Missing 'stage' in frontmatter"
            fi
            
            # Check if lastReviewed is recent
            last_reviewed=$(grep "^lastReviewed:" "$file" | cut -d' ' -f2)
            days_ago=$(( ($(date +%s) - $(date -d "$last_reviewed" +%s)) / 86400 ))
            
            if [ $days_ago -gt 90 ]; then
              echo "::warning file=$file::Documentation last reviewed $days_ago days ago (>90 days)"
            fi
          done

      - name: Validate owners
        if: steps.changed-files.outputs.any_changed == 'true'
        run: |
          # Define valid owners
          valid_owners="engineering finance operations admin support"
          
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            owner=$(grep "^owner:" "$file" | cut -d' ' -f2)
            
            if ! echo "$valid_owners" | grep -q "$owner"; then
              echo "::warning file=$file::Unknown owner '$owner'"
            fi
          done

  deploy:
    name: Deploy Documentation
    runs-on: ubuntu-latest
    needs: [build, lint, linkcheck]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: docs-build
          path: docs/.next/

      - name: Download search index
        uses: actions/download-artifact@v4
        with:
          name: search-index
          path: docs/.search/

      - name: Deploy to hosting
        run: |
          echo "Deploying documentation to production"
          # Add actual deployment commands here
          # e.g., rsync, AWS S3 sync, Netlify, Vercel, etc.

      - name: Invalidate CDN cache
        run: |
          echo "Invalidating CDN cache"
          # Add CDN invalidation commands if applicable

      - name: Notify deployment
        run: |
          echo "Documentation deployed successfully"
          # Add notification (Slack, Discord, etc.)

  release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get previous tag
        id: prev-tag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^)
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT

      - name: Generate release notes
        run: |
          cat > docs/release-notes/$(date +%Y-%m-%d).md << EOF
          ---
          title: Release $(echo ${{ github.ref }} | sed 's/refs\/tags\///')
          date: $(date +%Y-%m-%d)
          version: $(echo ${{ github.ref }} | sed 's/refs\/tags\///')
          ---
          
          # Release Notes - $(echo ${{ github.ref }} | sed 's/refs\/tags\///')
          
          ## What's New
          
          EOF
          
          # Add commits since last tag
          git log --pretty=format:"- %s" ${{ steps.prev-tag.outputs.prev_tag }}..${{ github.ref }} >> docs/release-notes/$(date +%Y-%m-%d).md

      - name: Commit release notes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/release-notes/
          git commit -m "docs: add release notes for ${{ github.ref }}"
          git push