# Docker Compose Production Environment
# Local production testing setup for Sentia MCP Server
# This mirrors the production environment configuration for local testing

version: '3.8'

networks:
  sentia-production:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  mcp_logs:
    driver: local
  mcp_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

services:
  # PostgreSQL Database with production configuration
  postgres:
    image: postgres:15-alpine
    container_name: sentia-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: sentia_manufacturing_prod
      POSTGRES_USER: sentia_prod
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_prod_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-prod.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - sentia-production
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sentia_prod -d sentia_manufacturing_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis Cache with production settings
  redis:
    image: redis:7-alpine
    container_name: sentia-redis-prod
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - sentia-production
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Sentia MCP Server (Production Configuration)
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
    container_name: sentia-mcp-server-prod
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Core configuration
      NODE_ENV: production
      MCP_SERVER_NAME: sentia-mcp-production-local
      MCP_SERVER_PORT: 3001
      MCP_SERVER_HOST: 0.0.0.0
      MCP_TRANSPORT: dual
      
      # Performance optimization
      NODE_OPTIONS: "--max-old-space-size=2048 --gc-concurrent --optimize-for-size"
      UV_THREADPOOL_SIZE: 16
      MALLOC_ARENA_MAX: 2
      
      # Database configuration
      DATABASE_URL: postgresql://sentia_prod:${POSTGRES_PASSWORD:-secure_prod_password}@postgres:5432/sentia_manufacturing_prod?sslmode=disable
      DATABASE_POOL_MAX: 20
      DATABASE_POOL_MIN: 5
      
      # Cache configuration
      REDIS_URL: redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379
      CACHE_TYPE: redis
      CACHE_TTL: 600000
      CACHE_MAX_SIZE: 10000
      ENABLE_CACHE_COMPRESSION: "true"
      
      # Security configuration
      JWT_SECRET: ${JWT_SECRET:-production-jwt-secret-change-this}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY:-32-byte-encryption-key-change-this}
      AUTH_REQUIRED: "true"
      SECURITY_HEADERS_ENABLED: "true"
      RATE_LIMITING_ENABLED: "true"
      INPUT_VALIDATION_STRICT: "true"
      AUDIT_LOGGING_ENABLED: "true"
      
      # Monitoring and observability
      LOG_LEVEL: warn
      MONITORING_ENABLED: "true"
      METRICS_ENDPOINT_ENABLED: "true"
      PERFORMANCE_MONITORING_ENABLED: "true"
      BUSINESS_ANALYTICS_ENABLED: "true"
      PROMETHEUS_METRICS_ENABLED: "true"
      
      # Rate limiting
      RATE_LIMIT_MAX: 100
      RATE_LIMIT_WINDOW_MS: 900000
      
      # CORS configuration
      CORS_ORIGINS: "https://sentia-manufacturing-production.onrender.com,http://localhost:3000"
      
      # External service configurations (use test/sandbox endpoints)
      XERO_CLIENT_ID: ${XERO_CLIENT_ID:-test-client-id}
      XERO_CLIENT_SECRET: ${XERO_CLIENT_SECRET:-test-client-secret}
      SHOPIFY_UK_ACCESS_TOKEN: ${SHOPIFY_UK_ACCESS_TOKEN:-test-token}
      SHOPIFY_USA_ACCESS_TOKEN: ${SHOPIFY_USA_ACCESS_TOKEN:-test-token}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY:-test-key}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-test-key}
      
    volumes:
      - mcp_logs:/app/logs
      - mcp_cache:/app/cache
      - ./config:/app/config/runtime:ro
    ports:
      - "3001:3001"
      - "3002:3002"
      - "3101:3101"
    networks:
      - sentia-production
    healthcheck:
      test: ["CMD", "node", "scripts/health-check-advanced.js"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sentia-prometheus-prod
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus-config.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=20GB'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - sentia-production
    depends_on:
      - mcp-server
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: sentia-grafana-prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - sentia-production
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Nginx reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: sentia-nginx-prod
    restart: unless-stopped
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - sentia-production
    depends_on:
      - mcp-server
      - grafana
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # Log aggregation with Loki
  loki:
    image: grafana/loki:latest
    container_name: sentia-loki-prod
    restart: unless-stopped
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/loki.yml:ro
    command: -config.file=/etc/loki/loki.yml
    ports:
      - "3100:3100"
    networks:
      - sentia-production
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Promtail for log shipping
  promtail:
    image: grafana/promtail:latest
    container_name: sentia-promtail-prod
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail-config.yml:/etc/promtail/promtail.yml:ro
      - mcp_logs:/var/log/mcp:ro
      - /var/log:/var/log/host:ro
    command: -config.file=/etc/promtail/promtail.yml
    networks:
      - sentia-production
    depends_on:
      - loki
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.1'

  # Security scanning with Trivy
  trivy-scanner:
    image: aquasec/trivy:latest
    container_name: sentia-security-scanner
    restart: "no"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./security/scan-results:/reports
    command: >
      sh -c "
        trivy image --format json --output /reports/mcp-server-scan.json sentia-mcp-server-prod || true;
        trivy fs --format json --output /reports/filesystem-scan.json /app || true;
        echo 'Security scan completed';
      "
    networks:
      - sentia-production
    depends_on:
      - mcp-server
    profiles:
      - security-scan

# Health check service
  healthcheck:
    image: curlimages/curl:latest
    container_name: sentia-healthcheck
    restart: "no"
    networks:
      - sentia-production
    depends_on:
      - mcp-server
    command: >
      sh -c "
        echo 'Starting comprehensive health checks...';
        sleep 30;
        
        echo 'Testing MCP Server health...';
        curl -f http://mcp-server:3001/health || exit 1;
        
        echo 'Testing API endpoints...';
        curl -f http://mcp-server:3001/api/metrics || exit 1;
        
        echo 'Testing database connectivity...';
        curl -f http://mcp-server:3001/api/metrics/system/status || exit 1;
        
        echo 'All health checks passed!';
      "
    profiles:
      - health-check