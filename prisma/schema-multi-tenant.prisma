// CapLiquify Multi-Tenant Database Schema
// Schema-per-tenant isolation model
// Generated: October 19, 2025
// Database: PostgreSQL on Render
// ORM: Prisma
// Authentication: Clerk Organizations

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "tenant_schemas"] // Note: tenant_schemas is placeholder for dynamic schemas
}

// ============================================================================
// PUBLIC SCHEMA - Shared Metadata
// ============================================================================

// ----------------------------------------------------------------------------
// Tenant Model - Master tenant registry
// ----------------------------------------------------------------------------
model Tenant {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug                 String   @unique @db.VarChar(50)
  name                 String   @db.VarChar(255)
  schemaName           String   @unique @map("schema_name") @db.VarChar(63)
  clerkOrganizationId  String   @unique @map("clerk_organization_id") @db.VarChar(255)

  // Subscription details
  subscriptionTier     SubscriptionTier @map("subscription_tier")
  subscriptionStatus   SubscriptionStatus @map("subscription_status")
  trialEndsAt          DateTime? @map("trial_ends_at")
  subscriptionStartsAt DateTime? @map("subscription_starts_at")
  subscriptionEndsAt   DateTime? @map("subscription_ends_at")

  // Tier-based limits
  maxUsers             Int? @map("max_users")
  maxEntities          Int? @map("max_entities")
  features             Json? // Feature flags: {"ai_forecasting": true, "what_if": true, ...}

  // Metadata
  createdAt            DateTime @default(now()) @map("created_at")
  updatedAt            DateTime @updatedAt @map("updated_at")
  deletedAt            DateTime? @map("deleted_at") // Soft delete

  // Relationships
  users                User[]
  subscription         Subscription?
  auditLogs            AuditLog[]

  @@index([clerkOrganizationId], name: "idx_tenants_clerk_org")
  @@index([slug], name: "idx_tenants_slug")
  @@index([subscriptionStatus], name: "idx_tenants_status")
  @@map("tenants")
  @@schema("public")
}

// ----------------------------------------------------------------------------
// User Model - User registry with tenant association
// ----------------------------------------------------------------------------
model User {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  clerkUserId   String   @unique @map("clerk_user_id") @db.VarChar(255)
  email         String   @db.VarChar(255)
  fullName      String?  @map("full_name") @db.VarChar(255)

  // Tenant association
  tenantId      String   @map("tenant_id") @db.Uuid
  tenant        Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  role          UserRole

  // Metadata
  lastLoginAt   DateTime? @map("last_login_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  // Relationships
  auditLogs     AuditLog[]

  @@index([clerkUserId], name: "idx_users_clerk_id")
  @@index([tenantId], name: "idx_users_tenant")
  @@index([email], name: "idx_users_email")
  @@map("users")
  @@schema("public")
}

// ----------------------------------------------------------------------------
// Subscription Model - Stripe subscription tracking
// ----------------------------------------------------------------------------
model Subscription {
  id                    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId              String   @unique @map("tenant_id") @db.Uuid
  tenant                Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Stripe integration
  stripeCustomerId      String?  @unique @map("stripe_customer_id") @db.VarChar(255)
  stripeSubscriptionId  String?  @unique @map("stripe_subscription_id") @db.VarChar(255)
  stripePriceId         String?  @map("stripe_price_id") @db.VarChar(255)

  // Billing
  billingCycle          BillingCycle @map("billing_cycle")
  amountCents           Int      @map("amount_cents")
  currency              String   @default("USD") @db.VarChar(3)

  // Status
  status                SubscriptionStatus
  currentPeriodStart    DateTime? @map("current_period_start")
  currentPeriodEnd      DateTime? @map("current_period_end")
  cancelAtPeriodEnd     Boolean  @default(false) @map("cancel_at_period_end")
  cancelledAt           DateTime? @map("cancelled_at")

  // Metadata
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  @@index([tenantId], name: "idx_subscriptions_tenant")
  @@index([stripeCustomerId], name: "idx_subscriptions_stripe_customer")
  @@map("subscriptions")
  @@schema("public")
}

// ----------------------------------------------------------------------------
// AuditLog Model - System-wide audit trail
// ----------------------------------------------------------------------------
model AuditLog {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenantId     String?  @map("tenant_id") @db.Uuid
  tenant       Tenant?  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  userId       String?  @map("user_id") @db.Uuid
  user         User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Event details
  action       String   @db.VarChar(100) // 'user.created', 'forecast.generated', 'api.connected'
  resourceType String?  @map("resource_type") @db.VarChar(50) // 'user', 'forecast', 'api_credential'
  resourceId   String?  @map("resource_id") @db.VarChar(255)

  // Context
  ipAddress    String?  @map("ip_address") @db.Inet
  userAgent    String?  @map("user_agent") @db.Text
  metadata     Json?    // Additional context

  createdAt    DateTime @default(now()) @map("created_at")

  @@index([tenantId], name: "idx_audit_logs_tenant")
  @@index([action], name: "idx_audit_logs_action")
  @@index([createdAt], name: "idx_audit_logs_created")
  @@map("audit_logs")
  @@schema("public")
}

// ============================================================================
// ENUMS - Shared across all schemas
// ============================================================================

enum SubscriptionTier {
  starter
  professional
  enterprise

  @@map("subscription_tier")
  @@schema("public")
}

enum SubscriptionStatus {
  trial
  active
  past_due
  cancelled
  suspended

  @@map("subscription_status")
  @@schema("public")
}

enum UserRole {
  owner
  admin
  member
  viewer

  @@map("user_role")
  @@schema("public")
}

enum BillingCycle {
  monthly
  annual

  @@map("billing_cycle")
  @@schema("public")
}

enum ForecastType {
  demand
  revenue
  cash_flow

  @@map("forecast_type")
  @@schema("public")
}

enum ModelType {
  arima
  lstm
  prophet
  random_forest
  ensemble

  @@map("model_type")
  @@schema("public")
}

enum PeriodType {
  daily
  weekly
  monthly

  @@map("period_type")
  @@schema("public")
}

enum SyncStatus {
  success
  failed
  partial

  @@map("sync_status")
  @@schema("public")
}

enum SyncFrequency {
  hourly
  daily
  manual

  @@map("sync_frequency")
  @@schema("public")
}

enum Channel {
  shopify
  amazon
  direct
  other

  @@map("channel")
  @@schema("public")
}

enum ScenarioType {
  pricing
  inventory
  growth
  custom

  @@map("scenario_type")
  @@schema("public")
}

// ============================================================================
// TENANT SCHEMA MODELS - Replicated per tenant
// ============================================================================
// NOTE: These models are templates. Each tenant gets their own schema
// with these tables. Schema name format: tenant_<uuid>
//
// The following models are NOT directly instantiated by Prisma but serve
// as documentation and can be used to generate SQL for tenant schemas.
// ============================================================================

// TENANT SCHEMA TABLE DEFINITIONS (SQL)
// These are created via SQL functions, not Prisma migrations
// See: prisma/migrations/create_tenant_schema_function.sql

/*

-- Companies table (per tenant)
CREATE TABLE tenant_{uuid}.companies (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name VARCHAR(255) NOT NULL,
  legal_name VARCHAR(255),
  tax_id VARCHAR(50),
  currency VARCHAR(3) DEFAULT 'USD',
  fiscal_year_end VARCHAR(5), -- 'MM-DD'
  settings JSONB,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

-- Products table (per tenant)
CREATE TABLE tenant_{uuid}.products (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID REFERENCES tenant_{uuid}.companies(id),
  sku VARCHAR(100) UNIQUE NOT NULL,
  name VARCHAR(255) NOT NULL,
  description TEXT,
  category VARCHAR(100),
  unit_cost DECIMAL(15, 2),
  unit_price DECIMAL(15, 2),
  currency VARCHAR(3) DEFAULT 'USD',
  reorder_point INTEGER,
  reorder_quantity INTEGER,
  lead_time_days INTEGER,
  is_active BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_products_company ON tenant_{uuid}.products(company_id);
CREATE INDEX idx_products_sku ON tenant_{uuid}.products(sku);

-- Sales table (per tenant)
CREATE TABLE tenant_{uuid}.sales (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID REFERENCES tenant_{uuid}.companies(id),
  product_id UUID REFERENCES tenant_{uuid}.products(id),
  sale_date DATE NOT NULL,
  quantity INTEGER NOT NULL,
  unit_price DECIMAL(15, 2) NOT NULL,
  total_amount DECIMAL(15, 2) NOT NULL,
  currency VARCHAR(3) DEFAULT 'USD',
  channel VARCHAR(50),
  external_id VARCHAR(255),
  customer_name VARCHAR(255),
  customer_id VARCHAR(255),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_sales_company ON tenant_{uuid}.sales(company_id);
CREATE INDEX idx_sales_product ON tenant_{uuid}.sales(product_id);
CREATE INDEX idx_sales_date ON tenant_{uuid}.sales(sale_date);

-- Inventory table (per tenant)
CREATE TABLE tenant_{uuid}.inventory (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID REFERENCES tenant_{uuid}.companies(id),
  product_id UUID REFERENCES tenant_{uuid}.products(id),
  warehouse_location VARCHAR(100),
  quantity_on_hand INTEGER NOT NULL,
  quantity_reserved INTEGER DEFAULT 0,
  quantity_available INTEGER GENERATED ALWAYS AS (quantity_on_hand - quantity_reserved) STORED,
  unit_cost DECIMAL(15, 2),
  total_value DECIMAL(15, 2) GENERATED ALWAYS AS (quantity_on_hand * unit_cost) STORED,
  last_counted_at TIMESTAMP,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_inventory_company ON tenant_{uuid}.inventory(company_id);
CREATE INDEX idx_inventory_product ON tenant_{uuid}.inventory(product_id);

-- Forecasts table (per tenant)
CREATE TABLE tenant_{uuid}.forecasts (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID REFERENCES tenant_{uuid}.companies(id),
  product_id UUID REFERENCES tenant_{uuid}.products(id),
  forecast_date DATE NOT NULL,
  forecast_type VARCHAR(50) NOT NULL,
  model_type VARCHAR(50),
  predicted_value DECIMAL(15, 2) NOT NULL,
  lower_bound DECIMAL(15, 2),
  upper_bound DECIMAL(15, 2),
  confidence_level DECIMAL(5, 2),
  actual_value DECIMAL(15, 2),
  accuracy_percentage DECIMAL(5, 2),
  model_parameters JSONB,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_forecasts_company ON tenant_{uuid}.forecasts(company_id);
CREATE INDEX idx_forecasts_product ON tenant_{uuid}.forecasts(product_id);
CREATE INDEX idx_forecasts_date ON tenant_{uuid}.forecasts(forecast_date);

-- Working Capital Metrics table (per tenant)
CREATE TABLE tenant_{uuid}.working_capital_metrics (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID REFERENCES tenant_{uuid}.companies(id),
  period_date DATE NOT NULL,
  period_type VARCHAR(20) NOT NULL,
  cash DECIMAL(15, 2),
  accounts_receivable DECIMAL(15, 2),
  inventory DECIMAL(15, 2),
  accounts_payable DECIMAL(15, 2),
  short_term_debt DECIMAL(15, 2),
  working_capital DECIMAL(15, 2),
  current_ratio DECIMAL(10, 4),
  quick_ratio DECIMAL(10, 4),
  days_sales_outstanding DECIMAL(10, 2),
  days_inventory_outstanding DECIMAL(10, 2),
  days_payables_outstanding DECIMAL(10, 2),
  cash_conversion_cycle DECIMAL(10, 2),
  operating_cash_flow DECIMAL(15, 2),
  cash_runway_days INTEGER,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_wc_metrics_company ON tenant_{uuid}.working_capital_metrics(company_id);
CREATE INDEX idx_wc_metrics_date ON tenant_{uuid}.working_capital_metrics(period_date);

-- Scenarios table (per tenant)
CREATE TABLE tenant_{uuid}.scenarios (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID REFERENCES tenant_{uuid}.companies(id),
  name VARCHAR(255) NOT NULL,
  description TEXT,
  scenario_type VARCHAR(50),
  parameters JSONB NOT NULL,
  results JSONB,
  is_baseline BOOLEAN DEFAULT FALSE,
  created_by_user_id VARCHAR(255),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE INDEX idx_scenarios_company ON tenant_{uuid}.scenarios(company_id);

-- API Credentials table (per tenant)
CREATE TABLE tenant_{uuid}.api_credentials (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  company_id UUID REFERENCES tenant_{uuid}.companies(id),
  service VARCHAR(50) NOT NULL,
  service_display_name VARCHAR(100),
  credentials JSONB NOT NULL,
  oauth_access_token TEXT,
  oauth_refresh_token TEXT,
  oauth_token_expires_at TIMESTAMP,
  is_active BOOLEAN DEFAULT TRUE,
  last_sync_at TIMESTAMP,
  last_sync_status VARCHAR(50),
  last_sync_error TEXT,
  sync_frequency VARCHAR(20),
  auto_sync_enabled BOOLEAN DEFAULT TRUE,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW(),
  CONSTRAINT unique_service_per_company UNIQUE(company_id, service)
);

CREATE INDEX idx_api_creds_company ON tenant_{uuid}.api_credentials(company_id);
CREATE INDEX idx_api_creds_service ON tenant_{uuid}.api_credentials(service);

-- User Preferences table (per tenant)
CREATE TABLE tenant_{uuid}.user_preferences (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id VARCHAR(255) UNIQUE NOT NULL,
  preferences JSONB,
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

*/
